/*! For license information please see app.js.LICENSE.txt */
(()=>{var t={66419:(t,e,r)=>{t.exports=r(27698)},41511:(t,e,r)=>{t.exports=r(83363)},54103:(t,e,r)=>{t.exports=r(28196)},77766:(t,e,r)=>{t.exports=r(8065)},69301:(t,e,r)=>{t.exports=r(73819)},3649:(t,e,r)=>{t.exports=r(82073)},93476:(t,e,r)=>{t.exports=r(27460)},65420:(t,e,r)=>{t.exports=r(92547)},21500:(t,e,r)=>{t.exports=r(34507)},98341:(t,e,r)=>{t.exports=r(46509)},53592:(t,e,r)=>{t.exports=r(27385)},78363:(t,e,r)=>{t.exports=r(81522)},19996:(t,e,r)=>{t.exports=r(32209)},16976:(t,e,r)=>{t.exports=r(1258)},95238:(t,e,r)=>{t.exports=r(81493)},44341:(t,e,r)=>{t.exports=r(73685)},51446:(t,e,r)=>{t.exports=r(86600)},23882:(t,e,r)=>{t.exports=r(9759)},63109:(t,e,r)=>{t.exports=r(35666)},95299:(t,e,r)=>{var n=r(27698);t.exports=n},83450:(t,e,r)=>{var n=r(83363);t.exports=n},66820:(t,e,r)=>{var n=r(56243);t.exports=n},84671:(t,e,r)=>{var n=r(63698);t.exports=n},84234:(t,e,r)=>{var n=r(82073);t.exports=n},43536:(t,e,r)=>{var n=r(41910);t.exports=n},80281:(t,e,r)=>{var n=r(92547);t.exports=n},40031:(t,e,r)=>{var n=r(46509);t.exports=n},54493:(t,e,r)=>{r(77971),r(53242);var n=r(54058);t.exports=n.Array.from},24034:(t,e,r)=>{r(92737);var n=r(54058);t.exports=n.Array.isArray},15367:(t,e,r)=>{r(85906);var n=r(35703);t.exports=n("Array").concat},95909:(t,e,r)=>{r(66274),r(55967);var n=r(35703);t.exports=n("Array").keys},24900:(t,e,r)=>{r(60186);var n=r(35703);t.exports=n("Array").slice},27700:(t,e,r)=>{r(73381);var n=r(35703);t.exports=n("Function").bind},13830:(t,e,r)=>{r(66274),r(77971);var n=r(22902);t.exports=n},45581:(t,e,r)=>{r(66274),r(77971);var n=r(53476);t.exports=n},16246:(t,e,r)=>{var n=r(7046),o=r(27700),a=Function.prototype;t.exports=function(t){var e=t.bind;return t===a||n(a,t)&&e===a.bind?o:e}},56043:(t,e,r)=>{var n=r(7046),o=r(15367),a=Array.prototype;t.exports=function(t){var e=t.concat;return t===a||n(a,t)&&e===a.concat?o:e}},69601:(t,e,r)=>{var n=r(7046),o=r(24900),a=Array.prototype;t.exports=function(t){var e=t.slice;return t===a||n(a,t)&&e===a.slice?o:e}},48171:(t,e,r)=>{r(86450);var n=r(54058).Object,o=t.exports=function(t,e,r){return n.defineProperty(t,e,r)};n.defineProperty.sham&&(o.sham=!0)},52956:(t,e,r)=>{r(47627),r(66274),r(55967),r(98881),r(4560),r(91302),r(44349),r(77971);var n=r(54058);t.exports=n.Promise},22727:(t,e,r)=>{r(35824);var n=r(54058);t.exports=n.Symbol.for},57473:(t,e,r)=>{r(85906),r(55967),r(35824),r(8555),r(52615),r(21732),r(35903),r(1825),r(28394),r(45915),r(61766),r(62737),r(89911),r(74315),r(63131),r(64714),r(70659),r(69120),r(79413),r(1502);var n=r(54058);t.exports=n.Symbol},24227:(t,e,r)=>{r(66274),r(55967),r(77971),r(1825);var n=r(11477);t.exports=n.f("iterator")},27385:(t,e,r)=>{var n=r(95299);t.exports=n},81522:(t,e,r)=>{var n=r(83450);t.exports=n},32209:(t,e,r)=>{var n=r(66820);t.exports=n},1258:(t,e,r)=>{var n=r(84671);t.exports=n},81493:(t,e,r)=>{var n=r(84234);t.exports=n},73685:(t,e,r)=>{var n=r(43536);t.exports=n},86600:(t,e,r)=>{var n=r(80281);r(28783),r(43975),r(65799),r(45414),r(46774),r(80620),r(36172),t.exports=n},9759:(t,e,r)=>{var n=r(40031);t.exports=n},24883:(t,e,r)=>{var n=r(21899),o=r(57475),a=r(15845),i=n.TypeError;t.exports=function(t){if(o(t))return t;throw i(a(t)+" is not a function")}},174:(t,e,r)=>{var n=r(21899),o=r(24284),a=r(15845),i=n.TypeError;t.exports=function(t){if(o(t))return t;throw i(a(t)+" is not a constructor")}},11851:(t,e,r)=>{var n=r(21899),o=r(57475),a=n.String,i=n.TypeError;t.exports=function(t){if("object"==typeof t||o(t))return t;throw i("Can't set "+a(t)+" as a prototype")}},18479:t=>{t.exports=function(){}},5743:(t,e,r)=>{var n=r(21899),o=r(7046),a=n.TypeError;t.exports=function(t,e){if(o(e,t))return t;throw a("Incorrect invocation")}},96059:(t,e,r)=>{var n=r(21899),o=r(10941),a=n.String,i=n.TypeError;t.exports=function(t){if(o(t))return t;throw i(a(t)+" is not an object")}},11354:(t,e,r)=>{"use strict";var n=r(21899),o=r(86843),a=r(78834),i=r(89678),u=r(75196),c=r(6782),s=r(24284),l=r(10623),f=r(55449),d=r(53476),p=r(22902),h=n.Array;t.exports=function(t){var e=i(t),r=s(this),n=arguments.length,v=n>1?arguments[1]:void 0,y=void 0!==v;y&&(v=o(v,n>2?arguments[2]:void 0));var g,m,b,w,x,O,S=p(e),A=0;if(!S||this==h&&c(S))for(g=l(e),m=r?new this(g):h(g);g>A;A++)O=y?v(e[A],A):e[A],f(m,A,O);else for(x=(w=d(e,S)).next,m=r?new this:[];!(b=a(x,w)).done;A++)O=y?u(w,v,[b.value,A],!0):b.value,f(m,A,O);return m.length=A,m}},31692:(t,e,r)=>{var n=r(74529),o=r(59413),a=r(10623),i=function(t){return function(e,r,i){var u,c=n(e),s=a(c),l=o(i,s);if(t&&r!=r){for(;s>l;)if((u=c[l++])!=u)return!0}else for(;s>l;l++)if((t||l in c)&&c[l]===r)return t||l||0;return!t&&-1}};t.exports={includes:i(!0),indexOf:i(!1)}},3610:(t,e,r)=>{var n=r(86843),o=r(95329),a=r(37026),i=r(89678),u=r(10623),c=r(64692),s=o([].push),l=function(t){var e=1==t,r=2==t,o=3==t,l=4==t,f=6==t,d=7==t,p=5==t||f;return function(h,v,y,g){for(var m,b,w=i(h),x=a(w),O=n(v,y),S=u(x),A=0,_=g||c,M=e?_(h,S):r||d?_(h,0):void 0;S>A;A++)if((p||A in x)&&(b=O(m=x[A],A,w),t))if(e)M[A]=b;else if(b)switch(t){case 3:return!0;case 5:return m;case 6:return A;case 2:s(M,m)}else switch(t){case 4:return!1;case 7:s(M,m)}return f?-1:o||l?l:M}};t.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6),filterReject:l(7)}},50568:(t,e,r)=>{var n=r(95981),o=r(99813),a=r(53385),i=o("species");t.exports=function(t){return a>=51||!n((function(){var e=[];return(e.constructor={})[i]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},15790:(t,e,r)=>{var n=r(21899),o=r(59413),a=r(10623),i=r(55449),u=n.Array,c=Math.max;t.exports=function(t,e,r){for(var n=a(t),s=o(e,n),l=o(void 0===r?n:r,n),f=u(c(l-s,0)),d=0;s<l;s++,d++)i(f,d,t[s]);return f.length=d,f}},93765:(t,e,r)=>{var n=r(95329);t.exports=n([].slice)},5693:(t,e,r)=>{var n=r(21899),o=r(1052),a=r(24284),i=r(10941),u=r(99813)("species"),c=n.Array;t.exports=function(t){var e;return o(t)&&(e=t.constructor,(a(e)&&(e===c||o(e.prototype))||i(e)&&null===(e=e[u]))&&(e=void 0)),void 0===e?c:e}},64692:(t,e,r)=>{var n=r(5693);t.exports=function(t,e){return new(n(t))(0===e?0:e)}},75196:(t,e,r)=>{var n=r(96059),o=r(7609);t.exports=function(t,e,r,a){try{return a?e(n(r)[0],r[1]):e(r)}catch(e){o(t,"throw",e)}}},21385:(t,e,r)=>{var n=r(99813)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},t(a)}catch(t){}return r}},82532:(t,e,r)=>{var n=r(95329),o=n({}.toString),a=n("".slice);t.exports=function(t){return a(o(t),8,-1)}},9697:(t,e,r)=>{var n=r(21899),o=r(22885),a=r(57475),i=r(82532),u=r(99813)("toStringTag"),c=n.Object,s="Arguments"==i(function(){return arguments}());t.exports=o?i:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=c(t),u))?r:s?i(e):"Object"==(n=i(e))&&a(e.callee)?"Arguments":n}},38694:(t,e,r)=>{var n=r(95329)("".replace),o=String(Error("zxcasd").stack),a=/\n\s*at [^:]*:[^\n]*/,i=a.test(o);t.exports=function(t,e){if(i&&"string"==typeof t)for(;e--;)t=n(t,a,"");return t}},23489:(t,e,r)=>{var n=r(90953),o=r(31136),a=r(49677),i=r(65988);t.exports=function(t,e,r){for(var u=o(e),c=i.f,s=a.f,l=0;l<u.length;l++){var f=u[l];n(t,f)||r&&n(r,f)||c(t,f,s(e,f))}}},64160:(t,e,r)=>{var n=r(95981);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},31046:(t,e,r)=>{"use strict";var n=r(35143).IteratorPrototype,o=r(29290),a=r(31887),i=r(90904),u=r(12077),c=function(){return this};t.exports=function(t,e,r,s){var l=e+" Iterator";return t.prototype=o(n,{next:a(+!s,r)}),i(t,l,!1,!0),u[l]=c,t}},32029:(t,e,r)=>{var n=r(55746),o=r(65988),a=r(31887);t.exports=n?function(t,e,r){return o.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},31887:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},55449:(t,e,r)=>{"use strict";var n=r(83894),o=r(65988),a=r(31887);t.exports=function(t,e,r){var i=n(e);i in t?o.f(t,i,a(0,r)):t[i]=r}},47771:(t,e,r)=>{"use strict";var n=r(76887),o=r(78834),a=r(82529),i=r(79417),u=r(57475),c=r(31046),s=r(249),l=r(88929),f=r(90904),d=r(32029),p=r(99754),h=r(99813),v=r(12077),y=r(35143),g=i.PROPER,m=i.CONFIGURABLE,b=y.IteratorPrototype,w=y.BUGGY_SAFARI_ITERATORS,x=h("iterator"),O="keys",S="values",A="entries",_=function(){return this};t.exports=function(t,e,r,i,h,y,M){c(r,e,i);var R,P,E,j=function(t){if(t===h&&I)return I;if(!w&&t in C)return C[t];switch(t){case O:case S:case A:return function(){return new r(this,t)}}return function(){return new r(this)}},T=e+" Iterator",k=!1,C=t.prototype,D=C[x]||C["@@iterator"]||h&&C[h],I=!w&&D||j(h),$="Array"==e&&C.entries||D;if($&&(R=s($.call(new t)))!==Object.prototype&&R.next&&(a||s(R)===b||(l?l(R,b):u(R[x])||p(R,x,_)),f(R,T,!0,!0),a&&(v[T]=_)),g&&h==S&&D&&D.name!==S&&(!a&&m?d(C,"name",S):(k=!0,I=function(){return o(D,this)})),h)if(P={values:j(S),keys:y?I:j(O),entries:j(A)},M)for(E in P)(w||k||!(E in C))&&p(C,E,P[E]);else n({target:e,proto:!0,forced:w||k},P);return a&&!M||C[x]===I||p(C,x,I,{name:h}),v[e]=I,P}},66349:(t,e,r)=>{var n=r(54058),o=r(90953),a=r(11477),i=r(65988).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});o(e,t)||i(e,t,{value:a.f(t)})}},55746:(t,e,r)=>{var n=r(95981);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},61333:(t,e,r)=>{var n=r(21899),o=r(10941),a=n.document,i=o(a)&&o(a.createElement);t.exports=function(t){return i?a.createElement(t):{}}},63281:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},23321:t=>{t.exports="object"==typeof window},4470:(t,e,r)=>{var n=r(2861),o=r(21899);t.exports=/ipad|iphone|ipod/i.test(n)&&void 0!==o.Pebble},22749:(t,e,r)=>{var n=r(2861);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},6049:(t,e,r)=>{var n=r(82532),o=r(21899);t.exports="process"==n(o.process)},58045:(t,e,r)=>{var n=r(2861);t.exports=/web0s(?!.*chrome)/i.test(n)},2861:(t,e,r)=>{var n=r(626);t.exports=n("navigator","userAgent")||""},53385:(t,e,r)=>{var n,o,a=r(21899),i=r(2861),u=a.process,c=a.Deno,s=u&&u.versions||c&&c.version,l=s&&s.v8;l&&(o=(n=l.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&i&&(!(n=i.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\/(\d+)/))&&(o=+n[1]),t.exports=o},35703:(t,e,r)=>{var n=r(54058);t.exports=function(t){return n[t+"Prototype"]}},56759:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},18780:(t,e,r)=>{var n=r(95981),o=r(31887);t.exports=!n((function(){var t=Error("a");return!("stack"in t)||(Object.defineProperty(t,"stack",o(1,7)),7!==t.stack)}))},76887:(t,e,r)=>{"use strict";var n=r(21899),o=r(79730),a=r(95329),i=r(57475),u=r(49677).f,c=r(37252),s=r(54058),l=r(86843),f=r(32029),d=r(90953),p=function(t){var e=function(r,n,a){if(this instanceof e){switch(arguments.length){case 0:return new t;case 1:return new t(r);case 2:return new t(r,n)}return new t(r,n,a)}return o(t,this,arguments)};return e.prototype=t.prototype,e};t.exports=function(t,e){var r,o,h,v,y,g,m,b,w=t.target,x=t.global,O=t.stat,S=t.proto,A=x?n:O?n[w]:(n[w]||{}).prototype,_=x?s:s[w]||f(s,w,{})[w],M=_.prototype;for(h in e)r=!c(x?h:w+(O?".":"#")+h,t.forced)&&A&&d(A,h),y=_[h],r&&(g=t.noTargetGet?(b=u(A,h))&&b.value:A[h]),v=r&&g?g:e[h],r&&typeof y==typeof v||(m=t.bind&&r?l(v,n):t.wrap&&r?p(v):S&&i(v)?a(v):v,(t.sham||v&&v.sham||y&&y.sham)&&f(m,"sham",!0),f(_,h,m),S&&(d(s,o=w+"Prototype")||f(s,o,{}),f(s[o],h,v),t.real&&M&&!M[h]&&f(M,h,v)))}},95981:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},79730:(t,e,r)=>{var n=r(18285),o=Function.prototype,a=o.apply,i=o.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?i.bind(a):function(){return i.apply(a,arguments)})},86843:(t,e,r)=>{var n=r(95329),o=r(24883),a=r(18285),i=n(n.bind);t.exports=function(t,e){return o(t),void 0===e?t:a?i(t,e):function(){return t.apply(e,arguments)}}},18285:(t,e,r)=>{var n=r(95981);t.exports=!n((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},98308:(t,e,r)=>{"use strict";var n=r(21899),o=r(95329),a=r(24883),i=r(10941),u=r(90953),c=r(93765),s=r(18285),l=n.Function,f=o([].concat),d=o([].join),p={},h=function(t,e,r){if(!u(p,e)){for(var n=[],o=0;o<e;o++)n[o]="a["+o+"]";p[e]=l("C,a","return new C("+d(n,",")+")")}return p[e](t,r)};t.exports=s?l.bind:function(t){var e=a(this),r=e.prototype,n=c(arguments,1),o=function(){var r=f(n,c(arguments));return this instanceof o?h(e,r.length,r):e.apply(t,r)};return i(r)&&(o.prototype=r),o}},78834:(t,e,r)=>{var n=r(18285),o=Function.prototype.call;t.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},79417:(t,e,r)=>{var n=r(55746),o=r(90953),a=Function.prototype,i=n&&Object.getOwnPropertyDescriptor,u=o(a,"name"),c=u&&"something"===function(){}.name,s=u&&(!n||n&&i(a,"name").configurable);t.exports={EXISTS:u,PROPER:c,CONFIGURABLE:s}},95329:(t,e,r)=>{var n=r(18285),o=Function.prototype,a=o.bind,i=o.call,u=n&&a.bind(i,i);t.exports=n?function(t){return t&&u(t)}:function(t){return t&&function(){return i.apply(t,arguments)}}},626:(t,e,r)=>{var n=r(54058),o=r(21899),a=r(57475),i=function(t){return a(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?i(n[t])||i(o[t]):n[t]&&n[t][e]||o[t]&&o[t][e]}},22902:(t,e,r)=>{var n=r(9697),o=r(14229),a=r(12077),i=r(99813)("iterator");t.exports=function(t){if(null!=t)return o(t,i)||o(t,"@@iterator")||a[n(t)]}},53476:(t,e,r)=>{var n=r(21899),o=r(78834),a=r(24883),i=r(96059),u=r(15845),c=r(22902),s=n.TypeError;t.exports=function(t,e){var r=arguments.length<2?c(t):e;if(a(r))return i(o(r,t));throw s(u(t)+" is not iterable")}},14229:(t,e,r)=>{var n=r(24883);t.exports=function(t,e){var r=t[e];return null==r?void 0:n(r)}},21899:(t,e,r)=>{var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},90953:(t,e,r)=>{var n=r(95329),o=r(89678),a=n({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return a(o(t),e)}},27748:t=>{t.exports={}},34845:(t,e,r)=>{var n=r(21899);t.exports=function(t,e){var r=n.console;r&&r.error&&(1==arguments.length?r.error(t):r.error(t,e))}},15463:(t,e,r)=>{var n=r(626);t.exports=n("document","documentElement")},2840:(t,e,r)=>{var n=r(55746),o=r(95981),a=r(61333);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},37026:(t,e,r)=>{var n=r(21899),o=r(95329),a=r(95981),i=r(82532),u=n.Object,c=o("".split);t.exports=a((function(){return!u("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?c(t,""):u(t)}:u},81302:(t,e,r)=>{var n=r(95329),o=r(57475),a=r(63030),i=n(Function.toString);o(a.inspectSource)||(a.inspectSource=function(t){return i(t)}),t.exports=a.inspectSource},53794:(t,e,r)=>{var n=r(10941),o=r(32029);t.exports=function(t,e){n(e)&&"cause"in e&&o(t,"cause",e.cause)}},45402:(t,e,r)=>{var n,o,a,i=r(38019),u=r(21899),c=r(95329),s=r(10941),l=r(32029),f=r(90953),d=r(63030),p=r(44262),h=r(27748),v="Object already initialized",y=u.TypeError,g=u.WeakMap;if(i||d.state){var m=d.state||(d.state=new g),b=c(m.get),w=c(m.has),x=c(m.set);n=function(t,e){if(w(m,t))throw new y(v);return e.facade=t,x(m,t,e),e},o=function(t){return b(m,t)||{}},a=function(t){return w(m,t)}}else{var O=p("state");h[O]=!0,n=function(t,e){if(f(t,O))throw new y(v);return e.facade=t,l(t,O,e),e},o=function(t){return f(t,O)?t[O]:{}},a=function(t){return f(t,O)}}t.exports={set:n,get:o,has:a,enforce:function(t){return a(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!s(e)||(r=o(e)).type!==t)throw y("Incompatible receiver, "+t+" required");return r}}}},6782:(t,e,r)=>{var n=r(99813),o=r(12077),a=n("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||i[a]===t)}},1052:(t,e,r)=>{var n=r(82532);t.exports=Array.isArray||function(t){return"Array"==n(t)}},57475:t=>{t.exports=function(t){return"function"==typeof t}},24284:(t,e,r)=>{var n=r(95329),o=r(95981),a=r(57475),i=r(9697),u=r(626),c=r(81302),s=function(){},l=[],f=u("Reflect","construct"),d=/^\s*(?:class|function)\b/,p=n(d.exec),h=!d.exec(s),v=function(t){if(!a(t))return!1;try{return f(s,l,t),!0}catch(t){return!1}},y=function(t){if(!a(t))return!1;switch(i(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!p(d,c(t))}catch(t){return!0}};y.sham=!0,t.exports=!f||o((function(){var t;return v(v.call)||!v(Object)||!v((function(){t=!0}))||t}))?y:v},37252:(t,e,r)=>{var n=r(95981),o=r(57475),a=/#|\.prototype\./,i=function(t,e){var r=c[u(t)];return r==l||r!=s&&(o(e)?n(e):!!e)},u=i.normalize=function(t){return String(t).replace(a,".").toLowerCase()},c=i.data={},s=i.NATIVE="N",l=i.POLYFILL="P";t.exports=i},10941:(t,e,r)=>{var n=r(57475);t.exports=function(t){return"object"==typeof t?null!==t:n(t)}},82529:t=>{t.exports=!0},56664:(t,e,r)=>{var n=r(21899),o=r(626),a=r(57475),i=r(7046),u=r(32302),c=n.Object;t.exports=u?function(t){return"symbol"==typeof t}:function(t){var e=o("Symbol");return a(e)&&i(e.prototype,c(t))}},93091:(t,e,r)=>{var n=r(21899),o=r(86843),a=r(78834),i=r(96059),u=r(15845),c=r(6782),s=r(10623),l=r(7046),f=r(53476),d=r(22902),p=r(7609),h=n.TypeError,v=function(t,e){this.stopped=t,this.result=e},y=v.prototype;t.exports=function(t,e,r){var n,g,m,b,w,x,O,S=r&&r.that,A=!(!r||!r.AS_ENTRIES),_=!(!r||!r.IS_ITERATOR),M=!(!r||!r.INTERRUPTED),R=o(e,S),P=function(t){return n&&p(n,"normal",t),new v(!0,t)},E=function(t){return A?(i(t),M?R(t[0],t[1],P):R(t[0],t[1])):M?R(t,P):R(t)};if(_)n=t;else{if(!(g=d(t)))throw h(u(t)+" is not iterable");if(c(g)){for(m=0,b=s(t);b>m;m++)if((w=E(t[m]))&&l(y,w))return w;return new v(!1)}n=f(t,g)}for(x=n.next;!(O=a(x,n)).done;){try{w=E(O.value)}catch(t){p(n,"throw",t)}if("object"==typeof w&&w&&l(y,w))return w}return new v(!1)}},7609:(t,e,r)=>{var n=r(78834),o=r(96059),a=r(14229);t.exports=function(t,e,r){var i,u;o(t);try{if(!(i=a(t,"return"))){if("throw"===e)throw r;return r}i=n(i,t)}catch(t){u=!0,i=t}if("throw"===e)throw r;if(u)throw i;return o(i),r}},35143:(t,e,r)=>{"use strict";var n,o,a,i=r(95981),u=r(57475),c=r(29290),s=r(249),l=r(99754),f=r(99813),d=r(82529),p=f("iterator"),h=!1;[].keys&&("next"in(a=[].keys())?(o=s(s(a)))!==Object.prototype&&(n=o):h=!0),null==n||i((function(){var t={};return n[p].call(t)!==t}))?n={}:d&&(n=c(n)),u(n[p])||l(n,p,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:h}},12077:t=>{t.exports={}},10623:(t,e,r)=>{var n=r(43057);t.exports=function(t){return n(t.length)}},66132:(t,e,r)=>{var n,o,a,i,u,c,s,l,f=r(21899),d=r(86843),p=r(49677).f,h=r(42941).set,v=r(22749),y=r(4470),g=r(58045),m=r(6049),b=f.MutationObserver||f.WebKitMutationObserver,w=f.document,x=f.process,O=f.Promise,S=p(f,"queueMicrotask"),A=S&&S.value;A||(n=function(){var t,e;for(m&&(t=x.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?i():a=void 0,t}}a=void 0,t&&t.enter()},v||m||g||!b||!w?!y&&O&&O.resolve?((s=O.resolve(void 0)).constructor=O,l=d(s.then,s),i=function(){l(n)}):m?i=function(){x.nextTick(n)}:(h=d(h,f),i=function(){h(n)}):(u=!0,c=w.createTextNode(""),new b(n).observe(c,{characterData:!0}),i=function(){c.data=u=!u})),t.exports=A||function(t){var e={fn:t,next:void 0};a&&(a.next=e),o||(o=e,i()),a=e}},19297:(t,e,r)=>{var n=r(21899);t.exports=n.Promise},72497:(t,e,r)=>{var n=r(53385),o=r(95981);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},38019:(t,e,r)=>{var n=r(21899),o=r(57475),a=r(81302),i=n.WeakMap;t.exports=o(i)&&/native code/.test(a(i))},69520:(t,e,r)=>{"use strict";var n=r(24883),o=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new o(t)}},14649:(t,e,r)=>{var n=r(85803);t.exports=function(t,e){return void 0===t?arguments.length<2?"":e:n(t)}},29290:(t,e,r)=>{var n,o=r(96059),a=r(59938),i=r(56759),u=r(27748),c=r(15463),s=r(61333),l=r(44262)("IE_PROTO"),f=function(){},d=function(t){return"<script>"+t+"<\/script>"},p=function(t){t.write(d("")),t.close();var e=t.parentWindow.Object;return t=null,e},h=function(){try{n=new ActiveXObject("htmlfile")}catch(t){}var t,e;h="undefined"!=typeof document?document.domain&&n?p(n):((e=s("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(d("document.F=Object")),t.close(),t.F):p(n);for(var r=i.length;r--;)delete h.prototype[i[r]];return h()};u[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(f.prototype=o(t),r=new f,f.prototype=null,r[l]=t):r=h(),void 0===e?r:a.f(r,e)}},59938:(t,e,r)=>{var n=r(55746),o=r(83937),a=r(65988),i=r(96059),u=r(74529),c=r(14771);e.f=n&&!o?Object.defineProperties:function(t,e){i(t);for(var r,n=u(e),o=c(e),s=o.length,l=0;s>l;)a.f(t,r=o[l++],n[r]);return t}},65988:(t,e,r)=>{var n=r(21899),o=r(55746),a=r(2840),i=r(83937),u=r(96059),c=r(83894),s=n.TypeError,l=Object.defineProperty,f=Object.getOwnPropertyDescriptor;e.f=o?i?function(t,e,r){if(u(t),e=c(e),u(r),"function"==typeof t&&"prototype"===e&&"value"in r&&"writable"in r&&!r.writable){var n=f(t,e);n&&n.writable&&(t[e]=r.value,r={configurable:"configurable"in r?r.configurable:n.configurable,enumerable:"enumerable"in r?r.enumerable:n.enumerable,writable:!1})}return l(t,e,r)}:l:function(t,e,r){if(u(t),e=c(e),u(r),a)try{return l(t,e,r)}catch(t){}if("get"in r||"set"in r)throw s("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},49677:(t,e,r)=>{var n=r(55746),o=r(78834),a=r(36760),i=r(31887),u=r(74529),c=r(83894),s=r(90953),l=r(2840),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=u(t),e=c(e),l)try{return f(t,e)}catch(t){}if(s(t,e))return i(!o(a.f,t,e),t[e])}},684:(t,e,r)=>{var n=r(82532),o=r(74529),a=r(10946).f,i=r(15790),u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"Window"==n(t)?function(t){try{return a(t)}catch(t){return i(u)}}(t):a(o(t))}},10946:(t,e,r)=>{var n=r(55629),o=r(56759).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},87857:(t,e)=>{e.f=Object.getOwnPropertySymbols},249:(t,e,r)=>{var n=r(21899),o=r(90953),a=r(57475),i=r(89678),u=r(44262),c=r(64160),s=u("IE_PROTO"),l=n.Object,f=l.prototype;t.exports=c?l.getPrototypeOf:function(t){var e=i(t);if(o(e,s))return e[s];var r=e.constructor;return a(r)&&e instanceof r?r.prototype:e instanceof l?f:null}},7046:(t,e,r)=>{var n=r(95329);t.exports=n({}.isPrototypeOf)},55629:(t,e,r)=>{var n=r(95329),o=r(90953),a=r(74529),i=r(31692).indexOf,u=r(27748),c=n([].push);t.exports=function(t,e){var r,n=a(t),s=0,l=[];for(r in n)!o(u,r)&&o(n,r)&&c(l,r);for(;e.length>s;)o(n,r=e[s++])&&(~i(l,r)||c(l,r));return l}},14771:(t,e,r)=>{var n=r(55629),o=r(56759);t.exports=Object.keys||function(t){return n(t,o)}},36760:(t,e)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);e.f=o?function(t){var e=n(this,t);return!!e&&e.enumerable}:r},88929:(t,e,r)=>{var n=r(95329),o=r(96059),a=r(11851);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),e=r instanceof Array}catch(t){}return function(r,n){return o(r),a(n),e?t(r,n):r.__proto__=n,r}}():void 0)},95623:(t,e,r)=>{"use strict";var n=r(22885),o=r(9697);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},39811:(t,e,r)=>{var n=r(21899),o=r(78834),a=r(57475),i=r(10941),u=n.TypeError;t.exports=function(t,e){var r,n;if("string"===e&&a(r=t.toString)&&!i(n=o(r,t)))return n;if(a(r=t.valueOf)&&!i(n=o(r,t)))return n;if("string"!==e&&a(r=t.toString)&&!i(n=o(r,t)))return n;throw u("Can't convert object to primitive value")}},31136:(t,e,r)=>{var n=r(626),o=r(95329),a=r(10946),i=r(87857),u=r(96059),c=o([].concat);t.exports=n("Reflect","ownKeys")||function(t){var e=a.f(u(t)),r=i.f;return r?c(e,r(t)):e}},54058:t=>{t.exports={}},40002:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},56584:(t,e,r)=>{var n=r(96059),o=r(10941),a=r(69520);t.exports=function(t,e){if(n(t),o(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},18397:t=>{var e=function(){this.head=null,this.tail=null};e.prototype={add:function(t){var e={item:t,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var t=this.head;if(t)return this.head=t.next,this.tail===t&&(this.tail=null),t.item}},t.exports=e},87524:(t,e,r)=>{var n=r(99754);t.exports=function(t,e,r){for(var o in e)r&&r.unsafe&&t[o]?t[o]=e[o]:n(t,o,e[o],r);return t}},99754:(t,e,r)=>{var n=r(32029);t.exports=function(t,e,r,o){o&&o.enumerable?t[e]=r:n(t,e,r)}},48219:(t,e,r)=>{var n=r(21899).TypeError;t.exports=function(t){if(null==t)throw n("Can't call method on "+t);return t}},4911:(t,e,r)=>{var n=r(21899),o=Object.defineProperty;t.exports=function(t,e){try{o(n,t,{value:e,configurable:!0,writable:!0})}catch(r){n[t]=e}return e}},94431:(t,e,r)=>{"use strict";var n=r(626),o=r(65988),a=r(99813),i=r(55746),u=a("species");t.exports=function(t){var e=n(t),r=o.f;i&&e&&!e[u]&&r(e,u,{configurable:!0,get:function(){return this}})}},90904:(t,e,r)=>{var n=r(22885),o=r(65988).f,a=r(32029),i=r(90953),u=r(95623),c=r(99813)("toStringTag");t.exports=function(t,e,r,s){if(t){var l=r?t:t.prototype;i(l,c)||o(l,c,{configurable:!0,value:e}),s&&!n&&a(l,"toString",u)}}},44262:(t,e,r)=>{var n=r(68726),o=r(99418),a=n("keys");t.exports=function(t){return a[t]||(a[t]=o(t))}},63030:(t,e,r)=>{var n=r(21899),o=r(4911),a="__core-js_shared__",i=n[a]||o(a,{});t.exports=i},68726:(t,e,r)=>{var n=r(82529),o=r(63030);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.20.3",mode:n?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.20.3/LICENSE",source:"https://github.com/zloirock/core-js"})},70487:(t,e,r)=>{var n=r(96059),o=r(174),a=r(99813)("species");t.exports=function(t,e){var r,i=n(t).constructor;return void 0===i||null==(r=n(i)[a])?e:o(r)}},64620:(t,e,r)=>{var n=r(95329),o=r(62435),a=r(85803),i=r(48219),u=n("".charAt),c=n("".charCodeAt),s=n("".slice),l=function(t){return function(e,r){var n,l,f=a(i(e)),d=o(r),p=f.length;return d<0||d>=p?t?"":void 0:(n=c(f,d))<55296||n>56319||d+1===p||(l=c(f,d+1))<56320||l>57343?t?u(f,d):n:t?s(f,d,d+2):l-56320+(n-55296<<10)+65536}};t.exports={codeAt:l(!1),charAt:l(!0)}},42941:(t,e,r)=>{var n,o,a,i,u=r(21899),c=r(79730),s=r(86843),l=r(57475),f=r(90953),d=r(95981),p=r(15463),h=r(93765),v=r(61333),y=r(22749),g=r(6049),m=u.setImmediate,b=u.clearImmediate,w=u.process,x=u.Dispatch,O=u.Function,S=u.MessageChannel,A=u.String,_=0,M={};try{n=u.location}catch(t){}var R=function(t){if(f(M,t)){var e=M[t];delete M[t],e()}},P=function(t){return function(){R(t)}},E=function(t){R(t.data)},j=function(t){u.postMessage(A(t),n.protocol+"//"+n.host)};m&&b||(m=function(t){var e=h(arguments,1);return M[++_]=function(){c(l(t)?t:O(t),void 0,e)},o(_),_},b=function(t){delete M[t]},g?o=function(t){w.nextTick(P(t))}:x&&x.now?o=function(t){x.now(P(t))}:S&&!y?(i=(a=new S).port2,a.port1.onmessage=E,o=s(i.postMessage,i)):u.addEventListener&&l(u.postMessage)&&!u.importScripts&&n&&"file:"!==n.protocol&&!d(j)?(o=j,u.addEventListener("message",E,!1)):o="onreadystatechange"in v("script")?function(t){p.appendChild(v("script")).onreadystatechange=function(){p.removeChild(this),R(t)}}:function(t){setTimeout(P(t),0)}),t.exports={set:m,clear:b}},59413:(t,e,r)=>{var n=r(62435),o=Math.max,a=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):a(r,e)}},74529:(t,e,r)=>{var n=r(37026),o=r(48219);t.exports=function(t){return n(o(t))}},62435:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){var n=+t;return n!=n||0===n?0:(n>0?r:e)(n)}},43057:(t,e,r)=>{var n=r(62435),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},89678:(t,e,r)=>{var n=r(21899),o=r(48219),a=n.Object;t.exports=function(t){return a(o(t))}},46935:(t,e,r)=>{var n=r(21899),o=r(78834),a=r(10941),i=r(56664),u=r(14229),c=r(39811),s=r(99813),l=n.TypeError,f=s("toPrimitive");t.exports=function(t,e){if(!a(t)||i(t))return t;var r,n=u(t,f);if(n){if(void 0===e&&(e="default"),r=o(n,t,e),!a(r)||i(r))return r;throw l("Can't convert object to primitive value")}return void 0===e&&(e="number"),c(t,e)}},83894:(t,e,r)=>{var n=r(46935),o=r(56664);t.exports=function(t){var e=n(t,"string");return o(e)?e:e+""}},22885:(t,e,r)=>{var n={};n[r(99813)("toStringTag")]="z",t.exports="[object z]"===String(n)},85803:(t,e,r)=>{var n=r(21899),o=r(9697),a=n.String;t.exports=function(t){if("Symbol"===o(t))throw TypeError("Cannot convert a Symbol value to a string");return a(t)}},15845:(t,e,r)=>{var n=r(21899).String;t.exports=function(t){try{return n(t)}catch(t){return"Object"}}},99418:(t,e,r)=>{var n=r(95329),o=0,a=Math.random(),i=n(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+i(++o+a,36)}},32302:(t,e,r)=>{var n=r(72497);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},83937:(t,e,r)=>{var n=r(55746),o=r(95981);t.exports=n&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},11477:(t,e,r)=>{var n=r(99813);e.f=n},99813:(t,e,r)=>{var n=r(21899),o=r(68726),a=r(90953),i=r(99418),u=r(72497),c=r(32302),s=o("wks"),l=n.Symbol,f=l&&l.for,d=c?l:l&&l.withoutSetter||i;t.exports=function(t){if(!a(s,t)||!u&&"string"!=typeof s[t]){var e="Symbol."+t;u&&a(l,t)?s[t]=l[t]:s[t]=c&&f?f(e):d(e)}return s[t]}},47627:(t,e,r)=>{"use strict";var n=r(76887),o=r(21899),a=r(7046),i=r(249),u=r(88929),c=r(23489),s=r(29290),l=r(32029),f=r(31887),d=r(38694),p=r(53794),h=r(93091),v=r(14649),y=r(99813),g=r(18780),m=y("toStringTag"),b=o.Error,w=[].push,x=function(t,e){var r,n=arguments.length>2?arguments[2]:void 0,o=a(O,this);u?r=u(new b,o?i(this):O):(r=o?this:s(O),l(r,m,"Error")),void 0!==e&&l(r,"message",v(e)),g&&l(r,"stack",d(r.stack,1)),p(r,n);var c=[];return h(t,w,{that:c}),l(r,"errors",c),r};u?u(x,b):c(x,b,{name:!0});var O=x.prototype=s(b.prototype,{constructor:f(1,x),message:f(1,""),name:f(1,"AggregateError")});n({global:!0},{AggregateError:x})},85906:(t,e,r)=>{"use strict";var n=r(76887),o=r(21899),a=r(95981),i=r(1052),u=r(10941),c=r(89678),s=r(10623),l=r(55449),f=r(64692),d=r(50568),p=r(99813),h=r(53385),v=p("isConcatSpreadable"),y=9007199254740991,g="Maximum allowed index exceeded",m=o.TypeError,b=h>=51||!a((function(){var t=[];return t[v]=!1,t.concat()[0]!==t})),w=d("concat"),x=function(t){if(!u(t))return!1;var e=t[v];return void 0!==e?!!e:i(t)};n({target:"Array",proto:!0,forced:!b||!w},{concat:function(t){var e,r,n,o,a,i=c(this),u=f(i,0),d=0;for(e=-1,n=arguments.length;e<n;e++)if(x(a=-1===e?i:arguments[e])){if(d+(o=s(a))>y)throw m(g);for(r=0;r<o;r++,d++)r in a&&l(u,d,a[r])}else{if(d>=y)throw m(g);l(u,d++,a)}return u.length=d,u}})},53242:(t,e,r)=>{var n=r(76887),o=r(11354);n({target:"Array",stat:!0,forced:!r(21385)((function(t){Array.from(t)}))},{from:o})},92737:(t,e,r)=>{r(76887)({target:"Array",stat:!0},{isArray:r(1052)})},66274:(t,e,r)=>{"use strict";var n=r(74529),o=r(18479),a=r(12077),i=r(45402),u=r(65988).f,c=r(47771),s=r(82529),l=r(55746),f="Array Iterator",d=i.set,p=i.getterFor(f);t.exports=c(Array,"Array",(function(t,e){d(this,{type:f,target:n(t),index:0,kind:e})}),(function(){var t=p(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values");var h=a.Arguments=a.Array;if(o("keys"),o("values"),o("entries"),!s&&l&&"values"!==h.name)try{u(h,"name",{value:"values"})}catch(t){}},60186:(t,e,r)=>{"use strict";var n=r(76887),o=r(21899),a=r(1052),i=r(24284),u=r(10941),c=r(59413),s=r(10623),l=r(74529),f=r(55449),d=r(99813),p=r(50568),h=r(93765),v=p("slice"),y=d("species"),g=o.Array,m=Math.max;n({target:"Array",proto:!0,forced:!v},{slice:function(t,e){var r,n,o,d=l(this),p=s(d),v=c(t,p),b=c(void 0===e?p:e,p);if(a(d)&&(r=d.constructor,(i(r)&&(r===g||a(r.prototype))||u(r)&&null===(r=r[y]))&&(r=void 0),r===g||void 0===r))return h(d,v,b);for(n=new(void 0===r?g:r)(m(b-v,0)),o=0;v<b;v++,o++)v in d&&f(n,o,d[v]);return n.length=o,n}})},73381:(t,e,r)=>{var n=r(76887),o=r(98308);n({target:"Function",proto:!0,forced:Function.bind!==o},{bind:o})},69120:(t,e,r)=>{var n=r(21899);r(90904)(n.JSON,"JSON",!0)},79413:()=>{},86450:(t,e,r)=>{var n=r(76887),o=r(55746),a=r(65988).f;n({target:"Object",stat:!0,forced:Object.defineProperty!==a,sham:!o},{defineProperty:a})},55967:()=>{},4560:(t,e,r)=>{"use strict";var n=r(76887),o=r(78834),a=r(24883),i=r(69520),u=r(40002),c=r(93091);n({target:"Promise",stat:!0},{allSettled:function(t){var e=this,r=i.f(e),n=r.resolve,s=r.reject,l=u((function(){var r=a(e.resolve),i=[],u=0,s=1;c(t,(function(t){var a=u++,c=!1;s++,o(r,e,t).then((function(t){c||(c=!0,i[a]={status:"fulfilled",value:t},--s||n(i))}),(function(t){c||(c=!0,i[a]={status:"rejected",reason:t},--s||n(i))}))})),--s||n(i)}));return l.error&&s(l.value),r.promise}})},91302:(t,e,r)=>{"use strict";var n=r(76887),o=r(24883),a=r(626),i=r(78834),u=r(69520),c=r(40002),s=r(93091),l="No one promise resolved";n({target:"Promise",stat:!0},{any:function(t){var e=this,r=a("AggregateError"),n=u.f(e),f=n.resolve,d=n.reject,p=c((function(){var n=o(e.resolve),a=[],u=0,c=1,p=!1;s(t,(function(t){var o=u++,s=!1;c++,i(n,e,t).then((function(t){s||p||(p=!0,f(t))}),(function(t){s||p||(s=!0,a[o]=t,--c||d(new r(a,l)))}))})),--c||d(new r(a,l))}));return p.error&&d(p.value),n.promise}})},44349:(t,e,r)=>{"use strict";var n=r(76887),o=r(82529),a=r(19297),i=r(95981),u=r(626),c=r(57475),s=r(70487),l=r(56584),f=r(99754);if(n({target:"Promise",proto:!0,real:!0,forced:!!a&&i((function(){a.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=s(this,u("Promise")),r=c(t);return this.then(r?function(r){return l(e,t()).then((function(){return r}))}:t,r?function(r){return l(e,t()).then((function(){throw r}))}:t)}}),!o&&c(a)){var d=u("Promise").prototype.finally;a.prototype.finally!==d&&f(a.prototype,"finally",d,{unsafe:!0})}},98881:(t,e,r)=>{"use strict";var n,o,a,i,u=r(76887),c=r(82529),s=r(21899),l=r(626),f=r(78834),d=r(19297),p=r(99754),h=r(87524),v=r(88929),y=r(90904),g=r(94431),m=r(24883),b=r(57475),w=r(10941),x=r(5743),O=r(81302),S=r(93091),A=r(21385),_=r(70487),M=r(42941).set,R=r(66132),P=r(56584),E=r(34845),j=r(69520),T=r(40002),k=r(18397),C=r(45402),D=r(37252),I=r(99813),$=r(23321),L=r(6049),F=r(53385),N=I("species"),U="Promise",Y=C.getterFor(U),B=C.set,H=C.getterFor(U),G=d&&d.prototype,Z=d,W=G,q=s.TypeError,K=s.document,V=s.process,z=j.f,X=z,Q=!!(K&&K.createEvent&&s.dispatchEvent),J=b(s.PromiseRejectionEvent),tt="unhandledrejection",et=!1,rt=D(U,(function(){var t=O(Z),e=t!==String(Z);if(!e&&66===F)return!0;if(c&&!W.finally)return!0;if(F>=51&&/native code/.test(t))return!1;var r=new Z((function(t){t(1)})),n=function(t){t((function(){}),(function(){}))};return(r.constructor={})[N]=n,!(et=r.then((function(){}))instanceof n)||!e&&$&&!J})),nt=rt||!A((function(t){Z.all(t).catch((function(){}))})),ot=function(t){var e;return!(!w(t)||!b(e=t.then))&&e},at=function(t,e){var r,n,o,a=e.value,i=1==e.state,u=i?t.ok:t.fail,c=t.resolve,s=t.reject,l=t.domain;try{u?(i||(2===e.rejection&&lt(e),e.rejection=1),!0===u?r=a:(l&&l.enter(),r=u(a),l&&(l.exit(),o=!0)),r===t.promise?s(q("Promise-chain cycle")):(n=ot(r))?f(n,r,c,s):c(r)):s(a)}catch(t){l&&!o&&l.exit(),s(t)}},it=function(t,e){t.notified||(t.notified=!0,R((function(){for(var r,n=t.reactions;r=n.get();)at(r,t);t.notified=!1,e&&!t.rejection&&ct(t)})))},ut=function(t,e,r){var n,o;Q?((n=K.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),s.dispatchEvent(n)):n={promise:e,reason:r},!J&&(o=s["on"+t])?o(n):t===tt&&E("Unhandled promise rejection",r)},ct=function(t){f(M,s,(function(){var e,r=t.facade,n=t.value;if(st(t)&&(e=T((function(){L?V.emit("unhandledRejection",n,r):ut(tt,r,n)})),t.rejection=L||st(t)?2:1,e.error))throw e.value}))},st=function(t){return 1!==t.rejection&&!t.parent},lt=function(t){f(M,s,(function(){var e=t.facade;L?V.emit("rejectionHandled",e):ut("rejectionhandled",e,t.value)}))},ft=function(t,e,r){return function(n){t(e,n,r)}},dt=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,it(t,!0))},pt=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw q("Promise can't be resolved itself");var n=ot(e);n?R((function(){var r={done:!1};try{f(n,e,ft(pt,r,t),ft(dt,r,t))}catch(e){dt(r,e,t)}})):(t.value=e,t.state=1,it(t,!1))}catch(e){dt({done:!1},e,t)}}};if(rt&&(W=(Z=function(t){x(this,W),m(t),f(n,this);var e=Y(this);try{t(ft(pt,e),ft(dt,e))}catch(t){dt(e,t)}}).prototype,(n=function(t){B(this,{type:U,done:!1,notified:!1,parent:!1,reactions:new k,rejection:!1,state:0,value:void 0})}).prototype=h(W,{then:function(t,e){var r=H(this),n=z(_(this,Z));return r.parent=!0,n.ok=!b(t)||t,n.fail=b(e)&&e,n.domain=L?V.domain:void 0,0==r.state?r.reactions.add(n):R((function(){at(n,r)})),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,e=Y(t);this.promise=t,this.resolve=ft(pt,e),this.reject=ft(dt,e)},j.f=z=function(t){return t===Z||t===a?new o(t):X(t)},!c&&b(d)&&G!==Object.prototype)){i=G.then,et||(p(G,"then",(function(t,e){var r=this;return new Z((function(t,e){f(i,r,t,e)})).then(t,e)}),{unsafe:!0}),p(G,"catch",W.catch,{unsafe:!0}));try{delete G.constructor}catch(t){}v&&v(G,W)}u({global:!0,wrap:!0,forced:rt},{Promise:Z}),y(Z,U,!1,!0),g(U),a=l(U),u({target:U,stat:!0,forced:rt},{reject:function(t){var e=z(this);return f(e.reject,void 0,t),e.promise}}),u({target:U,stat:!0,forced:c||rt},{resolve:function(t){return P(c&&this===a?Z:this,t)}}),u({target:U,stat:!0,forced:nt},{all:function(t){var e=this,r=z(e),n=r.resolve,o=r.reject,a=T((function(){var r=m(e.resolve),a=[],i=0,u=1;S(t,(function(t){var c=i++,s=!1;u++,f(r,e,t).then((function(t){s||(s=!0,a[c]=t,--u||n(a))}),o)})),--u||n(a)}));return a.error&&o(a.value),r.promise},race:function(t){var e=this,r=z(e),n=r.reject,o=T((function(){var o=m(e.resolve);S(t,(function(t){f(o,e,t).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},1502:()=>{},77971:(t,e,r)=>{"use strict";var n=r(64620).charAt,o=r(85803),a=r(45402),i=r(47771),u="String Iterator",c=a.set,s=a.getterFor(u);i(String,"String",(function(t){c(this,{type:u,string:o(t),index:0})}),(function(){var t,e=s(this),r=e.string,o=e.index;return o>=r.length?{value:void 0,done:!0}:(t=n(r,o),e.index+=t.length,{value:t,done:!1})}))},8555:(t,e,r)=>{r(66349)("asyncIterator")},52615:()=>{},21732:(t,e,r)=>{r(66349)("hasInstance")},35903:(t,e,r)=>{r(66349)("isConcatSpreadable")},1825:(t,e,r)=>{r(66349)("iterator")},35824:(t,e,r)=>{"use strict";var n=r(76887),o=r(21899),a=r(626),i=r(79730),u=r(78834),c=r(95329),s=r(82529),l=r(55746),f=r(72497),d=r(95981),p=r(90953),h=r(1052),v=r(57475),y=r(10941),g=r(7046),m=r(56664),b=r(96059),w=r(89678),x=r(74529),O=r(83894),S=r(85803),A=r(31887),_=r(29290),M=r(14771),R=r(10946),P=r(684),E=r(87857),j=r(49677),T=r(65988),k=r(59938),C=r(36760),D=r(93765),I=r(99754),$=r(68726),L=r(44262),F=r(27748),N=r(99418),U=r(99813),Y=r(11477),B=r(66349),H=r(90904),G=r(45402),Z=r(3610).forEach,W=L("hidden"),q="Symbol",K=U("toPrimitive"),V=G.set,z=G.getterFor(q),X=Object.prototype,Q=o.Symbol,J=Q&&Q.prototype,tt=o.TypeError,et=o.QObject,rt=a("JSON","stringify"),nt=j.f,ot=T.f,at=P.f,it=C.f,ut=c([].push),ct=$("symbols"),st=$("op-symbols"),lt=$("string-to-symbol-registry"),ft=$("symbol-to-string-registry"),dt=$("wks"),pt=!et||!et.prototype||!et.prototype.findChild,ht=l&&d((function(){return 7!=_(ot({},"a",{get:function(){return ot(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=nt(X,e);n&&delete X[e],ot(t,e,r),n&&t!==X&&ot(X,e,n)}:ot,vt=function(t,e){var r=ct[t]=_(J);return V(r,{type:q,tag:t,description:e}),l||(r.description=e),r},yt=function(t,e,r){t===X&&yt(st,e,r),b(t);var n=O(e);return b(r),p(ct,n)?(r.enumerable?(p(t,W)&&t[W][n]&&(t[W][n]=!1),r=_(r,{enumerable:A(0,!1)})):(p(t,W)||ot(t,W,A(1,{})),t[W][n]=!0),ht(t,n,r)):ot(t,n,r)},gt=function(t,e){b(t);var r=x(e),n=M(r).concat(xt(r));return Z(n,(function(e){l&&!u(mt,r,e)||yt(t,e,r[e])})),t},mt=function(t){var e=O(t),r=u(it,this,e);return!(this===X&&p(ct,e)&&!p(st,e))&&(!(r||!p(this,e)||!p(ct,e)||p(this,W)&&this[W][e])||r)},bt=function(t,e){var r=x(t),n=O(e);if(r!==X||!p(ct,n)||p(st,n)){var o=nt(r,n);return!o||!p(ct,n)||p(r,W)&&r[W][n]||(o.enumerable=!0),o}},wt=function(t){var e=at(x(t)),r=[];return Z(e,(function(t){p(ct,t)||p(F,t)||ut(r,t)})),r},xt=function(t){var e=t===X,r=at(e?st:x(t)),n=[];return Z(r,(function(t){!p(ct,t)||e&&!p(X,t)||ut(n,ct[t])})),n};if(f||(I(J=(Q=function(){if(g(J,this))throw tt("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?S(arguments[0]):void 0,e=N(t),r=function(t){this===X&&u(r,st,t),p(this,W)&&p(this[W],e)&&(this[W][e]=!1),ht(this,e,A(1,t))};return l&&pt&&ht(X,e,{configurable:!0,set:r}),vt(e,t)}).prototype,"toString",(function(){return z(this).tag})),I(Q,"withoutSetter",(function(t){return vt(N(t),t)})),C.f=mt,T.f=yt,k.f=gt,j.f=bt,R.f=P.f=wt,E.f=xt,Y.f=function(t){return vt(U(t),t)},l&&(ot(J,"description",{configurable:!0,get:function(){return z(this).description}}),s||I(X,"propertyIsEnumerable",mt,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!f,sham:!f},{Symbol:Q}),Z(M(dt),(function(t){B(t)})),n({target:q,stat:!0,forced:!f},{for:function(t){var e=S(t);if(p(lt,e))return lt[e];var r=Q(e);return lt[e]=r,ft[r]=e,r},keyFor:function(t){if(!m(t))throw tt(t+" is not a symbol");if(p(ft,t))return ft[t]},useSetter:function(){pt=!0},useSimple:function(){pt=!1}}),n({target:"Object",stat:!0,forced:!f,sham:!l},{create:function(t,e){return void 0===e?_(t):gt(_(t),e)},defineProperty:yt,defineProperties:gt,getOwnPropertyDescriptor:bt}),n({target:"Object",stat:!0,forced:!f},{getOwnPropertyNames:wt,getOwnPropertySymbols:xt}),n({target:"Object",stat:!0,forced:d((function(){E.f(1)}))},{getOwnPropertySymbols:function(t){return E.f(w(t))}}),rt&&n({target:"JSON",stat:!0,forced:!f||d((function(){var t=Q();return"[null]"!=rt([t])||"{}"!=rt({a:t})||"{}"!=rt(Object(t))}))},{stringify:function(t,e,r){var n=D(arguments),o=e;if((y(e)||void 0!==t)&&!m(t))return h(e)||(e=function(t,e){if(v(o)&&(e=u(o,this,t,e)),!m(e))return e}),n[1]=e,i(rt,null,n)}}),!J[K]){var Ot=J.valueOf;I(J,K,(function(t){return u(Ot,this)}))}H(Q,q),F[W]=!0},45915:(t,e,r)=>{r(66349)("matchAll")},28394:(t,e,r)=>{r(66349)("match")},61766:(t,e,r)=>{r(66349)("replace")},62737:(t,e,r)=>{r(66349)("search")},89911:(t,e,r)=>{r(66349)("species")},74315:(t,e,r)=>{r(66349)("split")},63131:(t,e,r)=>{r(66349)("toPrimitive")},64714:(t,e,r)=>{r(66349)("toStringTag")},70659:(t,e,r)=>{r(66349)("unscopables")},28783:(t,e,r)=>{r(66349)("asyncDispose")},43975:(t,e,r)=>{r(66349)("dispose")},65799:(t,e,r)=>{r(66349)("matcher")},45414:(t,e,r)=>{r(66349)("metadata")},46774:(t,e,r)=>{r(66349)("observable")},80620:(t,e,r)=>{r(66349)("patternMatch")},36172:(t,e,r)=>{r(66349)("replaceAll")},7634:(t,e,r)=>{r(66274);var n=r(63281),o=r(21899),a=r(9697),i=r(32029),u=r(12077),c=r(99813)("toStringTag");for(var s in n){var l=o[s],f=l&&l.prototype;f&&a(f)!==c&&i(f,c,s),u[s]=u.Array}},27698:(t,e,r)=>{var n=r(54493);t.exports=n},83363:(t,e,r)=>{var n=r(24034);t.exports=n},56668:(t,e,r)=>{var n=r(95909);t.exports=n},56243:(t,e,r)=>{var n=r(13830);r(7634),t.exports=n},63698:(t,e,r)=>{var n=r(45581);r(7634),t.exports=n},28196:(t,e,r)=>{var n=r(16246);t.exports=n},8065:(t,e,r)=>{var n=r(56043);t.exports=n},73819:(t,e,r)=>{r(7634);var n=r(9697),o=r(90953),a=r(7046),i=r(56668),u=Array.prototype,c={DOMTokenList:!0,NodeList:!0};t.exports=function(t){var e=t.keys;return t===u||a(u,t)&&e===u.keys||o(c,n(t))?i:e}},82073:(t,e,r)=>{var n=r(69601);t.exports=n},41910:(t,e,r)=>{var n=r(48171);t.exports=n},27460:(t,e,r)=>{var n=r(52956);r(7634),t.exports=n},34507:(t,e,r)=>{var n=r(22727);t.exports=n},92547:(t,e,r)=>{var n=r(57473);r(7634),t.exports=n},46509:(t,e,r)=>{var n=r(24227);r(7634),t.exports=n},19662:(t,e,r)=>{var n=r(17854),o=r(60614),a=r(66330),i=n.TypeError;t.exports=function(t){if(o(t))return t;throw i(a(t)+" is not a function")}},39483:(t,e,r)=>{var n=r(17854),o=r(4411),a=r(66330),i=n.TypeError;t.exports=function(t){if(o(t))return t;throw i(a(t)+" is not a constructor")}},96077:(t,e,r)=>{var n=r(17854),o=r(60614),a=n.String,i=n.TypeError;t.exports=function(t){if("object"==typeof t||o(t))return t;throw i("Can't set "+a(t)+" as a prototype")}},51223:(t,e,r)=>{var n=r(5112),o=r(70030),a=r(3070),i=n("unscopables"),u=Array.prototype;null==u[i]&&a.f(u,i,{configurable:!0,value:o(null)}),t.exports=function(t){u[i][t]=!0}},31530:(t,e,r)=>{"use strict";var n=r(28710).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},25787:(t,e,r)=>{var n=r(17854),o=r(47976),a=n.TypeError;t.exports=function(t,e){if(o(e,t))return t;throw a("Incorrect invocation")}},19670:(t,e,r)=>{var n=r(17854),o=r(70111),a=n.String,i=n.TypeError;t.exports=function(t){if(o(t))return t;throw i(a(t)+" is not an object")}},24019:t=>{t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},7556:(t,e,r)=>{var n=r(47293);t.exports=n((function(){if("function"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,"a",{value:8})}}))},90260:(t,e,r)=>{"use strict";var n,o,a,i=r(24019),u=r(19781),c=r(17854),s=r(60614),l=r(70111),f=r(92597),d=r(70648),p=r(66330),h=r(68880),v=r(31320),y=r(3070).f,g=r(47976),m=r(79518),b=r(27674),w=r(5112),x=r(69711),O=c.Int8Array,S=O&&O.prototype,A=c.Uint8ClampedArray,_=A&&A.prototype,M=O&&m(O),R=S&&m(S),P=Object.prototype,E=c.TypeError,j=w("toStringTag"),T=x("TYPED_ARRAY_TAG"),k=x("TYPED_ARRAY_CONSTRUCTOR"),C=i&&!!b&&"Opera"!==d(c.opera),D=!1,I={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},$={BigInt64Array:8,BigUint64Array:8},L=function(t){if(!l(t))return!1;var e=d(t);return f(I,e)||f($,e)};for(n in I)(a=(o=c[n])&&o.prototype)?h(a,k,o):C=!1;for(n in $)(a=(o=c[n])&&o.prototype)&&h(a,k,o);if((!C||!s(M)||M===Function.prototype)&&(M=function(){throw E("Incorrect invocation")},C))for(n in I)c[n]&&b(c[n],M);if((!C||!R||R===P)&&(R=M.prototype,C))for(n in I)c[n]&&b(c[n].prototype,R);if(C&&m(_)!==R&&b(_,R),u&&!f(R,j))for(n in D=!0,y(R,j,{get:function(){return l(this)?this[T]:void 0}}),I)c[n]&&h(c[n],T,n);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:C,TYPED_ARRAY_CONSTRUCTOR:k,TYPED_ARRAY_TAG:D&&T,aTypedArray:function(t){if(L(t))return t;throw E("Target is not a typed array")},aTypedArrayConstructor:function(t){if(s(t)&&(!b||g(M,t)))return t;throw E(p(t)+" is not a typed array constructor")},exportTypedArrayMethod:function(t,e,r,n){if(u){if(r)for(var o in I){var a=c[o];if(a&&f(a.prototype,t))try{delete a.prototype[t]}catch(r){try{a.prototype[t]=e}catch(t){}}}R[t]&&!r||v(R,t,r?e:C&&S[t]||e,n)}},exportTypedArrayStaticMethod:function(t,e,r){var n,o;if(u){if(b){if(r)for(n in I)if((o=c[n])&&f(o,t))try{delete o[t]}catch(t){}if(M[t]&&!r)return;try{return v(M,t,r?e:C&&M[t]||e)}catch(t){}}for(n in I)!(o=c[n])||o[t]&&!r||v(o,t,e)}},isView:function(t){if(!l(t))return!1;var e=d(t);return"DataView"===e||f(I,e)||f($,e)},isTypedArray:L,TypedArray:M,TypedArrayPrototype:R}},13331:(t,e,r)=>{"use strict";var n=r(17854),o=r(1702),a=r(19781),i=r(24019),u=r(76530),c=r(68880),s=r(12248),l=r(47293),f=r(25787),d=r(19303),p=r(17466),h=r(57067),v=r(11179),y=r(79518),g=r(27674),m=r(8006).f,b=r(3070).f,w=r(21285),x=r(41589),O=r(58003),S=r(29909),A=u.PROPER,_=u.CONFIGURABLE,M=S.get,R=S.set,P="ArrayBuffer",E="Wrong index",j=n.ArrayBuffer,T=j,k=T&&T.prototype,C=n.DataView,D=C&&C.prototype,I=Object.prototype,$=n.Array,L=n.RangeError,F=o(w),N=o([].reverse),U=v.pack,Y=v.unpack,B=function(t){return[255&t]},H=function(t){return[255&t,t>>8&255]},G=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},Z=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},W=function(t){return U(t,23,4)},q=function(t){return U(t,52,8)},K=function(t,e){b(t.prototype,e,{get:function(){return M(this)[e]}})},V=function(t,e,r,n){var o=h(r),a=M(t);if(o+e>a.byteLength)throw L(E);var i=M(a.buffer).bytes,u=o+a.byteOffset,c=x(i,u,u+e);return n?c:N(c)},z=function(t,e,r,n,o,a){var i=h(r),u=M(t);if(i+e>u.byteLength)throw L(E);for(var c=M(u.buffer).bytes,s=i+u.byteOffset,l=n(+o),f=0;f<e;f++)c[s+f]=l[a?f:e-f-1]};if(i){var X=A&&j.name!==P;if(l((function(){j(1)}))&&l((function(){new j(-1)}))&&!l((function(){return new j,new j(1.5),new j(NaN),X&&!_})))X&&_&&c(j,"name",P);else{(T=function(t){return f(this,k),new j(h(t))}).prototype=k;for(var Q,J=m(j),tt=0;J.length>tt;)(Q=J[tt++])in T||c(T,Q,j[Q]);k.constructor=T}g&&y(D)!==I&&g(D,I);var et=new C(new T(2)),rt=o(D.setInt8);et.setInt8(0,2147483648),et.setInt8(1,2147483649),!et.getInt8(0)&&et.getInt8(1)||s(D,{setInt8:function(t,e){rt(this,t,e<<24>>24)},setUint8:function(t,e){rt(this,t,e<<24>>24)}},{unsafe:!0})}else k=(T=function(t){f(this,k);var e=h(t);R(this,{bytes:F($(e),0),byteLength:e}),a||(this.byteLength=e)}).prototype,D=(C=function(t,e,r){f(this,D),f(t,k);var n=M(t).byteLength,o=d(e);if(o<0||o>n)throw L("Wrong offset");if(o+(r=void 0===r?n-o:p(r))>n)throw L("Wrong length");R(this,{buffer:t,byteLength:r,byteOffset:o}),a||(this.buffer=t,this.byteLength=r,this.byteOffset=o)}).prototype,a&&(K(T,"byteLength"),K(C,"buffer"),K(C,"byteLength"),K(C,"byteOffset")),s(D,{getInt8:function(t){return V(this,1,t)[0]<<24>>24},getUint8:function(t){return V(this,1,t)[0]},getInt16:function(t){var e=V(this,2,t,arguments.length>1?arguments[1]:void 0);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=V(this,2,t,arguments.length>1?arguments[1]:void 0);return e[1]<<8|e[0]},getInt32:function(t){return Z(V(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return Z(V(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return Y(V(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return Y(V(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,e){z(this,1,t,B,e)},setUint8:function(t,e){z(this,1,t,B,e)},setInt16:function(t,e){z(this,2,t,H,e,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,e){z(this,2,t,H,e,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,e){z(this,4,t,G,e,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,e){z(this,4,t,G,e,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,e){z(this,4,t,W,e,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,e){z(this,8,t,q,e,arguments.length>2?arguments[2]:void 0)}});O(T,P),O(C,"DataView"),t.exports={ArrayBuffer:T,DataView:C}},1048:(t,e,r)=>{"use strict";var n=r(47908),o=r(51400),a=r(26244),i=Math.min;t.exports=[].copyWithin||function(t,e){var r=n(this),u=a(r),c=o(t,u),s=o(e,u),l=arguments.length>2?arguments[2]:void 0,f=i((void 0===l?u:o(l,u))-s,u-c),d=1;for(s<c&&c<s+f&&(d=-1,s+=f-1,c+=f-1);f-- >0;)s in r?r[c]=r[s]:delete r[c],c+=d,s+=d;return r}},21285:(t,e,r)=>{"use strict";var n=r(47908),o=r(51400),a=r(26244);t.exports=function(t){for(var e=n(this),r=a(e),i=arguments.length,u=o(i>1?arguments[1]:void 0,r),c=i>2?arguments[2]:void 0,s=void 0===c?r:o(c,r);s>u;)e[u++]=t;return e}},18533:(t,e,r)=>{"use strict";var n=r(42092).forEach,o=r(9341)("forEach");t.exports=o?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},97745:(t,e,r)=>{var n=r(26244);t.exports=function(t,e){for(var r=0,o=n(e),a=new t(o);o>r;)a[r]=e[r++];return a}},48457:(t,e,r)=>{"use strict";var n=r(17854),o=r(49974),a=r(46916),i=r(47908),u=r(53411),c=r(97659),s=r(4411),l=r(26244),f=r(86135),d=r(18554),p=r(71246),h=n.Array;t.exports=function(t){var e=i(t),r=s(this),n=arguments.length,v=n>1?arguments[1]:void 0,y=void 0!==v;y&&(v=o(v,n>2?arguments[2]:void 0));var g,m,b,w,x,O,S=p(e),A=0;if(!S||this==h&&c(S))for(g=l(e),m=r?new this(g):h(g);g>A;A++)O=y?v(e[A],A):e[A],f(m,A,O);else for(x=(w=d(e,S)).next,m=r?new this:[];!(b=a(x,w)).done;A++)O=y?u(w,v,[b.value,A],!0):b.value,f(m,A,O);return m.length=A,m}},41318:(t,e,r)=>{var n=r(45656),o=r(51400),a=r(26244),i=function(t){return function(e,r,i){var u,c=n(e),s=a(c),l=o(i,s);if(t&&r!=r){for(;s>l;)if((u=c[l++])!=u)return!0}else for(;s>l;l++)if((t||l in c)&&c[l]===r)return t||l||0;return!t&&-1}};t.exports={includes:i(!0),indexOf:i(!1)}},42092:(t,e,r)=>{var n=r(49974),o=r(1702),a=r(68361),i=r(47908),u=r(26244),c=r(65417),s=o([].push),l=function(t){var e=1==t,r=2==t,o=3==t,l=4==t,f=6==t,d=7==t,p=5==t||f;return function(h,v,y,g){for(var m,b,w=i(h),x=a(w),O=n(v,y),S=u(x),A=0,_=g||c,M=e?_(h,S):r||d?_(h,0):void 0;S>A;A++)if((p||A in x)&&(b=O(m=x[A],A,w),t))if(e)M[A]=b;else if(b)switch(t){case 3:return!0;case 5:return m;case 6:return A;case 2:s(M,m)}else switch(t){case 4:return!1;case 7:s(M,m)}return f?-1:o||l?l:M}};t.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6),filterReject:l(7)}},86583:(t,e,r)=>{"use strict";var n=r(22104),o=r(45656),a=r(19303),i=r(26244),u=r(9341),c=Math.min,s=[].lastIndexOf,l=!!s&&1/[1].lastIndexOf(1,-0)<0,f=u("lastIndexOf"),d=l||!f;t.exports=d?function(t){if(l)return n(s,this,arguments)||0;var e=o(this),r=i(e),u=r-1;for(arguments.length>1&&(u=c(u,a(arguments[1]))),u<0&&(u=r+u);u>=0;u--)if(u in e&&e[u]===t)return u||0;return-1}:s},81194:(t,e,r)=>{var n=r(47293),o=r(5112),a=r(7392),i=o("species");t.exports=function(t){return a>=51||!n((function(){var e=[];return(e.constructor={})[i]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},9341:(t,e,r)=>{"use strict";var n=r(47293);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){throw 1},1)}))}},53671:(t,e,r)=>{var n=r(17854),o=r(19662),a=r(47908),i=r(68361),u=r(26244),c=n.TypeError,s=function(t){return function(e,r,n,s){o(r);var l=a(e),f=i(l),d=u(l),p=t?d-1:0,h=t?-1:1;if(n<2)for(;;){if(p in f){s=f[p],p+=h;break}if(p+=h,t?p<0:d<=p)throw c("Reduce of empty array with no initial value")}for(;t?p>=0:d>p;p+=h)p in f&&(s=r(s,f[p],p,l));return s}};t.exports={left:s(!1),right:s(!0)}},41589:(t,e,r)=>{var n=r(17854),o=r(51400),a=r(26244),i=r(86135),u=n.Array,c=Math.max;t.exports=function(t,e,r){for(var n=a(t),s=o(e,n),l=o(void 0===r?n:r,n),f=u(c(l-s,0)),d=0;s<l;s++,d++)i(f,d,t[s]);return f.length=d,f}},50206:(t,e,r)=>{var n=r(1702);t.exports=n([].slice)},94362:(t,e,r)=>{var n=r(41589),o=Math.floor,a=function(t,e){var r=t.length,c=o(r/2);return r<8?i(t,e):u(t,a(n(t,0,c),e),a(n(t,c),e),e)},i=function(t,e){for(var r,n,o=t.length,a=1;a<o;){for(n=a,r=t[a];n&&e(t[n-1],r)>0;)t[n]=t[--n];n!==a++&&(t[n]=r)}return t},u=function(t,e,r,n){for(var o=e.length,a=r.length,i=0,u=0;i<o||u<a;)t[i+u]=i<o&&u<a?n(e[i],r[u])<=0?e[i++]:r[u++]:i<o?e[i++]:r[u++];return t};t.exports=a},77475:(t,e,r)=>{var n=r(17854),o=r(43157),a=r(4411),i=r(70111),u=r(5112)("species"),c=n.Array;t.exports=function(t){var e;return o(t)&&(e=t.constructor,(a(e)&&(e===c||o(e.prototype))||i(e)&&null===(e=e[u]))&&(e=void 0)),void 0===e?c:e}},65417:(t,e,r)=>{var n=r(77475);t.exports=function(t,e){return new(n(t))(0===e?0:e)}},53411:(t,e,r)=>{var n=r(19670),o=r(99212);t.exports=function(t,e,r,a){try{return a?e(n(r)[0],r[1]):e(r)}catch(e){o(t,"throw",e)}}},17072:(t,e,r)=>{var n=r(5112)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},t(a)}catch(t){}return r}},84326:(t,e,r)=>{var n=r(1702),o=n({}.toString),a=n("".slice);t.exports=function(t){return a(o(t),8,-1)}},70648:(t,e,r)=>{var n=r(17854),o=r(51694),a=r(60614),i=r(84326),u=r(5112)("toStringTag"),c=n.Object,s="Arguments"==i(function(){return arguments}());t.exports=o?i:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=c(t),u))?r:s?i(e):"Object"==(n=i(e))&&a(e.callee)?"Arguments":n}},95631:(t,e,r)=>{"use strict";var n=r(3070).f,o=r(70030),a=r(12248),i=r(49974),u=r(25787),c=r(20408),s=r(70654),l=r(96340),f=r(19781),d=r(62423).fastKey,p=r(29909),h=p.set,v=p.getterFor;t.exports={getConstructor:function(t,e,r,s){var l=t((function(t,n){u(t,p),h(t,{type:e,index:o(null),first:void 0,last:void 0,size:0}),f||(t.size=0),null!=n&&c(n,t[s],{that:t,AS_ENTRIES:r})})),p=l.prototype,y=v(e),g=function(t,e,r){var n,o,a=y(t),i=m(t,e);return i?i.value=r:(a.last=i={index:o=d(e,!0),key:e,value:r,previous:n=a.last,next:void 0,removed:!1},a.first||(a.first=i),n&&(n.next=i),f?a.size++:t.size++,"F"!==o&&(a.index[o]=i)),t},m=function(t,e){var r,n=y(t),o=d(e);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key==e)return r};return a(p,{clear:function(){for(var t=y(this),e=t.index,r=t.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete e[r.index],r=r.next;t.first=t.last=void 0,f?t.size=0:this.size=0},delete:function(t){var e=this,r=y(e),n=m(e,t);if(n){var o=n.next,a=n.previous;delete r.index[n.index],n.removed=!0,a&&(a.next=o),o&&(o.previous=a),r.first==n&&(r.first=o),r.last==n&&(r.last=a),f?r.size--:e.size--}return!!n},forEach:function(t){for(var e,r=y(this),n=i(t,arguments.length>1?arguments[1]:void 0);e=e?e.next:r.first;)for(n(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!m(this,t)}}),a(p,r?{get:function(t){var e=m(this,t);return e&&e.value},set:function(t,e){return g(this,0===t?0:t,e)}}:{add:function(t){return g(this,t=0===t?0:t,t)}}),f&&n(p,"size",{get:function(){return y(this).size}}),l},setStrong:function(t,e,r){var n=e+" Iterator",o=v(e),a=v(n);s(t,e,(function(t,e){h(this,{type:n,target:t,state:o(t),kind:e,last:void 0})}),(function(){for(var t=a(this),e=t.kind,r=t.last;r&&r.removed;)r=r.previous;return t.target&&(t.last=r=r?r.next:t.state.first)?"keys"==e?{value:r.key,done:!1}:"values"==e?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),l(e)}}},77710:(t,e,r)=>{"use strict";var n=r(82109),o=r(17854),a=r(1702),i=r(54705),u=r(31320),c=r(62423),s=r(20408),l=r(25787),f=r(60614),d=r(70111),p=r(47293),h=r(17072),v=r(58003),y=r(79587);t.exports=function(t,e,r){var g=-1!==t.indexOf("Map"),m=-1!==t.indexOf("Weak"),b=g?"set":"add",w=o[t],x=w&&w.prototype,O=w,S={},A=function(t){var e=a(x[t]);u(x,t,"add"==t?function(t){return e(this,0===t?0:t),this}:"delete"==t?function(t){return!(m&&!d(t))&&e(this,0===t?0:t)}:"get"==t?function(t){return m&&!d(t)?void 0:e(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!d(t))&&e(this,0===t?0:t)}:function(t,r){return e(this,0===t?0:t,r),this})};if(i(t,!f(w)||!(m||x.forEach&&!p((function(){(new w).entries().next()})))))O=r.getConstructor(e,t,g,b),c.enable();else if(i(t,!0)){var _=new O,M=_[b](m?{}:-0,1)!=_,R=p((function(){_.has(1)})),P=h((function(t){new w(t)})),E=!m&&p((function(){for(var t=new w,e=5;e--;)t[b](e,e);return!t.has(-0)}));P||((O=e((function(t,e){l(t,x);var r=y(new w,t,O);return null!=e&&s(e,r[b],{that:r,AS_ENTRIES:g}),r}))).prototype=x,x.constructor=O),(R||E)&&(A("delete"),A("has"),g&&A("get")),(E||M)&&A(b),m&&x.clear&&delete x.clear}return S[t]=O,n({global:!0,forced:O!=w},S),v(O,t),m||r.setStrong(O,t,g),O}},99920:(t,e,r)=>{var n=r(92597),o=r(53887),a=r(31236),i=r(3070);t.exports=function(t,e,r){for(var u=o(e),c=i.f,s=a.f,l=0;l<u.length;l++){var f=u[l];n(t,f)||r&&n(r,f)||c(t,f,s(e,f))}}},84964:(t,e,r)=>{var n=r(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},49920:(t,e,r)=>{var n=r(47293);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},24994:(t,e,r)=>{"use strict";var n=r(13383).IteratorPrototype,o=r(70030),a=r(79114),i=r(58003),u=r(97497),c=function(){return this};t.exports=function(t,e,r,s){var l=e+" Iterator";return t.prototype=o(n,{next:a(+!s,r)}),i(t,l,!1,!0),u[l]=c,t}},68880:(t,e,r)=>{var n=r(19781),o=r(3070),a=r(79114);t.exports=n?function(t,e,r){return o.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},79114:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},86135:(t,e,r)=>{"use strict";var n=r(34948),o=r(3070),a=r(79114);t.exports=function(t,e,r){var i=n(e);i in t?o.f(t,i,a(0,r)):t[i]=r}},70654:(t,e,r)=>{"use strict";var n=r(82109),o=r(46916),a=r(31913),i=r(76530),u=r(60614),c=r(24994),s=r(79518),l=r(27674),f=r(58003),d=r(68880),p=r(31320),h=r(5112),v=r(97497),y=r(13383),g=i.PROPER,m=i.CONFIGURABLE,b=y.IteratorPrototype,w=y.BUGGY_SAFARI_ITERATORS,x=h("iterator"),O="keys",S="values",A="entries",_=function(){return this};t.exports=function(t,e,r,i,h,y,M){c(r,e,i);var R,P,E,j=function(t){if(t===h&&I)return I;if(!w&&t in C)return C[t];switch(t){case O:case S:case A:return function(){return new r(this,t)}}return function(){return new r(this)}},T=e+" Iterator",k=!1,C=t.prototype,D=C[x]||C["@@iterator"]||h&&C[h],I=!w&&D||j(h),$="Array"==e&&C.entries||D;if($&&(R=s($.call(new t)))!==Object.prototype&&R.next&&(a||s(R)===b||(l?l(R,b):u(R[x])||p(R,x,_)),f(R,T,!0,!0),a&&(v[T]=_)),g&&h==S&&D&&D.name!==S&&(!a&&m?d(C,"name",S):(k=!0,I=function(){return o(D,this)})),h)if(P={values:j(S),keys:y?I:j(O),entries:j(A)},M)for(E in P)(w||k||!(E in C))&&p(C,E,P[E]);else n({target:e,proto:!0,forced:w||k},P);return a&&!M||C[x]===I||p(C,x,I,{name:h}),v[e]=I,P}},97235:(t,e,r)=>{var n=r(40857),o=r(92597),a=r(6061),i=r(3070).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});o(e,t)||i(e,t,{value:a.f(t)})}},19781:(t,e,r)=>{var n=r(47293);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},80317:(t,e,r)=>{var n=r(17854),o=r(70111),a=n.document,i=o(a)&&o(a.createElement);t.exports=function(t){return i?a.createElement(t):{}}},48324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},98509:(t,e,r)=>{var n=r(80317)("span").classList,o=n&&n.constructor&&n.constructor.prototype;t.exports=o===Object.prototype?void 0:o},68886:(t,e,r)=>{var n=r(88113).match(/firefox\/(\d+)/i);t.exports=!!n&&+n[1]},7871:t=>{t.exports="object"==typeof window},30256:(t,e,r)=>{var n=r(88113);t.exports=/MSIE|Trident/.test(n)},71528:(t,e,r)=>{var n=r(88113),o=r(17854);t.exports=/ipad|iphone|ipod/i.test(n)&&void 0!==o.Pebble},6833:(t,e,r)=>{var n=r(88113);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},35268:(t,e,r)=>{var n=r(84326),o=r(17854);t.exports="process"==n(o.process)},71036:(t,e,r)=>{var n=r(88113);t.exports=/web0s(?!.*chrome)/i.test(n)},88113:(t,e,r)=>{var n=r(35005);t.exports=n("navigator","userAgent")||""},7392:(t,e,r)=>{var n,o,a=r(17854),i=r(88113),u=a.process,c=a.Deno,s=u&&u.versions||c&&c.version,l=s&&s.v8;l&&(o=(n=l.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&i&&(!(n=i.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\/(\d+)/))&&(o=+n[1]),t.exports=o},98008:(t,e,r)=>{var n=r(88113).match(/AppleWebKit\/(\d+)\./);t.exports=!!n&&+n[1]},80748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},82109:(t,e,r)=>{var n=r(17854),o=r(31236).f,a=r(68880),i=r(31320),u=r(83505),c=r(99920),s=r(54705);t.exports=function(t,e){var r,l,f,d,p,h=t.target,v=t.global,y=t.stat;if(r=v?n:y?n[h]||u(h,{}):(n[h]||{}).prototype)for(l in e){if(d=e[l],f=t.noTargetGet?(p=o(r,l))&&p.value:r[l],!s(v?l:h+(y?".":"#")+l,t.forced)&&void 0!==f){if(typeof d==typeof f)continue;c(d,f)}(t.sham||f&&f.sham)&&a(d,"sham",!0),i(r,l,d,t)}}},47293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},27007:(t,e,r)=>{"use strict";r(74916);var n=r(1702),o=r(31320),a=r(22261),i=r(47293),u=r(5112),c=r(68880),s=u("species"),l=RegExp.prototype;t.exports=function(t,e,r,f){var d=u(t),p=!i((function(){var e={};return e[d]=function(){return 7},7!=""[t](e)})),h=p&&!i((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[s]=function(){return r},r.flags="",r[d]=/./[d]),r.exec=function(){return e=!0,null},r[d](""),!e}));if(!p||!h||r){var v=n(/./[d]),y=e(d,""[t],(function(t,e,r,o,i){var u=n(t),c=e.exec;return c===a||c===l.exec?p&&!i?{done:!0,value:v(e,r,o)}:{done:!0,value:u(r,e,o)}:{done:!1}}));o(String.prototype,t,y[0]),o(l,d,y[1])}f&&c(l[d],"sham",!0)}},76677:(t,e,r)=>{var n=r(47293);t.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},22104:t=>{var e=Function.prototype,r=e.apply,n=e.bind,o=e.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?o.bind(r):function(){return o.apply(r,arguments)})},49974:(t,e,r)=>{var n=r(1702),o=r(19662),a=n(n.bind);t.exports=function(t,e){return o(t),void 0===e?t:a?a(t,e):function(){return t.apply(e,arguments)}}},27065:(t,e,r)=>{"use strict";var n=r(17854),o=r(1702),a=r(19662),i=r(70111),u=r(92597),c=r(50206),s=n.Function,l=o([].concat),f=o([].join),d={},p=function(t,e,r){if(!u(d,e)){for(var n=[],o=0;o<e;o++)n[o]="a["+o+"]";d[e]=s("C,a","return new C("+f(n,",")+")")}return d[e](t,r)};t.exports=s.bind||function(t){var e=a(this),r=e.prototype,n=c(arguments,1),o=function(){var r=l(n,c(arguments));return this instanceof o?p(e,r.length,r):e.apply(t,r)};return i(r)&&(o.prototype=r),o}},46916:t=>{var e=Function.prototype.call;t.exports=e.bind?e.bind(e):function(){return e.apply(e,arguments)}},76530:(t,e,r)=>{var n=r(19781),o=r(92597),a=Function.prototype,i=n&&Object.getOwnPropertyDescriptor,u=o(a,"name"),c=u&&"something"===function(){}.name,s=u&&(!n||n&&i(a,"name").configurable);t.exports={EXISTS:u,PROPER:c,CONFIGURABLE:s}},1702:t=>{var e=Function.prototype,r=e.bind,n=e.call,o=r&&r.bind(n,n);t.exports=r?function(t){return t&&o(t)}:function(t){return t&&function(){return n.apply(t,arguments)}}},35005:(t,e,r)=>{var n=r(17854),o=r(60614),a=function(t){return o(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?a(n[t]):n[t]&&n[t][e]}},71246:(t,e,r)=>{var n=r(70648),o=r(58173),a=r(97497),i=r(5112)("iterator");t.exports=function(t){if(null!=t)return o(t,i)||o(t,"@@iterator")||a[n(t)]}},18554:(t,e,r)=>{var n=r(17854),o=r(46916),a=r(19662),i=r(19670),u=r(66330),c=r(71246),s=n.TypeError;t.exports=function(t,e){var r=arguments.length<2?c(t):e;if(a(r))return i(o(r,t));throw s(u(t)+" is not iterable")}},58173:(t,e,r)=>{var n=r(19662);t.exports=function(t,e){var r=t[e];return null==r?void 0:n(r)}},10647:(t,e,r)=>{var n=r(1702),o=r(47908),a=Math.floor,i=n("".charAt),u=n("".replace),c=n("".slice),s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,l=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,r,n,f,d){var p=r+t.length,h=n.length,v=l;return void 0!==f&&(f=o(f),v=s),u(d,v,(function(o,u){var s;switch(i(u,0)){case"$":return"$";case"&":return t;case"`":return c(e,0,r);case"'":return c(e,p);case"<":s=f[c(u,1,-1)];break;default:var l=+u;if(0===l)return o;if(l>h){var d=a(l/10);return 0===d?o:d<=h?void 0===n[d-1]?i(u,1):n[d-1]+i(u,1):o}s=n[l-1]}return void 0===s?"":s}))}},17854:(t,e,r)=>{var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},92597:(t,e,r)=>{var n=r(1702),o=r(47908),a=n({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return a(o(t),e)}},3501:t=>{t.exports={}},842:(t,e,r)=>{var n=r(17854);t.exports=function(t,e){var r=n.console;r&&r.error&&(1==arguments.length?r.error(t):r.error(t,e))}},60490:(t,e,r)=>{var n=r(35005);t.exports=n("document","documentElement")},64664:(t,e,r)=>{var n=r(19781),o=r(47293),a=r(80317);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},11179:(t,e,r)=>{var n=r(17854).Array,o=Math.abs,a=Math.pow,i=Math.floor,u=Math.log,c=Math.LN2;t.exports={pack:function(t,e,r){var s,l,f,d=n(r),p=8*r-e-1,h=(1<<p)-1,v=h>>1,y=23===e?a(2,-24)-a(2,-77):0,g=t<0||0===t&&1/t<0?1:0,m=0;for((t=o(t))!=t||t===1/0?(l=t!=t?1:0,s=h):(s=i(u(t)/c),t*(f=a(2,-s))<1&&(s--,f*=2),(t+=s+v>=1?y/f:y*a(2,1-v))*f>=2&&(s++,f/=2),s+v>=h?(l=0,s=h):s+v>=1?(l=(t*f-1)*a(2,e),s+=v):(l=t*a(2,v-1)*a(2,e),s=0));e>=8;)d[m++]=255&l,l/=256,e-=8;for(s=s<<e|l,p+=e;p>0;)d[m++]=255&s,s/=256,p-=8;return d[--m]|=128*g,d},unpack:function(t,e){var r,n=t.length,o=8*n-e-1,i=(1<<o)-1,u=i>>1,c=o-7,s=n-1,l=t[s--],f=127&l;for(l>>=7;c>0;)f=256*f+t[s--],c-=8;for(r=f&(1<<-c)-1,f>>=-c,c+=e;c>0;)r=256*r+t[s--],c-=8;if(0===f)f=1-u;else{if(f===i)return r?NaN:l?-1/0:1/0;r+=a(2,e),f-=u}return(l?-1:1)*r*a(2,f-e)}}},68361:(t,e,r)=>{var n=r(17854),o=r(1702),a=r(47293),i=r(84326),u=n.Object,c=o("".split);t.exports=a((function(){return!u("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?c(t,""):u(t)}:u},79587:(t,e,r)=>{var n=r(60614),o=r(70111),a=r(27674);t.exports=function(t,e,r){var i,u;return a&&n(i=e.constructor)&&i!==r&&o(u=i.prototype)&&u!==r.prototype&&a(t,u),t}},42788:(t,e,r)=>{var n=r(1702),o=r(60614),a=r(5465),i=n(Function.toString);o(a.inspectSource)||(a.inspectSource=function(t){return i(t)}),t.exports=a.inspectSource},62423:(t,e,r)=>{var n=r(82109),o=r(1702),a=r(3501),i=r(70111),u=r(92597),c=r(3070).f,s=r(8006),l=r(1156),f=r(52050),d=r(69711),p=r(76677),h=!1,v=d("meta"),y=0,g=function(t){c(t,v,{value:{objectID:"O"+y++,weakData:{}}})},m=t.exports={enable:function(){m.enable=function(){},h=!0;var t=s.f,e=o([].splice),r={};r[v]=1,t(r).length&&(s.f=function(r){for(var n=t(r),o=0,a=n.length;o<a;o++)if(n[o]===v){e(n,o,1);break}return n},n({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:l.f}))},fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!u(t,v)){if(!f(t))return"F";if(!e)return"E";g(t)}return t[v].objectID},getWeakData:function(t,e){if(!u(t,v)){if(!f(t))return!0;if(!e)return!1;g(t)}return t[v].weakData},onFreeze:function(t){return p&&h&&f(t)&&!u(t,v)&&g(t),t}};a[v]=!0},29909:(t,e,r)=>{var n,o,a,i=r(68536),u=r(17854),c=r(1702),s=r(70111),l=r(68880),f=r(92597),d=r(5465),p=r(6200),h=r(3501),v="Object already initialized",y=u.TypeError,g=u.WeakMap;if(i||d.state){var m=d.state||(d.state=new g),b=c(m.get),w=c(m.has),x=c(m.set);n=function(t,e){if(w(m,t))throw new y(v);return e.facade=t,x(m,t,e),e},o=function(t){return b(m,t)||{}},a=function(t){return w(m,t)}}else{var O=p("state");h[O]=!0,n=function(t,e){if(f(t,O))throw new y(v);return e.facade=t,l(t,O,e),e},o=function(t){return f(t,O)?t[O]:{}},a=function(t){return f(t,O)}}t.exports={set:n,get:o,has:a,enforce:function(t){return a(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!s(e)||(r=o(e)).type!==t)throw y("Incompatible receiver, "+t+" required");return r}}}},97659:(t,e,r)=>{var n=r(5112),o=r(97497),a=n("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||i[a]===t)}},43157:(t,e,r)=>{var n=r(84326);t.exports=Array.isArray||function(t){return"Array"==n(t)}},60614:t=>{t.exports=function(t){return"function"==typeof t}},4411:(t,e,r)=>{var n=r(1702),o=r(47293),a=r(60614),i=r(70648),u=r(35005),c=r(42788),s=function(){},l=[],f=u("Reflect","construct"),d=/^\s*(?:class|function)\b/,p=n(d.exec),h=!d.exec(s),v=function(t){if(!a(t))return!1;try{return f(s,l,t),!0}catch(t){return!1}},y=function(t){if(!a(t))return!1;switch(i(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!p(d,c(t))}catch(t){return!0}};y.sham=!0,t.exports=!f||o((function(){var t;return v(v.call)||!v(Object)||!v((function(){t=!0}))||t}))?y:v},45032:(t,e,r)=>{var n=r(92597);t.exports=function(t){return void 0!==t&&(n(t,"value")||n(t,"writable"))}},54705:(t,e,r)=>{var n=r(47293),o=r(60614),a=/#|\.prototype\./,i=function(t,e){var r=c[u(t)];return r==l||r!=s&&(o(e)?n(e):!!e)},u=i.normalize=function(t){return String(t).replace(a,".").toLowerCase()},c=i.data={},s=i.NATIVE="N",l=i.POLYFILL="P";t.exports=i},55988:(t,e,r)=>{var n=r(70111),o=Math.floor;t.exports=Number.isInteger||function(t){return!n(t)&&isFinite(t)&&o(t)===t}},70111:(t,e,r)=>{var n=r(60614);t.exports=function(t){return"object"==typeof t?null!==t:n(t)}},31913:t=>{t.exports=!1},47850:(t,e,r)=>{var n=r(70111),o=r(84326),a=r(5112)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==o(t))}},52190:(t,e,r)=>{var n=r(17854),o=r(35005),a=r(60614),i=r(47976),u=r(43307),c=n.Object;t.exports=u?function(t){return"symbol"==typeof t}:function(t){var e=o("Symbol");return a(e)&&i(e.prototype,c(t))}},20408:(t,e,r)=>{var n=r(17854),o=r(49974),a=r(46916),i=r(19670),u=r(66330),c=r(97659),s=r(26244),l=r(47976),f=r(18554),d=r(71246),p=r(99212),h=n.TypeError,v=function(t,e){this.stopped=t,this.result=e},y=v.prototype;t.exports=function(t,e,r){var n,g,m,b,w,x,O,S=r&&r.that,A=!(!r||!r.AS_ENTRIES),_=!(!r||!r.IS_ITERATOR),M=!(!r||!r.INTERRUPTED),R=o(e,S),P=function(t){return n&&p(n,"normal",t),new v(!0,t)},E=function(t){return A?(i(t),M?R(t[0],t[1],P):R(t[0],t[1])):M?R(t,P):R(t)};if(_)n=t;else{if(!(g=d(t)))throw h(u(t)+" is not iterable");if(c(g)){for(m=0,b=s(t);b>m;m++)if((w=E(t[m]))&&l(y,w))return w;return new v(!1)}n=f(t,g)}for(x=n.next;!(O=a(x,n)).done;){try{w=E(O.value)}catch(t){p(n,"throw",t)}if("object"==typeof w&&w&&l(y,w))return w}return new v(!1)}},99212:(t,e,r)=>{var n=r(46916),o=r(19670),a=r(58173);t.exports=function(t,e,r){var i,u;o(t);try{if(!(i=a(t,"return"))){if("throw"===e)throw r;return r}i=n(i,t)}catch(t){u=!0,i=t}if("throw"===e)throw r;if(u)throw i;return o(i),r}},13383:(t,e,r)=>{"use strict";var n,o,a,i=r(47293),u=r(60614),c=r(70030),s=r(79518),l=r(31320),f=r(5112),d=r(31913),p=f("iterator"),h=!1;[].keys&&("next"in(a=[].keys())?(o=s(s(a)))!==Object.prototype&&(n=o):h=!0),null==n||i((function(){var t={};return n[p].call(t)!==t}))?n={}:d&&(n=c(n)),u(n[p])||l(n,p,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:h}},97497:t=>{t.exports={}},26244:(t,e,r)=>{var n=r(17466);t.exports=function(t){return n(t.length)}},95948:(t,e,r)=>{var n,o,a,i,u,c,s,l,f=r(17854),d=r(49974),p=r(31236).f,h=r(20261).set,v=r(6833),y=r(71528),g=r(71036),m=r(35268),b=f.MutationObserver||f.WebKitMutationObserver,w=f.document,x=f.process,O=f.Promise,S=p(f,"queueMicrotask"),A=S&&S.value;A||(n=function(){var t,e;for(m&&(t=x.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?i():a=void 0,t}}a=void 0,t&&t.enter()},v||m||g||!b||!w?!y&&O&&O.resolve?((s=O.resolve(void 0)).constructor=O,l=d(s.then,s),i=function(){l(n)}):m?i=function(){x.nextTick(n)}:(h=d(h,f),i=function(){h(n)}):(u=!0,c=w.createTextNode(""),new b(n).observe(c,{characterData:!0}),i=function(){c.data=u=!u})),t.exports=A||function(t){var e={fn:t,next:void 0};a&&(a.next=e),o||(o=e,i()),a=e}},13366:(t,e,r)=>{var n=r(17854);t.exports=n.Promise},30133:(t,e,r)=>{var n=r(7392),o=r(47293);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},590:(t,e,r)=>{var n=r(47293),o=r(5112),a=r(31913),i=o("iterator");t.exports=!n((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,r="";return t.pathname="c%20d",e.forEach((function(t,n){e.delete("b"),r+=n+t})),a&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[i]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},68536:(t,e,r)=>{var n=r(17854),o=r(60614),a=r(42788),i=n.WeakMap;t.exports=o(i)&&/native code/.test(a(i))},78523:(t,e,r)=>{"use strict";var n=r(19662),o=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new o(t)}},3929:(t,e,r)=>{var n=r(17854),o=r(47850),a=n.TypeError;t.exports=function(t){if(o(t))throw a("The method doesn't accept regular expressions");return t}},21574:(t,e,r)=>{"use strict";var n=r(19781),o=r(1702),a=r(46916),i=r(47293),u=r(81956),c=r(25181),s=r(55296),l=r(47908),f=r(68361),d=Object.assign,p=Object.defineProperty,h=o([].concat);t.exports=!d||i((function(){if(n&&1!==d({b:1},d(p({},"a",{enumerable:!0,get:function(){p(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},r=Symbol(),o="abcdefghijklmnopqrst";return t[r]=7,o.split("").forEach((function(t){e[t]=t})),7!=d({},t)[r]||u(d({},e)).join("")!=o}))?function(t,e){for(var r=l(t),o=arguments.length,i=1,d=c.f,p=s.f;o>i;)for(var v,y=f(arguments[i++]),g=d?h(u(y),d(y)):u(y),m=g.length,b=0;m>b;)v=g[b++],n&&!a(p,y,v)||(r[v]=y[v]);return r}:d},70030:(t,e,r)=>{var n,o=r(19670),a=r(36048),i=r(80748),u=r(3501),c=r(60490),s=r(80317),l=r(6200)("IE_PROTO"),f=function(){},d=function(t){return"<script>"+t+"<\/script>"},p=function(t){t.write(d("")),t.close();var e=t.parentWindow.Object;return t=null,e},h=function(){try{n=new ActiveXObject("htmlfile")}catch(t){}var t,e;h="undefined"!=typeof document?document.domain&&n?p(n):((e=s("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(d("document.F=Object")),t.close(),t.F):p(n);for(var r=i.length;r--;)delete h.prototype[i[r]];return h()};u[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(f.prototype=o(t),r=new f,f.prototype=null,r[l]=t):r=h(),void 0===e?r:a.f(r,e)}},36048:(t,e,r)=>{var n=r(19781),o=r(3353),a=r(3070),i=r(19670),u=r(45656),c=r(81956);e.f=n&&!o?Object.defineProperties:function(t,e){i(t);for(var r,n=u(e),o=c(e),s=o.length,l=0;s>l;)a.f(t,r=o[l++],n[r]);return t}},3070:(t,e,r)=>{var n=r(17854),o=r(19781),a=r(64664),i=r(3353),u=r(19670),c=r(34948),s=n.TypeError,l=Object.defineProperty,f=Object.getOwnPropertyDescriptor;e.f=o?i?function(t,e,r){if(u(t),e=c(e),u(r),"function"==typeof t&&"prototype"===e&&"value"in r&&"writable"in r&&!r.writable){var n=f(t,e);n&&n.writable&&(t[e]=r.value,r={configurable:"configurable"in r?r.configurable:n.configurable,enumerable:"enumerable"in r?r.enumerable:n.enumerable,writable:!1})}return l(t,e,r)}:l:function(t,e,r){if(u(t),e=c(e),u(r),a)try{return l(t,e,r)}catch(t){}if("get"in r||"set"in r)throw s("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},31236:(t,e,r)=>{var n=r(19781),o=r(46916),a=r(55296),i=r(79114),u=r(45656),c=r(34948),s=r(92597),l=r(64664),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=u(t),e=c(e),l)try{return f(t,e)}catch(t){}if(s(t,e))return i(!o(a.f,t,e),t[e])}},1156:(t,e,r)=>{var n=r(84326),o=r(45656),a=r(8006).f,i=r(41589),u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"Window"==n(t)?function(t){try{return a(t)}catch(t){return i(u)}}(t):a(o(t))}},8006:(t,e,r)=>{var n=r(16324),o=r(80748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},25181:(t,e)=>{e.f=Object.getOwnPropertySymbols},79518:(t,e,r)=>{var n=r(17854),o=r(92597),a=r(60614),i=r(47908),u=r(6200),c=r(49920),s=u("IE_PROTO"),l=n.Object,f=l.prototype;t.exports=c?l.getPrototypeOf:function(t){var e=i(t);if(o(e,s))return e[s];var r=e.constructor;return a(r)&&e instanceof r?r.prototype:e instanceof l?f:null}},52050:(t,e,r)=>{var n=r(47293),o=r(70111),a=r(84326),i=r(7556),u=Object.isExtensible,c=n((function(){u(1)}));t.exports=c||i?function(t){return!!o(t)&&(!i||"ArrayBuffer"!=a(t))&&(!u||u(t))}:u},47976:(t,e,r)=>{var n=r(1702);t.exports=n({}.isPrototypeOf)},16324:(t,e,r)=>{var n=r(1702),o=r(92597),a=r(45656),i=r(41318).indexOf,u=r(3501),c=n([].push);t.exports=function(t,e){var r,n=a(t),s=0,l=[];for(r in n)!o(u,r)&&o(n,r)&&c(l,r);for(;e.length>s;)o(n,r=e[s++])&&(~i(l,r)||c(l,r));return l}},81956:(t,e,r)=>{var n=r(16324),o=r(80748);t.exports=Object.keys||function(t){return n(t,o)}},55296:(t,e)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);e.f=o?function(t){var e=n(this,t);return!!e&&e.enumerable}:r},27674:(t,e,r)=>{var n=r(1702),o=r(19670),a=r(96077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),e=r instanceof Array}catch(t){}return function(r,n){return o(r),a(n),e?t(r,n):r.__proto__=n,r}}():void 0)},44699:(t,e,r)=>{var n=r(19781),o=r(1702),a=r(81956),i=r(45656),u=o(r(55296).f),c=o([].push),s=function(t){return function(e){for(var r,o=i(e),s=a(o),l=s.length,f=0,d=[];l>f;)r=s[f++],n&&!u(o,r)||c(d,t?[r,o[r]]:o[r]);return d}};t.exports={entries:s(!0),values:s(!1)}},90288:(t,e,r)=>{"use strict";var n=r(51694),o=r(70648);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},92140:(t,e,r)=>{var n=r(17854),o=r(46916),a=r(60614),i=r(70111),u=n.TypeError;t.exports=function(t,e){var r,n;if("string"===e&&a(r=t.toString)&&!i(n=o(r,t)))return n;if(a(r=t.valueOf)&&!i(n=o(r,t)))return n;if("string"!==e&&a(r=t.toString)&&!i(n=o(r,t)))return n;throw u("Can't convert object to primitive value")}},53887:(t,e,r)=>{var n=r(35005),o=r(1702),a=r(8006),i=r(25181),u=r(19670),c=o([].concat);t.exports=n("Reflect","ownKeys")||function(t){var e=a.f(u(t)),r=i.f;return r?c(e,r(t)):e}},40857:(t,e,r)=>{var n=r(17854);t.exports=n},12534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},69478:(t,e,r)=>{var n=r(19670),o=r(70111),a=r(78523);t.exports=function(t,e){if(n(t),o(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},18572:t=>{var e=function(){this.head=null,this.tail=null};e.prototype={add:function(t){var e={item:t,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var t=this.head;if(t)return this.head=t.next,this.tail===t&&(this.tail=null),t.item}},t.exports=e},12248:(t,e,r)=>{var n=r(31320);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},31320:(t,e,r)=>{var n=r(17854),o=r(60614),a=r(92597),i=r(68880),u=r(83505),c=r(42788),s=r(29909),l=r(76530).CONFIGURABLE,f=s.get,d=s.enforce,p=String(String).split("String");(t.exports=function(t,e,r,c){var s,f=!!c&&!!c.unsafe,h=!!c&&!!c.enumerable,v=!!c&&!!c.noTargetGet,y=c&&void 0!==c.name?c.name:e;o(r)&&("Symbol("===String(y).slice(0,7)&&(y="["+String(y).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!a(r,"name")||l&&r.name!==y)&&i(r,"name",y),(s=d(r)).source||(s.source=p.join("string"==typeof y?y:""))),t!==n?(f?!v&&t[e]&&(h=!0):delete t[e],h?t[e]=r:i(t,e,r)):h?t[e]=r:u(e,r)})(Function.prototype,"toString",(function(){return o(this)&&f(this).source||c(this)}))},97651:(t,e,r)=>{var n=r(17854),o=r(46916),a=r(19670),i=r(60614),u=r(84326),c=r(22261),s=n.TypeError;t.exports=function(t,e){var r=t.exec;if(i(r)){var n=o(r,t,e);return null!==n&&a(n),n}if("RegExp"===u(t))return o(c,t,e);throw s("RegExp#exec called on incompatible receiver")}},22261:(t,e,r)=>{"use strict";var n,o,a=r(46916),i=r(1702),u=r(41340),c=r(67066),s=r(52999),l=r(72309),f=r(70030),d=r(29909).get,p=r(9441),h=r(38173),v=l("native-string-replace",String.prototype.replace),y=RegExp.prototype.exec,g=y,m=i("".charAt),b=i("".indexOf),w=i("".replace),x=i("".slice),O=(o=/b*/g,a(y,n=/a/,"a"),a(y,o,"a"),0!==n.lastIndex||0!==o.lastIndex),S=s.BROKEN_CARET,A=void 0!==/()??/.exec("")[1];(O||A||S||p||h)&&(g=function(t){var e,r,n,o,i,s,l,p=this,h=d(p),_=u(t),M=h.raw;if(M)return M.lastIndex=p.lastIndex,e=a(g,M,_),p.lastIndex=M.lastIndex,e;var R=h.groups,P=S&&p.sticky,E=a(c,p),j=p.source,T=0,k=_;if(P&&(E=w(E,"y",""),-1===b(E,"g")&&(E+="g"),k=x(_,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==m(_,p.lastIndex-1))&&(j="(?: "+j+")",k=" "+k,T++),r=new RegExp("^(?:"+j+")",E)),A&&(r=new RegExp("^"+j+"$(?!\\s)",E)),O&&(n=p.lastIndex),o=a(y,P?r:p,k),P?o?(o.input=x(o.input,T),o[0]=x(o[0],T),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:O&&o&&(p.lastIndex=p.global?o.index+o[0].length:n),A&&o&&o.length>1&&a(v,o[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&R)for(o.groups=s=f(null),i=0;i<R.length;i++)s[(l=R[i])[0]]=o[l[1]];return o}),t.exports=g},67066:(t,e,r)=>{"use strict";var n=r(19670);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},52999:(t,e,r)=>{var n=r(47293),o=r(17854).RegExp,a=n((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),i=a||n((function(){return!o("a","y").sticky})),u=a||n((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}));t.exports={BROKEN_CARET:u,MISSED_STICKY:i,UNSUPPORTED_Y:a}},9441:(t,e,r)=>{var n=r(47293),o=r(17854).RegExp;t.exports=n((function(){var t=o(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},38173:(t,e,r)=>{var n=r(47293),o=r(17854).RegExp;t.exports=n((function(){var t=o("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},84488:(t,e,r)=>{var n=r(17854).TypeError;t.exports=function(t){if(null==t)throw n("Can't call method on "+t);return t}},83505:(t,e,r)=>{var n=r(17854),o=Object.defineProperty;t.exports=function(t,e){try{o(n,t,{value:e,configurable:!0,writable:!0})}catch(r){n[t]=e}return e}},96340:(t,e,r)=>{"use strict";var n=r(35005),o=r(3070),a=r(5112),i=r(19781),u=a("species");t.exports=function(t){var e=n(t),r=o.f;i&&e&&!e[u]&&r(e,u,{configurable:!0,get:function(){return this}})}},58003:(t,e,r)=>{var n=r(3070).f,o=r(92597),a=r(5112)("toStringTag");t.exports=function(t,e,r){t&&!r&&(t=t.prototype),t&&!o(t,a)&&n(t,a,{configurable:!0,value:e})}},6200:(t,e,r)=>{var n=r(72309),o=r(69711),a=n("keys");t.exports=function(t){return a[t]||(a[t]=o(t))}},5465:(t,e,r)=>{var n=r(17854),o=r(83505),a="__core-js_shared__",i=n[a]||o(a,{});t.exports=i},72309:(t,e,r)=>{var n=r(31913),o=r(5465);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.20.2",mode:n?"pure":"global",copyright:"© 2022 Denis Pushkarev (zloirock.ru)"})},36707:(t,e,r)=>{var n=r(19670),o=r(39483),a=r(5112)("species");t.exports=function(t,e){var r,i=n(t).constructor;return void 0===i||null==(r=n(i)[a])?e:o(r)}},28710:(t,e,r)=>{var n=r(1702),o=r(19303),a=r(41340),i=r(84488),u=n("".charAt),c=n("".charCodeAt),s=n("".slice),l=function(t){return function(e,r){var n,l,f=a(i(e)),d=o(r),p=f.length;return d<0||d>=p?t?"":void 0:(n=c(f,d))<55296||n>56319||d+1===p||(l=c(f,d+1))<56320||l>57343?t?u(f,d):n:t?s(f,d,d+2):l-56320+(n-55296<<10)+65536}};t.exports={codeAt:l(!1),charAt:l(!0)}},54986:(t,e,r)=>{var n=r(88113);t.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(n)},76650:(t,e,r)=>{var n=r(1702),o=r(17466),a=r(41340),i=r(38415),u=r(84488),c=n(i),s=n("".slice),l=Math.ceil,f=function(t){return function(e,r,n){var i,f,d=a(u(e)),p=o(r),h=d.length,v=void 0===n?" ":a(n);return p<=h||""==v?d:((f=c(v,l((i=p-h)/v.length))).length>i&&(f=s(f,0,i)),t?d+f:f+d)}};t.exports={start:f(!1),end:f(!0)}},33197:(t,e,r)=>{"use strict";var n=r(17854),o=r(1702),a=2147483647,i=/[^\0-\u007E]/,u=/[.\u3002\uFF0E\uFF61]/g,c="Overflow: input needs wider integers to process",s=n.RangeError,l=o(u.exec),f=Math.floor,d=String.fromCharCode,p=o("".charCodeAt),h=o([].join),v=o([].push),y=o("".replace),g=o("".split),m=o("".toLowerCase),b=function(t){return t+22+75*(t<26)},w=function(t,e,r){var n=0;for(t=r?f(t/700):t>>1,t+=f(t/e);t>455;)t=f(t/35),n+=36;return f(n+36*t/(t+38))},x=function(t){var e=[];t=function(t){for(var e=[],r=0,n=t.length;r<n;){var o=p(t,r++);if(o>=55296&&o<=56319&&r<n){var a=p(t,r++);56320==(64512&a)?v(e,((1023&o)<<10)+(1023&a)+65536):(v(e,o),r--)}else v(e,o)}return e}(t);var r,n,o=t.length,i=128,u=0,l=72;for(r=0;r<t.length;r++)(n=t[r])<128&&v(e,d(n));var y=e.length,g=y;for(y&&v(e,"-");g<o;){var m=a;for(r=0;r<t.length;r++)(n=t[r])>=i&&n<m&&(m=n);var x=g+1;if(m-i>f((a-u)/x))throw s(c);for(u+=(m-i)*x,i=m,r=0;r<t.length;r++){if((n=t[r])<i&&++u>a)throw s(c);if(n==i){for(var O=u,S=36;;){var A=S<=l?1:S>=l+26?26:S-l;if(O<A)break;var _=O-A,M=36-A;v(e,d(b(A+_%M))),O=f(_/M),S+=36}v(e,d(b(O))),l=w(u,x,g==y),u=0,g++}}u++,i++}return h(e,"")};t.exports=function(t){var e,r,n=[],o=g(y(m(t),u,"."),".");for(e=0;e<o.length;e++)r=o[e],v(n,l(i,r)?"xn--"+x(r):r);return h(n,".")}},38415:(t,e,r)=>{"use strict";var n=r(17854),o=r(19303),a=r(41340),i=r(84488),u=n.RangeError;t.exports=function(t){var e=a(i(this)),r="",n=o(t);if(n<0||n==1/0)throw u("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(e+=e))1&n&&(r+=e);return r}},76091:(t,e,r)=>{var n=r(76530).PROPER,o=r(47293),a=r(81361);t.exports=function(t){return o((function(){return!!a[t]()||"​᠎"!=="​᠎"[t]()||n&&a[t].name!==t}))}},53111:(t,e,r)=>{var n=r(1702),o=r(84488),a=r(41340),i=r(81361),u=n("".replace),c="["+i+"]",s=RegExp("^"+c+c+"*"),l=RegExp(c+c+"*$"),f=function(t){return function(e){var r=a(o(e));return 1&t&&(r=u(r,s,"")),2&t&&(r=u(r,l,"")),r}};t.exports={start:f(1),end:f(2),trim:f(3)}},20261:(t,e,r)=>{var n,o,a,i,u=r(17854),c=r(22104),s=r(49974),l=r(60614),f=r(92597),d=r(47293),p=r(60490),h=r(50206),v=r(80317),y=r(6833),g=r(35268),m=u.setImmediate,b=u.clearImmediate,w=u.process,x=u.Dispatch,O=u.Function,S=u.MessageChannel,A=u.String,_=0,M={};try{n=u.location}catch(t){}var R=function(t){if(f(M,t)){var e=M[t];delete M[t],e()}},P=function(t){return function(){R(t)}},E=function(t){R(t.data)},j=function(t){u.postMessage(A(t),n.protocol+"//"+n.host)};m&&b||(m=function(t){var e=h(arguments,1);return M[++_]=function(){c(l(t)?t:O(t),void 0,e)},o(_),_},b=function(t){delete M[t]},g?o=function(t){w.nextTick(P(t))}:x&&x.now?o=function(t){x.now(P(t))}:S&&!y?(i=(a=new S).port2,a.port1.onmessage=E,o=s(i.postMessage,i)):u.addEventListener&&l(u.postMessage)&&!u.importScripts&&n&&"file:"!==n.protocol&&!d(j)?(o=j,u.addEventListener("message",E,!1)):o="onreadystatechange"in v("script")?function(t){p.appendChild(v("script")).onreadystatechange=function(){p.removeChild(this),R(t)}}:function(t){setTimeout(P(t),0)}),t.exports={set:m,clear:b}},50863:(t,e,r)=>{var n=r(1702);t.exports=n(1..valueOf)},51400:(t,e,r)=>{var n=r(19303),o=Math.max,a=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):a(r,e)}},57067:(t,e,r)=>{var n=r(17854),o=r(19303),a=r(17466),i=n.RangeError;t.exports=function(t){if(void 0===t)return 0;var e=o(t),r=a(e);if(e!==r)throw i("Wrong length or index");return r}},45656:(t,e,r)=>{var n=r(68361),o=r(84488);t.exports=function(t){return n(o(t))}},19303:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){var n=+t;return n!=n||0===n?0:(n>0?r:e)(n)}},17466:(t,e,r)=>{var n=r(19303),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},47908:(t,e,r)=>{var n=r(17854),o=r(84488),a=n.Object;t.exports=function(t){return a(o(t))}},84590:(t,e,r)=>{var n=r(17854),o=r(73002),a=n.RangeError;t.exports=function(t,e){var r=o(t);if(r%e)throw a("Wrong offset");return r}},73002:(t,e,r)=>{var n=r(17854),o=r(19303),a=n.RangeError;t.exports=function(t){var e=o(t);if(e<0)throw a("The argument can't be less than 0");return e}},57593:(t,e,r)=>{var n=r(17854),o=r(46916),a=r(70111),i=r(52190),u=r(58173),c=r(92140),s=r(5112),l=n.TypeError,f=s("toPrimitive");t.exports=function(t,e){if(!a(t)||i(t))return t;var r,n=u(t,f);if(n){if(void 0===e&&(e="default"),r=o(n,t,e),!a(r)||i(r))return r;throw l("Can't convert object to primitive value")}return void 0===e&&(e="number"),c(t,e)}},34948:(t,e,r)=>{var n=r(57593),o=r(52190);t.exports=function(t){var e=n(t,"string");return o(e)?e:e+""}},51694:(t,e,r)=>{var n={};n[r(5112)("toStringTag")]="z",t.exports="[object z]"===String(n)},41340:(t,e,r)=>{var n=r(17854),o=r(70648),a=n.String;t.exports=function(t){if("Symbol"===o(t))throw TypeError("Cannot convert a Symbol value to a string");return a(t)}},66330:(t,e,r)=>{var n=r(17854).String;t.exports=function(t){try{return n(t)}catch(t){return"Object"}}},19843:(t,e,r)=>{"use strict";var n=r(82109),o=r(17854),a=r(46916),i=r(19781),u=r(63832),c=r(90260),s=r(13331),l=r(25787),f=r(79114),d=r(68880),p=r(55988),h=r(17466),v=r(57067),y=r(84590),g=r(34948),m=r(92597),b=r(70648),w=r(70111),x=r(52190),O=r(70030),S=r(47976),A=r(27674),_=r(8006).f,M=r(97321),R=r(42092).forEach,P=r(96340),E=r(3070),j=r(31236),T=r(29909),k=r(79587),C=T.get,D=T.set,I=E.f,$=j.f,L=Math.round,F=o.RangeError,N=s.ArrayBuffer,U=N.prototype,Y=s.DataView,B=c.NATIVE_ARRAY_BUFFER_VIEWS,H=c.TYPED_ARRAY_CONSTRUCTOR,G=c.TYPED_ARRAY_TAG,Z=c.TypedArray,W=c.TypedArrayPrototype,q=c.aTypedArrayConstructor,K=c.isTypedArray,V="BYTES_PER_ELEMENT",z="Wrong length",X=function(t,e){q(t);for(var r=0,n=e.length,o=new t(n);n>r;)o[r]=e[r++];return o},Q=function(t,e){I(t,e,{get:function(){return C(this)[e]}})},J=function(t){var e;return S(U,t)||"ArrayBuffer"==(e=b(t))||"SharedArrayBuffer"==e},tt=function(t,e){return K(t)&&!x(e)&&e in t&&p(+e)&&e>=0},et=function(t,e){return e=g(e),tt(t,e)?f(2,t[e]):$(t,e)},rt=function(t,e,r){return e=g(e),!(tt(t,e)&&w(r)&&m(r,"value"))||m(r,"get")||m(r,"set")||r.configurable||m(r,"writable")&&!r.writable||m(r,"enumerable")&&!r.enumerable?I(t,e,r):(t[e]=r.value,t)};i?(B||(j.f=et,E.f=rt,Q(W,"buffer"),Q(W,"byteOffset"),Q(W,"byteLength"),Q(W,"length")),n({target:"Object",stat:!0,forced:!B},{getOwnPropertyDescriptor:et,defineProperty:rt}),t.exports=function(t,e,r){var i=t.match(/\d+$/)[0]/8,c=t+(r?"Clamped":"")+"Array",s="get"+t,f="set"+t,p=o[c],g=p,m=g&&g.prototype,b={},x=function(t,e){I(t,e,{get:function(){return function(t,e){var r=C(t);return r.view[s](e*i+r.byteOffset,!0)}(this,e)},set:function(t){return function(t,e,n){var o=C(t);r&&(n=(n=L(n))<0?0:n>255?255:255&n),o.view[f](e*i+o.byteOffset,n,!0)}(this,e,t)},enumerable:!0})};B?u&&(g=e((function(t,e,r,n){return l(t,m),k(w(e)?J(e)?void 0!==n?new p(e,y(r,i),n):void 0!==r?new p(e,y(r,i)):new p(e):K(e)?X(g,e):a(M,g,e):new p(v(e)),t,g)})),A&&A(g,Z),R(_(p),(function(t){t in g||d(g,t,p[t])})),g.prototype=m):(g=e((function(t,e,r,n){l(t,m);var o,u,c,s=0,f=0;if(w(e)){if(!J(e))return K(e)?X(g,e):a(M,g,e);o=e,f=y(r,i);var d=e.byteLength;if(void 0===n){if(d%i)throw F(z);if((u=d-f)<0)throw F(z)}else if((u=h(n)*i)+f>d)throw F(z);c=u/i}else c=v(e),o=new N(u=c*i);for(D(t,{buffer:o,byteOffset:f,byteLength:u,length:c,view:new Y(o)});s<c;)x(t,s++)})),A&&A(g,Z),m=g.prototype=O(W)),m.constructor!==g&&d(m,"constructor",g),d(m,H,g),G&&d(m,G,c),b[c]=g,n({global:!0,forced:g!=p,sham:!B},b),V in g||d(g,V,i),V in m||d(m,V,i),P(c)}):t.exports=function(){}},63832:(t,e,r)=>{var n=r(17854),o=r(47293),a=r(17072),i=r(90260).NATIVE_ARRAY_BUFFER_VIEWS,u=n.ArrayBuffer,c=n.Int8Array;t.exports=!i||!o((function(){c(1)}))||!o((function(){new c(-1)}))||!a((function(t){new c,new c(null),new c(1.5),new c(t)}),!0)||o((function(){return 1!==new c(new u(2),1,void 0).length}))},43074:(t,e,r)=>{var n=r(97745),o=r(66304);t.exports=function(t,e){return n(o(t),e)}},97321:(t,e,r)=>{var n=r(49974),o=r(46916),a=r(39483),i=r(47908),u=r(26244),c=r(18554),s=r(71246),l=r(97659),f=r(90260).aTypedArrayConstructor;t.exports=function(t){var e,r,d,p,h,v,y=a(this),g=i(t),m=arguments.length,b=m>1?arguments[1]:void 0,w=void 0!==b,x=s(g);if(x&&!l(x))for(v=(h=c(g,x)).next,g=[];!(p=o(v,h)).done;)g.push(p.value);for(w&&m>2&&(b=n(b,arguments[2])),r=u(g),d=new(f(y))(r),e=0;r>e;e++)d[e]=w?b(g[e],e):g[e];return d}},66304:(t,e,r)=>{var n=r(90260),o=r(36707),a=n.TYPED_ARRAY_CONSTRUCTOR,i=n.aTypedArrayConstructor;t.exports=function(t){return i(o(t,t[a]))}},69711:(t,e,r)=>{var n=r(1702),o=0,a=Math.random(),i=n(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+i(++o+a,36)}},43307:(t,e,r)=>{var n=r(30133);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:(t,e,r)=>{var n=r(19781),o=r(47293);t.exports=n&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},6061:(t,e,r)=>{var n=r(5112);e.f=n},5112:(t,e,r)=>{var n=r(17854),o=r(72309),a=r(92597),i=r(69711),u=r(30133),c=r(43307),s=o("wks"),l=n.Symbol,f=l&&l.for,d=c?l:l&&l.withoutSetter||i;t.exports=function(t){if(!a(s,t)||!u&&"string"!=typeof s[t]){var e="Symbol."+t;u&&a(l,t)?s[t]=l[t]:s[t]=c&&f?f(e):d(e)}return s[t]}},81361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},39575:(t,e,r)=>{"use strict";var n=r(82109),o=r(1702),a=r(47293),i=r(13331),u=r(19670),c=r(51400),s=r(17466),l=r(36707),f=i.ArrayBuffer,d=i.DataView,p=d.prototype,h=o(f.prototype.slice),v=o(p.getUint8),y=o(p.setUint8);n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:a((function(){return!new f(2).slice(1,void 0).byteLength}))},{slice:function(t,e){if(h&&void 0===e)return h(u(this),t);for(var r=u(this).byteLength,n=c(t,r),o=c(void 0===e?r:e,r),a=new(l(this,f))(s(o-n)),i=new d(this),p=new d(a),g=0;n<o;)y(p,g++,v(i,n++));return a}})},92222:(t,e,r)=>{"use strict";var n=r(82109),o=r(17854),a=r(47293),i=r(43157),u=r(70111),c=r(47908),s=r(26244),l=r(86135),f=r(65417),d=r(81194),p=r(5112),h=r(7392),v=p("isConcatSpreadable"),y=9007199254740991,g="Maximum allowed index exceeded",m=o.TypeError,b=h>=51||!a((function(){var t=[];return t[v]=!1,t.concat()[0]!==t})),w=d("concat"),x=function(t){if(!u(t))return!1;var e=t[v];return void 0!==e?!!e:i(t)};n({target:"Array",proto:!0,forced:!b||!w},{concat:function(t){var e,r,n,o,a,i=c(this),u=f(i,0),d=0;for(e=-1,n=arguments.length;e<n;e++)if(x(a=-1===e?i:arguments[e])){if(d+(o=s(a))>y)throw m(g);for(r=0;r<o;r++,d++)r in a&&l(u,d,a[r])}else{if(d>=y)throw m(g);l(u,d++,a)}return u.length=d,u}})},57327:(t,e,r)=>{"use strict";var n=r(82109),o=r(42092).filter;n({target:"Array",proto:!0,forced:!r(81194)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},69826:(t,e,r)=>{"use strict";var n=r(82109),o=r(42092).find,a=r(51223),i="find",u=!0;i in[]&&Array(1).find((function(){u=!1})),n({target:"Array",proto:!0,forced:u},{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),a(i)},89554:(t,e,r)=>{"use strict";var n=r(82109),o=r(18533);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},91038:(t,e,r)=>{var n=r(82109),o=r(48457);n({target:"Array",stat:!0,forced:!r(17072)((function(t){Array.from(t)}))},{from:o})},26699:(t,e,r)=>{"use strict";var n=r(82109),o=r(41318).includes,a=r(51223);n({target:"Array",proto:!0},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),a("includes")},82772:(t,e,r)=>{"use strict";var n=r(82109),o=r(1702),a=r(41318).indexOf,i=r(9341),u=o([].indexOf),c=!!u&&1/u([1],1,-0)<0,s=i("indexOf");n({target:"Array",proto:!0,forced:c||!s},{indexOf:function(t){var e=arguments.length>1?arguments[1]:void 0;return c?u(this,t,e)||0:a(this,t,e)}})},79753:(t,e,r)=>{r(82109)({target:"Array",stat:!0},{isArray:r(43157)})},66992:(t,e,r)=>{"use strict";var n=r(45656),o=r(51223),a=r(97497),i=r(29909),u=r(3070).f,c=r(70654),s=r(31913),l=r(19781),f="Array Iterator",d=i.set,p=i.getterFor(f);t.exports=c(Array,"Array",(function(t,e){d(this,{type:f,target:n(t),index:0,kind:e})}),(function(){var t=p(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values");var h=a.Arguments=a.Array;if(o("keys"),o("values"),o("entries"),!s&&l&&"values"!==h.name)try{u(h,"name",{value:"values"})}catch(t){}},69600:(t,e,r)=>{"use strict";var n=r(82109),o=r(1702),a=r(68361),i=r(45656),u=r(9341),c=o([].join),s=a!=Object,l=u("join",",");n({target:"Array",proto:!0,forced:s||!l},{join:function(t){return c(i(this),void 0===t?",":t)}})},21249:(t,e,r)=>{"use strict";var n=r(82109),o=r(42092).map;n({target:"Array",proto:!0,forced:!r(81194)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},85827:(t,e,r)=>{"use strict";var n=r(82109),o=r(53671).left,a=r(9341),i=r(7392),u=r(35268);n({target:"Array",proto:!0,forced:!a("reduce")||!u&&i>79&&i<83},{reduce:function(t){var e=arguments.length;return o(this,t,e,e>1?arguments[1]:void 0)}})},47042:(t,e,r)=>{"use strict";var n=r(82109),o=r(17854),a=r(43157),i=r(4411),u=r(70111),c=r(51400),s=r(26244),l=r(45656),f=r(86135),d=r(5112),p=r(81194),h=r(50206),v=p("slice"),y=d("species"),g=o.Array,m=Math.max;n({target:"Array",proto:!0,forced:!v},{slice:function(t,e){var r,n,o,d=l(this),p=s(d),v=c(t,p),b=c(void 0===e?p:e,p);if(a(d)&&(r=d.constructor,(i(r)&&(r===g||a(r.prototype))||u(r)&&null===(r=r[y]))&&(r=void 0),r===g||void 0===r))return h(d,v,b);for(n=new(void 0===r?g:r)(m(b-v,0)),o=0;v<b;v++,o++)v in d&&f(n,o,d[v]);return n.length=o,n}})},5212:(t,e,r)=>{"use strict";var n=r(82109),o=r(42092).some;n({target:"Array",proto:!0,forced:!r(9341)("some")},{some:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},40561:(t,e,r)=>{"use strict";var n=r(82109),o=r(17854),a=r(51400),i=r(19303),u=r(26244),c=r(47908),s=r(65417),l=r(86135),f=r(81194)("splice"),d=o.TypeError,p=Math.max,h=Math.min,v=9007199254740991,y="Maximum allowed length exceeded";n({target:"Array",proto:!0,forced:!f},{splice:function(t,e){var r,n,o,f,g,m,b=c(this),w=u(b),x=a(t,w),O=arguments.length;if(0===O?r=n=0:1===O?(r=0,n=w-x):(r=O-2,n=h(p(i(e),0),w-x)),w+r-n>v)throw d(y);for(o=s(b,n),f=0;f<n;f++)(g=x+f)in b&&l(o,f,b[g]);if(o.length=n,r<n){for(f=x;f<w-n;f++)m=f+r,(g=f+n)in b?b[m]=b[g]:delete b[m];for(f=w;f>w-n+r;f--)delete b[f-1]}else if(r>n)for(f=w-n;f>x;f--)m=f+r-1,(g=f+n-1)in b?b[m]=b[g]:delete b[m];for(f=0;f<r;f++)b[f+x]=arguments[f+2];return b.length=w-n+r,o}})},83710:(t,e,r)=>{var n=r(1702),o=r(31320),a=Date.prototype,i="Invalid Date",u=n(a.toString),c=n(a.getTime);String(new Date(NaN))!=i&&o(a,"toString",(function(){var t=c(this);return t==t?u(this):i}))},68309:(t,e,r)=>{var n=r(19781),o=r(76530).EXISTS,a=r(1702),i=r(3070).f,u=Function.prototype,c=a(u.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,l=a(s.exec);n&&!o&&i(u,"name",{configurable:!0,get:function(){try{return l(s,c(this))[1]}catch(t){return""}}})},38862:(t,e,r)=>{var n=r(82109),o=r(17854),a=r(35005),i=r(22104),u=r(1702),c=r(47293),s=o.Array,l=a("JSON","stringify"),f=u(/./.exec),d=u("".charAt),p=u("".charCodeAt),h=u("".replace),v=u(1..toString),y=/[\uD800-\uDFFF]/g,g=/^[\uD800-\uDBFF]$/,m=/^[\uDC00-\uDFFF]$/,b=function(t,e,r){var n=d(r,e-1),o=d(r,e+1);return f(g,t)&&!f(m,o)||f(m,t)&&!f(g,n)?"\\u"+v(p(t,0),16):t},w=c((function(){return'"\\udf06\\ud834"'!==l("\udf06\ud834")||'"\\udead"'!==l("\udead")}));l&&n({target:"JSON",stat:!0,forced:w},{stringify:function(t,e,r){for(var n=0,o=arguments.length,a=s(o);n<o;n++)a[n]=arguments[n];var u=i(l,null,a);return"string"==typeof u?h(u,y,b):u}})},9653:(t,e,r)=>{"use strict";var n=r(19781),o=r(17854),a=r(1702),i=r(54705),u=r(31320),c=r(92597),s=r(79587),l=r(47976),f=r(52190),d=r(57593),p=r(47293),h=r(8006).f,v=r(31236).f,y=r(3070).f,g=r(50863),m=r(53111).trim,b="Number",w=o.Number,x=w.prototype,O=o.TypeError,S=a("".slice),A=a("".charCodeAt),_=function(t){var e=d(t,"number");return"bigint"==typeof e?e:M(e)},M=function(t){var e,r,n,o,a,i,u,c,s=d(t,"number");if(f(s))throw O("Cannot convert a Symbol value to a number");if("string"==typeof s&&s.length>2)if(s=m(s),43===(e=A(s,0))||45===e){if(88===(r=A(s,2))||120===r)return NaN}else if(48===e){switch(A(s,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+s}for(i=(a=S(s,2)).length,u=0;u<i;u++)if((c=A(a,u))<48||c>o)return NaN;return parseInt(a,n)}return+s};if(i(b,!w(" 0o1")||!w("0b1")||w("+0x1"))){for(var R,P=function(t){var e=arguments.length<1?0:w(_(t)),r=this;return l(x,r)&&p((function(){g(r)}))?s(Object(e),r,P):e},E=n?h(w):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),j=0;E.length>j;j++)c(w,R=E[j])&&!c(P,R)&&y(P,R,v(w,R));P.prototype=x,x.constructor=P,u(o,b,P)}},19601:(t,e,r)=>{var n=r(82109),o=r(21574);n({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},78011:(t,e,r)=>{r(82109)({target:"Object",stat:!0,sham:!r(19781)},{create:r(70030)})},33321:(t,e,r)=>{var n=r(82109),o=r(19781),a=r(36048).f;n({target:"Object",stat:!0,forced:Object.defineProperties!==a,sham:!o},{defineProperties:a})},69070:(t,e,r)=>{var n=r(82109),o=r(19781),a=r(3070).f;n({target:"Object",stat:!0,forced:Object.defineProperty!==a,sham:!o},{defineProperty:a})},69720:(t,e,r)=>{var n=r(82109),o=r(44699).entries;n({target:"Object",stat:!0},{entries:function(t){return o(t)}})},38880:(t,e,r)=>{var n=r(82109),o=r(47293),a=r(45656),i=r(31236).f,u=r(19781),c=o((function(){i(1)}));n({target:"Object",stat:!0,forced:!u||c,sham:!u},{getOwnPropertyDescriptor:function(t,e){return i(a(t),e)}})},49337:(t,e,r)=>{var n=r(82109),o=r(19781),a=r(53887),i=r(45656),u=r(31236),c=r(86135);n({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var e,r,n=i(t),o=u.f,s=a(n),l={},f=0;s.length>f;)void 0!==(r=o(n,e=s[f++]))&&c(l,e,r);return l}})},30489:(t,e,r)=>{var n=r(82109),o=r(47293),a=r(47908),i=r(79518),u=r(49920);n({target:"Object",stat:!0,forced:o((function(){i(1)})),sham:!u},{getPrototypeOf:function(t){return i(a(t))}})},47941:(t,e,r)=>{var n=r(82109),o=r(47908),a=r(81956);n({target:"Object",stat:!0,forced:r(47293)((function(){a(1)}))},{keys:function(t){return a(o(t))}})},68304:(t,e,r)=>{r(82109)({target:"Object",stat:!0},{setPrototypeOf:r(27674)})},41539:(t,e,r)=>{var n=r(51694),o=r(31320),a=r(90288);n||o(Object.prototype,"toString",a,{unsafe:!0})},88674:(t,e,r)=>{"use strict";var n,o,a,i,u=r(82109),c=r(31913),s=r(17854),l=r(35005),f=r(46916),d=r(13366),p=r(31320),h=r(12248),v=r(27674),y=r(58003),g=r(96340),m=r(19662),b=r(60614),w=r(70111),x=r(25787),O=r(42788),S=r(20408),A=r(17072),_=r(36707),M=r(20261).set,R=r(95948),P=r(69478),E=r(842),j=r(78523),T=r(12534),k=r(18572),C=r(29909),D=r(54705),I=r(5112),$=r(7871),L=r(35268),F=r(7392),N=I("species"),U="Promise",Y=C.getterFor(U),B=C.set,H=C.getterFor(U),G=d&&d.prototype,Z=d,W=G,q=s.TypeError,K=s.document,V=s.process,z=j.f,X=z,Q=!!(K&&K.createEvent&&s.dispatchEvent),J=b(s.PromiseRejectionEvent),tt="unhandledrejection",et=!1,rt=D(U,(function(){var t=O(Z),e=t!==String(Z);if(!e&&66===F)return!0;if(c&&!W.finally)return!0;if(F>=51&&/native code/.test(t))return!1;var r=new Z((function(t){t(1)})),n=function(t){t((function(){}),(function(){}))};return(r.constructor={})[N]=n,!(et=r.then((function(){}))instanceof n)||!e&&$&&!J})),nt=rt||!A((function(t){Z.all(t).catch((function(){}))})),ot=function(t){var e;return!(!w(t)||!b(e=t.then))&&e},at=function(t,e){var r,n,o,a=e.value,i=1==e.state,u=i?t.ok:t.fail,c=t.resolve,s=t.reject,l=t.domain;try{u?(i||(2===e.rejection&&lt(e),e.rejection=1),!0===u?r=a:(l&&l.enter(),r=u(a),l&&(l.exit(),o=!0)),r===t.promise?s(q("Promise-chain cycle")):(n=ot(r))?f(n,r,c,s):c(r)):s(a)}catch(t){l&&!o&&l.exit(),s(t)}},it=function(t,e){t.notified||(t.notified=!0,R((function(){for(var r,n=t.reactions;r=n.get();)at(r,t);t.notified=!1,e&&!t.rejection&&ct(t)})))},ut=function(t,e,r){var n,o;Q?((n=K.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),s.dispatchEvent(n)):n={promise:e,reason:r},!J&&(o=s["on"+t])?o(n):t===tt&&E("Unhandled promise rejection",r)},ct=function(t){f(M,s,(function(){var e,r=t.facade,n=t.value;if(st(t)&&(e=T((function(){L?V.emit("unhandledRejection",n,r):ut(tt,r,n)})),t.rejection=L||st(t)?2:1,e.error))throw e.value}))},st=function(t){return 1!==t.rejection&&!t.parent},lt=function(t){f(M,s,(function(){var e=t.facade;L?V.emit("rejectionHandled",e):ut("rejectionhandled",e,t.value)}))},ft=function(t,e,r){return function(n){t(e,n,r)}},dt=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,it(t,!0))},pt=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw q("Promise can't be resolved itself");var n=ot(e);n?R((function(){var r={done:!1};try{f(n,e,ft(pt,r,t),ft(dt,r,t))}catch(e){dt(r,e,t)}})):(t.value=e,t.state=1,it(t,!1))}catch(e){dt({done:!1},e,t)}}};if(rt&&(W=(Z=function(t){x(this,W),m(t),f(n,this);var e=Y(this);try{t(ft(pt,e),ft(dt,e))}catch(t){dt(e,t)}}).prototype,(n=function(t){B(this,{type:U,done:!1,notified:!1,parent:!1,reactions:new k,rejection:!1,state:0,value:void 0})}).prototype=h(W,{then:function(t,e){var r=H(this),n=z(_(this,Z));return r.parent=!0,n.ok=!b(t)||t,n.fail=b(e)&&e,n.domain=L?V.domain:void 0,0==r.state?r.reactions.add(n):R((function(){at(n,r)})),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,e=Y(t);this.promise=t,this.resolve=ft(pt,e),this.reject=ft(dt,e)},j.f=z=function(t){return t===Z||t===a?new o(t):X(t)},!c&&b(d)&&G!==Object.prototype)){i=G.then,et||(p(G,"then",(function(t,e){var r=this;return new Z((function(t,e){f(i,r,t,e)})).then(t,e)}),{unsafe:!0}),p(G,"catch",W.catch,{unsafe:!0}));try{delete G.constructor}catch(t){}v&&v(G,W)}u({global:!0,wrap:!0,forced:rt},{Promise:Z}),y(Z,U,!1,!0),g(U),a=l(U),u({target:U,stat:!0,forced:rt},{reject:function(t){var e=z(this);return f(e.reject,void 0,t),e.promise}}),u({target:U,stat:!0,forced:c||rt},{resolve:function(t){return P(c&&this===a?Z:this,t)}}),u({target:U,stat:!0,forced:nt},{all:function(t){var e=this,r=z(e),n=r.resolve,o=r.reject,a=T((function(){var r=m(e.resolve),a=[],i=0,u=1;S(t,(function(t){var c=i++,s=!1;u++,f(r,e,t).then((function(t){s||(s=!0,a[c]=t,--u||n(a))}),o)})),--u||n(a)}));return a.error&&o(a.value),r.promise},race:function(t){var e=this,r=z(e),n=r.reject,o=T((function(){var o=m(e.resolve);S(t,(function(t){f(o,e,t).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},12419:(t,e,r)=>{var n=r(82109),o=r(35005),a=r(22104),i=r(27065),u=r(39483),c=r(19670),s=r(70111),l=r(70030),f=r(47293),d=o("Reflect","construct"),p=Object.prototype,h=[].push,v=f((function(){function t(){}return!(d((function(){}),[],t)instanceof t)})),y=!f((function(){d((function(){}))})),g=v||y;n({target:"Reflect",stat:!0,forced:g,sham:g},{construct:function(t,e){u(t),c(e);var r=arguments.length<3?t:u(arguments[2]);if(y&&!v)return d(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return a(h,n,e),new(a(i,t,n))}var o=r.prototype,f=l(s(o)?o:p),g=a(t,f,e);return s(g)?g:f}})},74819:(t,e,r)=>{var n=r(82109),o=r(46916),a=r(70111),i=r(19670),u=r(45032),c=r(31236),s=r(79518);n({target:"Reflect",stat:!0},{get:function t(e,r){var n,l,f=arguments.length<3?e:arguments[2];return i(e)===f?e[r]:(n=c.f(e,r))?u(n)?n.value:void 0===n.get?void 0:o(n.get,f):a(l=s(e))?t(l,r,f):void 0}})},81299:(t,e,r)=>{var n=r(82109),o=r(17854),a=r(58003);n({global:!0},{Reflect:{}}),a(o.Reflect,"Reflect",!0)},24603:(t,e,r)=>{var n=r(19781),o=r(17854),a=r(1702),i=r(54705),u=r(79587),c=r(68880),s=r(3070).f,l=r(8006).f,f=r(47976),d=r(47850),p=r(41340),h=r(67066),v=r(52999),y=r(31320),g=r(47293),m=r(92597),b=r(29909).enforce,w=r(96340),x=r(5112),O=r(9441),S=r(38173),A=x("match"),_=o.RegExp,M=_.prototype,R=o.SyntaxError,P=a(h),E=a(M.exec),j=a("".charAt),T=a("".replace),k=a("".indexOf),C=a("".slice),D=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,I=/a/g,$=/a/g,L=new _(I)!==I,F=v.MISSED_STICKY,N=v.UNSUPPORTED_Y;if(i("RegExp",n&&(!L||F||O||S||g((function(){return $[A]=!1,_(I)!=I||_($)==$||"/a/i"!=_(I,"i")}))))){for(var U=function(t,e){var r,n,o,a,i,s,l=f(M,this),h=d(t),v=void 0===e,y=[],g=t;if(!l&&h&&v&&t.constructor===U)return t;if((h||f(M,t))&&(t=t.source,v&&(e="flags"in g?g.flags:P(g))),t=void 0===t?"":p(t),e=void 0===e?"":p(e),g=t,O&&"dotAll"in I&&(n=!!e&&k(e,"s")>-1)&&(e=T(e,/s/g,"")),r=e,F&&"sticky"in I&&(o=!!e&&k(e,"y")>-1)&&N&&(e=T(e,/y/g,"")),S&&(a=function(t){for(var e,r=t.length,n=0,o="",a=[],i={},u=!1,c=!1,s=0,l="";n<=r;n++){if("\\"===(e=j(t,n)))e+=j(t,++n);else if("]"===e)u=!1;else if(!u)switch(!0){case"["===e:u=!0;break;case"("===e:E(D,C(t,n+1))&&(n+=2,c=!0),o+=e,s++;continue;case">"===e&&c:if(""===l||m(i,l))throw new R("Invalid capture group name");i[l]=!0,a[a.length]=[l,s],c=!1,l="";continue}c?l+=e:o+=e}return[o,a]}(t),t=a[0],y=a[1]),i=u(_(t,e),l?this:M,U),(n||o||y.length)&&(s=b(i),n&&(s.dotAll=!0,s.raw=U(function(t){for(var e,r=t.length,n=0,o="",a=!1;n<=r;n++)"\\"!==(e=j(t,n))?a||"."!==e?("["===e?a=!0:"]"===e&&(a=!1),o+=e):o+="[\\s\\S]":o+=e+j(t,++n);return o}(t),r)),o&&(s.sticky=!0),y.length&&(s.groups=y)),t!==g)try{c(i,"source",""===g?"(?:)":g)}catch(t){}return i},Y=function(t){t in U||s(U,t,{configurable:!0,get:function(){return _[t]},set:function(e){_[t]=e}})},B=l(_),H=0;B.length>H;)Y(B[H++]);M.constructor=U,U.prototype=M,y(o,"RegExp",U)}w("RegExp")},74916:(t,e,r)=>{"use strict";var n=r(82109),o=r(22261);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},88386:(t,e,r)=>{var n=r(17854),o=r(19781),a=r(52999).MISSED_STICKY,i=r(84326),u=r(3070).f,c=r(29909).get,s=RegExp.prototype,l=n.TypeError;o&&a&&u(s,"sticky",{configurable:!0,get:function(){if(this!==s){if("RegExp"===i(this))return!!c(this).sticky;throw l("Incompatible receiver, RegExp required")}}})},77601:(t,e,r)=>{"use strict";r(74916);var n,o,a=r(82109),i=r(17854),u=r(46916),c=r(1702),s=r(60614),l=r(70111),f=(n=!1,(o=/[ac]/).exec=function(){return n=!0,/./.exec.apply(this,arguments)},!0===o.test("abc")&&n),d=i.Error,p=c(/./.test);a({target:"RegExp",proto:!0,forced:!f},{test:function(t){var e=this.exec;if(!s(e))return p(this,t);var r=u(e,this,t);if(null!==r&&!l(r))throw new d("RegExp exec method returned something other than an Object or null");return!!r}})},39714:(t,e,r)=>{"use strict";var n=r(1702),o=r(76530).PROPER,a=r(31320),i=r(19670),u=r(47976),c=r(41340),s=r(47293),l=r(67066),f="toString",d=RegExp.prototype,p=d.toString,h=n(l),v=s((function(){return"/a/b"!=p.call({source:"a",flags:"b"})})),y=o&&p.name!=f;(v||y)&&a(RegExp.prototype,f,(function(){var t=i(this),e=c(t.source),r=t.flags;return"/"+e+"/"+c(void 0===r&&u(d,t)&&!("flags"in d)?h(t):r)}),{unsafe:!0})},70189:(t,e,r)=>{"use strict";r(77710)("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),r(95631))},32023:(t,e,r)=>{"use strict";var n=r(82109),o=r(1702),a=r(3929),i=r(84488),u=r(41340),c=r(84964),s=o("".indexOf);n({target:"String",proto:!0,forced:!c("includes")},{includes:function(t){return!!~s(u(i(this)),u(a(t)),arguments.length>1?arguments[1]:void 0)}})},78783:(t,e,r)=>{"use strict";var n=r(28710).charAt,o=r(41340),a=r(29909),i=r(70654),u="String Iterator",c=a.set,s=a.getterFor(u);i(String,"String",(function(t){c(this,{type:u,string:o(t),index:0})}),(function(){var t,e=s(this),r=e.string,o=e.index;return o>=r.length?{value:void 0,done:!0}:(t=n(r,o),e.index+=t.length,{value:t,done:!1})}))},4723:(t,e,r)=>{"use strict";var n=r(46916),o=r(27007),a=r(19670),i=r(17466),u=r(41340),c=r(84488),s=r(58173),l=r(31530),f=r(97651);o("match",(function(t,e,r){return[function(e){var r=c(this),o=null==e?void 0:s(e,t);return o?n(o,e,r):new RegExp(e)[t](u(r))},function(t){var n=a(this),o=u(t),c=r(e,n,o);if(c.done)return c.value;if(!n.global)return f(n,o);var s=n.unicode;n.lastIndex=0;for(var d,p=[],h=0;null!==(d=f(n,o));){var v=u(d[0]);p[h]=v,""===v&&(n.lastIndex=l(o,i(n.lastIndex),s)),h++}return 0===h?null:p}]}))},83112:(t,e,r)=>{"use strict";var n=r(82109),o=r(76650).start;n({target:"String",proto:!0,forced:r(54986)},{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},68757:(t,e,r)=>{"use strict";var n=r(82109),o=r(17854),a=r(46916),i=r(1702),u=r(84488),c=r(60614),s=r(47850),l=r(41340),f=r(58173),d=r(67066),p=r(10647),h=r(5112),v=r(31913),y=h("replace"),g=RegExp.prototype,m=o.TypeError,b=i(d),w=i("".indexOf),x=i("".replace),O=i("".slice),S=Math.max,A=function(t,e,r){return r>t.length?-1:""===e?r:w(t,e,r)};n({target:"String",proto:!0},{replaceAll:function(t,e){var r,n,o,i,d,h,_,M,R,P=u(this),E=0,j=0,T="";if(null!=t){if((r=s(t))&&(n=l(u("flags"in g?t.flags:b(t))),!~w(n,"g")))throw m("`.replaceAll` does not allow non-global regexes");if(o=f(t,y))return a(o,t,P,e);if(v&&r)return x(l(P),t,e)}for(i=l(P),d=l(t),(h=c(e))||(e=l(e)),_=d.length,M=S(1,_),E=A(i,d,0);-1!==E;)R=h?l(e(d,E,i)):p(d,i,E,[],void 0,e),T+=O(i,j,E)+R,j=E+_,E=A(i,d,E+M);return j<i.length&&(T+=O(i,j)),T}})},15306:(t,e,r)=>{"use strict";var n=r(22104),o=r(46916),a=r(1702),i=r(27007),u=r(47293),c=r(19670),s=r(60614),l=r(19303),f=r(17466),d=r(41340),p=r(84488),h=r(31530),v=r(58173),y=r(10647),g=r(97651),m=r(5112)("replace"),b=Math.max,w=Math.min,x=a([].concat),O=a([].push),S=a("".indexOf),A=a("".slice),_="$0"==="a".replace(/./,"$0"),M=!!/./[m]&&""===/./[m]("a","$0");i("replace",(function(t,e,r){var a=M?"$":"$0";return[function(t,r){var n=p(this),a=null==t?void 0:v(t,m);return a?o(a,t,n,r):o(e,d(n),t,r)},function(t,o){var i=c(this),u=d(t);if("string"==typeof o&&-1===S(o,a)&&-1===S(o,"$<")){var p=r(e,i,u,o);if(p.done)return p.value}var v=s(o);v||(o=d(o));var m=i.global;if(m){var _=i.unicode;i.lastIndex=0}for(var M=[];;){var R=g(i,u);if(null===R)break;if(O(M,R),!m)break;""===d(R[0])&&(i.lastIndex=h(u,f(i.lastIndex),_))}for(var P,E="",j=0,T=0;T<M.length;T++){for(var k=d((R=M[T])[0]),C=b(w(l(R.index),u.length),0),D=[],I=1;I<R.length;I++)O(D,void 0===(P=R[I])?P:String(P));var $=R.groups;if(v){var L=x([k],D,C,u);void 0!==$&&O(L,$);var F=d(n(o,void 0,L))}else F=y(k,u,C,D,$,o);C>=j&&(E+=A(u,j,C)+F,j=C+k.length)}return E+A(u,j)}]}),!!u((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!_||M)},23123:(t,e,r)=>{"use strict";var n=r(22104),o=r(46916),a=r(1702),i=r(27007),u=r(47850),c=r(19670),s=r(84488),l=r(36707),f=r(31530),d=r(17466),p=r(41340),h=r(58173),v=r(41589),y=r(97651),g=r(22261),m=r(52999),b=r(47293),w=m.UNSUPPORTED_Y,x=4294967295,O=Math.min,S=[].push,A=a(/./.exec),_=a(S),M=a("".slice);i("split",(function(t,e,r){var a;return a="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var a=p(s(this)),i=void 0===r?x:r>>>0;if(0===i)return[];if(void 0===t)return[a];if(!u(t))return o(e,a,t,i);for(var c,l,f,d=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),y=0,m=new RegExp(t.source,h+"g");(c=o(g,m,a))&&!((l=m.lastIndex)>y&&(_(d,M(a,y,c.index)),c.length>1&&c.index<a.length&&n(S,d,v(c,1)),f=c[0].length,y=l,d.length>=i));)m.lastIndex===c.index&&m.lastIndex++;return y===a.length?!f&&A(m,"")||_(d,""):_(d,M(a,y)),d.length>i?v(d,0,i):d}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:o(e,this,t,r)}:e,[function(e,r){var n=s(this),i=null==e?void 0:h(e,t);return i?o(i,e,n,r):o(a,p(n),e,r)},function(t,n){var o=c(this),i=p(t),u=r(a,o,i,n,a!==e);if(u.done)return u.value;var s=l(o,RegExp),h=o.unicode,v=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(w?"g":"y"),g=new s(w?"^(?:"+o.source+")":o,v),m=void 0===n?x:n>>>0;if(0===m)return[];if(0===i.length)return null===y(g,i)?[i]:[];for(var b=0,S=0,A=[];S<i.length;){g.lastIndex=w?0:S;var R,P=y(g,w?M(i,S):i);if(null===P||(R=O(d(g.lastIndex+(w?S:0)),i.length))===b)S=f(i,S,h);else{if(_(A,M(i,b,S)),A.length===m)return A;for(var E=1;E<=P.length-1;E++)if(_(A,P[E]),A.length===m)return A;S=b=R}}return _(A,M(i,b)),A}]}),!!b((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),w)},73210:(t,e,r)=>{"use strict";var n=r(82109),o=r(53111).trim;n({target:"String",proto:!0,forced:r(76091)("trim")},{trim:function(){return o(this)}})},41817:(t,e,r)=>{"use strict";var n=r(82109),o=r(19781),a=r(17854),i=r(1702),u=r(92597),c=r(60614),s=r(47976),l=r(41340),f=r(3070).f,d=r(99920),p=a.Symbol,h=p&&p.prototype;if(o&&c(p)&&(!("description"in h)||void 0!==p().description)){var v={},y=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:l(arguments[0]),e=s(h,this)?new p(t):void 0===t?p():p(t);return""===t&&(v[e]=!0),e};d(y,p),y.prototype=h,h.constructor=y;var g="Symbol(test)"==String(p("test")),m=i(h.toString),b=i(h.valueOf),w=/^Symbol\((.*)\)[^)]+$/,x=i("".replace),O=i("".slice);f(h,"description",{configurable:!0,get:function(){var t=b(this),e=m(t);if(u(v,t))return"";var r=g?O(e,7,-1):x(e,w,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:y})}},32165:(t,e,r)=>{r(97235)("iterator")},82526:(t,e,r)=>{"use strict";var n=r(82109),o=r(17854),a=r(35005),i=r(22104),u=r(46916),c=r(1702),s=r(31913),l=r(19781),f=r(30133),d=r(47293),p=r(92597),h=r(43157),v=r(60614),y=r(70111),g=r(47976),m=r(52190),b=r(19670),w=r(47908),x=r(45656),O=r(34948),S=r(41340),A=r(79114),_=r(70030),M=r(81956),R=r(8006),P=r(1156),E=r(25181),j=r(31236),T=r(3070),k=r(36048),C=r(55296),D=r(50206),I=r(31320),$=r(72309),L=r(6200),F=r(3501),N=r(69711),U=r(5112),Y=r(6061),B=r(97235),H=r(58003),G=r(29909),Z=r(42092).forEach,W=L("hidden"),q="Symbol",K=U("toPrimitive"),V=G.set,z=G.getterFor(q),X=Object.prototype,Q=o.Symbol,J=Q&&Q.prototype,tt=o.TypeError,et=o.QObject,rt=a("JSON","stringify"),nt=j.f,ot=T.f,at=P.f,it=C.f,ut=c([].push),ct=$("symbols"),st=$("op-symbols"),lt=$("string-to-symbol-registry"),ft=$("symbol-to-string-registry"),dt=$("wks"),pt=!et||!et.prototype||!et.prototype.findChild,ht=l&&d((function(){return 7!=_(ot({},"a",{get:function(){return ot(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=nt(X,e);n&&delete X[e],ot(t,e,r),n&&t!==X&&ot(X,e,n)}:ot,vt=function(t,e){var r=ct[t]=_(J);return V(r,{type:q,tag:t,description:e}),l||(r.description=e),r},yt=function(t,e,r){t===X&&yt(st,e,r),b(t);var n=O(e);return b(r),p(ct,n)?(r.enumerable?(p(t,W)&&t[W][n]&&(t[W][n]=!1),r=_(r,{enumerable:A(0,!1)})):(p(t,W)||ot(t,W,A(1,{})),t[W][n]=!0),ht(t,n,r)):ot(t,n,r)},gt=function(t,e){b(t);var r=x(e),n=M(r).concat(xt(r));return Z(n,(function(e){l&&!u(mt,r,e)||yt(t,e,r[e])})),t},mt=function(t){var e=O(t),r=u(it,this,e);return!(this===X&&p(ct,e)&&!p(st,e))&&(!(r||!p(this,e)||!p(ct,e)||p(this,W)&&this[W][e])||r)},bt=function(t,e){var r=x(t),n=O(e);if(r!==X||!p(ct,n)||p(st,n)){var o=nt(r,n);return!o||!p(ct,n)||p(r,W)&&r[W][n]||(o.enumerable=!0),o}},wt=function(t){var e=at(x(t)),r=[];return Z(e,(function(t){p(ct,t)||p(F,t)||ut(r,t)})),r},xt=function(t){var e=t===X,r=at(e?st:x(t)),n=[];return Z(r,(function(t){!p(ct,t)||e&&!p(X,t)||ut(n,ct[t])})),n};if(f||(I(J=(Q=function(){if(g(J,this))throw tt("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?S(arguments[0]):void 0,e=N(t),r=function(t){this===X&&u(r,st,t),p(this,W)&&p(this[W],e)&&(this[W][e]=!1),ht(this,e,A(1,t))};return l&&pt&&ht(X,e,{configurable:!0,set:r}),vt(e,t)}).prototype,"toString",(function(){return z(this).tag})),I(Q,"withoutSetter",(function(t){return vt(N(t),t)})),C.f=mt,T.f=yt,k.f=gt,j.f=bt,R.f=P.f=wt,E.f=xt,Y.f=function(t){return vt(U(t),t)},l&&(ot(J,"description",{configurable:!0,get:function(){return z(this).description}}),s||I(X,"propertyIsEnumerable",mt,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!f,sham:!f},{Symbol:Q}),Z(M(dt),(function(t){B(t)})),n({target:q,stat:!0,forced:!f},{for:function(t){var e=S(t);if(p(lt,e))return lt[e];var r=Q(e);return lt[e]=r,ft[r]=e,r},keyFor:function(t){if(!m(t))throw tt(t+" is not a symbol");if(p(ft,t))return ft[t]},useSetter:function(){pt=!0},useSimple:function(){pt=!1}}),n({target:"Object",stat:!0,forced:!f,sham:!l},{create:function(t,e){return void 0===e?_(t):gt(_(t),e)},defineProperty:yt,defineProperties:gt,getOwnPropertyDescriptor:bt}),n({target:"Object",stat:!0,forced:!f},{getOwnPropertyNames:wt,getOwnPropertySymbols:xt}),n({target:"Object",stat:!0,forced:d((function(){E.f(1)}))},{getOwnPropertySymbols:function(t){return E.f(w(t))}}),rt&&n({target:"JSON",stat:!0,forced:!f||d((function(){var t=Q();return"[null]"!=rt([t])||"{}"!=rt({a:t})||"{}"!=rt(Object(t))}))},{stringify:function(t,e,r){var n=D(arguments),o=e;if((y(e)||void 0!==t)&&!m(t))return h(e)||(e=function(t,e){if(v(o)&&(e=u(o,this,t,e)),!m(e))return e}),n[1]=e,i(rt,null,n)}}),!J[K]){var Ot=J.valueOf;I(J,K,(function(t){return u(Ot,this)}))}H(Q,q),F[W]=!0},48675:(t,e,r)=>{"use strict";var n=r(90260),o=r(26244),a=r(19303),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("at",(function(t){var e=i(this),r=o(e),n=a(t),u=n>=0?n:r+n;return u<0||u>=r?void 0:e[u]}))},92990:(t,e,r)=>{"use strict";var n=r(1702),o=r(90260),a=n(r(1048)),i=o.aTypedArray;(0,o.exportTypedArrayMethod)("copyWithin",(function(t,e){return a(i(this),t,e,arguments.length>2?arguments[2]:void 0)}))},18927:(t,e,r)=>{"use strict";var n=r(90260),o=r(42092).every,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0)}))},33105:(t,e,r)=>{"use strict";var n=r(90260),o=r(46916),a=r(21285),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("fill",(function(t){var e=arguments.length;return o(a,i(this),t,e>1?arguments[1]:void 0,e>2?arguments[2]:void 0)}))},35035:(t,e,r)=>{"use strict";var n=r(90260),o=r(42092).filter,a=r(43074),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("filter",(function(t){var e=o(i(this),t,arguments.length>1?arguments[1]:void 0);return a(this,e)}))},7174:(t,e,r)=>{"use strict";var n=r(90260),o=r(42092).findIndex,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0)}))},74345:(t,e,r)=>{"use strict";var n=r(90260),o=r(42092).find,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0)}))},32846:(t,e,r)=>{"use strict";var n=r(90260),o=r(42092).forEach,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(t){o(a(this),t,arguments.length>1?arguments[1]:void 0)}))},44731:(t,e,r)=>{"use strict";var n=r(90260),o=r(41318).includes,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0)}))},77209:(t,e,r)=>{"use strict";var n=r(90260),o=r(41318).indexOf,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0)}))},96319:(t,e,r)=>{"use strict";var n=r(17854),o=r(47293),a=r(1702),i=r(90260),u=r(66992),c=r(5112)("iterator"),s=n.Uint8Array,l=a(u.values),f=a(u.keys),d=a(u.entries),p=i.aTypedArray,h=i.exportTypedArrayMethod,v=s&&s.prototype,y=!o((function(){v[c].call([1])})),g=!!v&&v.values&&v[c]===v.values&&"values"===v.values.name,m=function(){return l(p(this))};h("entries",(function(){return d(p(this))}),y),h("keys",(function(){return f(p(this))}),y),h("values",m,y||!g,{name:"values"}),h(c,m,y||!g,{name:"values"})},58867:(t,e,r)=>{"use strict";var n=r(90260),o=r(1702),a=n.aTypedArray,i=n.exportTypedArrayMethod,u=o([].join);i("join",(function(t){return u(a(this),t)}))},37789:(t,e,r)=>{"use strict";var n=r(90260),o=r(22104),a=r(86583),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(t){var e=arguments.length;return o(a,i(this),e>1?[t,arguments[1]]:[t])}))},33739:(t,e,r)=>{"use strict";var n=r(90260),o=r(42092).map,a=r(66304),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("map",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0,(function(t,e){return new(a(t))(e)}))}))},14483:(t,e,r)=>{"use strict";var n=r(90260),o=r(53671).right,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(t){var e=arguments.length;return o(a(this),t,e,e>1?arguments[1]:void 0)}))},29368:(t,e,r)=>{"use strict";var n=r(90260),o=r(53671).left,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(t){var e=arguments.length;return o(a(this),t,e,e>1?arguments[1]:void 0)}))},12056:(t,e,r)=>{"use strict";var n=r(90260),o=n.aTypedArray,a=n.exportTypedArrayMethod,i=Math.floor;a("reverse",(function(){for(var t,e=this,r=o(e).length,n=i(r/2),a=0;a<n;)t=e[a],e[a++]=e[--r],e[r]=t;return e}))},3462:(t,e,r)=>{"use strict";var n=r(17854),o=r(46916),a=r(90260),i=r(26244),u=r(84590),c=r(47908),s=r(47293),l=n.RangeError,f=n.Int8Array,d=f&&f.prototype,p=d&&d.set,h=a.aTypedArray,v=a.exportTypedArrayMethod,y=!s((function(){var t=new Uint8ClampedArray(2);return o(p,t,{length:1,0:3},1),3!==t[1]})),g=y&&a.NATIVE_ARRAY_BUFFER_VIEWS&&s((function(){var t=new f(2);return t.set(1),t.set("2",1),0!==t[0]||2!==t[1]}));v("set",(function(t){h(this);var e=u(arguments.length>1?arguments[1]:void 0,1),r=c(t);if(y)return o(p,this,r,e);var n=this.length,a=i(r),s=0;if(a+e>n)throw l("Wrong length");for(;s<a;)this[e+s]=r[s++]}),!y||g)},30678:(t,e,r)=>{"use strict";var n=r(90260),o=r(66304),a=r(47293),i=r(50206),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("slice",(function(t,e){for(var r=i(u(this),t,e),n=o(this),a=0,c=r.length,s=new n(c);c>a;)s[a]=r[a++];return s}),a((function(){new Int8Array(1).slice()})))},27462:(t,e,r)=>{"use strict";var n=r(90260),o=r(42092).some,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0)}))},33824:(t,e,r)=>{"use strict";var n=r(17854),o=r(1702),a=r(47293),i=r(19662),u=r(94362),c=r(90260),s=r(68886),l=r(30256),f=r(7392),d=r(98008),p=n.Array,h=c.aTypedArray,v=c.exportTypedArrayMethod,y=n.Uint16Array,g=y&&o(y.prototype.sort),m=!(!g||a((function(){g(new y(2),null)}))&&a((function(){g(new y(2),{})}))),b=!!g&&!a((function(){if(f)return f<74;if(s)return s<67;if(l)return!0;if(d)return d<602;var t,e,r=new y(516),n=p(516);for(t=0;t<516;t++)e=t%4,r[t]=515-t,n[t]=t-2*e+3;for(g(r,(function(t,e){return(t/4|0)-(e/4|0)})),t=0;t<516;t++)if(r[t]!==n[t])return!0}));v("sort",(function(t){return void 0!==t&&i(t),b?g(this,t):u(h(this),function(t){return function(e,r){return void 0!==t?+t(e,r)||0:r!=r?-1:e!=e?1:0===e&&0===r?1/e>0&&1/r<0?1:-1:e>r}}(t))}),!b||m)},55021:(t,e,r)=>{"use strict";var n=r(90260),o=r(17466),a=r(51400),i=r(66304),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(t,e){var r=u(this),n=r.length,c=a(t,n);return new(i(r))(r.buffer,r.byteOffset+c*r.BYTES_PER_ELEMENT,o((void 0===e?n:a(e,n))-c))}))},12974:(t,e,r)=>{"use strict";var n=r(17854),o=r(22104),a=r(90260),i=r(47293),u=r(50206),c=n.Int8Array,s=a.aTypedArray,l=a.exportTypedArrayMethod,f=[].toLocaleString,d=!!c&&i((function(){f.call(new c(1))}));l("toLocaleString",(function(){return o(f,d?u(s(this)):s(this),u(arguments))}),i((function(){return[1,2].toLocaleString()!=new c([1,2]).toLocaleString()}))||!i((function(){c.prototype.toLocaleString.call([1,2])})))},15016:(t,e,r)=>{"use strict";var n=r(90260).exportTypedArrayMethod,o=r(47293),a=r(17854),i=r(1702),u=a.Uint8Array,c=u&&u.prototype||{},s=[].toString,l=i([].join);o((function(){s.call({})}))&&(s=function(){return l(this)});var f=c.toString!=s;n("toString",s,f)},82472:(t,e,r)=>{r(19843)("Uint8",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},38012:(t,e,r)=>{r(48675)},54747:(t,e,r)=>{var n=r(17854),o=r(48324),a=r(98509),i=r(18533),u=r(68880),c=function(t){if(t&&t.forEach!==i)try{u(t,"forEach",i)}catch(e){t.forEach=i}};for(var s in o)o[s]&&c(n[s]&&n[s].prototype);c(a)},33948:(t,e,r)=>{var n=r(17854),o=r(48324),a=r(98509),i=r(66992),u=r(68880),c=r(5112),s=c("iterator"),l=c("toStringTag"),f=i.values,d=function(t,e){if(t){if(t[s]!==f)try{u(t,s,f)}catch(e){t[s]=f}if(t[l]||u(t,l,e),o[e])for(var r in i)if(t[r]!==i[r])try{u(t,r,i[r])}catch(e){t[r]=i[r]}}};for(var p in o)d(n[p]&&n[p].prototype,p);d(a,"DOMTokenList")},41637:(t,e,r)=>{"use strict";r(66992);var n=r(82109),o=r(17854),a=r(35005),i=r(46916),u=r(1702),c=r(590),s=r(31320),l=r(12248),f=r(58003),d=r(24994),p=r(29909),h=r(25787),v=r(60614),y=r(92597),g=r(49974),m=r(70648),b=r(19670),w=r(70111),x=r(41340),O=r(70030),S=r(79114),A=r(18554),_=r(71246),M=r(5112),R=r(94362),P=M("iterator"),E="URLSearchParams",j="URLSearchParamsIterator",T=p.set,k=p.getterFor(E),C=p.getterFor(j),D=a("fetch"),I=a("Request"),$=a("Headers"),L=I&&I.prototype,F=$&&$.prototype,N=o.RegExp,U=o.TypeError,Y=o.decodeURIComponent,B=o.encodeURIComponent,H=u("".charAt),G=u([].join),Z=u([].push),W=u("".replace),q=u([].shift),K=u([].splice),V=u("".split),z=u("".slice),X=/\+/g,Q=Array(4),J=function(t){return Q[t-1]||(Q[t-1]=N("((?:%[\\da-f]{2}){"+t+"})","gi"))},tt=function(t){try{return Y(t)}catch(e){return t}},et=function(t){var e=W(t,X," "),r=4;try{return Y(e)}catch(t){for(;r;)e=W(e,J(r--),tt);return e}},rt=/[!'()~]|%20/g,nt={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},ot=function(t){return nt[t]},at=function(t){return W(B(t),rt,ot)},it=function(t,e){if(t<e)throw U("Not enough arguments")},ut=d((function(t,e){T(this,{type:j,iterator:A(k(t).entries),kind:e})}),"Iterator",(function(){var t=C(this),e=t.kind,r=t.iterator.next(),n=r.value;return r.done||(r.value="keys"===e?n.key:"values"===e?n.value:[n.key,n.value]),r}),!0),ct=function(t){this.entries=[],this.url=null,void 0!==t&&(w(t)?this.parseObject(t):this.parseQuery("string"==typeof t?"?"===H(t,0)?z(t,1):t:x(t)))};ct.prototype={type:E,bindURL:function(t){this.url=t,this.update()},parseObject:function(t){var e,r,n,o,a,u,c,s=_(t);if(s)for(r=(e=A(t,s)).next;!(n=i(r,e)).done;){if(a=(o=A(b(n.value))).next,(u=i(a,o)).done||(c=i(a,o)).done||!i(a,o).done)throw U("Expected sequence with length 2");Z(this.entries,{key:x(u.value),value:x(c.value)})}else for(var l in t)y(t,l)&&Z(this.entries,{key:l,value:x(t[l])})},parseQuery:function(t){if(t)for(var e,r,n=V(t,"&"),o=0;o<n.length;)(e=n[o++]).length&&(r=V(e,"="),Z(this.entries,{key:et(q(r)),value:et(G(r,"="))}))},serialize:function(){for(var t,e=this.entries,r=[],n=0;n<e.length;)t=e[n++],Z(r,at(t.key)+"="+at(t.value));return G(r,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var st=function(){h(this,lt);var t=arguments.length>0?arguments[0]:void 0;T(this,new ct(t))},lt=st.prototype;if(l(lt,{append:function(t,e){it(arguments.length,2);var r=k(this);Z(r.entries,{key:x(t),value:x(e)}),r.updateURL()},delete:function(t){it(arguments.length,1);for(var e=k(this),r=e.entries,n=x(t),o=0;o<r.length;)r[o].key===n?K(r,o,1):o++;e.updateURL()},get:function(t){it(arguments.length,1);for(var e=k(this).entries,r=x(t),n=0;n<e.length;n++)if(e[n].key===r)return e[n].value;return null},getAll:function(t){it(arguments.length,1);for(var e=k(this).entries,r=x(t),n=[],o=0;o<e.length;o++)e[o].key===r&&Z(n,e[o].value);return n},has:function(t){it(arguments.length,1);for(var e=k(this).entries,r=x(t),n=0;n<e.length;)if(e[n++].key===r)return!0;return!1},set:function(t,e){it(arguments.length,1);for(var r,n=k(this),o=n.entries,a=!1,i=x(t),u=x(e),c=0;c<o.length;c++)(r=o[c]).key===i&&(a?K(o,c--,1):(a=!0,r.value=u));a||Z(o,{key:i,value:u}),n.updateURL()},sort:function(){var t=k(this);R(t.entries,(function(t,e){return t.key>e.key?1:-1})),t.updateURL()},forEach:function(t){for(var e,r=k(this).entries,n=g(t,arguments.length>1?arguments[1]:void 0),o=0;o<r.length;)n((e=r[o++]).value,e.key,this)},keys:function(){return new ut(this,"keys")},values:function(){return new ut(this,"values")},entries:function(){return new ut(this,"entries")}},{enumerable:!0}),s(lt,P,lt.entries,{name:"entries"}),s(lt,"toString",(function(){return k(this).serialize()}),{enumerable:!0}),f(st,E),n({global:!0,forced:!c},{URLSearchParams:st}),!c&&v($)){var ft=u(F.has),dt=u(F.set),pt=function(t){if(w(t)){var e,r=t.body;if(m(r)===E)return e=t.headers?new $(t.headers):new $,ft(e,"content-type")||dt(e,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),O(t,{body:S(0,x(r)),headers:S(0,e)})}return t};if(v(D)&&n({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return D(t,arguments.length>1?pt(arguments[1]):{})}}),v(I)){var ht=function(t){return h(this,L),new I(t,arguments.length>1?pt(arguments[1]):{})};L.constructor=ht,ht.prototype=L,n({global:!0,forced:!0},{Request:ht})}}t.exports={URLSearchParams:st,getState:k}},60285:(t,e,r)=>{"use strict";r(78783);var n,o=r(82109),a=r(19781),i=r(590),u=r(17854),c=r(49974),s=r(1702),l=r(36048).f,f=r(31320),d=r(25787),p=r(92597),h=r(21574),v=r(48457),y=r(41589),g=r(28710).codeAt,m=r(33197),b=r(41340),w=r(58003),x=r(41637),O=r(29909),S=O.set,A=O.getterFor("URL"),_=x.URLSearchParams,M=x.getState,R=u.URL,P=u.TypeError,E=u.parseInt,j=Math.floor,T=Math.pow,k=s("".charAt),C=s(/./.exec),D=s([].join),I=s(1..toString),$=s([].pop),L=s([].push),F=s("".replace),N=s([].shift),U=s("".split),Y=s("".slice),B=s("".toLowerCase),H=s([].unshift),G="Invalid scheme",Z="Invalid host",W="Invalid port",q=/[a-z]/i,K=/[\d+-.a-z]/i,V=/\d/,z=/^0x/i,X=/^[0-7]+$/,Q=/^\d+$/,J=/^[\da-f]+$/i,tt=/[\0\t\n\r #%/:<>?@[\\\]^|]/,et=/[\0\t\n\r #/:<>?@[\\\]^|]/,rt=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,nt=/[\t\n\r]/g,ot=function(t){var e,r,n,o;if("number"==typeof t){for(e=[],r=0;r<4;r++)H(e,t%256),t=j(t/256);return D(e,".")}if("object"==typeof t){for(e="",n=function(t){for(var e=null,r=1,n=null,o=0,a=0;a<8;a++)0!==t[a]?(o>r&&(e=n,r=o),n=null,o=0):(null===n&&(n=a),++o);return o>r&&(e=n,r=o),e}(t),r=0;r<8;r++)o&&0===t[r]||(o&&(o=!1),n===r?(e+=r?":":"::",o=!0):(e+=I(t[r],16),r<7&&(e+=":")));return"["+e+"]"}return t},at={},it=h({},at,{" ":1,'"':1,"<":1,">":1,"`":1}),ut=h({},it,{"#":1,"?":1,"{":1,"}":1}),ct=h({},ut,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),st=function(t,e){var r=g(t,0);return r>32&&r<127&&!p(e,t)?t:encodeURIComponent(t)},lt={ftp:21,file:null,http:80,https:443,ws:80,wss:443},ft=function(t,e){var r;return 2==t.length&&C(q,k(t,0))&&(":"==(r=k(t,1))||!e&&"|"==r)},dt=function(t){var e;return t.length>1&&ft(Y(t,0,2))&&(2==t.length||"/"===(e=k(t,2))||"\\"===e||"?"===e||"#"===e)},pt=function(t){return"."===t||"%2e"===B(t)},ht={},vt={},yt={},gt={},mt={},bt={},wt={},xt={},Ot={},St={},At={},_t={},Mt={},Rt={},Pt={},Et={},jt={},Tt={},kt={},Ct={},Dt={},It=function(t,e,r){var n,o,a,i=b(t);if(e){if(o=this.parse(i))throw P(o);this.searchParams=null}else{if(void 0!==r&&(n=new It(r,!0)),o=this.parse(i,null,n))throw P(o);(a=M(new _)).bindURL(this),this.searchParams=a}};It.prototype={type:"URL",parse:function(t,e,r){var o,a,i,u,c,s=this,l=e||ht,f=0,d="",h=!1,g=!1,m=!1;for(t=b(t),e||(s.scheme="",s.username="",s.password="",s.host=null,s.port=null,s.path=[],s.query=null,s.fragment=null,s.cannotBeABaseURL=!1,t=F(t,rt,"")),t=F(t,nt,""),o=v(t);f<=o.length;){switch(a=o[f],l){case ht:if(!a||!C(q,a)){if(e)return G;l=yt;continue}d+=B(a),l=vt;break;case vt:if(a&&(C(K,a)||"+"==a||"-"==a||"."==a))d+=B(a);else{if(":"!=a){if(e)return G;d="",l=yt,f=0;continue}if(e&&(s.isSpecial()!=p(lt,d)||"file"==d&&(s.includesCredentials()||null!==s.port)||"file"==s.scheme&&!s.host))return;if(s.scheme=d,e)return void(s.isSpecial()&&lt[s.scheme]==s.port&&(s.port=null));d="","file"==s.scheme?l=Rt:s.isSpecial()&&r&&r.scheme==s.scheme?l=gt:s.isSpecial()?l=xt:"/"==o[f+1]?(l=mt,f++):(s.cannotBeABaseURL=!0,L(s.path,""),l=kt)}break;case yt:if(!r||r.cannotBeABaseURL&&"#"!=a)return G;if(r.cannotBeABaseURL&&"#"==a){s.scheme=r.scheme,s.path=y(r.path),s.query=r.query,s.fragment="",s.cannotBeABaseURL=!0,l=Dt;break}l="file"==r.scheme?Rt:bt;continue;case gt:if("/"!=a||"/"!=o[f+1]){l=bt;continue}l=Ot,f++;break;case mt:if("/"==a){l=St;break}l=Tt;continue;case bt:if(s.scheme=r.scheme,a==n)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=y(r.path),s.query=r.query;else if("/"==a||"\\"==a&&s.isSpecial())l=wt;else if("?"==a)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=y(r.path),s.query="",l=Ct;else{if("#"!=a){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=y(r.path),s.path.length--,l=Tt;continue}s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=y(r.path),s.query=r.query,s.fragment="",l=Dt}break;case wt:if(!s.isSpecial()||"/"!=a&&"\\"!=a){if("/"!=a){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,l=Tt;continue}l=St}else l=Ot;break;case xt:if(l=Ot,"/"!=a||"/"!=k(d,f+1))continue;f++;break;case Ot:if("/"!=a&&"\\"!=a){l=St;continue}break;case St:if("@"==a){h&&(d="%40"+d),h=!0,i=v(d);for(var w=0;w<i.length;w++){var x=i[w];if(":"!=x||m){var O=st(x,ct);m?s.password+=O:s.username+=O}else m=!0}d=""}else if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&s.isSpecial()){if(h&&""==d)return"Invalid authority";f-=v(d).length+1,d="",l=At}else d+=a;break;case At:case _t:if(e&&"file"==s.scheme){l=Et;continue}if(":"!=a||g){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&s.isSpecial()){if(s.isSpecial()&&""==d)return Z;if(e&&""==d&&(s.includesCredentials()||null!==s.port))return;if(u=s.parseHost(d))return u;if(d="",l=jt,e)return;continue}"["==a?g=!0:"]"==a&&(g=!1),d+=a}else{if(""==d)return Z;if(u=s.parseHost(d))return u;if(d="",l=Mt,e==_t)return}break;case Mt:if(!C(V,a)){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&s.isSpecial()||e){if(""!=d){var S=E(d,10);if(S>65535)return W;s.port=s.isSpecial()&&S===lt[s.scheme]?null:S,d=""}if(e)return;l=jt;continue}return W}d+=a;break;case Rt:if(s.scheme="file","/"==a||"\\"==a)l=Pt;else{if(!r||"file"!=r.scheme){l=Tt;continue}if(a==n)s.host=r.host,s.path=y(r.path),s.query=r.query;else if("?"==a)s.host=r.host,s.path=y(r.path),s.query="",l=Ct;else{if("#"!=a){dt(D(y(o,f),""))||(s.host=r.host,s.path=y(r.path),s.shortenPath()),l=Tt;continue}s.host=r.host,s.path=y(r.path),s.query=r.query,s.fragment="",l=Dt}}break;case Pt:if("/"==a||"\\"==a){l=Et;break}r&&"file"==r.scheme&&!dt(D(y(o,f),""))&&(ft(r.path[0],!0)?L(s.path,r.path[0]):s.host=r.host),l=Tt;continue;case Et:if(a==n||"/"==a||"\\"==a||"?"==a||"#"==a){if(!e&&ft(d))l=Tt;else if(""==d){if(s.host="",e)return;l=jt}else{if(u=s.parseHost(d))return u;if("localhost"==s.host&&(s.host=""),e)return;d="",l=jt}continue}d+=a;break;case jt:if(s.isSpecial()){if(l=Tt,"/"!=a&&"\\"!=a)continue}else if(e||"?"!=a)if(e||"#"!=a){if(a!=n&&(l=Tt,"/"!=a))continue}else s.fragment="",l=Dt;else s.query="",l=Ct;break;case Tt:if(a==n||"/"==a||"\\"==a&&s.isSpecial()||!e&&("?"==a||"#"==a)){if(".."===(c=B(c=d))||"%2e."===c||".%2e"===c||"%2e%2e"===c?(s.shortenPath(),"/"==a||"\\"==a&&s.isSpecial()||L(s.path,"")):pt(d)?"/"==a||"\\"==a&&s.isSpecial()||L(s.path,""):("file"==s.scheme&&!s.path.length&&ft(d)&&(s.host&&(s.host=""),d=k(d,0)+":"),L(s.path,d)),d="","file"==s.scheme&&(a==n||"?"==a||"#"==a))for(;s.path.length>1&&""===s.path[0];)N(s.path);"?"==a?(s.query="",l=Ct):"#"==a&&(s.fragment="",l=Dt)}else d+=st(a,ut);break;case kt:"?"==a?(s.query="",l=Ct):"#"==a?(s.fragment="",l=Dt):a!=n&&(s.path[0]+=st(a,at));break;case Ct:e||"#"!=a?a!=n&&("'"==a&&s.isSpecial()?s.query+="%27":s.query+="#"==a?"%23":st(a,at)):(s.fragment="",l=Dt);break;case Dt:a!=n&&(s.fragment+=st(a,it))}f++}},parseHost:function(t){var e,r,n;if("["==k(t,0)){if("]"!=k(t,t.length-1))return Z;if(e=function(t){var e,r,n,o,a,i,u,c=[0,0,0,0,0,0,0,0],s=0,l=null,f=0,d=function(){return k(t,f)};if(":"==d()){if(":"!=k(t,1))return;f+=2,l=++s}for(;d();){if(8==s)return;if(":"!=d()){for(e=r=0;r<4&&C(J,d());)e=16*e+E(d(),16),f++,r++;if("."==d()){if(0==r)return;if(f-=r,s>6)return;for(n=0;d();){if(o=null,n>0){if(!("."==d()&&n<4))return;f++}if(!C(V,d()))return;for(;C(V,d());){if(a=E(d(),10),null===o)o=a;else{if(0==o)return;o=10*o+a}if(o>255)return;f++}c[s]=256*c[s]+o,2!=++n&&4!=n||s++}if(4!=n)return;break}if(":"==d()){if(f++,!d())return}else if(d())return;c[s++]=e}else{if(null!==l)return;f++,l=++s}}if(null!==l)for(i=s-l,s=7;0!=s&&i>0;)u=c[s],c[s--]=c[l+i-1],c[l+--i]=u;else if(8!=s)return;return c}(Y(t,1,-1)),!e)return Z;this.host=e}else if(this.isSpecial()){if(t=m(t),C(tt,t))return Z;if(e=function(t){var e,r,n,o,a,i,u,c=U(t,".");if(c.length&&""==c[c.length-1]&&c.length--,(e=c.length)>4)return t;for(r=[],n=0;n<e;n++){if(""==(o=c[n]))return t;if(a=10,o.length>1&&"0"==k(o,0)&&(a=C(z,o)?16:8,o=Y(o,8==a?1:2)),""===o)i=0;else{if(!C(10==a?Q:8==a?X:J,o))return t;i=E(o,a)}L(r,i)}for(n=0;n<e;n++)if(i=r[n],n==e-1){if(i>=T(256,5-e))return null}else if(i>255)return null;for(u=$(r),n=0;n<r.length;n++)u+=r[n]*T(256,3-n);return u}(t),null===e)return Z;this.host=e}else{if(C(et,t))return Z;for(e="",r=v(t),n=0;n<r.length;n++)e+=st(r[n],at);this.host=e}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"==this.scheme},includesCredentials:function(){return""!=this.username||""!=this.password},isSpecial:function(){return p(lt,this.scheme)},shortenPath:function(){var t=this.path,e=t.length;!e||"file"==this.scheme&&1==e&&ft(t[0],!0)||t.length--},serialize:function(){var t=this,e=t.scheme,r=t.username,n=t.password,o=t.host,a=t.port,i=t.path,u=t.query,c=t.fragment,s=e+":";return null!==o?(s+="//",t.includesCredentials()&&(s+=r+(n?":"+n:"")+"@"),s+=ot(o),null!==a&&(s+=":"+a)):"file"==e&&(s+="//"),s+=t.cannotBeABaseURL?i[0]:i.length?"/"+D(i,"/"):"",null!==u&&(s+="?"+u),null!==c&&(s+="#"+c),s},setHref:function(t){var e=this.parse(t);if(e)throw P(e);this.searchParams.update()},getOrigin:function(){var t=this.scheme,e=this.port;if("blob"==t)try{return new $t(t.path[0]).origin}catch(t){return"null"}return"file"!=t&&this.isSpecial()?t+"://"+ot(this.host)+(null!==e?":"+e:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(t){this.parse(b(t)+":",ht)},getUsername:function(){return this.username},setUsername:function(t){var e=v(b(t));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var r=0;r<e.length;r++)this.username+=st(e[r],ct)}},getPassword:function(){return this.password},setPassword:function(t){var e=v(b(t));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var r=0;r<e.length;r++)this.password+=st(e[r],ct)}},getHost:function(){var t=this.host,e=this.port;return null===t?"":null===e?ot(t):ot(t)+":"+e},setHost:function(t){this.cannotBeABaseURL||this.parse(t,At)},getHostname:function(){var t=this.host;return null===t?"":ot(t)},setHostname:function(t){this.cannotBeABaseURL||this.parse(t,_t)},getPort:function(){var t=this.port;return null===t?"":b(t)},setPort:function(t){this.cannotHaveUsernamePasswordPort()||(""==(t=b(t))?this.port=null:this.parse(t,Mt))},getPathname:function(){var t=this.path;return this.cannotBeABaseURL?t[0]:t.length?"/"+D(t,"/"):""},setPathname:function(t){this.cannotBeABaseURL||(this.path=[],this.parse(t,jt))},getSearch:function(){var t=this.query;return t?"?"+t:""},setSearch:function(t){""==(t=b(t))?this.query=null:("?"==k(t,0)&&(t=Y(t,1)),this.query="",this.parse(t,Ct)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var t=this.fragment;return t?"#"+t:""},setHash:function(t){""!=(t=b(t))?("#"==k(t,0)&&(t=Y(t,1)),this.fragment="",this.parse(t,Dt)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var $t=function(t){var e=d(this,Lt),r=arguments.length>1?arguments[1]:void 0,n=S(e,new It(t,!1,r));a||(e.href=n.serialize(),e.origin=n.getOrigin(),e.protocol=n.getProtocol(),e.username=n.getUsername(),e.password=n.getPassword(),e.host=n.getHost(),e.hostname=n.getHostname(),e.port=n.getPort(),e.pathname=n.getPathname(),e.search=n.getSearch(),e.searchParams=n.getSearchParams(),e.hash=n.getHash())},Lt=$t.prototype,Ft=function(t,e){return{get:function(){return A(this)[t]()},set:e&&function(t){return A(this)[e](t)},configurable:!0,enumerable:!0}};if(a&&l(Lt,{href:Ft("serialize","setHref"),origin:Ft("getOrigin"),protocol:Ft("getProtocol","setProtocol"),username:Ft("getUsername","setUsername"),password:Ft("getPassword","setPassword"),host:Ft("getHost","setHost"),hostname:Ft("getHostname","setHostname"),port:Ft("getPort","setPort"),pathname:Ft("getPathname","setPathname"),search:Ft("getSearch","setSearch"),searchParams:Ft("getSearchParams"),hash:Ft("getHash","setHash")}),f(Lt,"toJSON",(function(){return A(this).serialize()}),{enumerable:!0}),f(Lt,"toString",(function(){return A(this).serialize()}),{enumerable:!0}),R){var Nt=R.createObjectURL,Ut=R.revokeObjectURL;Nt&&f($t,"createObjectURL",c(Nt,R)),Ut&&f($t,"revokeObjectURL",c(Ut,R))}w($t,"URL"),o({global:!0,forced:!i,sham:!a},{URL:$t})},55052:(t,e,r)=>{const n=r(74584);t.exports=t=>{for(const e of n)if(e.regex.test(t))return e.encoding;return null}},39293:t=>{t.exports=t=>{for(let e=0;e<t.length;e++)if("�"===t[e])return!1;return!0}},68581:(t,e,r)=>{const n=r(23409),o=r(34799);t.exports=(t,e)=>{t.languageArr=n(t,e.encoding),e.language=t.languageArr.reduce(((t,e)=>t.count>e.count?t:e)).name,t.pos=t.languageArr.findIndex((t=>t.name===e.language)),e.encoding||(e.encoding=t.languageArr[t.pos].encoding);const r=o(t,e);return e.confidence.encoding||(e.confidence.encoding=r),e.confidence.language=r,t.languageArr[t.pos].count||(e.language=null,e.confidence.language=null),e}},34799:t=>{t.exports=(t,e)=>{const r=new RegExp(/\d|\n|\s|\-|\.|\,|\:|\;|\?|\!|\<|\>|\[|\]|\{|\}|\&|\=|\|/,"g"),n=t.content.replace(r,"").length,o=t.languageArr,a=t.pos,i=o.reduce(((t,r)=>t.name===e.language?r:r.name===e.language||t.count>=r.count?t:r)),u=o[a].count/(i.count+o[a].count),c=o[a].count/n;let s,l=null,f=null;return"UTF-8"===e.encoding||"UTF-16LE"===e.encoding?(l=o[a].utfFrequency?.8*o[a].utfFrequency.low:null,f=o[a].utfFrequency?(o[a].utfFrequency.low+o[a].utfFrequency.high)/2:null):(l=o[a].isoFrequency?.8*o[a].isoFrequency.low:null,f=o[a].isoFrequency?(o[a].isoFrequency.low+o[a].isoFrequency.high)/2:null),s=l&&f?c>=f?1:Number(c>l?(u+(c-l)/(f-l)*(1-u)).toFixed(2):(u*(c/l)).toFixed(2)):null,s}},23409:(t,e,r)=>{const n=r(93942);t.exports=(t,e)=>{const r=[];n.forEach((t=>{const e={};Object.keys(t).forEach((r=>{"count"!==r?e[r]=t[r]:e.count=0})),r.push(e)}));const o=e?"utfRegex":"isoRegex";return r.forEach((e=>{if(e[o]){const r=t.content.match(e[o]);r&&(e.count=r.length)}})),r}},74584:t=>{t.exports=[{encoding:"UTF-EBCDIC",regex:new RegExp("221 115 102 115")},{encoding:"GB-18030",regex:new RegExp("132 49 149 51")},{encoding:"UTF-32LE",regex:new RegExp("255 254 0 0")},{encoding:"UTF-32BE",regex:new RegExp("0 0 254 255")},{encoding:"UTF-8",regex:new RegExp("239 187 191")},{encoding:"UTF-7",regex:new RegExp("43 47 118")},{encoding:"UTF-1",regex:new RegExp("247 100 76")},{encoding:"SCSU",regex:new RegExp("14 254 255")},{encoding:"BOCU-1",regex:new RegExp("251 238 40")},{encoding:"UTF-16BE",regex:new RegExp("254 255")},{encoding:"UTF-16LE",regex:new RegExp("255 254")}]},93942:t=>{const e="gi",r={czech:new RegExp(/jsem|jsi/,e),hungarian:new RegExp(/\snem\s/,e),slovak:new RegExp(/poriadku|myslím|\ssme\s/,e),slovenian:new RegExp(/\skaj\s|lahko|zdaj/,e),albanian:new RegExp(/nuk/,e),english:new RegExp(/ the /,e),french:new RegExp(/c'est/,e),portuguese:new RegExp(/ não /,e),spanish:new RegExp(/estaba|\smuy\s|siempre|ahora/,e),german:new RegExp(/\sdas\s/,e),italian:new RegExp(/\sche\s/,e),danish:new RegExp(/hvad|noget/,e),norwegian:new RegExp(/deg/,e),swedish:new RegExp(/ jag /,e),dutch:new RegExp(/ het /,e),finnish:new RegExp(/hän/,e),"serbo-croatian":new RegExp(/ sam | kako /,e),estonian:new RegExp(/\sseda\s|\spole\s|midagi/,e),icelandic:new RegExp(/Það/,e),"malay-indonesian":new RegExp(/tidak/,e),turkish:new RegExp(/ bir /,e),lithuanian:new RegExp(/taip|\stai\s/,e),bengali:new RegExp(/এটা/,e),hindi:new RegExp(/हैं/,e),urdu:new RegExp(/ایک/,e),vietnamese:new RegExp(/ không /,e)},n={polish:{low:.004355,high:.005102},czech:{low:.004433,high:.007324},hungarian:{low:.004994,high:.005183},romanian:{low:.003319,high:.00419},slovak:{low:.001736,high:.002557},slovenian:{low:.004111,high:.004959},albanian:{low:.003773,high:.007313},ukrainian:{low:.002933,high:.005389},english:{low:.004679,high:.00758},french:{low:.003016,high:.004825},portuguese:{low:.003406,high:.005032},spanish:{low:.002348,high:.002881},german:{low:.004044,high:.004391},italian:{low:.003889,high:.005175},danish:{low:.00363,high:.004189},norwegian:{low:.00241,high:.003918},swedish:{low:.004916,high:.007221},dutch:{low:.003501,high:.00415},finnish:{low:.003308,high:.005135},"serbo-croatian":{low:.002568,high:.005182},estonian:{low:.002892,high:.003963},icelandic:{low:.004366,high:.004366},"malay-indonesian":{low:.002825,high:.003932},greek:{low:.00344,high:.004862},turkish:{low:.002915,high:.004588},hebrew:{low:.003663,high:.004666},lithuanian:{low:.003277,high:.003768},bengali:{low:.003155,high:.005236},hindi:{low:.004159,high:.006478},urdu:{low:.004118,high:.005851},vietnamese:{low:.003387,high:.005191}};t.exports=[{name:"polish",count:0,utfRegex:new RegExp(/się/,e),isoRegex:new RegExp(/siê/,e),encoding:"CP1250",utfFrequency:n.polish,isoFrequency:n.polish},{name:"czech",count:0,utfRegex:r.czech,isoRegex:r.czech,encoding:"CP1250",utfFrequency:n.czech,isoFrequency:n.czech},{name:"hungarian",count:0,utfRegex:r.hungarian,isoRegex:r.hungarian,encoding:"CP1250",utfFrequency:n.hungarian,isoFrequency:n.hungarian},{name:"romanian",count:0,utfRegex:new RegExp(/sunt|eşti/,e),isoRegex:new RegExp(/sunt|eºti/,e),encoding:"CP1250",utfFrequency:n.romanian,isoFrequency:n.romanian},{name:"slovak",count:0,utfRegex:r.slovak,isoRegex:r.slovak,encoding:"CP1250",utfFrequency:n.slovak,isoFrequency:n.slovak},{name:"slovenian",count:0,utfRegex:r.slovenian,isoRegex:r.slovenian,encoding:"CP1250",utfFrequency:n.slovenian,isoFrequency:n.slovenian},{name:"albanian",count:0,utfRegex:r.albanian,isoRegex:r.albanian,encoding:"CP1250",utfFrequency:n.albanian,isoFrequency:n.albanian},{name:"russian",count:0,utfRegex:new RegExp(/что/,e),isoRegex:new RegExp(/÷òî/,e),encoding:"CP1251",utfFrequency:{low:.004965,high:.005341},isoFrequency:{low:.003884,high:.003986}},{name:"ukrainian",count:0,utfRegex:new RegExp(/він|але/,e),isoRegex:new RegExp(/â³í|àëå/,e),encoding:"CP1251",utfFrequency:n.ukrainian,isoFrequency:n.ukrainian},{name:"bulgarian",count:0,utfRegex:new RegExp(/това|какво/,e),isoRegex:new RegExp(/òîâà|äîáðå|êaêâo/,e),encoding:"CP1251",utfFrequency:{low:.005225,high:.005628},isoFrequency:{low:.002767,high:.004951}},{name:"english",count:0,utfRegex:r.english,isoRegex:r.english,encoding:"CP1252",utfFrequency:n.english,isoFrequency:n.english},{name:"french",count:0,utfRegex:r.french,isoRegex:r.french,encoding:"CP1252",utfFrequency:n.french,isoFrequency:n.french},{name:"portuguese",count:0,utfRegex:r.portuguese,isoRegex:r.portuguese,encoding:"CP1252",utfFrequency:n.portuguese,isoFrequency:n.portuguese},{name:"spanish",count:0,utfRegex:r.spanish,isoRegex:r.spanish,encoding:"CP1252",utfFrequency:n.spanish,isoFrequency:n.spanish},{name:"german",count:0,utfRegex:r.german,isoRegex:r.german,encoding:"CP1252",utfFrequency:n.german,isoFrequency:n.german},{name:"italian",count:0,utfRegex:r.italian,isoRegex:r.italian,encoding:"CP1252",utfFrequency:n.italian,isoFrequency:n.italian},{name:"danish",count:0,utfRegex:r.danish,isoRegex:r.danish,encoding:"CP1252",utfFrequency:n.danish,isoFrequency:n.danish},{name:"norwegian",count:0,utfRegex:r.norwegian,isoRegex:r.norwegian,encoding:"CP1252",utfFrequency:n.norwegian,isoFrequency:n.norwegian},{name:"swedish",count:0,utfRegex:r.swedish,isoRegex:r.swedish,encoding:"CP1252",utfFrequency:n.swedish,isoFrequency:n.swedish},{name:"dutch",count:0,utfRegex:r.dutch,isoRegex:r.dutch,encoding:"CP1252",utfFrequency:n.dutch,isoFrequency:n.dutch},{name:"finnish",count:0,utfRegex:r.finnish,isoRegex:r.finnish,encoding:"CP1252",utfFrequency:n.finnish,isoFrequency:n.finnish},{name:"serbo-croatian",count:0,utfRegex:r["serbo-croatian"],isoRegex:r["serbo-croatian"],encoding:"CP1252",utfFrequency:n["serbo-croatian"],isoFrequency:n["serbo-croatian"]},{name:"estonian",count:0,utfRegex:r.estonian,isoRegex:r.estonian,encoding:"CP1252",utfFrequency:n.estonian,isoFrequency:n.estonian},{name:"icelandic",count:0,utfRegex:r.icelandic,isoRegex:r.icelandic,encoding:"CP1252",utfFrequency:n.icelandic,isoFrequency:n.icelandic},{name:"malay-indonesian",count:0,utfRegex:r["malay-indonesian"],isoRegex:r["malay-indonesian"],encoding:"CP1252",utfFrequency:n["malay-indonesian"],isoFrequency:n["malay-indonesian"]},{name:"greek",count:0,utfRegex:new RegExp(/είναι/,e),isoRegex:new RegExp(/åßíáé/,e),encoding:"CP1253",utfFrequency:n.greek,isoFrequency:n.greek},{name:"turkish",count:0,utfRegex:r.turkish,isoRegex:r.turkish,encoding:"CP1254",utfFrequency:n.turkish,isoFrequency:n.turkish},{name:"hebrew",count:0,utfRegex:new RegExp(/אתה/,e),isoRegex:new RegExp(/àúä/,e),encoding:"CP1255",utfFrequency:n.hebrew,isoFrequency:n.hebrew},{name:"arabic",count:0,utfRegex:new RegExp(/هذا/,e),isoRegex:new RegExp(/åðç/,e),encoding:"CP1256",utfFrequency:{low:.003522,high:.004348},isoFrequency:{low:.003773,high:.005559}},{name:"farsi-persian",count:0,utfRegex:new RegExp(/اون/,e),isoRegex:new RegExp(/çíä/,e),encoding:"CP1256",utfFrequency:{low:.002761,high:.004856},isoFrequency:{low:.00301,high:.006646}},{name:"lithuanian",count:0,utfRegex:r.lithuanian,isoRegex:r.lithuanian,encoding:"CP1257",utfFrequency:n.lithuanian,isoFrequency:n.lithuanian},{name:"chinese-simplified",count:0,utfRegex:new RegExp(/么/,e),isoRegex:new RegExp(/´ó|¶¯|Å®/,e),encoding:"GB18030",utfFrequency:{low:.009567,high:.011502},isoFrequency:{low:.003137,high:.005009}},{name:"chinese-traditional",count:0,utfRegex:new RegExp(/們/,e),isoRegex:new RegExp(/¦b/,e),encoding:"BIG5",utfFrequency:{low:.012484,high:.014964},isoFrequency:{low:.005063,high:.005822}},{name:"japanese",count:0,utfRegex:new RegExp(/ど/,e),isoRegex:new RegExp(/‚»/,e),encoding:"Shift-JIS",utfFrequency:{low:.004257,high:.006585},isoFrequency:{low:.004286,high:.004653}},{name:"korean",count:0,utfRegex:new RegExp(/도/,e),isoRegex:new RegExp(/àö¾î|å¾ß|¡¼­/,e),encoding:"EUC-KR",utfFrequency:{low:.01091,high:.01367},isoFrequency:{low:.004118,high:.004961}},{name:"thai",count:0,utfRegex:new RegExp(/แฮร์รี่|พอตเตอร์/,e),isoRegex:new RegExp(/áîãìãõè|¾íµàµíãì­/,e),encoding:"TIS-620",utfFrequency:{low:.003194,high:.003468},isoFrequency:{low:.002091,high:.002303}},{name:"bengali",count:0,utfRegex:r.bengali,isoRegex:r.bengali,utfFrequency:n.bengali,isoFrequency:n.bengali},{name:"hindi",count:0,utfRegex:r.hindi,isoRegex:r.hindi,utfFrequency:n.hindi,isoFrequency:n.hindi},{name:"urdu",count:0,utfRegex:r.urdu,isoRegex:r.urdu,utfFrequency:n.urdu,isoFrequency:n.urdu},{name:"vietnamese",count:0,utfRegex:r.vietnamese,isoRegex:r.vietnamese,utfFrequency:n.vietnamese,isoFrequency:n.vietnamese}]},70182:(t,e,r)=>{const n=r(39293),o=r(68581),a=r(55052);t.exports=t=>new Promise(((e,r)=>{const i={encoding:null,language:null,confidence:{encoding:null,language:null}},u={},c=new FileReader;c.onload=()=>{const s=new Uint8Array(c.result).slice(0,4).join(" "),l=a(s);if(l){i.encoding=l,i.confidence.encoding=1;const n=new FileReader;n.onload=()=>{u.content=n.result,e(o(u,i))},n.onerror=t=>{r(t)},n.readAsText(t,i.encoding)}else{const a=new FileReader;a.onload=()=>{const r=a.result,c=n(r);if(c&&(i.encoding="UTF-8",i.confidence.encoding=1),c)u.content=r,e(o(u,i));else{const r=new FileReader;r.onload=()=>{u.content=r.result,e(o(u,i))},r.readAsText(t,"ISO-8859-1")}},a.onerror=t=>{r(t)},a.readAsText(t,"UTF-8")}},c.onerror=t=>{r(t)},c.readAsArrayBuffer(t)}))},57460:function(t,e){var r,n;r=function t(){"use strict";var e="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{},r=!e.document&&!!e.postMessage,n=r&&/blob:/i.test((e.location||{}).protocol),o={},a=0,i={parse:function(r,n){var u=(n=n||{}).dynamicTyping||!1;if(x(u)&&(n.dynamicTypingFunction=u,u={}),n.dynamicTyping=u,n.transform=!!x(n.transform)&&n.transform,n.worker&&i.WORKERS_SUPPORTED){var c=function(){if(!i.WORKERS_SUPPORTED)return!1;var r,n,u=(r=e.URL||e.webkitURL||null,n=t.toString(),i.BLOB_URL||(i.BLOB_URL=r.createObjectURL(new Blob(["(",n,")();"],{type:"text/javascript"})))),c=new e.Worker(u);return c.onmessage=y,c.id=a++,o[c.id]=c}();return c.userStep=n.step,c.userChunk=n.chunk,c.userComplete=n.complete,c.userError=n.error,n.step=x(n.step),n.chunk=x(n.chunk),n.complete=x(n.complete),n.error=x(n.error),delete n.worker,void c.postMessage({input:r,config:n,workerId:c.id})}var p=null;return i.NODE_STREAM_INPUT,"string"==typeof r?p=n.download?new s(n):new f(n):!0===r.readable&&x(r.read)&&x(r.on)?p=new d(n):(e.File&&r instanceof File||r instanceof Object)&&(p=new l(n)),p.stream(r)},unparse:function(t,e){var r=!1,n=!0,o=",",a="\r\n",u='"',c=u+u,s=!1,l=null,f=!1;!function(){if("object"==typeof e){if("string"!=typeof e.delimiter||i.BAD_DELIMITERS.filter((function(t){return-1!==e.delimiter.indexOf(t)})).length||(o=e.delimiter),("boolean"==typeof e.quotes||"function"==typeof e.quotes||Array.isArray(e.quotes))&&(r=e.quotes),"boolean"!=typeof e.skipEmptyLines&&"string"!=typeof e.skipEmptyLines||(s=e.skipEmptyLines),"string"==typeof e.newline&&(a=e.newline),"string"==typeof e.quoteChar&&(u=e.quoteChar),"boolean"==typeof e.header&&(n=e.header),Array.isArray(e.columns)){if(0===e.columns.length)throw new Error("Option columns is empty");l=e.columns}void 0!==e.escapeChar&&(c=e.escapeChar+u),"boolean"==typeof e.escapeFormulae&&(f=e.escapeFormulae)}}();var d=new RegExp(h(u),"g");if("string"==typeof t&&(t=JSON.parse(t)),Array.isArray(t)){if(!t.length||Array.isArray(t[0]))return p(null,t,s);if("object"==typeof t[0])return p(l||Object.keys(t[0]),t,s)}else if("object"==typeof t)return"string"==typeof t.data&&(t.data=JSON.parse(t.data)),Array.isArray(t.data)&&(t.fields||(t.fields=t.meta&&t.meta.fields),t.fields||(t.fields=Array.isArray(t.data[0])?t.fields:"object"==typeof t.data[0]?Object.keys(t.data[0]):[]),Array.isArray(t.data[0])||"object"==typeof t.data[0]||(t.data=[t.data])),p(t.fields||[],t.data||[],s);throw new Error("Unable to serialize unrecognized input");function p(t,e,r){var i="";"string"==typeof t&&(t=JSON.parse(t)),"string"==typeof e&&(e=JSON.parse(e));var u=Array.isArray(t)&&0<t.length,c=!Array.isArray(e[0]);if(u&&n){for(var s=0;s<t.length;s++)0<s&&(i+=o),i+=v(t[s],s);0<e.length&&(i+=a)}for(var l=0;l<e.length;l++){var f=u?t.length:e[l].length,d=!1,p=u?0===Object.keys(e[l]).length:0===e[l].length;if(r&&!u&&(d="greedy"===r?""===e[l].join("").trim():1===e[l].length&&0===e[l][0].length),"greedy"===r&&u){for(var h=[],y=0;y<f;y++){var g=c?t[y]:y;h.push(e[l][g])}d=""===h.join("").trim()}if(!d){for(var m=0;m<f;m++){0<m&&!p&&(i+=o);var b=u&&c?t[m]:m;i+=v(e[l][b],m)}l<e.length-1&&(!r||0<f&&!p)&&(i+=a)}}return i}function v(t,e){if(null==t)return"";if(t.constructor===Date)return JSON.stringify(t).slice(1,25);!0===f&&"string"==typeof t&&null!==t.match(/^[=+\-@].*$/)&&(t="'"+t);var n=t.toString().replace(d,c),a="boolean"==typeof r&&r||"function"==typeof r&&r(t,e)||Array.isArray(r)&&r[e]||function(t,e){for(var r=0;r<e.length;r++)if(-1<t.indexOf(e[r]))return!0;return!1}(n,i.BAD_DELIMITERS)||-1<n.indexOf(o)||" "===n.charAt(0)||" "===n.charAt(n.length-1);return a?u+n+u:n}}};if(i.RECORD_SEP=String.fromCharCode(30),i.UNIT_SEP=String.fromCharCode(31),i.BYTE_ORDER_MARK="\ufeff",i.BAD_DELIMITERS=["\r","\n",'"',i.BYTE_ORDER_MARK],i.WORKERS_SUPPORTED=!r&&!!e.Worker,i.NODE_STREAM_INPUT=1,i.LocalChunkSize=10485760,i.RemoteChunkSize=5242880,i.DefaultDelimiter=",",i.Parser=v,i.ParserHandle=p,i.NetworkStreamer=s,i.FileStreamer=l,i.StringStreamer=f,i.ReadableStreamStreamer=d,e.jQuery){var u=e.jQuery;u.fn.parse=function(t){var r=t.config||{},n=[];return this.each((function(t){if("INPUT"!==u(this).prop("tagName").toUpperCase()||"file"!==u(this).attr("type").toLowerCase()||!e.FileReader||!this.files||0===this.files.length)return!0;for(var o=0;o<this.files.length;o++)n.push({file:this.files[o],inputElem:this,instanceConfig:u.extend({},r)})})),o(),this;function o(){if(0!==n.length){var e,r,o,c=n[0];if(x(t.before)){var s=t.before(c.file,c.inputElem);if("object"==typeof s){if("abort"===s.action)return"AbortError",e=c.file,r=c.inputElem,o=s.reason,void(x(t.error)&&t.error({name:"AbortError"},e,r,o));if("skip"===s.action)return void a();"object"==typeof s.config&&(c.instanceConfig=u.extend(c.instanceConfig,s.config))}else if("skip"===s)return void a()}var l=c.instanceConfig.complete;c.instanceConfig.complete=function(t){x(l)&&l(t,c.file,c.inputElem),a()},i.parse(c.file,c.instanceConfig)}else x(t.complete)&&t.complete()}function a(){n.splice(0,1),o()}}}function c(t){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(t){var e=b(t);e.chunkSize=parseInt(e.chunkSize),t.step||t.chunk||(e.chunkSize=null),this._handle=new p(e),(this._handle.streamer=this)._config=e}.call(this,t),this.parseChunk=function(t,r){if(this.isFirstChunk&&x(this._config.beforeFirstChunk)){var o=this._config.beforeFirstChunk(t);void 0!==o&&(t=o)}this.isFirstChunk=!1,this._halted=!1;var a=this._partialLine+t;this._partialLine="";var u=this._handle.parse(a,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var c=u.meta.cursor;this._finished||(this._partialLine=a.substring(c-this._baseIndex),this._baseIndex=c),u&&u.data&&(this._rowCount+=u.data.length);var s=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(n)e.postMessage({results:u,workerId:i.WORKER_ID,finished:s});else if(x(this._config.chunk)&&!r){if(this._config.chunk(u,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);u=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(u.data),this._completeResults.errors=this._completeResults.errors.concat(u.errors),this._completeResults.meta=u.meta),this._completed||!s||!x(this._config.complete)||u&&u.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),s||u&&u.meta.paused||this._nextChunk(),u}this._halted=!0},this._sendError=function(t){x(this._config.error)?this._config.error(t):n&&this._config.error&&e.postMessage({workerId:i.WORKER_ID,error:t,finished:!1})}}function s(t){var e;(t=t||{}).chunkSize||(t.chunkSize=i.RemoteChunkSize),c.call(this,t),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(t){this._input=t,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(e=new XMLHttpRequest,this._config.withCredentials&&(e.withCredentials=this._config.withCredentials),r||(e.onload=w(this._chunkLoaded,this),e.onerror=w(this._chunkError,this)),e.open(this._config.downloadRequestBody?"POST":"GET",this._input,!r),this._config.downloadRequestHeaders){var t=this._config.downloadRequestHeaders;for(var n in t)e.setRequestHeader(n,t[n])}if(this._config.chunkSize){var o=this._start+this._config.chunkSize-1;e.setRequestHeader("Range","bytes="+this._start+"-"+o)}try{e.send(this._config.downloadRequestBody)}catch(t){this._chunkError(t.message)}r&&0===e.status&&this._chunkError()}},this._chunkLoaded=function(){4===e.readyState&&(e.status<200||400<=e.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:e.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(t){var e=t.getResponseHeader("Content-Range");return null===e?-1:parseInt(e.substring(e.lastIndexOf("/")+1))}(e),this.parseChunk(e.responseText)))},this._chunkError=function(t){var r=e.statusText||t;this._sendError(new Error(r))}}function l(t){var e,r;(t=t||{}).chunkSize||(t.chunkSize=i.LocalChunkSize),c.call(this,t);var n="undefined"!=typeof FileReader;this.stream=function(t){this._input=t,r=t.slice||t.webkitSlice||t.mozSlice,n?((e=new FileReader).onload=w(this._chunkLoaded,this),e.onerror=w(this._chunkError,this)):e=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var t=this._input;if(this._config.chunkSize){var o=Math.min(this._start+this._config.chunkSize,this._input.size);t=r.call(t,this._start,o)}var a=e.readAsText(t,this._config.encoding);n||this._chunkLoaded({target:{result:a}})},this._chunkLoaded=function(t){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(t.target.result)},this._chunkError=function(){this._sendError(e.error)}}function f(t){var e;c.call(this,t=t||{}),this.stream=function(t){return e=t,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var t,r=this._config.chunkSize;return r?(t=e.substring(0,r),e=e.substring(r)):(t=e,e=""),this._finished=!e,this.parseChunk(t)}}}function d(t){c.call(this,t=t||{});var e=[],r=!0,n=!1;this.pause=function(){c.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){c.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(t){this._input=t,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){n&&1===e.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),e.length?this.parseChunk(e.shift()):r=!0},this._streamData=w((function(t){try{e.push("string"==typeof t?t:t.toString(this._config.encoding)),r&&(r=!1,this._checkIsFinished(),this.parseChunk(e.shift()))}catch(t){this._streamError(t)}}),this),this._streamError=w((function(t){this._streamCleanUp(),this._sendError(t)}),this),this._streamEnd=w((function(){this._streamCleanUp(),n=!0,this._streamData("")}),this),this._streamCleanUp=w((function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)}),this)}function p(t){var e,r,n,o=Math.pow(2,53),a=-o,u=/^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,c=/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/,s=this,l=0,f=0,d=!1,p=!1,y=[],g={data:[],errors:[],meta:{}};if(x(t.step)){var m=t.step;t.step=function(e){if(g=e,S())O();else{if(O(),0===g.data.length)return;l+=e.data.length,t.preview&&l>t.preview?r.abort():(g.data=g.data[0],m(g,s))}}}function w(e){return"greedy"===t.skipEmptyLines?""===e.join("").trim():1===e.length&&0===e[0].length}function O(){if(g&&n&&(_("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+i.DefaultDelimiter+"'"),n=!1),t.skipEmptyLines)for(var e=0;e<g.data.length;e++)w(g.data[e])&&g.data.splice(e--,1);return S()&&function(){if(g)if(Array.isArray(g.data[0])){for(var e=0;S()&&e<g.data.length;e++)g.data[e].forEach(r);g.data.splice(0,1)}else g.data.forEach(r);function r(e,r){x(t.transformHeader)&&(e=t.transformHeader(e,r)),y.push(e)}}(),function(){if(!g||!t.header&&!t.dynamicTyping&&!t.transform)return g;function e(e,r){var n,o=t.header?{}:[];for(n=0;n<e.length;n++){var a=n,i=e[n];t.header&&(a=n>=y.length?"__parsed_extra":y[n]),t.transform&&(i=t.transform(i,a)),i=A(a,i),"__parsed_extra"===a?(o[a]=o[a]||[],o[a].push(i)):o[a]=i}return t.header&&(n>y.length?_("FieldMismatch","TooManyFields","Too many fields: expected "+y.length+" fields but parsed "+n,f+r):n<y.length&&_("FieldMismatch","TooFewFields","Too few fields: expected "+y.length+" fields but parsed "+n,f+r)),o}var r=1;return!g.data.length||Array.isArray(g.data[0])?(g.data=g.data.map(e),r=g.data.length):g.data=e(g.data,0),t.header&&g.meta&&(g.meta.fields=y),f+=r,g}()}function S(){return t.header&&0===y.length}function A(e,r){return n=e,t.dynamicTypingFunction&&void 0===t.dynamicTyping[n]&&(t.dynamicTyping[n]=t.dynamicTypingFunction(n)),!0===(t.dynamicTyping[n]||t.dynamicTyping)?"true"===r||"TRUE"===r||"false"!==r&&"FALSE"!==r&&(function(t){if(u.test(t)){var e=parseFloat(t);if(a<e&&e<o)return!0}return!1}(r)?parseFloat(r):c.test(r)?new Date(r):""===r?null:r):r;var n}function _(t,e,r,n){var o={type:t,code:e,message:r};void 0!==n&&(o.row=n),g.errors.push(o)}this.parse=function(o,a,u){var c=t.quoteChar||'"';if(t.newline||(t.newline=function(t,e){t=t.substring(0,1048576);var r=new RegExp(h(e)+"([^]*?)"+h(e),"gm"),n=(t=t.replace(r,"")).split("\r"),o=t.split("\n"),a=1<o.length&&o[0].length<n[0].length;if(1===n.length||a)return"\n";for(var i=0,u=0;u<n.length;u++)"\n"===n[u][0]&&i++;return i>=n.length/2?"\r\n":"\r"}(o,c)),n=!1,t.delimiter)x(t.delimiter)&&(t.delimiter=t.delimiter(o),g.meta.delimiter=t.delimiter);else{var s=function(e,r,n,o,a){var u,c,s,l;a=a||[",","\t","|",";",i.RECORD_SEP,i.UNIT_SEP];for(var f=0;f<a.length;f++){var d=a[f],p=0,h=0,y=0;s=void 0;for(var g=new v({comments:o,delimiter:d,newline:r,preview:10}).parse(e),m=0;m<g.data.length;m++)if(n&&w(g.data[m]))y++;else{var b=g.data[m].length;h+=b,void 0!==s?0<b&&(p+=Math.abs(b-s),s=b):s=b}0<g.data.length&&(h/=g.data.length-y),(void 0===c||p<=c)&&(void 0===l||l<h)&&1.99<h&&(c=p,u=d,l=h)}return{successful:!!(t.delimiter=u),bestDelimiter:u}}(o,t.newline,t.skipEmptyLines,t.comments,t.delimitersToGuess);s.successful?t.delimiter=s.bestDelimiter:(n=!0,t.delimiter=i.DefaultDelimiter),g.meta.delimiter=t.delimiter}var l=b(t);return t.preview&&t.header&&l.preview++,e=o,r=new v(l),g=r.parse(e,a,u),O(),d?{meta:{paused:!0}}:g||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,r.abort(),e=x(t.chunk)?"":e.substring(r.getCharIndex())},this.resume=function(){s.streamer._halted?(d=!1,s.streamer.parseChunk(e,!0)):setTimeout(s.resume,3)},this.aborted=function(){return p},this.abort=function(){p=!0,r.abort(),g.meta.aborted=!0,x(t.complete)&&t.complete(g),e=""}}function h(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function v(t){var e,r=(t=t||{}).delimiter,n=t.newline,o=t.comments,a=t.step,u=t.preview,c=t.fastMode,s=e=void 0===t.quoteChar?'"':t.quoteChar;if(void 0!==t.escapeChar&&(s=t.escapeChar),("string"!=typeof r||-1<i.BAD_DELIMITERS.indexOf(r))&&(r=","),o===r)throw new Error("Comment character same as delimiter");!0===o?o="#":("string"!=typeof o||-1<i.BAD_DELIMITERS.indexOf(o))&&(o=!1),"\n"!==n&&"\r"!==n&&"\r\n"!==n&&(n="\n");var l=0,f=!1;this.parse=function(t,i,d){if("string"!=typeof t)throw new Error("Input must be a string");var p=t.length,v=r.length,y=n.length,g=o.length,m=x(a),b=[],w=[],O=[],S=l=0;if(!t)return $();if(c||!1!==c&&-1===t.indexOf(e)){for(var A=t.split(n),_=0;_<A.length;_++){if(O=A[_],l+=O.length,_!==A.length-1)l+=n.length;else if(d)return $();if(!o||O.substring(0,g)!==o){if(m){if(b=[],k(O.split(r)),L(),f)return $()}else k(O.split(r));if(u&&u<=_)return b=b.slice(0,u),$(!0)}}return $()}for(var M=t.indexOf(r,l),R=t.indexOf(n,l),P=new RegExp(h(s)+h(e),"g"),E=t.indexOf(e,l);;)if(t[l]!==e)if(o&&0===O.length&&t.substring(l,l+g)===o){if(-1===R)return $();l=R+y,R=t.indexOf(n,l),M=t.indexOf(r,l)}else if(-1!==M&&(M<R||-1===R))O.push(t.substring(l,M)),l=M+v,M=t.indexOf(r,l);else{if(-1===R)break;if(O.push(t.substring(l,R)),I(R+y),m&&(L(),f))return $();if(u&&b.length>=u)return $(!0)}else for(E=l,l++;;){if(-1===(E=t.indexOf(e,E+1)))return d||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:b.length,index:l}),D();if(E===p-1)return D(t.substring(l,E).replace(P,e));if(e!==s||t[E+1]!==s){if(e===s||0===E||t[E-1]!==s){-1!==M&&M<E+1&&(M=t.indexOf(r,E+1)),-1!==R&&R<E+1&&(R=t.indexOf(n,E+1));var j=C(-1===R?M:Math.min(M,R));if(t[E+1+j]===r){O.push(t.substring(l,E).replace(P,e)),t[l=E+1+j+v]!==e&&(E=t.indexOf(e,l)),M=t.indexOf(r,l),R=t.indexOf(n,l);break}var T=C(R);if(t.substring(E+1+T,E+1+T+y)===n){if(O.push(t.substring(l,E).replace(P,e)),I(E+1+T+y),M=t.indexOf(r,l),E=t.indexOf(e,l),m&&(L(),f))return $();if(u&&b.length>=u)return $(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:b.length,index:l}),E++}}else E++}return D();function k(t){b.push(t),S=l}function C(e){var r=0;if(-1!==e){var n=t.substring(E+1,e);n&&""===n.trim()&&(r=n.length)}return r}function D(e){return d||(void 0===e&&(e=t.substring(l)),O.push(e),l=p,k(O),m&&L()),$()}function I(e){l=e,k(O),O=[],R=t.indexOf(n,l)}function $(t){return{data:b,errors:w,meta:{delimiter:r,linebreak:n,aborted:f,truncated:!!t,cursor:S+(i||0)}}}function L(){a($()),b=[],w=[]}},this.abort=function(){f=!0},this.getCharIndex=function(){return l}}function y(t){var e=t.data,r=o[e.workerId],n=!1;if(e.error)r.userError(e.error,e.file);else if(e.results&&e.results.data){var a={abort:function(){n=!0,g(e.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:m,resume:m};if(x(r.userStep)){for(var i=0;i<e.results.data.length&&(r.userStep({data:e.results.data[i],errors:e.results.errors,meta:e.results.meta},a),!n);i++);delete e.results}else x(r.userChunk)&&(r.userChunk(e.results,a,e.file),delete e.results)}e.finished&&!n&&g(e.workerId,e.results)}function g(t,e){var r=o[t];x(r.userComplete)&&r.userComplete(e),r.terminate(),delete o[t]}function m(){throw new Error("Not implemented.")}function b(t){if("object"!=typeof t||null===t)return t;var e=Array.isArray(t)?[]:{};for(var r in t)e[r]=b(t[r]);return e}function w(t,e){return function(){t.apply(e,arguments)}}function x(t){return"function"==typeof t}return n&&(e.onmessage=function(t){var r=t.data;if(void 0===i.WORKER_ID&&r&&(i.WORKER_ID=r.workerId),"string"==typeof r.input)e.postMessage({workerId:i.WORKER_ID,results:i.parse(r.input,r.config),finished:!0});else if(e.File&&r.input instanceof File||r.input instanceof Object){var n=i.parse(r.input,r.config);n&&e.postMessage({workerId:i.WORKER_ID,results:n,finished:!0})}}),(s.prototype=Object.create(c.prototype)).constructor=s,(l.prototype=Object.create(c.prototype)).constructor=l,(f.prototype=Object.create(f.prototype)).constructor=f,(d.prototype=Object.create(c.prototype)).constructor=d,i},void 0===(n=r.apply(e,[]))||(t.exports=n)},35666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function s(t,e,r,n){var o=e&&e.prototype instanceof y?e:y,a=Object.create(o.prototype),i=new P(n||[]);return a._invoke=function(t,e,r){var n=f;return function(o,a){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw a;return j()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var u=_(i,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=l(t,e,r);if("normal"===c.type){if(n=r.done?h:d,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=h,r.method="throw",r.arg=c.arg)}}}(t,r,i),a}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",v={};function y(){}function g(){}function m(){}var b={};c(b,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(E([])));x&&x!==r&&n.call(x,a)&&(b=x);var O=m.prototype=y.prototype=Object.create(b);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function A(t,e){function r(o,a,i,u){var c=l(t[o],t,a);if("throw"!==c.type){var s=c.arg,f=s.value;return f&&"object"==typeof f&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,i,u)}),(function(t){r("throw",t,i,u)})):e.resolve(f).then((function(t){s.value=t,i(s)}),(function(t){return r("throw",t,i,u)}))}u(c.arg)}var o;this._invoke=function(t,n){function a(){return new e((function(e,o){r(t,n,e,o)}))}return o=o?o.then(a,a):a()}}function _(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,_(t,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=l(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var a=o.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function M(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function R(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(M,this),this.reset(!0)}function E(t){if(t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}return{next:j}}function j(){return{value:e,done:!0}}return g.prototype=m,c(O,"constructor",m),c(m,"constructor",g),g.displayName=c(m,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,c(t,u,"GeneratorFunction")),t.prototype=Object.create(O),t},t.awrap=function(t){return{__await:t}},S(A.prototype),c(A.prototype,i,(function(){return this})),t.AsyncIterator=A,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new A(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},S(O),c(O,u,"Generator"),c(O,a,(function(){return this})),c(O,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=E,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(R),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return u.type="throw",u.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],u=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=t,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),R(r),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;R(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:E(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}},48966:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=Zt(r(8469)),a=Zt(r(77536)),i=Zt(r(21359)),u=Zt(r(557)),c=Zt(r(2315)),s=Zt(r(89466)),l=Zt(r(30661)),f=Zt(r(83868)),d=Zt(r(2492)),p=Zt(r(28999)),h=Zt(r(61028)),v=Zt(r(27795)),y=Zt(r(10221)),g=Zt(r(82549)),m=Zt(r(99493)),b=Zt(r(67380)),w=Gt(r(19234)),x=Gt(r(94583)),O=Zt(r(24986)),S=Zt(r(51513)),A=Zt(r(24595)),_=Zt(r(43928)),M=Zt(r(57245)),R=Zt(r(15566)),P=Zt(r(64094)),E=Zt(r(77146)),j=Zt(r(82941)),T=Zt(r(49019)),k=Zt(r(13590)),C=Zt(r(86826)),D=Zt(r(72828)),I=Zt(r(20937)),$=Gt(r(79146)),L=Zt(r(85218)),F=Zt(r(77117)),N=Zt(r(66090)),U=Zt(r(58335)),Y=Zt(r(96298)),B=Zt(r(6454)),H=Zt(r(16648)),G=Zt(r(34339)),Z=Gt(r(88177)),W=Zt(r(42438)),q=Zt(r(90368)),K=Zt(r(18874)),V=Zt(r(74979)),z=Zt(r(81008)),X=Zt(r(54069)),Q=Zt(r(20661)),J=Zt(r(93235)),tt=Zt(r(57278)),et=Zt(r(19131)),rt=Zt(r(93315)),nt=Zt(r(51464)),ot=Zt(r(27228)),at=Zt(r(682)),it=Zt(r(49396)),ut=Zt(r(35807)),ct=Zt(r(57148)),st=Zt(r(87612)),lt=Zt(r(29887)),ft=Zt(r(53058)),dt=Gt(r(28355)),pt=Zt(r(82129)),ht=Zt(r(90094)),vt=Zt(r(88021)),yt=Zt(r(65061)),gt=Zt(r(94611)),mt=Zt(r(21727)),bt=Zt(r(86776)),wt=Zt(r(19963)),xt=Zt(r(2782)),Ot=Zt(r(65008)),St=Zt(r(2689)),At=Zt(r(98983)),_t=Zt(r(72776)),Mt=Zt(r(44554)),Rt=Zt(r(90478)),Pt=Gt(r(78140)),Et=Zt(r(14959)),jt=Zt(r(29778)),Tt=Zt(r(24790)),kt=Zt(r(5152)),Ct=Zt(r(94816)),Dt=Zt(r(8035)),It=Zt(r(34714)),$t=Zt(r(44928)),Lt=Zt(r(88346)),Ft=Zt(r(2900)),Nt=Zt(r(68220)),Ut=Zt(r(82786)),Yt=Zt(r(17633)),Bt=Zt(r(55977));function Ht(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return Ht=function(){return t},t}function Gt(t){if(t&&t.__esModule)return t;if(null===t||"object"!==n(t)&&"function"!=typeof t)return{default:t};var e=Ht();if(e&&e.has(t))return e.get(t);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in t)if(Object.prototype.hasOwnProperty.call(t,a)){var i=o?Object.getOwnPropertyDescriptor(t,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=t[a]}return r.default=t,e&&e.set(t,r),r}function Zt(t){return t&&t.__esModule?t:{default:t}}var Wt={version:"13.7.0",toDate:o.default,toFloat:a.default,toInt:i.default,toBoolean:u.default,equals:c.default,contains:s.default,matches:l.default,isEmail:f.default,isURL:d.default,isMACAddress:p.default,isIP:h.default,isIPRange:v.default,isFQDN:y.default,isBoolean:m.default,isIBAN:Z.default,isBIC:W.default,isAlpha:w.default,isAlphaLocales:w.locales,isAlphanumeric:x.default,isAlphanumericLocales:x.locales,isNumeric:O.default,isPassportNumber:S.default,isPort:A.default,isLowercase:_.default,isUppercase:M.default,isAscii:P.default,isFullWidth:E.default,isHalfWidth:j.default,isVariableWidth:T.default,isMultibyte:k.default,isSemVer:C.default,isSurrogatePair:D.default,isInt:I.default,isIMEI:R.default,isFloat:$.default,isFloatLocales:$.locales,isDecimal:L.default,isHexadecimal:F.default,isOctal:N.default,isDivisibleBy:U.default,isHexColor:Y.default,isRgbColor:B.default,isHSL:H.default,isISRC:G.default,isMD5:q.default,isHash:K.default,isJWT:V.default,isJSON:z.default,isEmpty:X.default,isLength:Q.default,isLocale:b.default,isByteLength:J.default,isUUID:tt.default,isMongoId:et.default,isAfter:rt.default,isBefore:nt.default,isIn:ot.default,isCreditCard:at.default,isIdentityCard:it.default,isEAN:ut.default,isISIN:ct.default,isISBN:st.default,isISSN:lt.default,isMobilePhone:dt.default,isMobilePhoneLocales:dt.locales,isPostalCode:Pt.default,isPostalCodeLocales:Pt.locales,isEthereumAddress:pt.default,isCurrency:ht.default,isBtcAddress:vt.default,isISO8601:yt.default,isRFC3339:gt.default,isISO31661Alpha2:mt.default,isISO31661Alpha3:bt.default,isISO4217:wt.default,isBase32:xt.default,isBase58:Ot.default,isBase64:St.default,isDataURI:At.default,isMagnetURI:_t.default,isMimeType:Mt.default,isLatLong:Rt.default,ltrim:Et.default,rtrim:jt.default,trim:Tt.default,escape:kt.default,unescape:Ct.default,stripLow:Dt.default,whitelist:It.default,blacklist:$t.default,isWhitelisted:Lt.default,normalizeEmail:Ft.default,toString,isSlug:Nt.default,isStrongPassword:Yt.default,isTaxID:ft.default,isDate:g.default,isLicensePlate:Ut.default,isVAT:Bt.default,ibanLocales:Z.locales};e.default=Wt,t.exports=e.default,t.exports.default=e.default},60079:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.commaDecimal=e.dotDecimal=e.farsiLocales=e.arabicLocales=e.englishLocales=e.decimal=e.alphanumeric=e.alpha=void 0;var r={"en-US":/^[A-Z]+$/i,"az-AZ":/^[A-VXYZÇƏĞİıÖŞÜ]+$/i,"bg-BG":/^[А-Я]+$/i,"cs-CZ":/^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,"da-DK":/^[A-ZÆØÅ]+$/i,"de-DE":/^[A-ZÄÖÜß]+$/i,"el-GR":/^[Α-ώ]+$/i,"es-ES":/^[A-ZÁÉÍÑÓÚÜ]+$/i,"fa-IR":/^[ابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$/i,"fi-FI":/^[A-ZÅÄÖ]+$/i,"fr-FR":/^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,"it-IT":/^[A-ZÀÉÈÌÎÓÒÙ]+$/i,"nb-NO":/^[A-ZÆØÅ]+$/i,"nl-NL":/^[A-ZÁÉËÏÓÖÜÚ]+$/i,"nn-NO":/^[A-ZÆØÅ]+$/i,"hu-HU":/^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,"pl-PL":/^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,"pt-PT":/^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,"ru-RU":/^[А-ЯЁ]+$/i,"sl-SI":/^[A-ZČĆĐŠŽ]+$/i,"sk-SK":/^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,"sr-RS@latin":/^[A-ZČĆŽŠĐ]+$/i,"sr-RS":/^[А-ЯЂЈЉЊЋЏ]+$/i,"sv-SE":/^[A-ZÅÄÖ]+$/i,"th-TH":/^[ก-๐\s]+$/i,"tr-TR":/^[A-ZÇĞİıÖŞÜ]+$/i,"uk-UA":/^[А-ЩЬЮЯЄIЇҐі]+$/i,"vi-VN":/^[A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,"ku-IQ":/^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,ar:/^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,he:/^[א-ת]+$/,fa:/^['آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی']+$/i,"hi-IN":/^[\u0900-\u0961]+[\u0972-\u097F]*$/i};e.alpha=r;var n={"en-US":/^[0-9A-Z]+$/i,"az-AZ":/^[0-9A-VXYZÇƏĞİıÖŞÜ]+$/i,"bg-BG":/^[0-9А-Я]+$/i,"cs-CZ":/^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,"da-DK":/^[0-9A-ZÆØÅ]+$/i,"de-DE":/^[0-9A-ZÄÖÜß]+$/i,"el-GR":/^[0-9Α-ω]+$/i,"es-ES":/^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,"fi-FI":/^[0-9A-ZÅÄÖ]+$/i,"fr-FR":/^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,"it-IT":/^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,"hu-HU":/^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,"nb-NO":/^[0-9A-ZÆØÅ]+$/i,"nl-NL":/^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,"nn-NO":/^[0-9A-ZÆØÅ]+$/i,"pl-PL":/^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,"pt-PT":/^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,"ru-RU":/^[0-9А-ЯЁ]+$/i,"sl-SI":/^[0-9A-ZČĆĐŠŽ]+$/i,"sk-SK":/^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,"sr-RS@latin":/^[0-9A-ZČĆŽŠĐ]+$/i,"sr-RS":/^[0-9А-ЯЂЈЉЊЋЏ]+$/i,"sv-SE":/^[0-9A-ZÅÄÖ]+$/i,"th-TH":/^[ก-๙\s]+$/i,"tr-TR":/^[0-9A-ZÇĞİıÖŞÜ]+$/i,"uk-UA":/^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,"ku-IQ":/^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,"vi-VN":/^[0-9A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,ar:/^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,he:/^[0-9א-ת]+$/,fa:/^['0-9آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی۱۲۳۴۵۶۷۸۹۰']+$/i,"hi-IN":/^[\u0900-\u0963]+[\u0966-\u097F]*$/i};e.alphanumeric=n;var o={"en-US":".",ar:"٫"};e.decimal=o;var a=["AU","GB","HK","IN","NZ","ZA","ZM"];e.englishLocales=a;for(var i,u=0;u<a.length;u++)r[i="en-".concat(a[u])]=r["en-US"],n[i]=n["en-US"],o[i]=o["en-US"];var c=["AE","BH","DZ","EG","IQ","JO","KW","LB","LY","MA","QM","QA","SA","SD","SY","TN","YE"];e.arabicLocales=c;for(var s,l=0;l<c.length;l++)r[s="ar-".concat(c[l])]=r.ar,n[s]=n.ar,o[s]=o.ar;var f=["IR","AF"];e.farsiLocales=f;for(var d,p=0;p<f.length;p++)n[d="fa-".concat(f[p])]=n.fa,o[d]=o.ar;var h=["ar-EG","ar-LB","ar-LY"];e.dotDecimal=h;var v=["bg-BG","cs-CZ","da-DK","de-DE","el-GR","en-ZM","es-ES","fr-CA","fr-FR","id-ID","it-IT","ku-IQ","hi-IN","hu-HU","nb-NO","nn-NO","nl-NL","pl-PL","pt-PT","ru-RU","sl-SI","sr-RS@latin","sr-RS","sv-SE","tr-TR","uk-UA","vi-VN"];e.commaDecimal=v;for(var y=0;y<h.length;y++)o[h[y]]=o["en-US"];for(var g=0;g<v.length;g++)o[v[g]]=",";r["fr-CA"]=r["fr-FR"],n["fr-CA"]=n["fr-FR"],r["pt-BR"]=r["pt-PT"],n["pt-BR"]=n["pt-PT"],o["pt-BR"]=o["pt-PT"],r["pl-Pl"]=r["pl-PL"],n["pl-Pl"]=n["pl-PL"],o["pl-Pl"]=o["pl-PL"],r["fa-AF"]=r.fa},44928:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,o.default)(t),t.replace(new RegExp("[".concat(e,"]+"),"g"),"")};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},89466:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){return(0,n.default)(t),(r=(0,a.default)(r,u)).ignoreCase?t.toLowerCase().split((0,o.default)(e).toLowerCase()).length>r.minOccurrences:t.split((0,o.default)(e)).length>r.minOccurrences};var n=i(r(65571)),o=i(r(95791)),a=i(r(84808));function i(t){return t&&t.__esModule?t:{default:t}}var u={ignoreCase:!1,minOccurrences:1};t.exports=e.default,t.exports.default=e.default},2315:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,o.default)(t),t===e};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},5152:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),t.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\//g,"&#x2F;").replace(/\\/g,"&#x5C;").replace(/`/g,"&#96;")};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},93315:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:String(new Date);(0,n.default)(t);var r=(0,o.default)(e),a=(0,o.default)(t);return!!(a&&r&&a>r)};var n=a(r(65571)),o=a(r(8469));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default,t.exports.default=e.default},19234:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"en-US",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};(0,o.default)(t);var n=t,i=r.ignore;if(i)if(i instanceof RegExp)n=n.replace(i,"");else{if("string"!=typeof i)throw new Error("ignore should be instance of a String or RegExp");n=n.replace(new RegExp("[".concat(i.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g,"\\$&"),"]"),"g"),"")}if(e in a.alpha)return a.alpha[e].test(n);throw new Error("Invalid locale '".concat(e,"'"))},e.locales=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=r(60079),i=Object.keys(a.alpha);e.locales=i},94583:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"en-US",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};(0,o.default)(t);var n=t,i=r.ignore;if(i)if(i instanceof RegExp)n=n.replace(i,"");else{if("string"!=typeof i)throw new Error("ignore should be instance of a String or RegExp");n=n.replace(new RegExp("[".concat(i.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g,"\\$&"),"]"),"g"),"")}if(e in a.alphanumeric)return a.alphanumeric[e].test(n);throw new Error("Invalid locale '".concat(e,"'"))},e.locales=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=r(60079),i=Object.keys(a.alphanumeric);e.locales=i},64094:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[\x00-\x7F]+$/;t.exports=e.default,t.exports.default=e.default},42438:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),!!a.CountryCodes.has(t.slice(4,6).toUpperCase())&&i.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=r(21727),i=/^[A-Za-z]{6}[A-Za-z0-9]{2}([A-Za-z0-9]{3})?$/;t.exports=e.default,t.exports.default=e.default},2782:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),!(t.length%8!=0||!a.test(t))};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[A-Z2-7]+=*$/;t.exports=e.default,t.exports.default=e.default},65008:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),!!a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[A-HJ-NP-Za-km-z1-9]*$/;t.exports=e.default,t.exports.default=e.default},2689:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,n.default)(t),e=(0,o.default)(e,c);var r=t.length;if(e.urlSafe)return u.test(t);if(r%4!=0||i.test(t))return!1;var a=t.indexOf("=");return-1===a||a===r-1||a===r-2&&"="===t[r-1]};var n=a(r(65571)),o=a(r(84808));function a(t){return t&&t.__esModule?t:{default:t}}var i=/[^A-Z0-9+\/=]/i,u=/^[A-Z0-9_\-]*$/i,c={urlSafe:!1};t.exports=e.default,t.exports.default=e.default},51464:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:String(new Date);(0,n.default)(t);var r=(0,o.default)(e),a=(0,o.default)(t);return!!(a&&r&&a<r)};var n=a(r(65571)),o=a(r(8469));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default,t.exports.default=e.default},99493:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a;return(0,o.default)(t),e.loose?u.includes(t.toLowerCase()):i.includes(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a={loose:!1},i=["true","false","1","0"],u=[].concat(i,["yes","no"]);t.exports=e.default,t.exports.default=e.default},88021:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),t.startsWith("bc1")?a.test(t):i.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(bc1)[a-z0-9]{25,39}$/,i=/^(1|3)[A-HJ-NP-Za-km-z1-9]{25,39}$/;t.exports=e.default,t.exports.default=e.default},93235:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var r,n;(0,o.default)(t),"object"===a(e)?(r=e.min||0,n=e.max):(r=arguments[1],n=arguments[2]);var i=encodeURI(t).split(/%..|./).length-1;return i>=r&&(void 0===n||i<=n)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}t.exports=e.default,t.exports.default=e.default},682:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,o.default)(t);var e=t.replace(/[- ]+/g,"");if(!a.test(e))return!1;for(var r,n,i,u=0,c=e.length-1;c>=0;c--)r=e.substring(c,c+1),n=parseInt(r,10),u+=i&&(n*=2)>=10?n%10+1:n,i=!i;return!(u%10!=0||!e)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;t.exports=e.default,t.exports.default=e.default},90094:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,o.default)(t),function(t){var e="\\d{".concat(t.digits_after_decimal[0],"}");t.digits_after_decimal.forEach((function(t,r){0!==r&&(e="".concat(e,"|\\d{").concat(t,"}"))}));var r="(".concat(t.symbol.replace(/\W/,(function(t){return"\\".concat(t)})),")").concat(t.require_symbol?"":"?"),n="-?",o="[1-9]\\d{0,2}(\\".concat(t.thousands_separator,"\\d{3})*"),a="(".concat(["0","[1-9]\\d*",o].join("|"),")?"),i="(\\".concat(t.decimal_separator,"(").concat(e,"))").concat(t.require_decimal?"":"?"),u=a+(t.allow_decimal||t.require_decimal?i:"");return t.allow_negatives&&!t.parens_for_negatives&&(t.negative_sign_after_digits?u+=n:t.negative_sign_before_digits&&(u=n+u)),t.allow_negative_sign_placeholder?u="( (?!\\-))?".concat(u):t.allow_space_after_symbol?u=" ?".concat(u):t.allow_space_after_digits&&(u+="( (?!$))?"),t.symbol_after_digits?u+=r:u=r+u,t.allow_negatives&&(t.parens_for_negatives?u="(\\(".concat(u,"\\)|").concat(u,")"):t.negative_sign_before_digits||t.negative_sign_after_digits||(u=n+u)),new RegExp("^(?!-? )(?=.*\\d)".concat(u,"$"))}(e=(0,n.default)(e,i)).test(t)};var n=a(r(84808)),o=a(r(65571));function a(t){return t&&t.__esModule?t:{default:t}}var i={symbol:"$",require_symbol:!1,allow_space_after_symbol:!1,symbol_after_digits:!1,allow_negatives:!0,parens_for_negatives:!1,negative_sign_before_digits:!1,negative_sign_after_digits:!1,allow_negative_sign_placeholder:!1,thousands_separator:",",decimal_separator:".",allow_decimal:!0,require_decimal:!1,digits_after_decimal:[2],allow_space_after_digits:!1};t.exports=e.default,t.exports.default=e.default},98983:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,o.default)(t);var e=t.split(",");if(e.length<2)return!1;var r=e.shift().trim().split(";"),n=r.shift();if("data:"!==n.substr(0,5))return!1;var c=n.substr(5);if(""!==c&&!a.test(c))return!1;for(var s=0;s<r.length;s++)if((s!==r.length-1||"base64"!==r[s].toLowerCase())&&!i.test(r[s]))return!1;for(var l=0;l<e.length;l++)if(!u.test(e[l]))return!1;return!0};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[a-z]+\/[a-z0-9\-\+]+$/i,i=/^[a-z\-]+=[a-z0-9\-]+$/i,u=/^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;t.exports=e.default,t.exports.default=e.default},82549:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if(e="string"==typeof e?(0,o.default)({format:e},u):(0,o.default)(e,u),"string"==typeof t&&(v=e.format,/(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(v))){var r,n=e.delimiters.find((function(t){return-1!==e.format.indexOf(t)})),i=e.strictMode?n:e.delimiters.find((function(e){return-1!==t.indexOf(e)})),c=function(t,e){for(var r=[],n=Math.min(t.length,e.length),o=0;o<n;o++)r.push([t[o],e[o]]);return r}(t.split(i),e.format.toLowerCase().split(n)),s={},l=function(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=a(t))){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,u=!0,c=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return u=t.done,t},e:function(t){c=!0,i=t},f:function(){try{u||null==r.return||r.return()}finally{if(c)throw i}}}}(c);try{for(l.s();!(r=l.n()).done;){var f=(h=r.value,2,function(t){if(Array.isArray(t))return t}(h)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,a=void 0;try{for(var i,u=t[Symbol.iterator]();!(n=(i=u.next()).done)&&(r.push(i.value),2!==r.length);n=!0);}catch(t){o=!0,a=t}finally{try{n||null==u.return||u.return()}finally{if(o)throw a}}return r}}(h)||a(h,2)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=f[0],p=f[1];if(d.length!==p.length)return!1;s[p.charAt(0)]=d}}catch(t){l.e(t)}finally{l.f()}return new Date("".concat(s.m,"/").concat(s.d,"/").concat(s.y)).getDate()===+s.d}var h,v;return!e.strictMode&&("[object Date]"===Object.prototype.toString.call(t)&&isFinite(t))};var n,o=(n=r(84808))&&n.__esModule?n:{default:n};function a(t,e){if(t){if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(t,e):void 0}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var u={format:"YYYY/MM/DD",delimiters:["/","-"],strictMode:!1};t.exports=e.default,t.exports.default=e.default},85218:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,o.default)(t),(e=(0,n.default)(e,c)).locale in i.decimal)return!(0,a.default)(s,t.replace(/ /g,""))&&function(t){return new RegExp("^[-+]?([0-9]+)?(\\".concat(i.decimal[t.locale],"[0-9]{").concat(t.decimal_digits,"})").concat(t.force_decimal?"":"?","$"))}(e).test(t);throw new Error("Invalid locale '".concat(e.locale,"'"))};var n=u(r(84808)),o=u(r(65571)),a=u(r(18343)),i=r(60079);function u(t){return t&&t.__esModule?t:{default:t}}var c={force_decimal:!1,decimal_digits:"1,",locale:"en-US"},s=["","-","+"];t.exports=e.default,t.exports.default=e.default},58335:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,n.default)(t),(0,o.default)(t)%parseInt(e,10)==0};var n=a(r(65571)),o=a(r(77536));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default,t.exports.default=e.default},35807:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,o.default)(t);var e,r,n=Number(t.slice(-1));return a.test(t)&&n===((r=10-(e=t).slice(0,-1).split("").map((function(t,r){return Number(t)*function(t,e){return 8===t||14===t?e%2==0?3:1:e%2==0?1:3}(e.length,r)})).reduce((function(t,e){return t+e}),0)%10)<10?r:0)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(\d{8}|\d{13}|\d{14})$/;t.exports=e.default,t.exports.default=e.default},83868:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,n.default)(t),(e=(0,o.default)(e,s)).require_display_name||e.allow_display_name){var r=t.match(l);if(r){var c=r[1];if(t=t.replace(c,"").replace(/(^<|>$)/g,""),c.endsWith(" ")&&(c=c.substr(0,c.length-1)),!function(t){var e=t.replace(/^"(.+)"$/,"$1");if(!e.trim())return!1;if(/[\.";<>]/.test(e)){if(e===t)return!1;if(e.split('"').length!==e.split('\\"').length)return!1}return!0}(c))return!1}else if(e.require_display_name)return!1}if(!e.ignore_max_length&&t.length>254)return!1;var y=t.split("@"),g=y.pop(),m=g.toLowerCase();if(e.host_blacklist.includes(m))return!1;var b=y.join("@");if(e.domain_specific_validation&&("gmail.com"===m||"googlemail.com"===m)){var w=(b=b.toLowerCase()).split("+")[0];if(!(0,a.default)(w.replace(/\./g,""),{min:6,max:30}))return!1;for(var x=w.split("."),O=0;O<x.length;O++)if(!d.test(x[O]))return!1}if(!(!1!==e.ignore_max_length||(0,a.default)(b,{max:64})&&(0,a.default)(g,{max:254})))return!1;if(!(0,i.default)(g,{require_tld:e.require_tld})){if(!e.allow_ip_domain)return!1;if(!(0,u.default)(g)){if(!g.startsWith("[")||!g.endsWith("]"))return!1;var S=g.substr(1,g.length-2);if(0===S.length||!(0,u.default)(S))return!1}}if('"'===b[0])return b=b.slice(1,b.length-1),e.allow_utf8_local_part?v.test(b):p.test(b);for(var A=e.allow_utf8_local_part?h:f,_=b.split("."),M=0;M<_.length;M++)if(!A.test(_[M]))return!1;return!e.blacklisted_chars||-1===b.search(new RegExp("[".concat(e.blacklisted_chars,"]+"),"g"))};var n=c(r(65571)),o=c(r(84808)),a=c(r(93235)),i=c(r(10221)),u=c(r(61028));function c(t){return t&&t.__esModule?t:{default:t}}var s={allow_display_name:!1,require_display_name:!1,allow_utf8_local_part:!0,require_tld:!0,blacklisted_chars:"",ignore_max_length:!1,host_blacklist:[]},l=/^([^\x00-\x1F\x7F-\x9F\cX]+)</i,f=/^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i,d=/^[a-z\d]+$/,p=/^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i,h=/^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i,v=/^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;t.exports=e.default,t.exports.default=e.default},54069:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,n.default)(t),0===((e=(0,o.default)(e,i)).ignore_whitespace?t.trim().length:t.length)};var n=a(r(65571)),o=a(r(84808));function a(t){return t&&t.__esModule?t:{default:t}}var i={ignore_whitespace:!1};t.exports=e.default,t.exports.default=e.default},82129:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(0x)[0-9a-f]{40}$/i;t.exports=e.default,t.exports.default=e.default},10221:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,n.default)(t),(e=(0,o.default)(e,i)).allow_trailing_dot&&"."===t[t.length-1]&&(t=t.substring(0,t.length-1)),!0===e.allow_wildcard&&0===t.indexOf("*.")&&(t=t.substring(2));var r=t.split("."),a=r[r.length-1];if(e.require_tld){if(r.length<2)return!1;if(!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(a))return!1;if(/\s/.test(a))return!1}return!(!e.allow_numeric_tld&&/^\d+$/.test(a))&&r.every((function(t){return!(t.length>63||!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(t)||/[\uff01-\uff5e]/.test(t)||/^-|-$/.test(t)||!e.allow_underscores&&/_/.test(t))}))};var n=a(r(65571)),o=a(r(84808));function a(t){return t&&t.__esModule?t:{default:t}}var i={require_tld:!0,allow_underscores:!1,allow_trailing_dot:!1,allow_numeric_tld:!1,allow_wildcard:!1};t.exports=e.default,t.exports.default=e.default},79146:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,o.default)(t),e=e||{};var r=new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\".concat(e.locale?a.decimal[e.locale]:".","[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$"));if(""===t||"."===t||"-"===t||"+"===t)return!1;var n=parseFloat(t.replace(",","."));return r.test(t)&&(!e.hasOwnProperty("min")||n>=e.min)&&(!e.hasOwnProperty("max")||n<=e.max)&&(!e.hasOwnProperty("lt")||n<e.lt)&&(!e.hasOwnProperty("gt")||n>e.gt)},e.locales=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=r(60079),i=Object.keys(a.decimal);e.locales=i},77146:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)},e.fullWidth=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;e.fullWidth=a},16648:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,o.default)(t);var e=t.replace(/\s+/g," ").replace(/\s?(hsla?\(|\)|,)\s?/gi,"$1");return-1!==e.indexOf(",")?a.test(e):i.test(e)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(,(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}(,((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?))?\)$/i,i=/^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(\s(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}\s?(\/\s((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?)\s?)?\)$/i;t.exports=e.default,t.exports.default=e.default},82941:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)},e.halfWidth=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;e.halfWidth=a},18874:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,o.default)(t),new RegExp("^[a-fA-F0-9]{".concat(a[e],"}$")).test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a={md5:32,md4:32,sha1:40,sha256:64,sha384:96,sha512:128,ripemd128:32,ripemd160:40,tiger128:32,tiger160:40,tiger192:48,crc32:8,crc32b:8};t.exports=e.default,t.exports.default=e.default},96298:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;t.exports=e.default,t.exports.default=e.default},77117:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(0x|0h)?[0-9A-F]+$/i;t.exports=e.default,t.exports.default=e.default},88177:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),function(t){var e=t.replace(/[\s\-]+/gi,"").toUpperCase(),r=e.slice(0,2).toUpperCase();return r in a&&a[r].test(e)}(t)&&function(t){var e=t.replace(/[^A-Z0-9]+/gi,"").toUpperCase();return 1===(e.slice(4)+e.slice(0,4)).replace(/[A-Z]/g,(function(t){return t.charCodeAt(0)-55})).match(/\d{1,7}/g).reduce((function(t,e){return Number(t+e)%97}),"")}(t)},e.locales=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a={AD:/^(AD[0-9]{2})\d{8}[A-Z0-9]{12}$/,AE:/^(AE[0-9]{2})\d{3}\d{16}$/,AL:/^(AL[0-9]{2})\d{8}[A-Z0-9]{16}$/,AT:/^(AT[0-9]{2})\d{16}$/,AZ:/^(AZ[0-9]{2})[A-Z0-9]{4}\d{20}$/,BA:/^(BA[0-9]{2})\d{16}$/,BE:/^(BE[0-9]{2})\d{12}$/,BG:/^(BG[0-9]{2})[A-Z]{4}\d{6}[A-Z0-9]{8}$/,BH:/^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,BR:/^(BR[0-9]{2})\d{23}[A-Z]{1}[A-Z0-9]{1}$/,BY:/^(BY[0-9]{2})[A-Z0-9]{4}\d{20}$/,CH:/^(CH[0-9]{2})\d{5}[A-Z0-9]{12}$/,CR:/^(CR[0-9]{2})\d{18}$/,CY:/^(CY[0-9]{2})\d{8}[A-Z0-9]{16}$/,CZ:/^(CZ[0-9]{2})\d{20}$/,DE:/^(DE[0-9]{2})\d{18}$/,DK:/^(DK[0-9]{2})\d{14}$/,DO:/^(DO[0-9]{2})[A-Z]{4}\d{20}$/,EE:/^(EE[0-9]{2})\d{16}$/,EG:/^(EG[0-9]{2})\d{25}$/,ES:/^(ES[0-9]{2})\d{20}$/,FI:/^(FI[0-9]{2})\d{14}$/,FO:/^(FO[0-9]{2})\d{14}$/,FR:/^(FR[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,GB:/^(GB[0-9]{2})[A-Z]{4}\d{14}$/,GE:/^(GE[0-9]{2})[A-Z0-9]{2}\d{16}$/,GI:/^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,GL:/^(GL[0-9]{2})\d{14}$/,GR:/^(GR[0-9]{2})\d{7}[A-Z0-9]{16}$/,GT:/^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,HR:/^(HR[0-9]{2})\d{17}$/,HU:/^(HU[0-9]{2})\d{24}$/,IE:/^(IE[0-9]{2})[A-Z0-9]{4}\d{14}$/,IL:/^(IL[0-9]{2})\d{19}$/,IQ:/^(IQ[0-9]{2})[A-Z]{4}\d{15}$/,IR:/^(IR[0-9]{2})0\d{2}0\d{18}$/,IS:/^(IS[0-9]{2})\d{22}$/,IT:/^(IT[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,JO:/^(JO[0-9]{2})[A-Z]{4}\d{22}$/,KW:/^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,KZ:/^(KZ[0-9]{2})\d{3}[A-Z0-9]{13}$/,LB:/^(LB[0-9]{2})\d{4}[A-Z0-9]{20}$/,LC:/^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,LI:/^(LI[0-9]{2})\d{5}[A-Z0-9]{12}$/,LT:/^(LT[0-9]{2})\d{16}$/,LU:/^(LU[0-9]{2})\d{3}[A-Z0-9]{13}$/,LV:/^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,MC:/^(MC[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,MD:/^(MD[0-9]{2})[A-Z0-9]{20}$/,ME:/^(ME[0-9]{2})\d{18}$/,MK:/^(MK[0-9]{2})\d{3}[A-Z0-9]{10}\d{2}$/,MR:/^(MR[0-9]{2})\d{23}$/,MT:/^(MT[0-9]{2})[A-Z]{4}\d{5}[A-Z0-9]{18}$/,MU:/^(MU[0-9]{2})[A-Z]{4}\d{19}[A-Z]{3}$/,MZ:/^(MZ[0-9]{2})\d{21}$/,NL:/^(NL[0-9]{2})[A-Z]{4}\d{10}$/,NO:/^(NO[0-9]{2})\d{11}$/,PK:/^(PK[0-9]{2})[A-Z0-9]{4}\d{16}$/,PL:/^(PL[0-9]{2})\d{24}$/,PS:/^(PS[0-9]{2})[A-Z0-9]{4}\d{21}$/,PT:/^(PT[0-9]{2})\d{21}$/,QA:/^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,RO:/^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,RS:/^(RS[0-9]{2})\d{18}$/,SA:/^(SA[0-9]{2})\d{2}[A-Z0-9]{18}$/,SC:/^(SC[0-9]{2})[A-Z]{4}\d{20}[A-Z]{3}$/,SE:/^(SE[0-9]{2})\d{20}$/,SI:/^(SI[0-9]{2})\d{15}$/,SK:/^(SK[0-9]{2})\d{20}$/,SM:/^(SM[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,SV:/^(SV[0-9]{2})[A-Z0-9]{4}\d{20}$/,TL:/^(TL[0-9]{2})\d{19}$/,TN:/^(TN[0-9]{2})\d{20}$/,TR:/^(TR[0-9]{2})\d{5}[A-Z0-9]{17}$/,UA:/^(UA[0-9]{2})\d{6}[A-Z0-9]{19}$/,VA:/^(VA[0-9]{2})\d{18}$/,VG:/^(VG[0-9]{2})[A-Z0-9]{4}\d{16}$/,XK:/^(XK[0-9]{2})\d{16}$/},i=Object.keys(a);e.locales=i},15566:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,o.default)(t);var r=a;if((e=e||{}).allow_hyphens&&(r=i),!r.test(t))return!1;t=t.replace(/-/g,"");for(var n=0,u=2,c=0;c<14;c++){var s=t.substring(14-c-1,14-c),l=parseInt(s,10)*u;n+=l>=10?l%10+1:l,1===u?u+=1:u-=1}return(10-n%10)%10===parseInt(t.substring(14,15),10)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[0-9]{15}$/,i=/^\d{2}-\d{6}-\d{6}-\d{1}$/;t.exports=e.default,t.exports.default=e.default},61028:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if((0,o.default)(e),!(r=String(r)))return t(e,4)||t(e,6);if("4"===r){if(!u.test(e))return!1;var n=e.split(".").sort((function(t,e){return t-e}));return n[3]<=255}return"6"===r&&!!s.test(e)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a="(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])",i="(".concat(a,"[.]){3}").concat(a),u=new RegExp("^".concat(i,"$")),c="(?:[0-9a-fA-F]{1,4})",s=new RegExp("^("+"(?:".concat(c,":){7}(?:").concat(c,"|:)|")+"(?:".concat(c,":){6}(?:").concat(i,"|:").concat(c,"|:)|")+"(?:".concat(c,":){5}(?::").concat(i,"|(:").concat(c,"){1,2}|:)|")+"(?:".concat(c,":){4}(?:(:").concat(c,"){0,1}:").concat(i,"|(:").concat(c,"){1,3}|:)|")+"(?:".concat(c,":){3}(?:(:").concat(c,"){0,2}:").concat(i,"|(:").concat(c,"){1,4}|:)|")+"(?:".concat(c,":){2}(?:(:").concat(c,"){0,3}:").concat(i,"|(:").concat(c,"){1,5}|:)|")+"(?:".concat(c,":){1}(?:(:").concat(c,"){0,4}:").concat(i,"|(:").concat(c,"){1,6}|:)|")+"(?::((?::".concat(c,"){0,5}:").concat(i,"|(?::").concat(c,"){1,7}|:))")+")(%[0-9a-zA-Z-.:]{1,})?$");t.exports=e.default,t.exports.default=e.default},27795:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";(0,n.default)(t);var r=t.split("/");if(2!==r.length)return!1;if(!i.test(r[1]))return!1;if(r[1].length>1&&r[1].startsWith("0"))return!1;var a=(0,o.default)(r[0],e);if(!a)return!1;var c=null;switch(String(e)){case"4":c=32;break;case"6":c=u;break;default:c=(0,o.default)(r[0],"6")?u:32}return r[1]<=c&&r[1]>=0};var n=a(r(65571)),o=a(r(61028));function a(t){return t&&t.__esModule?t:{default:t}}var i=/^\d{1,3}$/,u=128;t.exports=e.default,t.exports.default=e.default},87612:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if((0,o.default)(e),!(r=String(r)))return t(e,10)||t(e,13);var n,c=e.replace(/[\s-]+/g,""),s=0;if("10"===r){if(!a.test(c))return!1;for(n=0;n<9;n++)s+=(n+1)*c.charAt(n);if("X"===c.charAt(9)?s+=100:s+=10*c.charAt(9),s%11==0)return!!c}else if("13"===r){if(!i.test(c))return!1;for(n=0;n<12;n++)s+=u[n%2]*c.charAt(n);if(c.charAt(12)-(10-s%10)%10==0)return!!c}return!1};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(?:[0-9]{9}X|[0-9]{10})$/,i=/^(?:[0-9]{13})$/,u=[1,3];t.exports=e.default,t.exports.default=e.default},57148:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){if((0,o.default)(t),!a.test(t))return!1;for(var e=!0,r=0,n=t.length-2;n>=0;n--)if(t[n]>="A"&&t[n]<="Z")for(var i=t[n].charCodeAt(0)-55,u=0,c=[i%10,Math.trunc(i/10)];u<c.length;u++){var s=c[u];r+=e?s>=5?1+2*(s-5):2*s:s,e=!e}else{var l=t[n].charCodeAt(0)-"0".charCodeAt(0);r+=e?l>=5?1+2*(l-5):2*l:l,e=!e}var f=10*Math.trunc((r+9)/10)-r;return+t[t.length-1]===f};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;t.exports=e.default,t.exports.default=e.default},21727:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.has(t.toUpperCase())},e.CountryCodes=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=new Set(["AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW"]),i=a;e.CountryCodes=i},86776:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.has(t.toUpperCase())};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=new Set(["AFG","ALA","ALB","DZA","ASM","AND","AGO","AIA","ATA","ATG","ARG","ARM","ABW","AUS","AUT","AZE","BHS","BHR","BGD","BRB","BLR","BEL","BLZ","BEN","BMU","BTN","BOL","BES","BIH","BWA","BVT","BRA","IOT","BRN","BGR","BFA","BDI","KHM","CMR","CAN","CPV","CYM","CAF","TCD","CHL","CHN","CXR","CCK","COL","COM","COG","COD","COK","CRI","CIV","HRV","CUB","CUW","CYP","CZE","DNK","DJI","DMA","DOM","ECU","EGY","SLV","GNQ","ERI","EST","ETH","FLK","FRO","FJI","FIN","FRA","GUF","PYF","ATF","GAB","GMB","GEO","DEU","GHA","GIB","GRC","GRL","GRD","GLP","GUM","GTM","GGY","GIN","GNB","GUY","HTI","HMD","VAT","HND","HKG","HUN","ISL","IND","IDN","IRN","IRQ","IRL","IMN","ISR","ITA","JAM","JPN","JEY","JOR","KAZ","KEN","KIR","PRK","KOR","KWT","KGZ","LAO","LVA","LBN","LSO","LBR","LBY","LIE","LTU","LUX","MAC","MKD","MDG","MWI","MYS","MDV","MLI","MLT","MHL","MTQ","MRT","MUS","MYT","MEX","FSM","MDA","MCO","MNG","MNE","MSR","MAR","MOZ","MMR","NAM","NRU","NPL","NLD","NCL","NZL","NIC","NER","NGA","NIU","NFK","MNP","NOR","OMN","PAK","PLW","PSE","PAN","PNG","PRY","PER","PHL","PCN","POL","PRT","PRI","QAT","REU","ROU","RUS","RWA","BLM","SHN","KNA","LCA","MAF","SPM","VCT","WSM","SMR","STP","SAU","SEN","SRB","SYC","SLE","SGP","SXM","SVK","SVN","SLB","SOM","ZAF","SGS","SSD","ESP","LKA","SDN","SUR","SJM","SWZ","SWE","CHE","SYR","TWN","TJK","TZA","THA","TLS","TGO","TKL","TON","TTO","TUN","TUR","TKM","TCA","TUV","UGA","UKR","ARE","GBR","USA","UMI","URY","UZB","VUT","VEN","VNM","VGB","VIR","WLF","ESH","YEM","ZMB","ZWE"]);t.exports=e.default,t.exports.default=e.default},19963:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.has(t.toUpperCase())},e.CurrencyCodes=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=new Set(["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VES","VND","VUV","WST","XAF","XAG","XAU","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMW","ZWL"]),i=a;e.CurrencyCodes=i},65061:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,o.default)(t);var r=e.strictSeparator?i.test(t):a.test(t);return r&&e.strict?u(t):r};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/,i=/^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/,u=function(t){var e=t.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);if(e){var r=Number(e[1]),n=Number(e[2]);return r%4==0&&r%100!=0||r%400==0?n<=366:n<=365}var o=t.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number),a=o[1],i=o[2],u=o[3],c=i?"0".concat(i).slice(-2):i,s=u?"0".concat(u).slice(-2):u,l=new Date("".concat(a,"-").concat(c||"01","-").concat(s||"01"));return!i||!u||l.getUTCFullYear()===a&&l.getUTCMonth()+1===i&&l.getUTCDate()===u};t.exports=e.default,t.exports.default=e.default},34339:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;t.exports=e.default,t.exports.default=e.default},29887:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,o.default)(t);var r=a;if(r=e.require_hyphen?r.replace("?",""):r,!(r=e.case_sensitive?new RegExp(r):new RegExp(r,"i")).test(t))return!1;for(var n=t.replace("-","").toUpperCase(),i=0,u=0;u<n.length;u++){var c=n[u];i+=("X"===c?10:+c)*(8-u)}return i%11==0};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a="^\\d{4}-?\\d{3}[\\dX]$";t.exports=e.default,t.exports.default=e.default},49396:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,n.default)(t),e in i)return i[e](t);if("any"===e){for(var r in i)if(i.hasOwnProperty(r)&&(0,i[r])(t))return!0;return!1}throw new Error("Invalid locale '".concat(e,"'"))};var n=a(r(65571)),o=a(r(20937));function a(t){return t&&t.__esModule?t:{default:t}}var i={PL:function(t){(0,n.default)(t);var e={1:1,2:3,3:7,4:9,5:1,6:3,7:7,8:9,9:1,10:3,11:0};if(null!=t&&11===t.length&&(0,o.default)(t,{allow_leading_zeroes:!0})){var r=t.split("").slice(0,-1).reduce((function(t,r,n){return t+Number(r)*e[n+1]}),0)%10,a=Number(t.charAt(t.length-1));if(0===r&&0===a||a===10-r)return!0}return!1},ES:function(t){(0,n.default)(t);var e={X:0,Y:1,Z:2},r=t.trim().toUpperCase();if(!/^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/.test(r))return!1;var o=r.slice(0,-1).replace(/[X,Y,Z]/g,(function(t){return e[t]}));return r.endsWith(["T","R","W","A","G","M","Y","F","P","D","X","B","N","J","Z","S","Q","V","H","L","C","K","E"][o%23])},FI:function(t){return(0,n.default)(t),11===t.length&&(!!t.match(/^\d{6}[\-A\+]\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)&&"0123456789ABCDEFHJKLMNPRSTUVWXY"[(1e3*parseInt(t.slice(0,6),10)+parseInt(t.slice(7,10),10))%31]===t.slice(10,11))},IN:function(t){var e=[[0,1,2,3,4,5,6,7,8,9],[1,2,3,4,0,6,7,8,9,5],[2,3,4,0,1,7,8,9,5,6],[3,4,0,1,2,8,9,5,6,7],[4,0,1,2,3,9,5,6,7,8],[5,9,8,7,6,0,4,3,2,1],[6,5,9,8,7,1,0,4,3,2],[7,6,5,9,8,2,1,0,4,3],[8,7,6,5,9,3,2,1,0,4],[9,8,7,6,5,4,3,2,1,0]],r=[[0,1,2,3,4,5,6,7,8,9],[1,5,7,6,2,8,3,0,9,4],[5,8,0,3,7,9,6,1,4,2],[8,9,1,6,0,4,3,5,2,7],[9,4,5,3,1,2,6,8,7,0],[4,2,8,6,5,7,3,9,0,1],[2,7,9,3,8,0,6,4,1,5],[7,0,4,6,9,1,3,2,5,8]],n=t.trim();if(!/^[1-9]\d{3}\s?\d{4}\s?\d{4}$/.test(n))return!1;var o=0;return n.replace(/\s/g,"").split("").map(Number).reverse().forEach((function(t,n){o=e[o][r[n%8][t]]})),0===o},IR:function(t){if(!t.match(/^\d{10}$/))return!1;if(t="0000".concat(t).substr(t.length-6),0===parseInt(t.substr(3,6),10))return!1;for(var e=parseInt(t.substr(9,1),10),r=0,n=0;n<9;n++)r+=parseInt(t.substr(n,1),10)*(10-n);return(r%=11)<2&&e===r||r>=2&&e===11-r},IT:function(t){return 9===t.length&&"CA00000AA"!==t&&t.search(/C[A-Z][0-9]{5}[A-Z]{2}/i)>-1},NO:function(t){var e=t.trim();if(isNaN(Number(e)))return!1;if(11!==e.length)return!1;if("00000000000"===e)return!1;var r=e.split("").map(Number),n=(11-(3*r[0]+7*r[1]+6*r[2]+1*r[3]+8*r[4]+9*r[5]+4*r[6]+5*r[7]+2*r[8])%11)%11,o=(11-(5*r[0]+4*r[1]+3*r[2]+2*r[3]+7*r[4]+6*r[5]+5*r[6]+4*r[7]+3*r[8]+2*n)%11)%11;return n===r[9]&&o===r[10]},TH:function(t){if(!t.match(/^[1-8]\d{12}$/))return!1;for(var e=0,r=0;r<12;r++)e+=parseInt(t[r],10)*(13-r);return t[12]===((11-e%11)%10).toString()},LK:function(t){return!(10!==t.length||!/^[1-9]\d{8}[vx]$/i.test(t))||!(12!==t.length||!/^[1-9]\d{11}$/i.test(t))},"he-IL":function(t){var e=t.trim();if(!/^\d{9}$/.test(e))return!1;for(var r,n=e,o=0,a=0;a<n.length;a++)o+=(r=Number(n[a])*(a%2+1))>9?r-9:r;return o%10==0},"ar-LY":function(t){var e=t.trim();return!!/^(1|2)\d{11}$/.test(e)},"ar-TN":function(t){var e=t.trim();return!!/^\d{8}$/.test(e)},"zh-CN":function(t){var e,r=["11","12","13","14","15","21","22","23","31","32","33","34","35","36","37","41","42","43","44","45","46","50","51","52","53","54","61","62","63","64","65","71","81","82","91"],n=["7","9","10","5","8","4","2","1","6","3","7","9","10","5","8","4","2"],o=["1","0","X","9","8","7","6","5","4","3","2"],a=function(t){return r.includes(t)},i=function(t){var e=parseInt(t.substring(0,4),10),r=parseInt(t.substring(4,6),10),n=parseInt(t.substring(6),10),o=new Date(e,r-1,n);return!(o>new Date)&&o.getFullYear()===e&&o.getMonth()===r-1&&o.getDate()===n};return!!/^\d{15}|(\d{17}(\d|x|X))$/.test(e=t)&&(15===e.length?function(t){var e=/^[1-9]\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}$/.test(t);if(!e)return!1;var r=t.substring(0,2);if(!(e=a(r)))return!1;var n="19".concat(t.substring(6,12));return!!(e=i(n))}(e):function(t){var e=/^[1-9]\d{5}[1-9]\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}(\d|x|X)$/.test(t);if(!e)return!1;var r=t.substring(0,2);if(!(e=a(r)))return!1;var u=t.substring(6,14);return!!(e=i(u))&&function(t){return function(t){for(var e=t.substring(0,17),r=0,a=0;a<17;a++)r+=parseInt(e.charAt(a),10)*parseInt(n[a],10);return o[r%11]}(t)===t.charAt(17).toUpperCase()}(t)}(e))},"zh-TW":function(t){var e={A:10,B:11,C:12,D:13,E:14,F:15,G:16,H:17,I:34,J:18,K:19,L:20,M:21,N:22,O:35,P:23,Q:24,R:25,S:26,T:27,U:28,V:29,W:32,X:30,Y:31,Z:33},r=t.trim().toUpperCase();return!!/^[A-Z][0-9]{9}$/.test(r)&&Array.from(r).reduce((function(t,r,n){if(0===n){var o=e[r];return o%10*9+Math.floor(o/10)}return 9===n?(10-t%10-Number(r))%10==0:t+Number(r)*(9-n)}),0)}};t.exports=e.default,t.exports.default=e.default},27228:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var r;if((0,n.default)(t),"[object Array]"===Object.prototype.toString.call(e)){var a=[];for(r in e)({}).hasOwnProperty.call(e,r)&&(a[r]=(0,o.default)(e[r]));return a.indexOf(t)>=0}return"object"===i(e)?e.hasOwnProperty(t):!(!e||"function"!=typeof e.indexOf)&&e.indexOf(t)>=0};var n=a(r(65571)),o=a(r(95791));function a(t){return t&&t.__esModule?t:{default:t}}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}t.exports=e.default,t.exports.default=e.default},20937:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,o.default)(t);var r=(e=e||{}).hasOwnProperty("allow_leading_zeroes")&&!e.allow_leading_zeroes?a:i,n=!e.hasOwnProperty("min")||t>=e.min,u=!e.hasOwnProperty("max")||t<=e.max,c=!e.hasOwnProperty("lt")||t<e.lt,s=!e.hasOwnProperty("gt")||t>e.gt;return r.test(t)&&n&&u&&c&&s};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(?:[-+]?(?:0|[1-9][0-9]*))$/,i=/^[-+]?[0-9]+$/;t.exports=e.default,t.exports.default=e.default},81008:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,n.default)(t);try{e=(0,o.default)(e,u);var r=[];e.allow_primitives&&(r=[null,!1,!0]);var a=JSON.parse(t);return r.includes(a)||!!a&&"object"===i(a)}catch(t){}return!1};var n=a(r(65571)),o=a(r(84808));function a(t){return t&&t.__esModule?t:{default:t}}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}var u={allow_primitives:!1};t.exports=e.default,t.exports.default=e.default},74979:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,n.default)(t);var e=t.split("."),r=e.length;return!(r>3||r<2)&&e.reduce((function(t,e){return t&&(0,o.default)(e,{urlSafe:!0})}),!0)};var n=a(r(65571)),o=a(r(2689));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default,t.exports.default=e.default},90478:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,n.default)(t),e=(0,o.default)(e,l),!t.includes(","))return!1;var r=t.split(",");return!(r[0].startsWith("(")&&!r[1].endsWith(")")||r[1].endsWith(")")&&!r[0].startsWith("("))&&(e.checkDMS?c.test(r[0])&&s.test(r[1]):i.test(r[0])&&u.test(r[1]))};var n=a(r(65571)),o=a(r(84808));function a(t){return t&&t.__esModule?t:{default:t}}var i=/^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/,u=/^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/,c=/^(([1-8]?\d)\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|90\D+0\D+0)\D+[NSns]?$/i,s=/^\s*([1-7]?\d{1,2}\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|180\D+0\D+0)\D+[EWew]?$/i,l={checkDMS:!1};t.exports=e.default,t.exports.default=e.default},20661:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var r,n;(0,o.default)(t),"object"===a(e)?(r=e.min||0,n=e.max):(r=arguments[1]||0,n=arguments[2]);var i=t.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g)||[],u=t.length-i.length;return u>=r&&(void 0===n||u<=n)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}t.exports=e.default,t.exports.default=e.default},82786:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,o.default)(t),e in a)return a[e](t);if("any"===e){for(var r in a)if((0,a[r])(t))return!0;return!1}throw new Error("Invalid locale '".concat(e,"'"))};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a={"cs-CZ":function(t){return/^(([ABCDEFHKIJKLMNPRSTUVXYZ]|[0-9])-?){5,8}$/.test(t)},"de-DE":function(t){return/^((AW|UL|AK|GA|AÖ|LF|AZ|AM|AS|ZE|AN|AB|A|KG|KH|BA|EW|BZ|HY|KM|BT|HP|B|BC|BI|BO|FN|TT|ÜB|BN|AH|BS|FR|HB|ZZ|BB|BK|BÖ|OC|OK|CW|CE|C|CO|LH|CB|KW|LC|LN|DA|DI|DE|DH|SY|NÖ|DO|DD|DU|DN|D|EI|EA|EE|FI|EM|EL|EN|PF|ED|EF|ER|AU|ZP|E|ES|NT|EU|FL|FO|FT|FF|F|FS|FD|FÜ|GE|G|GI|GF|GS|ZR|GG|GP|GR|NY|ZI|GÖ|GZ|GT|HA|HH|HM|HU|WL|HZ|WR|RN|HK|HD|HN|HS|GK|HE|HF|RZ|HI|HG|HO|HX|IK|IL|IN|J|JL|KL|KA|KS|KF|KE|KI|KT|KO|KN|KR|KC|KU|K|LD|LL|LA|L|OP|LM|LI|LB|LU|LÖ|HL|LG|MD|GN|MZ|MA|ML|MR|MY|AT|DM|MC|NZ|RM|RG|MM|ME|MB|MI|FG|DL|HC|MW|RL|MK|MG|MÜ|WS|MH|M|MS|NU|NB|ND|NM|NK|NW|NR|NI|NF|DZ|EB|OZ|TG|TO|N|OA|GM|OB|CA|EH|FW|OF|OL|OE|OG|BH|LR|OS|AA|GD|OH|KY|NP|WK|PB|PA|PE|PI|PS|P|PM|PR|RA|RV|RE|R|H|SB|WN|RS|RD|RT|BM|NE|GV|RP|SU|GL|RO|GÜ|RH|EG|RW|PN|SK|MQ|RU|SZ|RI|SL|SM|SC|HR|FZ|VS|SW|SN|CR|SE|SI|SO|LP|SG|NH|SP|IZ|ST|BF|TE|HV|OD|SR|S|AC|DW|ZW|TF|TS|TR|TÜ|UM|PZ|TP|UE|UN|UH|MN|KK|VB|V|AE|PL|RC|VG|GW|PW|VR|VK|KB|WA|WT|BE|WM|WE|AP|MO|WW|FB|WZ|WI|WB|JE|WF|WO|W|WÜ|BL|Z|GC)[- ]?[A-Z]{1,2}[- ]?\d{1,4}|(AIC|FDB|ABG|SLN|SAW|KLZ|BUL|ESB|NAB|SUL|WST|ABI|AZE|BTF|KÖT|DKB|FEU|ROT|ALZ|SMÜ|WER|AUR|NOR|DÜW|BRK|HAB|TÖL|WOR|BAD|BAR|BER|BIW|EBS|KEM|MÜB|PEG|BGL|BGD|REI|WIL|BKS|BIR|WAT|BOR|BOH|BOT|BRB|BLK|HHM|NEB|NMB|WSF|LEO|HDL|WMS|WZL|BÜS|CHA|KÖZ|ROD|WÜM|CLP|NEC|COC|ZEL|COE|CUX|DAH|LDS|DEG|DEL|RSL|DLG|DGF|LAN|HEI|MED|DON|KIB|ROK|JÜL|MON|SLE|EBE|EIC|HIG|WBS|BIT|PRÜ|LIB|EMD|WIT|ERH|HÖS|ERZ|ANA|ASZ|MAB|MEK|STL|SZB|FDS|HCH|HOR|WOL|FRG|GRA|WOS|FRI|FFB|GAP|GER|BRL|CLZ|GTH|NOH|HGW|GRZ|LÖB|NOL|WSW|DUD|HMÜ|OHA|KRU|HAL|HAM|HBS|QLB|HVL|NAU|HAS|EBN|GEO|HOH|HDH|ERK|HER|WAN|HEF|ROF|HBN|ALF|HSK|USI|NAI|REH|SAN|KÜN|ÖHR|HOL|WAR|ARN|BRG|GNT|HOG|WOH|KEH|MAI|PAR|RID|ROL|KLE|GEL|KUS|KYF|ART|SDH|LDK|DIL|MAL|VIB|LER|BNA|GHA|GRM|MTL|WUR|LEV|LIF|STE|WEL|LIP|VAI|LUP|HGN|LBZ|LWL|PCH|STB|DAN|MKK|SLÜ|MSP|TBB|MGH|MTK|BIN|MSH|EIL|HET|SGH|BID|MYK|MSE|MST|MÜR|WRN|MEI|GRH|RIE|MZG|MIL|OBB|BED|FLÖ|MOL|FRW|SEE|SRB|AIB|MOS|BCH|ILL|SOB|NMS|NEA|SEF|UFF|NEW|VOH|NDH|TDO|NWM|GDB|GVM|WIS|NOM|EIN|GAN|LAU|HEB|OHV|OSL|SFB|ERB|LOS|BSK|KEL|BSB|MEL|WTL|OAL|FÜS|MOD|OHZ|OPR|BÜR|PAF|PLÖ|CAS|GLA|REG|VIT|ECK|SIM|GOA|EMS|DIZ|GOH|RÜD|SWA|NES|KÖN|MET|LRO|BÜZ|DBR|ROS|TET|HRO|ROW|BRV|HIP|PAN|GRI|SHK|EIS|SRO|SOK|LBS|SCZ|MER|QFT|SLF|SLS|HOM|SLK|ASL|BBG|SBK|SFT|SHG|MGN|MEG|ZIG|SAD|NEN|OVI|SHA|BLB|SIG|SON|SPN|FOR|GUB|SPB|IGB|WND|STD|STA|SDL|OBG|HST|BOG|SHL|PIR|FTL|SEB|SÖM|SÜW|TIR|SAB|TUT|ANG|SDT|LÜN|LSZ|MHL|VEC|VER|VIE|OVL|ANK|OVP|SBG|UEM|UER|WLG|GMN|NVP|RDG|RÜG|DAU|FKB|WAF|WAK|SLZ|WEN|SOG|APD|WUG|GUN|ESW|WIZ|WES|DIN|BRA|BÜD|WHV|HWI|GHC|WTM|WOB|WUN|MAK|SEL|OCH|HOT|WDA)[- ]?(([A-Z][- ]?\d{1,4})|([A-Z]{2}[- ]?\d{1,3})))[- ]?(E|H)?$/.test(t)},"de-LI":function(t){return/^FL[- ]?\d{1,5}[UZ]?$/.test(t)},"fi-FI":function(t){return/^(?=.{4,7})(([A-Z]{1,3}|[0-9]{1,3})[\s-]?([A-Z]{1,3}|[0-9]{1,5}))$/.test(t)},"pt-PT":function(t){return/^([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})$/.test(t)},"sq-AL":function(t){return/^[A-Z]{2}[- ]?((\d{3}[- ]?(([A-Z]{2})|T))|(R[- ]?\d{3}))$/.test(t)},"pt-BR":function(t){return/^[A-Z]{3}[ -]?[0-9][A-Z][0-9]{2}|[A-Z]{3}[ -]?[0-9]{4}$/.test(t)}};t.exports=e.default,t.exports.default=e.default},67380:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),"en_US_POSIX"===t||"ca_ES_VALENCIA"===t||a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[A-Za-z]{2,4}([_-]([A-Za-z]{4}|[\d]{3}))?([_-]([A-Za-z]{2}|[\d]{3}))?$/;t.exports=e.default,t.exports.default=e.default},43928:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),t===t.toLowerCase()};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},28999:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,o.default)(t),e&&(e.no_colons||e.no_separators)?i.test(t):a.test(t)||u.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){4}([0-9a-fA-F]{2})$/,i=/^([0-9a-fA-F]){12}$/,u=/^([0-9a-fA-F]{4}\.){2}([0-9a-fA-F]{4})$/;t.exports=e.default,t.exports.default=e.default},90368:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[a-f0-9]{32}$/;t.exports=e.default,t.exports.default=e.default},72776:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t.trim())};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^magnet:\?xt(?:\.1)?=urn:(?:aich|bitprint|btih|ed2k|ed2khash|kzhash|md5|sha1|tree:tiger):[a-z0-9]{32}(?:[a-z0-9]{8})?($|&)/i;t.exports=e.default,t.exports.default=e.default},44554:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)||i.test(t)||u.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+]{1,100}$/i,i=/^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i,u=/^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i;t.exports=e.default,t.exports.default=e.default},28355:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){if((0,o.default)(t),r&&r.strictMode&&!t.startsWith("+"))return!1;if(Array.isArray(e))return e.some((function(e){return!(!a.hasOwnProperty(e)||!a[e].test(t))}));if(e in a)return a[e].test(t);if(!e||"any"===e){for(var n in a)if(a.hasOwnProperty(n)&&a[n].test(t))return!0;return!1}throw new Error("Invalid locale '".concat(e,"'"))},e.locales=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a={"am-AM":/^(\+?374|0)((10|[9|7][0-9])\d{6}$|[2-4]\d{7}$)/,"ar-AE":/^((\+?971)|0)?5[024568]\d{7}$/,"ar-BH":/^(\+?973)?(3|6)\d{7}$/,"ar-DZ":/^(\+?213|0)(5|6|7)\d{8}$/,"ar-LB":/^(\+?961)?((3|81)\d{6}|7\d{7})$/,"ar-EG":/^((\+?20)|0)?1[0125]\d{8}$/,"ar-IQ":/^(\+?964|0)?7[0-9]\d{8}$/,"ar-JO":/^(\+?962|0)?7[789]\d{7}$/,"ar-KW":/^(\+?965)[569]\d{7}$/,"ar-LY":/^((\+?218)|0)?(9[1-6]\d{7}|[1-8]\d{7,9})$/,"ar-MA":/^(?:(?:\+|00)212|0)[5-7]\d{8}$/,"ar-OM":/^((\+|00)968)?(9[1-9])\d{6}$/,"ar-PS":/^(\+?970|0)5[6|9](\d{7})$/,"ar-SA":/^(!?(\+?966)|0)?5\d{8}$/,"ar-SY":/^(!?(\+?963)|0)?9\d{8}$/,"ar-TN":/^(\+?216)?[2459]\d{7}$/,"az-AZ":/^(\+994|0)(5[015]|7[07]|99)\d{7}$/,"bs-BA":/^((((\+|00)3876)|06))((([0-3]|[5-6])\d{6})|(4\d{7}))$/,"be-BY":/^(\+?375)?(24|25|29|33|44)\d{7}$/,"bg-BG":/^(\+?359|0)?8[789]\d{7}$/,"bn-BD":/^(\+?880|0)1[13456789][0-9]{8}$/,"ca-AD":/^(\+376)?[346]\d{5}$/,"cs-CZ":/^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,"da-DK":/^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,"de-DE":/^((\+49|0)[1|3])([0|5][0-45-9]\d|6([23]|0\d?)|7([0-57-9]|6\d))\d{7,9}$/,"de-AT":/^(\+43|0)\d{1,4}\d{3,12}$/,"de-CH":/^(\+41|0)([1-9])\d{1,9}$/,"de-LU":/^(\+352)?((6\d1)\d{6})$/,"dv-MV":/^(\+?960)?(7[2-9]|91|9[3-9])\d{7}$/,"el-GR":/^(\+?30|0)?(69\d{8})$/,"en-AU":/^(\+?61|0)4\d{8}$/,"en-BM":/^(\+?1)?441(((3|7)\d{6}$)|(5[0-3][0-9]\d{4}$)|(59\d{5}))/,"en-GB":/^(\+?44|0)7\d{9}$/,"en-GG":/^(\+?44|0)1481\d{6}$/,"en-GH":/^(\+233|0)(20|50|24|54|27|57|26|56|23|28|55|59)\d{7}$/,"en-GY":/^(\+592|0)6\d{6}$/,"en-HK":/^(\+?852[-\s]?)?[456789]\d{3}[-\s]?\d{4}$/,"en-MO":/^(\+?853[-\s]?)?[6]\d{3}[-\s]?\d{4}$/,"en-IE":/^(\+?353|0)8[356789]\d{7}$/,"en-IN":/^(\+?91|0)?[6789]\d{9}$/,"en-KE":/^(\+?254|0)(7|1)\d{8}$/,"en-KI":/^((\+686|686)?)?( )?((6|7)(2|3|8)[0-9]{6})$/,"en-MT":/^(\+?356|0)?(99|79|77|21|27|22|25)[0-9]{6}$/,"en-MU":/^(\+?230|0)?\d{8}$/,"en-NA":/^(\+?264|0)(6|8)\d{7}$/,"en-NG":/^(\+?234|0)?[789]\d{9}$/,"en-NZ":/^(\+?64|0)[28]\d{7,9}$/,"en-PK":/^((00|\+)?92|0)3[0-6]\d{8}$/,"en-PH":/^(09|\+639)\d{9}$/,"en-RW":/^(\+?250|0)?[7]\d{8}$/,"en-SG":/^(\+65)?[3689]\d{7}$/,"en-SL":/^(\+?232|0)\d{8}$/,"en-TZ":/^(\+?255|0)?[67]\d{8}$/,"en-UG":/^(\+?256|0)?[7]\d{8}$/,"en-US":/^((\+1|1)?( |-)?)?(\([2-9][0-9]{2}\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,"en-ZA":/^(\+?27|0)\d{9}$/,"en-ZM":/^(\+?26)?09[567]\d{7}$/,"en-ZW":/^(\+263)[0-9]{9}$/,"en-BW":/^(\+?267)?(7[1-8]{1})\d{6}$/,"es-AR":/^\+?549(11|[2368]\d)\d{8}$/,"es-BO":/^(\+?591)?(6|7)\d{7}$/,"es-CO":/^(\+?57)?3(0(0|1|2|4|5)|1\d|2[0-4]|5(0|1))\d{7}$/,"es-CL":/^(\+?56|0)[2-9]\d{1}\d{7}$/,"es-CR":/^(\+506)?[2-8]\d{7}$/,"es-CU":/^(\+53|0053)?5\d{7}/,"es-DO":/^(\+?1)?8[024]9\d{7}$/,"es-HN":/^(\+?504)?[9|8]\d{7}$/,"es-EC":/^(\+?593|0)([2-7]|9[2-9])\d{7}$/,"es-ES":/^(\+?34)?[6|7]\d{8}$/,"es-PE":/^(\+?51)?9\d{8}$/,"es-MX":/^(\+?52)?(1|01)?\d{10,11}$/,"es-PA":/^(\+?507)\d{7,8}$/,"es-PY":/^(\+?595|0)9[9876]\d{7}$/,"es-SV":/^(\+?503)?[67]\d{7}$/,"es-UY":/^(\+598|0)9[1-9][\d]{6}$/,"es-VE":/^(\+?58)?(2|4)\d{9}$/,"et-EE":/^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,"fa-IR":/^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,"fi-FI":/^(\+?358|0)\s?(4(0|1|2|4|5|6)?|50)\s?(\d\s?){4,8}\d$/,"fj-FJ":/^(\+?679)?\s?\d{3}\s?\d{4}$/,"fo-FO":/^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,"fr-BF":/^(\+226|0)[67]\d{7}$/,"fr-CM":/^(\+?237)6[0-9]{8}$/,"fr-FR":/^(\+?33|0)[67]\d{8}$/,"fr-GF":/^(\+?594|0|00594)[67]\d{8}$/,"fr-GP":/^(\+?590|0|00590)[67]\d{8}$/,"fr-MQ":/^(\+?596|0|00596)[67]\d{8}$/,"fr-PF":/^(\+?689)?8[789]\d{6}$/,"fr-RE":/^(\+?262|0|00262)[67]\d{8}$/,"he-IL":/^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}$/,"hu-HU":/^(\+?36|06)(20|30|31|50|70)\d{7}$/,"id-ID":/^(\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\s?|\d]{5,11})$/,"it-IT":/^(\+?39)?\s?3\d{2} ?\d{6,7}$/,"it-SM":/^((\+378)|(0549)|(\+390549)|(\+3780549))?6\d{5,9}$/,"ja-JP":/^(\+81[ \-]?(\(0\))?|0)[6789]0[ \-]?\d{4}[ \-]?\d{4}$/,"ka-GE":/^(\+?995)?(5|79)\d{7}$/,"kk-KZ":/^(\+?7|8)?7\d{9}$/,"kl-GL":/^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,"ko-KR":/^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,"lt-LT":/^(\+370|8)\d{8}$/,"lv-LV":/^(\+?371)2\d{7}$/,"ms-MY":/^(\+?6?01){1}(([0145]{1}(\-|\s)?\d{7,8})|([236789]{1}(\s|\-)?\d{7}))$/,"mz-MZ":/^(\+?258)?8[234567]\d{7}$/,"nb-NO":/^(\+?47)?[49]\d{7}$/,"ne-NP":/^(\+?977)?9[78]\d{8}$/,"nl-BE":/^(\+?32|0)4\d{8}$/,"nl-NL":/^(((\+|00)?31\(0\))|((\+|00)?31)|0)6{1}\d{8}$/,"nn-NO":/^(\+?47)?[49]\d{7}$/,"pl-PL":/^(\+?48)? ?[5-8]\d ?\d{3} ?\d{2} ?\d{2}$/,"pt-BR":/^((\+?55\ ?[1-9]{2}\ ?)|(\+?55\ ?\([1-9]{2}\)\ ?)|(0[1-9]{2}\ ?)|(\([1-9]{2}\)\ ?)|([1-9]{2}\ ?))((\d{4}\-?\d{4})|(9[2-9]{1}\d{3}\-?\d{4}))$/,"pt-PT":/^(\+?351)?9[1236]\d{7}$/,"pt-AO":/^(\+244)\d{9}$/,"ro-RO":/^(\+?4?0)\s?7\d{2}(\/|\s|\.|\-)?\d{3}(\s|\.|\-)?\d{3}$/,"ru-RU":/^(\+?7|8)?9\d{9}$/,"si-LK":/^(?:0|94|\+94)?(7(0|1|2|4|5|6|7|8)( |-)?)\d{7}$/,"sl-SI":/^(\+386\s?|0)(\d{1}\s?\d{3}\s?\d{2}\s?\d{2}|\d{2}\s?\d{3}\s?\d{3})$/,"sk-SK":/^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,"sq-AL":/^(\+355|0)6[789]\d{6}$/,"sr-RS":/^(\+3816|06)[- \d]{5,9}$/,"sv-SE":/^(\+?46|0)[\s\-]?7[\s\-]?[02369]([\s\-]?\d){7}$/,"tg-TJ":/^(\+?992)?[5][5]\d{7}$/,"th-TH":/^(\+66|66|0)\d{9}$/,"tr-TR":/^(\+?90|0)?5\d{9}$/,"tk-TM":/^(\+993|993|8)\d{8}$/,"uk-UA":/^(\+?38|8)?0\d{9}$/,"uz-UZ":/^(\+?998)?(6[125-79]|7[1-69]|88|9\d)\d{7}$/,"vi-VN":/^((\+?84)|0)((3([2-9]))|(5([25689]))|(7([0|6-9]))|(8([1-9]))|(9([0-9])))([0-9]{7})$/,"zh-CN":/^((\+|00)86)?(1[3-9]|9[28])\d{9}$/,"zh-TW":/^(\+?886\-?|0)?9\d{8}$/,"dz-BT":/^(\+?975|0)?(17|16|77|02)\d{6}$/};a["en-CA"]=a["en-US"],a["fr-CA"]=a["en-CA"],a["fr-BE"]=a["nl-BE"],a["zh-HK"]=a["en-HK"],a["zh-MO"]=a["en-MO"],a["ga-IE"]=a["en-IE"],a["fr-CH"]=a["de-CH"],a["it-CH"]=a["fr-CH"];var i=Object.keys(a);e.locales=i},19131:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,n.default)(t),(0,o.default)(t)&&24===t.length};var n=a(r(65571)),o=a(r(77117));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default,t.exports.default=e.default},13590:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/[^\x00-\x7F]/;t.exports=e.default,t.exports.default=e.default},24986:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,o.default)(t),e&&e.no_symbols?i.test(t):new RegExp("^[+-]?([0-9]*[".concat((e||{}).locale?a.decimal[e.locale]:".","])?[0-9]+$")).test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=r(60079),i=/^[0-9]+$/;t.exports=e.default,t.exports.default=e.default},66090:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^(0o)?[0-7]+$/i;t.exports=e.default,t.exports.default=e.default},51513:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,o.default)(t);var r=t.replace(/\s/g,"").toUpperCase();return e.toUpperCase()in a&&a[e].test(r)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a={AM:/^[A-Z]{2}\d{7}$/,AR:/^[A-Z]{3}\d{6}$/,AT:/^[A-Z]\d{7}$/,AU:/^[A-Z]\d{7}$/,BE:/^[A-Z]{2}\d{6}$/,BG:/^\d{9}$/,BR:/^[A-Z]{2}\d{6}$/,BY:/^[A-Z]{2}\d{7}$/,CA:/^[A-Z]{2}\d{6}$/,CH:/^[A-Z]\d{7}$/,CN:/^G\d{8}$|^E(?![IO])[A-Z0-9]\d{7}$/,CY:/^[A-Z](\d{6}|\d{8})$/,CZ:/^\d{8}$/,DE:/^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,DK:/^\d{9}$/,DZ:/^\d{9}$/,EE:/^([A-Z]\d{7}|[A-Z]{2}\d{7})$/,ES:/^[A-Z0-9]{2}([A-Z0-9]?)\d{6}$/,FI:/^[A-Z]{2}\d{7}$/,FR:/^\d{2}[A-Z]{2}\d{5}$/,GB:/^\d{9}$/,GR:/^[A-Z]{2}\d{7}$/,HR:/^\d{9}$/,HU:/^[A-Z]{2}(\d{6}|\d{7})$/,IE:/^[A-Z0-9]{2}\d{7}$/,IN:/^[A-Z]{1}-?\d{7}$/,ID:/^[A-C]\d{7}$/,IR:/^[A-Z]\d{8}$/,IS:/^(A)\d{7}$/,IT:/^[A-Z0-9]{2}\d{7}$/,JP:/^[A-Z]{2}\d{7}$/,KR:/^[MS]\d{8}$/,LT:/^[A-Z0-9]{8}$/,LU:/^[A-Z0-9]{8}$/,LV:/^[A-Z0-9]{2}\d{7}$/,LY:/^[A-Z0-9]{8}$/,MT:/^\d{7}$/,MZ:/^([A-Z]{2}\d{7})|(\d{2}[A-Z]{2}\d{5})$/,MY:/^[AHK]\d{8}$/,NL:/^[A-Z]{2}[A-Z0-9]{6}\d$/,PL:/^[A-Z]{2}\d{7}$/,PT:/^[A-Z]\d{6}$/,RO:/^\d{8,9}$/,RU:/^\d{9}$/,SE:/^\d{8}$/,SL:/^(P)[A-Z]\d{7}$/,SK:/^[0-9A-Z]\d{7}$/,TR:/^[A-Z]\d{8}$/,UA:/^[A-Z]{2}\d{6}$/,US:/^\d{9}$/};t.exports=e.default,t.exports.default=e.default},24595:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t,{min:0,max:65535})};var n,o=(n=r(20937))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},78140:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,o.default)(t),e in c)return c[e].test(t);if("any"===e){for(var r in c)if(c.hasOwnProperty(r)&&c[r].test(t))return!0;return!1}throw new Error("Invalid locale '".concat(e,"'"))},e.locales=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^\d{4}$/,i=/^\d{5}$/,u=/^\d{6}$/,c={AD:/^AD\d{3}$/,AT:a,AU:a,AZ:/^AZ\d{4}$/,BE:a,BG:a,BR:/^\d{5}-\d{3}$/,BY:/2[1-4]{1}\d{4}$/,CA:/^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,CH:a,CN:/^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\d{4}$/,CZ:/^\d{3}\s?\d{2}$/,DE:i,DK:a,DO:i,DZ:i,EE:i,ES:/^(5[0-2]{1}|[0-4]{1}\d{1})\d{3}$/,FI:i,FR:/^\d{2}\s?\d{3}$/,GB:/^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,GR:/^\d{3}\s?\d{2}$/,HR:/^([1-5]\d{4}$)/,HT:/^HT\d{4}$/,HU:a,ID:i,IE:/^(?!.*(?:o))[A-Za-z]\d[\dw]\s\w{4}$/i,IL:/^(\d{5}|\d{7})$/,IN:/^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,IR:/\b(?!(\d)\1{3})[13-9]{4}[1346-9][013-9]{5}\b/,IS:/^\d{3}$/,IT:i,JP:/^\d{3}\-\d{4}$/,KE:i,KR:/^(\d{5}|\d{6})$/,LI:/^(948[5-9]|949[0-7])$/,LT:/^LT\-\d{5}$/,LU:a,LV:/^LV\-\d{4}$/,LK:i,MX:i,MT:/^[A-Za-z]{3}\s{0,1}\d{4}$/,MY:i,NL:/^\d{4}\s?[a-z]{2}$/i,NO:a,NP:/^(10|21|22|32|33|34|44|45|56|57)\d{3}$|^(977)$/i,NZ:a,PL:/^\d{2}\-\d{3}$/,PR:/^00[679]\d{2}([ -]\d{4})?$/,PT:/^\d{4}\-\d{3}?$/,RO:u,RU:u,SA:i,SE:/^[1-9]\d{2}\s?\d{2}$/,SG:u,SI:a,SK:/^\d{3}\s?\d{2}$/,TH:i,TN:a,TW:/^\d{3}(\d{2})?$/,UA:i,US:/^\d{5}(-\d{4})?$/,ZA:a,ZM:i},s=Object.keys(c);e.locales=s},94611:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),d.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/([01][0-9]|2[0-3])/,i=/[0-5][0-9]/,u=new RegExp("[-+]".concat(a.source,":").concat(i.source)),c=new RegExp("([zZ]|".concat(u.source,")")),s=new RegExp("".concat(a.source,":").concat(i.source,":").concat(/([0-5][0-9]|60)/.source).concat(/(\.[0-9]+)?/.source)),l=new RegExp("".concat(/[0-9]{4}/.source,"-").concat(/(0[1-9]|1[0-2])/.source,"-").concat(/([12]\d|0[1-9]|3[01])/.source)),f=new RegExp("".concat(s.source).concat(c.source)),d=new RegExp("^".concat(l.source,"[ tT]").concat(f.source,"$"));t.exports=e.default,t.exports.default=e.default},6454:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return(0,o.default)(t),e?a.test(t)||i.test(t)||u.test(t)||c.test(t):a.test(t)||i.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^rgb\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\)$/,i=/^rgba\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)$/,u=/^rgb\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\)/,c=/^rgba\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)/;t.exports=e.default,t.exports.default=e.default},86826:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,n.default)(t),a.test(t)};var n=o(r(65571));function o(t){return t&&t.__esModule?t:{default:t}}var a=(0,o(r(24731)).default)(["^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)","(?:-((?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*))*))","?(?:\\+([0-9a-z-]+(?:\\.[0-9a-z-]+)*))?$"],"i");t.exports=e.default,t.exports.default=e.default},68220:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/^[^\s-_](?!.*?[-_]{2,})[a-z0-9-\\][^\s]*[^-_\s]$/;t.exports=e.default,t.exports.default=e.default},17633:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;(0,o.default)(t);var r=f(t);return(e=(0,n.default)(e||{},l)).returnScore?d(r,e):r.length>=e.minLength&&r.lowercaseCount>=e.minLowercase&&r.uppercaseCount>=e.minUppercase&&r.numberCount>=e.minNumbers&&r.symbolCount>=e.minSymbols};var n=a(r(84808)),o=a(r(65571));function a(t){return t&&t.__esModule?t:{default:t}}var i=/^[A-Z]$/,u=/^[a-z]$/,c=/^[0-9]$/,s=/^[-#!$@%^&*()_+|~=`{}\[\]:";'<>?,.\/ ]$/,l={minLength:8,minLowercase:1,minUppercase:1,minNumbers:1,minSymbols:1,returnScore:!1,pointsPerUnique:1,pointsPerRepeat:.5,pointsForContainingLower:10,pointsForContainingUpper:10,pointsForContainingNumber:10,pointsForContainingSymbol:10};function f(t){var e,r,n=(e=t,r={},Array.from(e).forEach((function(t){r[t]?r[t]+=1:r[t]=1})),r),o={length:t.length,uniqueChars:Object.keys(n).length,uppercaseCount:0,lowercaseCount:0,numberCount:0,symbolCount:0};return Object.keys(n).forEach((function(t){i.test(t)?o.uppercaseCount+=n[t]:u.test(t)?o.lowercaseCount+=n[t]:c.test(t)?o.numberCount+=n[t]:s.test(t)&&(o.symbolCount+=n[t])})),o}function d(t,e){var r=0;return r+=t.uniqueChars*e.pointsPerUnique,r+=(t.length-t.uniqueChars)*e.pointsPerRepeat,t.lowercaseCount>0&&(r+=e.pointsForContainingLower),t.uppercaseCount>0&&(r+=e.pointsForContainingUpper),t.numberCount>0&&(r+=e.pointsForContainingNumber),t.symbolCount>0&&(r+=e.pointsForContainingSymbol),r}t.exports=e.default,t.exports.default=e.default},72828:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=/[\uD800-\uDBFF][\uDC00-\uDFFF]/;t.exports=e.default,t.exports.default=e.default},53058:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"en-US";(0,o.default)(t);var r=t.slice(0);if(e in d)return e in v&&(r=r.replace(v[e],"")),!!d[e].test(r)&&(!(e in p)||p[e](r));throw new Error("Invalid locale '".concat(e,"'"))};var o=c(r(65571)),a=function(t){if(t&&t.__esModule)return t;if(null===t||"object"!==n(t)&&"function"!=typeof t)return{default:t};var e=u();if(e&&e.has(t))return e.get(t);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in t)if(Object.prototype.hasOwnProperty.call(t,a)){var i=o?Object.getOwnPropertyDescriptor(t,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=t[a]}return r.default=t,e&&e.set(t,r),r}(r(83672)),i=c(r(82549));function u(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return u=function(){return t},t}function c(t){return t&&t.__esModule?t:{default:t}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var l={andover:["10","12"],atlanta:["60","67"],austin:["50","53"],brookhaven:["01","02","03","04","05","06","11","13","14","16","21","22","23","25","34","51","52","54","55","56","57","58","59","65"],cincinnati:["30","32","35","36","37","38","61"],fresno:["15","24"],internet:["20","26","27","45","46","47"],kansas:["40","44"],memphis:["94","95"],ogden:["80","90"],philadelphia:["33","39","41","42","43","46","48","62","63","64","66","68","71","72","73","74","75","76","77","81","82","83","84","85","86","87","88","91","92","93","98","99"],sba:["31"]};function f(t){for(var e=!1,r=!1,n=0;n<3;n++)if(!e&&/[AEIOU]/.test(t[n]))e=!0;else if(!r&&e&&"X"===t[n])r=!0;else if(n>0){if(e&&!r&&!/[AEIOU]/.test(t[n]))return!1;if(r&&!/X/.test(t[n]))return!1}return!0}var d={"bg-BG":/^\d{10}$/,"cs-CZ":/^\d{6}\/{0,1}\d{3,4}$/,"de-AT":/^\d{9}$/,"de-DE":/^[1-9]\d{10}$/,"dk-DK":/^\d{6}-{0,1}\d{4}$/,"el-CY":/^[09]\d{7}[A-Z]$/,"el-GR":/^([0-4]|[7-9])\d{8}$/,"en-GB":/^\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\d{6}[ABCD ]$/i,"en-IE":/^\d{7}[A-W][A-IW]{0,1}$/i,"en-US":/^\d{2}[- ]{0,1}\d{7}$/,"es-ES":/^(\d{0,8}|[XYZKLM]\d{7})[A-HJ-NP-TV-Z]$/i,"et-EE":/^[1-6]\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\d$/,"fi-FI":/^\d{6}[-+A]\d{3}[0-9A-FHJ-NPR-Y]$/i,"fr-BE":/^\d{11}$/,"fr-FR":/^[0-3]\d{12}$|^[0-3]\d\s\d{2}(\s\d{3}){3}$/,"fr-LU":/^\d{13}$/,"hr-HR":/^\d{11}$/,"hu-HU":/^8\d{9}$/,"it-IT":/^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,"lv-LV":/^\d{6}-{0,1}\d{5}$/,"mt-MT":/^\d{3,7}[APMGLHBZ]$|^([1-8])\1\d{7}$/i,"nl-NL":/^\d{9}$/,"pl-PL":/^\d{10,11}$/,"pt-BR":/(?:^\d{11}$)|(?:^\d{14}$)/,"pt-PT":/^\d{9}$/,"ro-RO":/^\d{13}$/,"sk-SK":/^\d{6}\/{0,1}\d{3,4}$/,"sl-SI":/^[1-9]\d{7}$/,"sv-SE":/^(\d{6}[-+]{0,1}\d{4}|(18|19|20)\d{6}[-+]{0,1}\d{4})$/};d["lb-LU"]=d["fr-LU"],d["lt-LT"]=d["et-EE"],d["nl-BE"]=d["fr-BE"];var p={"bg-BG":function(t){var e=t.slice(0,2),r=parseInt(t.slice(2,4),10);r>40?(r-=40,e="20".concat(e)):r>20?(r-=20,e="18".concat(e)):e="19".concat(e),r<10&&(r="0".concat(r));var n="".concat(e,"/").concat(r,"/").concat(t.slice(4,6));if(!(0,i.default)(n,"YYYY/MM/DD"))return!1;for(var o=t.split("").map((function(t){return parseInt(t,10)})),a=[2,4,8,5,10,9,7,3,6],u=0,c=0;c<a.length;c++)u+=o[c]*a[c];return(u=u%11==10?0:u%11)===o[9]},"cs-CZ":function(t){t=t.replace(/\W/,"");var e=parseInt(t.slice(0,2),10);if(10===t.length)e=e<54?"20".concat(e):"19".concat(e);else{if("000"===t.slice(6))return!1;if(!(e<54))return!1;e="19".concat(e)}3===e.length&&(e=[e.slice(0,2),"0",e.slice(2)].join(""));var r=parseInt(t.slice(2,4),10);if(r>50&&(r-=50),r>20){if(parseInt(e,10)<2004)return!1;r-=20}r<10&&(r="0".concat(r));var n="".concat(e,"/").concat(r,"/").concat(t.slice(4,6));if(!(0,i.default)(n,"YYYY/MM/DD"))return!1;if(10===t.length&&parseInt(t,10)%11!=0){var o=parseInt(t.slice(0,9),10)%11;if(!(parseInt(e,10)<1986&&10===o))return!1;if(0!==parseInt(t.slice(9),10))return!1}return!0},"de-AT":function(t){return a.luhnCheck(t)},"de-DE":function(t){for(var e=t.split("").map((function(t){return parseInt(t,10)})),r=[],n=0;n<e.length-1;n++){r.push("");for(var o=0;o<e.length-1;o++)e[n]===e[o]&&(r[n]+=o)}if(2!==(r=r.filter((function(t){return t.length>1}))).length&&3!==r.length)return!1;if(3===r[0].length){for(var i=r[0].split("").map((function(t){return parseInt(t,10)})),u=0,c=0;c<i.length-1;c++)i[c]+1===i[c+1]&&(u+=1);if(2===u)return!1}return a.iso7064Check(t)},"dk-DK":function(t){t=t.replace(/\W/,"");var e=parseInt(t.slice(4,6),10);switch(t.slice(6,7)){case"0":case"1":case"2":case"3":e="19".concat(e);break;case"4":case"9":e=e<37?"20".concat(e):"19".concat(e);break;default:if(e<37)e="20".concat(e);else{if(!(e>58))return!1;e="18".concat(e)}}3===e.length&&(e=[e.slice(0,2),"0",e.slice(2)].join(""));var r="".concat(e,"/").concat(t.slice(2,4),"/").concat(t.slice(0,2));if(!(0,i.default)(r,"YYYY/MM/DD"))return!1;for(var n=t.split("").map((function(t){return parseInt(t,10)})),o=0,a=4,u=0;u<9;u++)o+=n[u]*a,1==(a-=1)&&(a=7);return 1!=(o%=11)&&(0===o?0===n[9]:n[9]===11-o)},"el-CY":function(t){for(var e=t.slice(0,8).split("").map((function(t){return parseInt(t,10)})),r=0,n=1;n<e.length;n+=2)r+=e[n];for(var o=0;o<e.length;o+=2)e[o]<2?r+=1-e[o]:(r+=2*(e[o]-2)+5,e[o]>4&&(r+=2));return String.fromCharCode(r%26+65)===t.charAt(8)},"el-GR":function(t){for(var e=t.split("").map((function(t){return parseInt(t,10)})),r=0,n=0;n<8;n++)r+=e[n]*Math.pow(2,8-n);return r%11%10===e[8]},"en-IE":function(t){var e=a.reverseMultiplyAndSum(t.split("").slice(0,7).map((function(t){return parseInt(t,10)})),8);return 9===t.length&&"W"!==t[8]&&(e+=9*(t[8].charCodeAt(0)-64)),0==(e%=23)?"W"===t[7].toUpperCase():t[7].toUpperCase()===String.fromCharCode(64+e)},"en-US":function(t){return-1!==function(){var t,e=[];for(var r in l)l.hasOwnProperty(r)&&e.push.apply(e,function(t){if(Array.isArray(t))return s(t)}(t=l[r])||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return s(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return e}().indexOf(t.substr(0,2))},"es-ES":function(t){var e=t.toUpperCase().split("");if(isNaN(parseInt(e[0],10))&&e.length>1){var r=0;switch(e[0]){case"Y":r=1;break;case"Z":r=2}e.splice(0,1,r)}else for(;e.length<9;)e.unshift(0);e=e.join("");var n=parseInt(e.slice(0,8),10)%23;return e[8]===["T","R","W","A","G","M","Y","F","P","D","X","B","N","J","Z","S","Q","V","H","L","C","K","E"][n]},"et-EE":function(t){var e=t.slice(1,3);switch(t.slice(0,1)){case"1":case"2":e="18".concat(e);break;case"3":case"4":e="19".concat(e);break;default:e="20".concat(e)}var r="".concat(e,"/").concat(t.slice(3,5),"/").concat(t.slice(5,7));if(!(0,i.default)(r,"YYYY/MM/DD"))return!1;for(var n=t.split("").map((function(t){return parseInt(t,10)})),o=0,a=1,u=0;u<10;u++)o+=n[u]*a,10===(a+=1)&&(a=1);if(o%11==10){o=0,a=3;for(var c=0;c<10;c++)o+=n[c]*a,10===(a+=1)&&(a=1);if(o%11==10)return 0===n[10]}return o%11===n[10]},"fi-FI":function(t){var e=t.slice(4,6);switch(t.slice(6,7)){case"+":e="18".concat(e);break;case"-":e="19".concat(e);break;default:e="20".concat(e)}var r="".concat(e,"/").concat(t.slice(2,4),"/").concat(t.slice(0,2));if(!(0,i.default)(r,"YYYY/MM/DD"))return!1;var n=parseInt(t.slice(0,6)+t.slice(7,10),10)%31;return n<10?n===parseInt(t.slice(10),10):["A","B","C","D","E","F","H","J","K","L","M","N","P","R","S","T","U","V","W","X","Y"][n-=10]===t.slice(10)},"fr-BE":function(t){if("00"!==t.slice(2,4)||"00"!==t.slice(4,6)){var e="".concat(t.slice(0,2),"/").concat(t.slice(2,4),"/").concat(t.slice(4,6));if(!(0,i.default)(e,"YY/MM/DD"))return!1}var r=97-parseInt(t.slice(0,9),10)%97,n=parseInt(t.slice(9,11),10);return r===n||(r=97-parseInt("2".concat(t.slice(0,9)),10)%97)===n},"fr-FR":function(t){return t=t.replace(/\s/g,""),parseInt(t.slice(0,10),10)%511===parseInt(t.slice(10,13),10)},"fr-LU":function(t){var e="".concat(t.slice(0,4),"/").concat(t.slice(4,6),"/").concat(t.slice(6,8));return!!(0,i.default)(e,"YYYY/MM/DD")&&!!a.luhnCheck(t.slice(0,12))&&a.verhoeffCheck("".concat(t.slice(0,11)).concat(t[12]))},"hr-HR":function(t){return a.iso7064Check(t)},"hu-HU":function(t){for(var e=t.split("").map((function(t){return parseInt(t,10)})),r=8,n=1;n<9;n++)r+=e[n]*(n+1);return r%11===e[9]},"it-IT":function(t){var e=t.toUpperCase().split("");if(!f(e.slice(0,3)))return!1;if(!f(e.slice(3,6)))return!1;for(var r={L:"0",M:"1",N:"2",P:"3",Q:"4",R:"5",S:"6",T:"7",U:"8",V:"9"},n=0,o=[6,7,9,10,12,13,14];n<o.length;n++){var a=o[n];e[a]in r&&e.splice(a,1,r[e[a]])}var u={A:"01",B:"02",C:"03",D:"04",E:"05",H:"06",L:"07",M:"08",P:"09",R:"10",S:"11",T:"12"}[e[8]],c=parseInt(e[9]+e[10],10);c>40&&(c-=40),c<10&&(c="0".concat(c));var s="".concat(e[6]).concat(e[7],"/").concat(u,"/").concat(c);if(!(0,i.default)(s,"YY/MM/DD"))return!1;for(var l=0,d=1;d<e.length-1;d+=2){var p=parseInt(e[d],10);isNaN(p)&&(p=e[d].charCodeAt(0)-65),l+=p}for(var h={A:1,B:0,C:5,D:7,E:9,F:13,G:15,H:17,I:19,J:21,K:2,L:4,M:18,N:20,O:11,P:3,Q:6,R:8,S:12,T:14,U:16,V:10,W:22,X:25,Y:24,Z:23,0:1,1:0},v=0;v<e.length-1;v+=2){var y=0;if(e[v]in h)y=h[e[v]];else{var g=parseInt(e[v],10);y=2*g+1,g>4&&(y+=2)}l+=y}return String.fromCharCode(65+l%26)===e[15]},"lv-LV":function(t){var e=(t=t.replace(/\W/,"")).slice(0,2);if("32"!==e){if("00"!==t.slice(2,4)){var r=t.slice(4,6);switch(t[6]){case"0":r="18".concat(r);break;case"1":r="19".concat(r);break;default:r="20".concat(r)}var n="".concat(r,"/").concat(t.slice(2,4),"/").concat(e);if(!(0,i.default)(n,"YYYY/MM/DD"))return!1}for(var o=1101,a=[1,6,3,7,9,10,5,8,4,2],u=0;u<t.length-1;u++)o-=parseInt(t[u],10)*a[u];return parseInt(t[10],10)===o%11}return!0},"mt-MT":function(t){if(9!==t.length){for(var e=t.toUpperCase().split("");e.length<8;)e.unshift(0);switch(t[7]){case"A":case"P":if(0===parseInt(e[6],10))return!1;break;default:var r=parseInt(e.join("").slice(0,5),10);if(r>32e3)return!1;if(r===parseInt(e.join("").slice(5,7),10))return!1}}return!0},"nl-NL":function(t){return a.reverseMultiplyAndSum(t.split("").slice(0,8).map((function(t){return parseInt(t,10)})),9)%11===parseInt(t[8],10)},"pl-PL":function(t){if(10===t.length){for(var e=[6,5,7,2,3,4,5,6,7],r=0,n=0;n<e.length;n++)r+=parseInt(t[n],10)*e[n];return 10!=(r%=11)&&r===parseInt(t[9],10)}var o=t.slice(0,2),a=parseInt(t.slice(2,4),10);a>80?(o="18".concat(o),a-=80):a>60?(o="22".concat(o),a-=60):a>40?(o="21".concat(o),a-=40):a>20?(o="20".concat(o),a-=20):o="19".concat(o),a<10&&(a="0".concat(a));var u="".concat(o,"/").concat(a,"/").concat(t.slice(4,6));if(!(0,i.default)(u,"YYYY/MM/DD"))return!1;for(var c=0,s=1,l=0;l<t.length-1;l++)c+=parseInt(t[l],10)*s%10,(s+=2)>10?s=1:5===s&&(s+=2);return(c=10-c%10)===parseInt(t[10],10)},"pt-BR":function(t){if(11===t.length){var e,r;if(e=0,"11111111111"===t||"22222222222"===t||"33333333333"===t||"44444444444"===t||"55555555555"===t||"66666666666"===t||"77777777777"===t||"88888888888"===t||"99999999999"===t||"00000000000"===t)return!1;for(var n=1;n<=9;n++)e+=parseInt(t.substring(n-1,n),10)*(11-n);if(10==(r=10*e%11)&&(r=0),r!==parseInt(t.substring(9,10),10))return!1;e=0;for(var o=1;o<=10;o++)e+=parseInt(t.substring(o-1,o),10)*(12-o);return 10==(r=10*e%11)&&(r=0),r===parseInt(t.substring(10,11),10)}if("00000000000000"===t||"11111111111111"===t||"22222222222222"===t||"33333333333333"===t||"44444444444444"===t||"55555555555555"===t||"66666666666666"===t||"77777777777777"===t||"88888888888888"===t||"99999999999999"===t)return!1;for(var a=t.length-2,i=t.substring(0,a),u=t.substring(a),c=0,s=a-7,l=a;l>=1;l--)c+=i.charAt(a-l)*s,(s-=1)<2&&(s=9);var f=c%11<2?0:11-c%11;if(f!==parseInt(u.charAt(0),10))return!1;a+=1,i=t.substring(0,a),c=0,s=a-7;for(var d=a;d>=1;d--)c+=i.charAt(a-d)*s,(s-=1)<2&&(s=9);return(f=c%11<2?0:11-c%11)===parseInt(u.charAt(1),10)},"pt-PT":function(t){var e=11-a.reverseMultiplyAndSum(t.split("").slice(0,8).map((function(t){return parseInt(t,10)})),9)%11;return e>9?0===parseInt(t[8],10):e===parseInt(t[8],10)},"ro-RO":function(t){if("9000"!==t.slice(0,4)){var e=t.slice(1,3);switch(t[0]){case"1":case"2":e="19".concat(e);break;case"3":case"4":e="18".concat(e);break;case"5":case"6":e="20".concat(e)}var r="".concat(e,"/").concat(t.slice(3,5),"/").concat(t.slice(5,7));if(8===r.length){if(!(0,i.default)(r,"YY/MM/DD"))return!1}else if(!(0,i.default)(r,"YYYY/MM/DD"))return!1;for(var n=t.split("").map((function(t){return parseInt(t,10)})),o=[2,7,9,1,4,6,3,5,8,2,7,9],a=0,u=0;u<o.length;u++)a+=n[u]*o[u];return a%11==10?1===n[12]:n[12]===a%11}return!0},"sk-SK":function(t){if(9===t.length){if("000"===(t=t.replace(/\W/,"")).slice(6))return!1;var e=parseInt(t.slice(0,2),10);if(e>53)return!1;e=e<10?"190".concat(e):"19".concat(e);var r=parseInt(t.slice(2,4),10);r>50&&(r-=50),r<10&&(r="0".concat(r));var n="".concat(e,"/").concat(r,"/").concat(t.slice(4,6));if(!(0,i.default)(n,"YYYY/MM/DD"))return!1}return!0},"sl-SI":function(t){var e=11-a.reverseMultiplyAndSum(t.split("").slice(0,7).map((function(t){return parseInt(t,10)})),8)%11;return 10===e?0===parseInt(t[7],10):e===parseInt(t[7],10)},"sv-SE":function(t){var e=t.slice(0);t.length>11&&(e=e.slice(2));var r="",n=e.slice(2,4),o=parseInt(e.slice(4,6),10);if(t.length>11)r=t.slice(0,4);else if(r=t.slice(0,2),11===t.length&&o<60){var u=(new Date).getFullYear().toString(),c=parseInt(u.slice(0,2),10);if(u=parseInt(u,10),"-"===t[6])r=parseInt("".concat(c).concat(r),10)>u?"".concat(c-1).concat(r):"".concat(c).concat(r);else if(r="".concat(c-1).concat(r),u-parseInt(r,10)<100)return!1}o>60&&(o-=60),o<10&&(o="0".concat(o));var s="".concat(r,"/").concat(n,"/").concat(o);if(8===s.length){if(!(0,i.default)(s,"YY/MM/DD"))return!1}else if(!(0,i.default)(s,"YYYY/MM/DD"))return!1;return a.luhnCheck(t.replace(/\W/,""))}};p["lb-LU"]=p["fr-LU"],p["lt-LT"]=p["et-EE"],p["nl-BE"]=p["fr-BE"];var h=/[-\\\/!@#$%\^&\*\(\)\+\=\[\]]+/g,v={"de-AT":h,"de-DE":/[\/\\]/g,"fr-BE":h};v["nl-BE"]=v["fr-BE"],t.exports=e.default,t.exports.default=e.default},2492:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,n.default)(t),!t||/[\s<>]/.test(t))return!1;if(0===t.indexOf("mailto:"))return!1;if((e=(0,i.default)(e,s)).validate_length&&t.length>=2083)return!1;if(!e.allow_fragments&&t.includes("#"))return!1;if(!e.allow_query_components&&(t.includes("?")||t.includes("&")))return!1;var r,u,d,p,h,v,y,g,m;if(y=t.split("#"),t=y.shift(),y=t.split("?"),t=y.shift(),(y=t.split("://")).length>1){if(r=y.shift().toLowerCase(),e.require_valid_protocol&&-1===e.protocols.indexOf(r))return!1}else{if(e.require_protocol)return!1;if("//"===t.substr(0,2)){if(!e.allow_protocol_relative_urls)return!1;y[0]=t.substr(2)}}if(""===(t=y.join("://")))return!1;if(y=t.split("/"),""===(t=y.shift())&&!e.require_host)return!0;if((y=t.split("@")).length>1){if(e.disallow_auth)return!1;if(""===y[0])return!1;if((u=y.shift()).indexOf(":")>=0&&u.split(":").length>2)return!1;var b=(2,function(t){if(Array.isArray(t))return t}(m=u.split(":"))||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,a=void 0;try{for(var i,u=t[Symbol.iterator]();!(n=(i=u.next()).done)&&(r.push(i.value),2!==r.length);n=!0);}catch(t){o=!0,a=t}finally{try{n||null==u.return||u.return()}finally{if(o)throw a}}return r}}(m)||function(t,e){if(t){if("string"==typeof t)return c(t,2);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(t,2):void 0}}(m)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),w=b[0],x=b[1];if(""===w&&""===x)return!1}v=null,g=null;var O=(p=y.join("@")).match(l);if(O?(d="",g=O[1],v=O[2]||null):(d=(y=p.split(":")).shift(),y.length&&(v=y.join(":"))),null!==v&&v.length>0){if(h=parseInt(v,10),!/^[0-9]+$/.test(v)||h<=0||h>65535)return!1}else if(e.require_port)return!1;return e.host_whitelist?f(d,e.host_whitelist):!!((0,a.default)(d)||(0,o.default)(d,e)||g&&(0,a.default)(g,6))&&(d=d||g,!e.host_blacklist||!f(d,e.host_blacklist))};var n=u(r(65571)),o=u(r(10221)),a=u(r(61028)),i=u(r(84808));function u(t){return t&&t.__esModule?t:{default:t}}function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var s={protocols:["http","https","ftp"],require_tld:!0,require_protocol:!1,require_host:!0,require_port:!1,require_valid_protocol:!0,allow_underscores:!1,allow_trailing_dot:!1,allow_protocol_relative_urls:!1,allow_fragments:!0,allow_query_components:!0,validate_length:!0},l=/^\[([^\]]+)\](?::([0-9]+))?$/;function f(t,e){for(var r=0;r<e.length;r++){var n=e[r];if(t===n||(o=n,"[object RegExp]"===Object.prototype.toString.call(o)&&n.test(t)))return!0}var o;return!1}t.exports=e.default,t.exports.default=e.default},57278:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,o.default)(t);var r=a[[void 0,null].includes(e)?"all":e];return!!r&&r.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a={1:/^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,2:/^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,3:/^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,4:/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,5:/^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,all:/^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i};t.exports=e.default,t.exports.default=e.default},57245:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),t===t.toUpperCase()};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},55977:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,o.default)(t),(0,o.default)(e),e in a)return a[e].test(t);throw new Error("Invalid country code: '".concat(e,"'"))},e.vatMatchers=void 0;var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a={GB:/^GB((\d{3} \d{4} ([0-8][0-9]|9[0-6]))|(\d{9} \d{3})|(((GD[0-4])|(HA[5-9]))[0-9]{2}))$/,IT:/^(IT)?[0-9]{11}$/,NL:/^(NL)?[0-9]{9}B[0-9]{2}$/};e.vatMatchers=a},49019:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),a.fullWidth.test(t)&&i.halfWidth.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n},a=r(77146),i=r(82941);t.exports=e.default,t.exports.default=e.default},88346:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,o.default)(t);for(var r=t.length-1;r>=0;r--)if(-1===e.indexOf(t[r]))return!1;return!0};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},14959:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,o.default)(t);var r=e?new RegExp("^[".concat(e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"]+"),"g"):/^\s+/g;return t.replace(r,"")};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},30661:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){return(0,o.default)(t),"[object RegExp]"!==Object.prototype.toString.call(e)&&(e=new RegExp(e,r)),e.test(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},2900:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){e=(0,o.default)(e,a);var r=t.split("@"),n=r.pop(),f=[r.join("@"),n];if(f[1]=f[1].toLowerCase(),"gmail.com"===f[1]||"googlemail.com"===f[1]){if(e.gmail_remove_subaddress&&(f[0]=f[0].split("+")[0]),e.gmail_remove_dots&&(f[0]=f[0].replace(/\.+/g,l)),!f[0].length)return!1;(e.all_lowercase||e.gmail_lowercase)&&(f[0]=f[0].toLowerCase()),f[1]=e.gmail_convert_googlemaildotcom?"gmail.com":f[1]}else if(i.indexOf(f[1])>=0){if(e.icloud_remove_subaddress&&(f[0]=f[0].split("+")[0]),!f[0].length)return!1;(e.all_lowercase||e.icloud_lowercase)&&(f[0]=f[0].toLowerCase())}else if(u.indexOf(f[1])>=0){if(e.outlookdotcom_remove_subaddress&&(f[0]=f[0].split("+")[0]),!f[0].length)return!1;(e.all_lowercase||e.outlookdotcom_lowercase)&&(f[0]=f[0].toLowerCase())}else if(c.indexOf(f[1])>=0){if(e.yahoo_remove_subaddress){var d=f[0].split("-");f[0]=d.length>1?d.slice(0,-1).join("-"):d[0]}if(!f[0].length)return!1;(e.all_lowercase||e.yahoo_lowercase)&&(f[0]=f[0].toLowerCase())}else s.indexOf(f[1])>=0?((e.all_lowercase||e.yandex_lowercase)&&(f[0]=f[0].toLowerCase()),f[1]="yandex.ru"):e.all_lowercase&&(f[0]=f[0].toLowerCase());return f.join("@")};var n,o=(n=r(84808))&&n.__esModule?n:{default:n},a={all_lowercase:!0,gmail_lowercase:!0,gmail_remove_dots:!0,gmail_remove_subaddress:!0,gmail_convert_googlemaildotcom:!0,outlookdotcom_lowercase:!0,outlookdotcom_remove_subaddress:!0,yahoo_lowercase:!0,yahoo_remove_subaddress:!0,yandex_lowercase:!0,icloud_lowercase:!0,icloud_remove_subaddress:!0},i=["icloud.com","me.com"],u=["hotmail.at","hotmail.be","hotmail.ca","hotmail.cl","hotmail.co.il","hotmail.co.nz","hotmail.co.th","hotmail.co.uk","hotmail.com","hotmail.com.ar","hotmail.com.au","hotmail.com.br","hotmail.com.gr","hotmail.com.mx","hotmail.com.pe","hotmail.com.tr","hotmail.com.vn","hotmail.cz","hotmail.de","hotmail.dk","hotmail.es","hotmail.fr","hotmail.hu","hotmail.id","hotmail.ie","hotmail.in","hotmail.it","hotmail.jp","hotmail.kr","hotmail.lv","hotmail.my","hotmail.ph","hotmail.pt","hotmail.sa","hotmail.sg","hotmail.sk","live.be","live.co.uk","live.com","live.com.ar","live.com.mx","live.de","live.es","live.eu","live.fr","live.it","live.nl","msn.com","outlook.at","outlook.be","outlook.cl","outlook.co.il","outlook.co.nz","outlook.co.th","outlook.com","outlook.com.ar","outlook.com.au","outlook.com.br","outlook.com.gr","outlook.com.pe","outlook.com.tr","outlook.com.vn","outlook.cz","outlook.de","outlook.dk","outlook.es","outlook.fr","outlook.hu","outlook.id","outlook.ie","outlook.in","outlook.it","outlook.jp","outlook.kr","outlook.lv","outlook.my","outlook.ph","outlook.pt","outlook.sa","outlook.sg","outlook.sk","passport.com"],c=["rocketmail.com","yahoo.ca","yahoo.co.uk","yahoo.com","yahoo.de","yahoo.fr","yahoo.in","yahoo.it","ymail.com"],s=["yandex.ru","yandex.ua","yandex.kz","yandex.com","yandex.by","ya.ru"];function l(t){return t.length>1?t:""}t.exports=e.default,t.exports.default=e.default},29778:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,o.default)(t),e){var r=new RegExp("[".concat(e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"]+$"),"g");return t.replace(r,"")}for(var n=t.length-1;/\s/.test(t.charAt(n));)n-=1;return t.slice(0,n+1)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},8035:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,n.default)(t);var r=e?"\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F":"\\x00-\\x1F\\x7F";return(0,o.default)(t,r)};var n=a(r(65571)),o=a(r(44928));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default,t.exports.default=e.default},557:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,o.default)(t),e?"1"===t||/^true$/i.test(t):"0"!==t&&!/^false$/i.test(t)&&""!==t};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},8469:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),t=Date.parse(t),isNaN(t)?null:new Date(t)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},77536:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t)?parseFloat(t):NaN};var n,o=(n=r(79146))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},21359:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,o.default)(t),parseInt(t,e||10)};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},24790:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,n.default)((0,o.default)(t,e),e)};var n=a(r(29778)),o=a(r(14959));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default,t.exports.default=e.default},94816:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t),t.replace(/&quot;/g,'"').replace(/&#x27;/g,"'").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&#x2F;/g,"/").replace(/&#x5C;/g,"\\").replace(/&#96;/g,"`").replace(/&amp;/g,"&")};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default},83672:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.iso7064Check=function(t){for(var e=10,r=0;r<t.length-1;r++)e=(parseInt(t[r],10)+e)%10==0?9:(parseInt(t[r],10)+e)%10*2%11;return(e=1===e?0:11-e)===parseInt(t[10],10)},e.luhnCheck=function(t){for(var e=0,r=!1,n=t.length-1;n>=0;n--){if(r){var o=2*parseInt(t[n],10);e+=o>9?o.toString().split("").map((function(t){return parseInt(t,10)})).reduce((function(t,e){return t+e}),0):o}else e+=parseInt(t[n],10);r=!r}return e%10==0},e.reverseMultiplyAndSum=function(t,e){for(var r=0,n=0;n<t.length;n++)r+=t[n]*(e-n);return r},e.verhoeffCheck=function(t){for(var e=[[0,1,2,3,4,5,6,7,8,9],[1,2,3,4,0,6,7,8,9,5],[2,3,4,0,1,7,8,9,5,6],[3,4,0,1,2,8,9,5,6,7],[4,0,1,2,3,9,5,6,7,8],[5,9,8,7,6,0,4,3,2,1],[6,5,9,8,7,1,0,4,3,2],[7,6,5,9,8,2,1,0,4,3],[8,7,6,5,9,3,2,1,0,4],[9,8,7,6,5,4,3,2,1,0]],r=[[0,1,2,3,4,5,6,7,8,9],[1,5,7,6,2,8,3,0,9,4],[5,8,0,3,7,9,6,1,4,2],[8,9,1,6,0,4,3,5,2,7],[9,4,5,3,1,2,6,8,7,0],[4,2,8,6,5,7,3,9,0,1],[2,7,9,3,8,0,6,4,1,5],[7,0,4,6,9,1,3,2,5,8]],n=t.split("").reverse().join(""),o=0,a=0;a<n.length;a++)o=e[o][r[a%8][parseInt(n[a],10)]];return 0===o}},65571:(t,e)=>{"use strict";function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){if(!("string"==typeof t||t instanceof String)){var e=r(t);throw null===t?e="null":"object"===e&&(e=t.constructor.name),new TypeError("Expected a string but received a ".concat(e))}},t.exports=e.default,t.exports.default=e.default},18343:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t,e){return t.some((function(t){return e===t}))},t.exports=e.default,t.exports.default=e.default},84808:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1?arguments[1]:void 0;for(var r in e)void 0===t[r]&&(t[r]=e[r]);return t},t.exports=e.default,t.exports.default=e.default},24731:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var r=t.join("");return new RegExp(r,e)},t.exports=e.default,t.exports.default=e.default},95791:(t,e)=>{"use strict";function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return"object"===r(t)&&null!==t?t="function"==typeof t.toString?t.toString():"[object Object]":(null==t||isNaN(t)&&!t.length)&&(t=""),String(t)},t.exports=e.default,t.exports.default=e.default},34714:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,o.default)(t),t.replace(new RegExp("[^".concat(e,"]+"),"g"),"")};var n,o=(n=r(65571))&&n.__esModule?n:{default:n};t.exports=e.default,t.exports.default=e.default}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n].call(a.exports,a,a.exports,r),a.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{"use strict";r(68304),r(30489),r(41539),r(81299),r(12419),r(78011),r(69070),r(88674),r(47941),r(82526),r(57327),r(38880),r(89554),r(54747),r(49337),r(33321),r(41817),r(32165),r(66992),r(78783),r(33948),r(35666),r(69826),r(79753),r(47042),r(68309),r(91038),r(74916),r(77601);var t=function(t){return $('[data-component="'.concat(t,'"]'))};function e(t,e,r){this.$target.delegate('[data-action="'.concat(t,'"]'),e,r)}var n="init",o="load",a="ready",i="diag",u="repair",c={init:"초기화",load:"로드",ready:"준비",diag:"진단",repair:"정비"},s=(r(69720),r(85827),r(70189),r(38862),null);function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function f(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach((function(e){h(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function d(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function h(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var v=function(){function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),h(this,"$target",void 0),h(this,"parent",void 0),h(this,"state",void 0),Object.entries(e).forEach((function(t){var e,n,o=(n=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){u=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}}(e,n)||function(t,e){if(t){if("string"==typeof t)return d(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?d(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],i=o[1];r[a]=i})),this.setup()}var e,r;return e=t,r=[{key:"initState",value:function(){return{}}},{key:"setup",value:function(){var t,e,r,n,o,a=this;this.state=(t=this.initState(),e=Object.keys(t).reduce((function(t,e){return t[e]=new Set,t}),{}),new Proxy(t,{get:function(t,r){return s&&e[r].add(s),t[r]},set:function(t,r,n){return t[r]===n||JSON.stringify(t[r])===JSON.stringify(n)||(t[r]=n,e[r].forEach((function(t){return t()}))),!0}})),n=r=function(){a.render(),a.setEvents(),a.mounted()},o=-1,s=function(){cancelAnimationFrame(o),o=requestAnimationFrame(n)},r(),s=null}},{key:"setEvents",value:function(){}},{key:"mounted",value:function(){}},{key:"setState",value:function(t){this.state=f(f({},this.state),t),this.render()}},{key:"render",value:function(){this.$target.html(this.template())}},{key:"template",value:function(){return""}}],r&&p(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function y(t){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},y(t)}function g(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function m(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function b(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function w(t,e){return w=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},w(t,e)}function x(t,e){if(e&&("object"===y(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function O(t){return O=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},O(t)}var S=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&w(t,e)}(c,t);var r,o,a,i,u=(a=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=O(a);if(i){var r=O(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return x(this,t)});function c(){return m(this,c),u.apply(this,arguments)}return r=c,(o=[{key:"initState",value:function(){return{progress:n}}},{key:"setEvents",value:function(){var t=this;e.call(this,"file-load","change",(function(e){var r,n,o=(r=e.target.files,n=1,function(t){if(Array.isArray(t))return t}(r)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){u=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}}(r,n)||function(t,e){if(t){if("string"==typeof t)return g(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?g(t,e):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];t.parent.loadCsvFile(o)})),e.call(this,"file-select","click",(function(){$("#form-file").on("click")}))}},{key:"template",value:function(){return'\n      <div class="input-group input-group-sm mb-1">\n        <input data-action="file-load" class="form-control" type="file" id="form-file" accept=".csv"/>\n        <button\n          data-action="file-select"\n          class="btn btn-outline-primary"\n          type="button"\n          id="select-file"\n        >\n          파일선택\n        </button>\n      </div>\n    '}},{key:"render",value:function(){this.state.progress===n?this.$target.html(this.template()):this.$target.find("#form-file, #select-file").attr("disabled",!0)}}])&&b(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),c}(v);function A(t){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},A(t)}function _(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function M(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function R(t,e){return R=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},R(t,e)}function P(t,e){if(e&&("object"===A(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function E(t){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},E(t)}var j=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&R(t,e)}(s,t);var r,a,i,u,c=(i=s,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=E(i);if(u){var r=E(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return P(this,t)});function s(){return _(this,s),c.apply(this,arguments)}return r=s,(a=[{key:"initState",value:function(){return{progress:n}}},{key:"setEvents",value:function(){var t=this;e.call(this,"start-row","click",(function(){t.parent.setStartRow($("#start-row").val())}))}},{key:"template",value:function(){var t=this.state.progress;return'\n      <div class="input-group input-group-sm">\n        <span class="input-group-text">시 작 행</span>\n        <input\n          type="number"\n          value="0"\n          min="0"\n          id="start-row"\n          class="form-control"\n        />\n        <button\n          data-action="start-row"\n          class="btn btn-outline-primary"\n          type="button"\n          '.concat(t===o?"":"disabled","\n        >\n          시작\n        </button>\n      </div>\n    ")}}])&&M(r.prototype,a),Object.defineProperty(r,"prototype",{writable:!1}),s}(v),T=(r(21249),r(39575),r(82472),r(38012),r(92990),r(18927),r(33105),r(35035),r(74345),r(7174),r(32846),r(44731),r(77209),r(96319),r(58867),r(37789),r(33739),r(29368),r(14483),r(12056),r(3462),r(30678),r(27462),r(33824),r(55021),r(12974),r(15016),r(60285),r(41637),r(83710),r(92222),r(57460));function k(t){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},k(t)}function C(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function D(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function I(t,e){return I=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},I(t,e)}function L(t,e){if(e&&("object"===k(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function F(t){return F=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},F(t)}var N=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&I(t,e)}(f,t);var r,o,c,s,l=(c=f,s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=F(c);if(s){var r=F(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return L(this,t)});function f(){return C(this,f),l.apply(this,arguments)}return r=f,(o=[{key:"initState",value:function(){return{progress:n}}},{key:"setEvents",value:function(){var t=this;e.call(this,"diag","click",(function(){t.parent.diagnosis()})),e.call(this,"reset","click",(function(){t.parent.reset()})),e.call(this,"repair","click",(function(){t.parent.repair()})),e.call(this,"diagfile-download","click",(function(){t.downloadCsv()})),e.call(this,"setting","click",(function(){t.parent.settingModal.show()}))}},{key:"downloadCsv",value:function(){var t=this.parent.repairGrid.state,e=t.columns,r=t.dataView,n=e.slice(1).map((function(t){return t.name})),o=(0,T.unparse)({fields:n,data:r.getItems()}),a=new Blob([new Uint8Array([239,187,191]),o],{type:"text/csv;charset=utf-8;"}),i=URL.createObjectURL(a),u=document.createElement("a");document.body.appendChild(u),u.style="display: none",u.href=i,u.download="진단결과-".concat((new Date).getTime(),".csv"),u.click(),URL.revokeObjectURL(i)}},{key:"template",value:function(){var t=this.state.progress,e=[t===a||t===i,t===i,t===u];return'\n      <div class="btn-group" role="group">\n        <button data-action="reset" type="button" class="btn btn-primary">초기화</button>\n        <button data-action="diag" type="button" class="btn btn-'.concat(e[0]?"":"outline-",'primary" ').concat(e[0]?"":"disabled",'>진단</button>\n        <button data-action="repair" type="button" class="btn btn-').concat(e[1]?"":"outline-",'primary" ').concat(e[1]?"":"disabled",'>정비</button>\n        <button data-action="diagfile-download" type="button" class="btn btn-').concat(e[2]?"":"outline-",'primary" ').concat(e[2]?"":"disabled",'>정비파일<br/>다운로드</button>\n        <button data-action="setting" type="button" class="btn btn-primary">설정</button>\n      </div>\n    ')}}])&&D(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),f}(v);function U(t){return U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},U(t)}function Y(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function B(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function H(t,e){return H=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},H(t,e)}function G(t,e){if(e&&("object"===U(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Z(t){return Z=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Z(t)}r(9653);var W=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&H(t,e)}(i,t);var e,r,n,o,a=(n=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Z(n);if(o){var r=Z(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return G(this,t)});function i(){return Y(this,i),a.apply(this,arguments)}return e=i,(r=[{key:"initState",value:function(){return{dataCount:0,columnCount:0}}},{key:"filter",value:function(t){return Number(t).toLocaleString("ko-KR")}},{key:"template",value:function(){var t=this.state,e=t.dataCount,r=t.columnCount;return'\n      <div class="input-group input-group-sm mb-1">\n        <div class="input-group-prepend input-group-sm">\n          <span class="input-group-text"\n            >데이터건수</span\n          >\n        </div>\n        <input\n          id="data-count"\n          readonly\n          value="'.concat(this.filter(e),'"\n          type="text"\n          class="form-control"\n        />\n      </div>\n      <div class="input-group input-group-sm">\n        <div class="input-group-prepend input-group-sm">\n          <span class="input-group-text"\n            >전체 컬럼수</span\n          >\n        </div>\n        <input\n          id="column-count"\n          readonly\n          value="').concat(this.filter(r),'"\n          type="text"\n          class="form-control"\n        />\n      </div>\n    ')}}])&&B(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),i}(v),q=(r(82772),r(77766)),K=r(93476),V=r(19996),z=r(16976),X=r(63109),Q=X.mark((function t(){return X.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:case"end":return t.stop()}}),t)}))();function J(t){return t&&V(t)?z(t):Q}const tt=function(t,e){return t instanceof K?t.then(e):e(t)},et=r(21500)("nop");function rt(t,e,r){return e instanceof K?e.then((function(e){return r(t,e)}),(function(e){return e==et?t:K.reject(e)})):r(t,e)}var nt=r(78363),ot=r(51446),at=r(95238),it=r(53592);function ut(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function ct(t,e){return function(t){if(nt(t))return t}(t)||function(t,e){var r=null==t?null:void 0!==ot&&V(t)||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){u=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}}(t,e)||function(t,e){var r;if(t){if("string"==typeof t)return ut(t,e);var n=at(r=Object.prototype.toString.call(t)).call(r,8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?it(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ut(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function st(t){return function(e){for(var r,n=arguments.length,o=new Array(n>1?n-1:0),a=1;a<n;a++)o[a-1]=arguments[a];return o.length?t.apply(void 0,q(r=[e]).call(r,o)):function(){for(var r,n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return t.apply(void 0,q(r=[e]).call(r,o))}}}const lt=st((function(t,e){if(t<1)return[];var r=[];return e=J(e),function n(){for(var o;!(o=e.next()).done;){var a=o.value;if(a instanceof K)return a.then((function(e){return(r.push(e),r).length==t?r:n()})).catch((function(t){return t==et?n():K.reject(t)}));if(r.push(a),r.length==t)return r}return r}()}));function ft(t){return tt(lt(1,t),(function(t){return ct(t,1)[0]}))}function dt(t,e,r){return 1==arguments.length?function(){for(var e,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return dt.apply(void 0,q(e=[t]).call(e,n))}:2==arguments.length?dt(t,ft(r=J(e)),r):(r=J(r),tt(e,(function e(n){for(var o;!(o=r.next()).done;)if((n=rt(n,o.value,t))instanceof K)return n.then(e);return n})))}const pt=function(t,e){return e(t)};function ht(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return dt(pt,e)}var vt=r(3649),yt=r(66419),gt=r(65420),mt=r(41511);function bt(t,e){var r=void 0!==gt&&V(t)||t["@@iterator"];if(!r){if(mt(t)||(r=function(t,e){var r;if(t){if("string"==typeof t)return wt(t,e);var n=vt(r=Object.prototype.toString.call(t)).call(r,8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?yt(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wt(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){u=!0,a=t},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw a}}}}function wt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const xt=st(X.mark((function t(e,r){var n,o,a;return X.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=bt(J(r)),t.prev=1,n.s();case 3:if((o=n.n()).done){t.next=9;break}return a=o.value,t.next=7,tt(a,e);case 7:t.next=3;break;case 9:t.next=14;break;case 11:t.prev=11,t.t0=t.catch(1),n.e(t.t0);case 14:return t.prev=14,n.f(),t.finish(14);case 17:case"end":return t.stop()}}),t,null,[[1,11,14,17]])})));function Ot(t){return lt(1/0,t)}const St=st((function(t,e){return Ot(xt(t,e))}));function At(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function _t(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?At(Object(r),!0).forEach((function(e){Mt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):At(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Mt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}r(15306),r(68757),r(40561);var Rt=function(){var t;return null!==(t=JSON.parse(localStorage.getItem("odq-setting")))&&void 0!==t?t:{}};function Pt(t){return Pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Pt(t)}function Et(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function jt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Tt(t,e){return Tt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Tt(t,e)}function kt(t,e){if(e&&("object"===Pt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Ct(t){return Ct=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Ct(t)}var Dt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Tt(t,e)}(i,t);var e,r,n,o,a=(n=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ct(n);if(o){var r=Ct(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return kt(this,t)});function i(){return Et(this,i),a.apply(this,arguments)}return e=i,r=[{key:"initState",value:function(){return{options:{},grid:null,dataView:null,gridId:""}}},{key:"setGridOptions",value:function(){var t=Rt().setCollWidth;return{enableCellNavigation:!0,forceFitColumns:!(void 0!==t&&t),headerRowHeight:30,explicitInitialization:!0}}},{key:"setGridEvents",value:function(){var t=this.state,e=t.grid,r=t.dataView;r.onRowCountChanged.subscribe((function(t){e.updateRowCount(),e.render()})),r.onRowsChanged.subscribe((function(t,r){var n=r.rows;e.invalidateRows(n),e.render()}))}},{key:"renderGrid",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=this.sliceDataColumns(t,e),n=r.columns,o=r.data,a=this.state.gridId,i=new Slick.Data.DataView,u=new Slick.Grid("#".concat(a),i,n,this.setGridOptions());this.setState({grid:u,dataView:i}),this.setGridEvents(),u.init(),i.setItems(o)}},{key:"sliceDataColumns",value:function(t,e){e=Number(e);var r=Rt().setCollWidth,n=void 0===r?"":r,o=n?t[e].map((function(t){return{id:t.replaceAll(" ","").replace(/[\b\t\v\n\r\f\'\"\0]/gi,""),name:t,field:t.replaceAll(" ","").replace(/[\b\t\v\n\r\f\'\"\0]/gi,""),width:Number(n)}})):t[e].map((function(t){return{id:t.replaceAll(" ","").replace(/[\b\t\v\n\r\f\'\"\0]/gi,""),name:t,field:t.replaceAll(" ","").replace(/[\b\t\v\n\r\f\'\"\0]/gi,"")}})),a=t.splice(e+1).map((function(t,e){var r={id:e+1};return t.forEach((function(t,e){return r[o[e].id]=t})),r}));return o.unshift({id:"id",name:"행번호(NO)",field:"id",resizable:!1,selectable:!1,cssClass:"id-columns",behavior:"select",cannotTriggerInsert:!0,width:80}),{columns:o,data:a}}}],r&&jt(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),i}(v),It=(r(19601),r(5212),r(4723),function(t,e,r){var n=e.id,o=e.targets,a=e.op;try{if(o.some((function(t){return r[t].match(/\s/g)}))||t.match(/\s/g))return!1;if("calFormula"===n){var i=[Number(r[o[0]]),Number(r[o[1]])],u=i[0],c=i[1];switch(a){case"+":return t==u+c;case"-":return t==u-c;case"×":return t==u*c;case"÷":return t==u/c}}if("calSum"===n)return t==o.reduce((function(t,e){return t+Number(r[e])}),0)}catch(t){return!1}}),$t=r(48966),Lt=function(t){try{return"number"==typeof t||!(t.length>1&&"0"===t[0])&&(0,$t.isDecimal)(t)}catch(t){return!1}},Ft=function(t,e,r){var n=e.id,o=e.target,a=e.op,i=e.replaceValue;if("conTime"===n)try{if("string"!=typeof t||t.length<2)return!1;var u=Number(t.replace(/[^0-9]/g,"")),c=Number(r[o].replace(/[^0-9]/g,""));switch(a){case">=":return u>=c;case">":return u>c;case"<=":return u<=c;case"<":return u<c}}catch(t){return!1}return"conLogicRelationShip"!==n||t!==i||(0,$t.isDate)(r[o])},Nt=function(t){try{return"number"==typeof t||!(t.length>1&&"0"===t[0])&&(0,$t.isDecimal)(t)}catch(t){return!1}},Ut=(r(23123),r(69600),r(83112),{lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}});function Yt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.width?String(e.width):t.defaultWidth,n=t.formats[r]||t.formats[t.defaultWidth];return n}}var Bt,Ht={date:Yt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Yt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Yt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Gt={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Zt(t){return function(e,r){var n,o=r||{};if("formatting"===(o.context?String(o.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,i=o.width?String(o.width):a;n=t.formattingValues[i]||t.formattingValues[a]}else{var u=t.defaultWidth,c=o.width?String(o.width):t.defaultWidth;n=t.values[c]||t.values[u]}return n[t.argumentCallback?t.argumentCallback(e):e]}}function Wt(t){return function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.width,o=n&&t.matchPatterns[n]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,u=a[0],c=n&&t.parsePatterns[n]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(c)?Kt(c,(function(t){return t.test(u)})):qt(c,(function(t){return t.test(u)}));i=t.valueCallback?t.valueCallback(s):s,i=r.valueCallback?r.valueCallback(i):i;var l=e.slice(u.length);return{value:i,rest:l}}}function qt(t,e){for(var r in t)if(t.hasOwnProperty(r)&&e(t[r]))return r}function Kt(t,e){for(var r=0;r<t.length;r++)if(e(t[r]))return r}const Vt={code:"en-US",formatDistance:function(t,e,r){var n,o=Ut[t];return n="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=r&&r.addSuffix?r.comparison&&r.comparison>0?"in "+n:n+" ago":n},formatLong:Ht,formatRelative:function(t,e,r,n){return Gt[t]},localize:{ordinalNumber:function(t,e){var r=Number(t),n=r%100;if(n>20||n<10)switch(n%10){case 1:return r+"st";case 2:return r+"nd";case 3:return r+"rd"}return r+"th"},era:Zt({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Zt({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:Zt({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Zt({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Zt({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Bt={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.match(Bt.matchPattern);if(!r)return null;var n=r[0],o=t.match(Bt.parsePattern);if(!o)return null;var a=Bt.valueCallback?Bt.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(n.length);return{value:a,rest:i}}),era:Wt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Wt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:Wt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Wt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Wt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function zt(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function Xt(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function Qt(t){Xt(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function Jt(t,e){Xt(2,arguments);var r=Qt(t).getTime(),n=zt(e);return new Date(r+n)}function te(t,e){Xt(2,arguments);var r=zt(e);return Jt(t,-r)}function ee(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var r in e=e||{})Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}function re(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function ne(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}var oe={p:ne,P:function(t,e){var r,n=t.match(/(P+)(p+)?/)||[],o=n[1],a=n[2];if(!a)return re(t,e);switch(o){case"P":r=e.dateTime({width:"short"});break;case"PP":r=e.dateTime({width:"medium"});break;case"PPP":r=e.dateTime({width:"long"});break;default:r=e.dateTime({width:"full"})}return r.replace("{{date}}",re(o,e)).replace("{{time}}",ne(a,e))}};const ae=oe;function ie(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var ue=["D","DD"],ce=["YY","YYYY"];function se(t){return-1!==ue.indexOf(t)}function le(t){return-1!==ce.indexOf(t)}function fe(t,e,r){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"))}function de(t,e){Xt(1,arguments);var r=e||{},n=r.locale,o=n&&n.options&&n.options.weekStartsOn,a=null==o?0:zt(o),i=null==r.weekStartsOn?a:zt(r.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=Qt(t),c=u.getUTCDay(),s=(c<i?7:0)+c-i;return u.setUTCDate(u.getUTCDate()-s),u.setUTCHours(0,0,0,0),u}function pe(t,e){Xt(1,arguments);var r=Qt(t),n=r.getUTCFullYear(),o=e||{},a=o.locale,i=a&&a.options&&a.options.firstWeekContainsDate,u=null==i?1:zt(i),c=null==o.firstWeekContainsDate?u:zt(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=new Date(0);s.setUTCFullYear(n+1,0,c),s.setUTCHours(0,0,0,0);var l=de(s,e),f=new Date(0);f.setUTCFullYear(n,0,c),f.setUTCHours(0,0,0,0);var d=de(f,e);return r.getTime()>=l.getTime()?n+1:r.getTime()>=d.getTime()?n:n-1}function he(t,e,r){Xt(2,arguments);var n=r||{},o=n.locale,a=o&&o.options&&o.options.weekStartsOn,i=null==a?0:zt(a),u=null==n.weekStartsOn?i:zt(n.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=Qt(t),s=zt(e),l=c.getUTCDay(),f=s%7,d=(f+7)%7,p=(d<u?7:0)+s-l;return c.setUTCDate(c.getUTCDate()+p),c}function ve(t){Xt(1,arguments);var e=1,r=Qt(t),n=r.getUTCDay(),o=(n<e?7:0)+n-e;return r.setUTCDate(r.getUTCDate()-o),r.setUTCHours(0,0,0,0),r}function ye(t){Xt(1,arguments);var e=Qt(t),r=e.getUTCFullYear(),n=new Date(0);n.setUTCFullYear(r+1,0,4),n.setUTCHours(0,0,0,0);var o=ve(n),a=new Date(0);a.setUTCFullYear(r,0,4),a.setUTCHours(0,0,0,0);var i=ve(a);return e.getTime()>=o.getTime()?r+1:e.getTime()>=i.getTime()?r:r-1}function ge(t){Xt(1,arguments);var e=ye(t),r=new Date(0);r.setUTCFullYear(e,0,4),r.setUTCHours(0,0,0,0);var n=ve(r);return n}var me=6048e5;function be(t){Xt(1,arguments);var e=Qt(t),r=ve(e).getTime()-ge(e).getTime();return Math.round(r/me)+1}function we(t,e){Xt(1,arguments);var r=e||{},n=r.locale,o=n&&n.options&&n.options.firstWeekContainsDate,a=null==o?1:zt(o),i=null==r.firstWeekContainsDate?a:zt(r.firstWeekContainsDate),u=pe(t,e),c=new Date(0);c.setUTCFullYear(u,0,i),c.setUTCHours(0,0,0,0);var s=de(c,e);return s}var xe=6048e5;function Oe(t,e){Xt(1,arguments);var r=Qt(t),n=de(r,e).getTime()-we(r,e).getTime();return Math.round(n/xe)+1}var Se=/^(1[0-2]|0?\d)/,Ae=/^(3[0-1]|[0-2]?\d)/,_e=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Me=/^(5[0-3]|[0-4]?\d)/,Re=/^(2[0-3]|[0-1]?\d)/,Pe=/^(2[0-4]|[0-1]?\d)/,Ee=/^(1[0-1]|0?\d)/,je=/^(1[0-2]|0?\d)/,Te=/^[0-5]?\d/,ke=/^[0-5]?\d/,Ce=/^\d/,De=/^\d{1,2}/,Ie=/^\d{1,3}/,$e=/^\d{1,4}/,Le=/^-?\d+/,Fe=/^-?\d/,Ne=/^-?\d{1,2}/,Ue=/^-?\d{1,3}/,Ye=/^-?\d{1,4}/,Be=/^([+-])(\d{2})(\d{2})?|Z/,He=/^([+-])(\d{2})(\d{2})|Z/,Ge=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Ze=/^([+-])(\d{2}):(\d{2})|Z/,We=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function qe(t,e,r){var n=e.match(t);if(!n)return null;var o=parseInt(n[0],10);return{value:r?r(o):o,rest:e.slice(n[0].length)}}function Ke(t,e){var r=e.match(t);return r?"Z"===r[0]?{value:0,rest:e.slice(1)}:{value:("+"===r[1]?1:-1)*(36e5*(r[2]?parseInt(r[2],10):0)+6e4*(r[3]?parseInt(r[3],10):0)+1e3*(r[5]?parseInt(r[5],10):0)),rest:e.slice(r[0].length)}:null}function Ve(t,e){return qe(Le,t,e)}function ze(t,e,r){switch(t){case 1:return qe(Ce,e,r);case 2:return qe(De,e,r);case 3:return qe(Ie,e,r);case 4:return qe($e,e,r);default:return qe(new RegExp("^\\d{1,"+t+"}"),e,r)}}function Xe(t,e,r){switch(t){case 1:return qe(Fe,e,r);case 2:return qe(Ne,e,r);case 3:return qe(Ue,e,r);case 4:return qe(Ye,e,r);default:return qe(new RegExp("^-?\\d{1,"+t+"}"),e,r)}}function Qe(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function Je(t,e){var r,n=e>0,o=n?e:1-e;if(o<=50)r=t||100;else{var a=o+50;r=t+100*Math.floor(a/100)-(t>=a%100?100:0)}return n?r:1-r}var tr=[31,28,31,30,31,30,31,31,30,31,30,31],er=[31,29,31,30,31,30,31,31,30,31,30,31];function rr(t){return t%400==0||t%4==0&&t%100!=0}const nr={G:{priority:140,parse:function(t,e,r,n){switch(e){case"G":case"GG":case"GGG":return r.era(t,{width:"abbreviated"})||r.era(t,{width:"narrow"});case"GGGGG":return r.era(t,{width:"narrow"});default:return r.era(t,{width:"wide"})||r.era(t,{width:"abbreviated"})||r.era(t,{width:"narrow"})}},set:function(t,e,r,n){return e.era=r,t.setUTCFullYear(r,0,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["R","u","t","T"]},y:{priority:130,parse:function(t,e,r,n){var o=function(t){return{year:t,isTwoDigitYear:"yy"===e}};switch(e){case"y":return ze(4,t,o);case"yo":return r.ordinalNumber(t,{unit:"year",valueCallback:o});default:return ze(e.length,t,o)}},validate:function(t,e,r){return e.isTwoDigitYear||e.year>0},set:function(t,e,r,n){var o=t.getUTCFullYear();if(r.isTwoDigitYear){var a=Je(r.year,o);return t.setUTCFullYear(a,0,1),t.setUTCHours(0,0,0,0),t}var i="era"in e&&1!==e.era?1-r.year:r.year;return t.setUTCFullYear(i,0,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","u","w","I","i","e","c","t","T"]},Y:{priority:130,parse:function(t,e,r,n){var o=function(t){return{year:t,isTwoDigitYear:"YY"===e}};switch(e){case"Y":return ze(4,t,o);case"Yo":return r.ordinalNumber(t,{unit:"year",valueCallback:o});default:return ze(e.length,t,o)}},validate:function(t,e,r){return e.isTwoDigitYear||e.year>0},set:function(t,e,r,n){var o=pe(t,n);if(r.isTwoDigitYear){var a=Je(r.year,o);return t.setUTCFullYear(a,0,n.firstWeekContainsDate),t.setUTCHours(0,0,0,0),de(t,n)}var i="era"in e&&1!==e.era?1-r.year:r.year;return t.setUTCFullYear(i,0,n.firstWeekContainsDate),t.setUTCHours(0,0,0,0),de(t,n)},incompatibleTokens:["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:{priority:130,parse:function(t,e,r,n){return Xe("R"===e?4:e.length,t)},set:function(t,e,r,n){var o=new Date(0);return o.setUTCFullYear(r,0,4),o.setUTCHours(0,0,0,0),ve(o)},incompatibleTokens:["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:{priority:130,parse:function(t,e,r,n){return Xe("u"===e?4:e.length,t)},set:function(t,e,r,n){return t.setUTCFullYear(r,0,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["G","y","Y","R","w","I","i","e","c","t","T"]},Q:{priority:120,parse:function(t,e,r,n){switch(e){case"Q":case"QQ":return ze(e.length,t);case"Qo":return r.ordinalNumber(t,{unit:"quarter"});case"QQQ":return r.quarter(t,{width:"abbreviated",context:"formatting"})||r.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return r.quarter(t,{width:"narrow",context:"formatting"});default:return r.quarter(t,{width:"wide",context:"formatting"})||r.quarter(t,{width:"abbreviated",context:"formatting"})||r.quarter(t,{width:"narrow",context:"formatting"})}},validate:function(t,e,r){return e>=1&&e<=4},set:function(t,e,r,n){return t.setUTCMonth(3*(r-1),1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:{priority:120,parse:function(t,e,r,n){switch(e){case"q":case"qq":return ze(e.length,t);case"qo":return r.ordinalNumber(t,{unit:"quarter"});case"qqq":return r.quarter(t,{width:"abbreviated",context:"standalone"})||r.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return r.quarter(t,{width:"narrow",context:"standalone"});default:return r.quarter(t,{width:"wide",context:"standalone"})||r.quarter(t,{width:"abbreviated",context:"standalone"})||r.quarter(t,{width:"narrow",context:"standalone"})}},validate:function(t,e,r){return e>=1&&e<=4},set:function(t,e,r,n){return t.setUTCMonth(3*(r-1),1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:{priority:110,parse:function(t,e,r,n){var o=function(t){return t-1};switch(e){case"M":return qe(Se,t,o);case"MM":return ze(2,t,o);case"Mo":return r.ordinalNumber(t,{unit:"month",valueCallback:o});case"MMM":return r.month(t,{width:"abbreviated",context:"formatting"})||r.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return r.month(t,{width:"narrow",context:"formatting"});default:return r.month(t,{width:"wide",context:"formatting"})||r.month(t,{width:"abbreviated",context:"formatting"})||r.month(t,{width:"narrow",context:"formatting"})}},validate:function(t,e,r){return e>=0&&e<=11},set:function(t,e,r,n){return t.setUTCMonth(r,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]},L:{priority:110,parse:function(t,e,r,n){var o=function(t){return t-1};switch(e){case"L":return qe(Se,t,o);case"LL":return ze(2,t,o);case"Lo":return r.ordinalNumber(t,{unit:"month",valueCallback:o});case"LLL":return r.month(t,{width:"abbreviated",context:"standalone"})||r.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return r.month(t,{width:"narrow",context:"standalone"});default:return r.month(t,{width:"wide",context:"standalone"})||r.month(t,{width:"abbreviated",context:"standalone"})||r.month(t,{width:"narrow",context:"standalone"})}},validate:function(t,e,r){return e>=0&&e<=11},set:function(t,e,r,n){return t.setUTCMonth(r,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:{priority:100,parse:function(t,e,r,n){switch(e){case"w":return qe(Me,t);case"wo":return r.ordinalNumber(t,{unit:"week"});default:return ze(e.length,t)}},validate:function(t,e,r){return e>=1&&e<=53},set:function(t,e,r,n){return de(function(t,e,r){Xt(2,arguments);var n=Qt(t),o=zt(e),a=Oe(n,r)-o;return n.setUTCDate(n.getUTCDate()-7*a),n}(t,r,n),n)},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:{priority:100,parse:function(t,e,r,n){switch(e){case"I":return qe(Me,t);case"Io":return r.ordinalNumber(t,{unit:"week"});default:return ze(e.length,t)}},validate:function(t,e,r){return e>=1&&e<=53},set:function(t,e,r,n){return ve(function(t,e){Xt(2,arguments);var r=Qt(t),n=zt(e),o=be(r)-n;return r.setUTCDate(r.getUTCDate()-7*o),r}(t,r,n),n)},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:{priority:90,subPriority:1,parse:function(t,e,r,n){switch(e){case"d":return qe(Ae,t);case"do":return r.ordinalNumber(t,{unit:"date"});default:return ze(e.length,t)}},validate:function(t,e,r){var n=rr(t.getUTCFullYear()),o=t.getUTCMonth();return n?e>=1&&e<=er[o]:e>=1&&e<=tr[o]},set:function(t,e,r,n){return t.setUTCDate(r),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:{priority:90,subPriority:1,parse:function(t,e,r,n){switch(e){case"D":case"DD":return qe(_e,t);case"Do":return r.ordinalNumber(t,{unit:"date"});default:return ze(e.length,t)}},validate:function(t,e,r){return rr(t.getUTCFullYear())?e>=1&&e<=366:e>=1&&e<=365},set:function(t,e,r,n){return t.setUTCMonth(0,r),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:{priority:90,parse:function(t,e,r,n){switch(e){case"E":case"EE":case"EEE":return r.day(t,{width:"abbreviated",context:"formatting"})||r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return r.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"});default:return r.day(t,{width:"wide",context:"formatting"})||r.day(t,{width:"abbreviated",context:"formatting"})||r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"})}},validate:function(t,e,r){return e>=0&&e<=6},set:function(t,e,r,n){return(t=he(t,r,n)).setUTCHours(0,0,0,0),t},incompatibleTokens:["D","i","e","c","t","T"]},e:{priority:90,parse:function(t,e,r,n){var o=function(t){var e=7*Math.floor((t-1)/7);return(t+n.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return ze(e.length,t,o);case"eo":return r.ordinalNumber(t,{unit:"day",valueCallback:o});case"eee":return r.day(t,{width:"abbreviated",context:"formatting"})||r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"});case"eeeee":return r.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"});default:return r.day(t,{width:"wide",context:"formatting"})||r.day(t,{width:"abbreviated",context:"formatting"})||r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"})}},validate:function(t,e,r){return e>=0&&e<=6},set:function(t,e,r,n){return(t=he(t,r,n)).setUTCHours(0,0,0,0),t},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:{priority:90,parse:function(t,e,r,n){var o=function(t){var e=7*Math.floor((t-1)/7);return(t+n.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return ze(e.length,t,o);case"co":return r.ordinalNumber(t,{unit:"day",valueCallback:o});case"ccc":return r.day(t,{width:"abbreviated",context:"standalone"})||r.day(t,{width:"short",context:"standalone"})||r.day(t,{width:"narrow",context:"standalone"});case"ccccc":return r.day(t,{width:"narrow",context:"standalone"});case"cccccc":return r.day(t,{width:"short",context:"standalone"})||r.day(t,{width:"narrow",context:"standalone"});default:return r.day(t,{width:"wide",context:"standalone"})||r.day(t,{width:"abbreviated",context:"standalone"})||r.day(t,{width:"short",context:"standalone"})||r.day(t,{width:"narrow",context:"standalone"})}},validate:function(t,e,r){return e>=0&&e<=6},set:function(t,e,r,n){return(t=he(t,r,n)).setUTCHours(0,0,0,0),t},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:{priority:90,parse:function(t,e,r,n){var o=function(t){return 0===t?7:t};switch(e){case"i":case"ii":return ze(e.length,t);case"io":return r.ordinalNumber(t,{unit:"day"});case"iii":return r.day(t,{width:"abbreviated",context:"formatting",valueCallback:o})||r.day(t,{width:"short",context:"formatting",valueCallback:o})||r.day(t,{width:"narrow",context:"formatting",valueCallback:o});case"iiiii":return r.day(t,{width:"narrow",context:"formatting",valueCallback:o});case"iiiiii":return r.day(t,{width:"short",context:"formatting",valueCallback:o})||r.day(t,{width:"narrow",context:"formatting",valueCallback:o});default:return r.day(t,{width:"wide",context:"formatting",valueCallback:o})||r.day(t,{width:"abbreviated",context:"formatting",valueCallback:o})||r.day(t,{width:"short",context:"formatting",valueCallback:o})||r.day(t,{width:"narrow",context:"formatting",valueCallback:o})}},validate:function(t,e,r){return e>=1&&e<=7},set:function(t,e,r,n){return t=function(t,e){Xt(2,arguments);var r=zt(e);r%7==0&&(r-=7);var n=1,o=Qt(t),a=o.getUTCDay(),i=((r%7+7)%7<n?7:0)+r-a;return o.setUTCDate(o.getUTCDate()+i),o}(t,r,n),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:{priority:80,parse:function(t,e,r,n){switch(e){case"a":case"aa":case"aaa":return r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return r.dayPeriod(t,{width:"narrow",context:"formatting"});default:return r.dayPeriod(t,{width:"wide",context:"formatting"})||r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"})}},set:function(t,e,r,n){return t.setUTCHours(Qe(r),0,0,0),t},incompatibleTokens:["b","B","H","k","t","T"]},b:{priority:80,parse:function(t,e,r,n){switch(e){case"b":case"bb":case"bbb":return r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return r.dayPeriod(t,{width:"narrow",context:"formatting"});default:return r.dayPeriod(t,{width:"wide",context:"formatting"})||r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"})}},set:function(t,e,r,n){return t.setUTCHours(Qe(r),0,0,0),t},incompatibleTokens:["a","B","H","k","t","T"]},B:{priority:80,parse:function(t,e,r,n){switch(e){case"B":case"BB":case"BBB":return r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return r.dayPeriod(t,{width:"narrow",context:"formatting"});default:return r.dayPeriod(t,{width:"wide",context:"formatting"})||r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"})}},set:function(t,e,r,n){return t.setUTCHours(Qe(r),0,0,0),t},incompatibleTokens:["a","b","t","T"]},h:{priority:70,parse:function(t,e,r,n){switch(e){case"h":return qe(je,t);case"ho":return r.ordinalNumber(t,{unit:"hour"});default:return ze(e.length,t)}},validate:function(t,e,r){return e>=1&&e<=12},set:function(t,e,r,n){var o=t.getUTCHours()>=12;return o&&r<12?t.setUTCHours(r+12,0,0,0):o||12!==r?t.setUTCHours(r,0,0,0):t.setUTCHours(0,0,0,0),t},incompatibleTokens:["H","K","k","t","T"]},H:{priority:70,parse:function(t,e,r,n){switch(e){case"H":return qe(Re,t);case"Ho":return r.ordinalNumber(t,{unit:"hour"});default:return ze(e.length,t)}},validate:function(t,e,r){return e>=0&&e<=23},set:function(t,e,r,n){return t.setUTCHours(r,0,0,0),t},incompatibleTokens:["a","b","h","K","k","t","T"]},K:{priority:70,parse:function(t,e,r,n){switch(e){case"K":return qe(Ee,t);case"Ko":return r.ordinalNumber(t,{unit:"hour"});default:return ze(e.length,t)}},validate:function(t,e,r){return e>=0&&e<=11},set:function(t,e,r,n){return t.getUTCHours()>=12&&r<12?t.setUTCHours(r+12,0,0,0):t.setUTCHours(r,0,0,0),t},incompatibleTokens:["h","H","k","t","T"]},k:{priority:70,parse:function(t,e,r,n){switch(e){case"k":return qe(Pe,t);case"ko":return r.ordinalNumber(t,{unit:"hour"});default:return ze(e.length,t)}},validate:function(t,e,r){return e>=1&&e<=24},set:function(t,e,r,n){var o=r<=24?r%24:r;return t.setUTCHours(o,0,0,0),t},incompatibleTokens:["a","b","h","H","K","t","T"]},m:{priority:60,parse:function(t,e,r,n){switch(e){case"m":return qe(Te,t);case"mo":return r.ordinalNumber(t,{unit:"minute"});default:return ze(e.length,t)}},validate:function(t,e,r){return e>=0&&e<=59},set:function(t,e,r,n){return t.setUTCMinutes(r,0,0),t},incompatibleTokens:["t","T"]},s:{priority:50,parse:function(t,e,r,n){switch(e){case"s":return qe(ke,t);case"so":return r.ordinalNumber(t,{unit:"second"});default:return ze(e.length,t)}},validate:function(t,e,r){return e>=0&&e<=59},set:function(t,e,r,n){return t.setUTCSeconds(r,0),t},incompatibleTokens:["t","T"]},S:{priority:30,parse:function(t,e,r,n){return ze(e.length,t,(function(t){return Math.floor(t*Math.pow(10,3-e.length))}))},set:function(t,e,r,n){return t.setUTCMilliseconds(r),t},incompatibleTokens:["t","T"]},X:{priority:10,parse:function(t,e,r,n){switch(e){case"X":return Ke(Be,t);case"XX":return Ke(He,t);case"XXXX":return Ke(Ge,t);case"XXXXX":return Ke(We,t);default:return Ke(Ze,t)}},set:function(t,e,r,n){return e.timestampIsSet?t:new Date(t.getTime()-r)},incompatibleTokens:["t","T","x"]},x:{priority:10,parse:function(t,e,r,n){switch(e){case"x":return Ke(Be,t);case"xx":return Ke(He,t);case"xxxx":return Ke(Ge,t);case"xxxxx":return Ke(We,t);default:return Ke(Ze,t)}},set:function(t,e,r,n){return e.timestampIsSet?t:new Date(t.getTime()-r)},incompatibleTokens:["t","T","X"]},t:{priority:40,parse:function(t,e,r,n){return Ve(t)},set:function(t,e,r,n){return[new Date(1e3*r),{timestampIsSet:!0}]},incompatibleTokens:"*"},T:{priority:20,parse:function(t,e,r,n){return Ve(t)},set:function(t,e,r,n){return[new Date(r),{timestampIsSet:!0}]},incompatibleTokens:"*"}};var or=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ar=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ir=/^'([^]*?)'?$/,ur=/''/g,cr=/\S/,sr=/[a-zA-Z]/;function lr(t,e,r,n){Xt(3,arguments);var o=String(t),a=String(e),i=n||{},u=i.locale||Vt;if(!u.match)throw new RangeError("locale must contain match property");var c=u.options&&u.options.firstWeekContainsDate,s=null==c?1:zt(c),l=null==i.firstWeekContainsDate?s:zt(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=u.options&&u.options.weekStartsOn,d=null==f?0:zt(f),p=null==i.weekStartsOn?d:zt(i.weekStartsOn);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===a)return""===o?Qt(r):new Date(NaN);var h,v={firstWeekContainsDate:l,weekStartsOn:p,locale:u},y=[{priority:10,subPriority:-1,set:fr,index:0}],g=a.match(ar).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ae[e])(t,u.formatLong,v):t})).join("").match(or),m=[];for(h=0;h<g.length;h++){var b=g[h];!i.useAdditionalWeekYearTokens&&le(b)&&fe(b,a,t),!i.useAdditionalDayOfYearTokens&&se(b)&&fe(b,a,t);var w=b[0],x=nr[w];if(x){var O=x.incompatibleTokens;if(Array.isArray(O)){for(var S=void 0,A=0;A<m.length;A++){var _=m[A].token;if(-1!==O.indexOf(_)||_===w){S=m[A];break}}if(S)throw new RangeError("The format string mustn't contain `".concat(S.fullToken,"` and `").concat(b,"` at the same time"))}else if("*"===x.incompatibleTokens&&m.length)throw new RangeError("The format string mustn't contain `".concat(b,"` and any other token at the same time"));m.push({token:w,fullToken:b});var M=x.parse(o,b,u.match,v);if(!M)return new Date(NaN);y.push({priority:x.priority,subPriority:x.subPriority||0,set:x.set,validate:x.validate,value:M.value,index:y.length}),o=M.rest}else{if(w.match(sr))throw new RangeError("Format string contains an unescaped latin alphabet character `"+w+"`");if("''"===b?b="'":"'"===w&&(b=dr(b)),0!==o.indexOf(b))return new Date(NaN);o=o.slice(b.length)}}if(o.length>0&&cr.test(o))return new Date(NaN);var R=y.map((function(t){return t.priority})).sort((function(t,e){return e-t})).filter((function(t,e,r){return r.indexOf(t)===e})).map((function(t){return y.filter((function(e){return e.priority===t})).sort((function(t,e){return e.subPriority-t.subPriority}))})).map((function(t){return t[0]})),P=Qt(r);if(isNaN(P))return new Date(NaN);var E=te(P,ie(P)),j={};for(h=0;h<R.length;h++){var T=R[h];if(T.validate&&!T.validate(E,T.value,v))return new Date(NaN);var k=T.set(E,j,T.value,v);k[0]?(E=k[0],ee(j,k[1])):E=k}return E}function fr(t,e){if(e.timestampIsSet)return t;var r=new Date(0);return r.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),r.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),r}function dr(t){return t.match(ir)[1].replace(ur,"'")}function pr(t){return Xt(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function hr(t){if(Xt(1,arguments),!pr(t)&&"number"!=typeof t)return!1;var e=Qt(t);return!isNaN(Number(e))}var vr=864e5;function yr(t,e){for(var r=t<0?"-":"",n=Math.abs(t).toString();n.length<e;)n="0"+n;return r+n}const gr=function(t,e){var r=t.getUTCFullYear(),n=r>0?r:1-r;return yr("yy"===e?n%100:n,e.length)},mr=function(t,e){var r=t.getUTCMonth();return"M"===e?String(r+1):yr(r+1,2)},br=function(t,e){return yr(t.getUTCDate(),e.length)},wr=function(t,e){return yr(t.getUTCHours()%12||12,e.length)},xr=function(t,e){return yr(t.getUTCHours(),e.length)},Or=function(t,e){return yr(t.getUTCMinutes(),e.length)},Sr=function(t,e){return yr(t.getUTCSeconds(),e.length)},Ar=function(t,e){var r=e.length,n=t.getUTCMilliseconds();return yr(Math.floor(n*Math.pow(10,r-3)),e.length)};function _r(t,e){var r=t>0?"-":"+",n=Math.abs(t),o=Math.floor(n/60),a=n%60;if(0===a)return r+String(o);var i=e||"";return r+String(o)+i+yr(a,2)}function Mr(t,e){return t%60==0?(t>0?"-":"+")+yr(Math.abs(t)/60,2):Rr(t,e)}function Rr(t,e){var r=e||"",n=t>0?"-":"+",o=Math.abs(t);return n+yr(Math.floor(o/60),2)+r+yr(o%60,2)}const Pr={G:function(t,e,r){var n=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return r.era(n,{width:"abbreviated"});case"GGGGG":return r.era(n,{width:"narrow"});default:return r.era(n,{width:"wide"})}},y:function(t,e,r){if("yo"===e){var n=t.getUTCFullYear(),o=n>0?n:1-n;return r.ordinalNumber(o,{unit:"year"})}return gr(t,e)},Y:function(t,e,r,n){var o=pe(t,n),a=o>0?o:1-o;return"YY"===e?yr(a%100,2):"Yo"===e?r.ordinalNumber(a,{unit:"year"}):yr(a,e.length)},R:function(t,e){return yr(ye(t),e.length)},u:function(t,e){return yr(t.getUTCFullYear(),e.length)},Q:function(t,e,r){var n=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(n);case"QQ":return yr(n,2);case"Qo":return r.ordinalNumber(n,{unit:"quarter"});case"QQQ":return r.quarter(n,{width:"abbreviated",context:"formatting"});case"QQQQQ":return r.quarter(n,{width:"narrow",context:"formatting"});default:return r.quarter(n,{width:"wide",context:"formatting"})}},q:function(t,e,r){var n=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(n);case"qq":return yr(n,2);case"qo":return r.ordinalNumber(n,{unit:"quarter"});case"qqq":return r.quarter(n,{width:"abbreviated",context:"standalone"});case"qqqqq":return r.quarter(n,{width:"narrow",context:"standalone"});default:return r.quarter(n,{width:"wide",context:"standalone"})}},M:function(t,e,r){var n=t.getUTCMonth();switch(e){case"M":case"MM":return mr(t,e);case"Mo":return r.ordinalNumber(n+1,{unit:"month"});case"MMM":return r.month(n,{width:"abbreviated",context:"formatting"});case"MMMMM":return r.month(n,{width:"narrow",context:"formatting"});default:return r.month(n,{width:"wide",context:"formatting"})}},L:function(t,e,r){var n=t.getUTCMonth();switch(e){case"L":return String(n+1);case"LL":return yr(n+1,2);case"Lo":return r.ordinalNumber(n+1,{unit:"month"});case"LLL":return r.month(n,{width:"abbreviated",context:"standalone"});case"LLLLL":return r.month(n,{width:"narrow",context:"standalone"});default:return r.month(n,{width:"wide",context:"standalone"})}},w:function(t,e,r,n){var o=Oe(t,n);return"wo"===e?r.ordinalNumber(o,{unit:"week"}):yr(o,e.length)},I:function(t,e,r){var n=be(t);return"Io"===e?r.ordinalNumber(n,{unit:"week"}):yr(n,e.length)},d:function(t,e,r){return"do"===e?r.ordinalNumber(t.getUTCDate(),{unit:"date"}):br(t,e)},D:function(t,e,r){var n=function(t){Xt(1,arguments);var e=Qt(t),r=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var n=e.getTime(),o=r-n;return Math.floor(o/vr)+1}(t);return"Do"===e?r.ordinalNumber(n,{unit:"dayOfYear"}):yr(n,e.length)},E:function(t,e,r){var n=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return r.day(n,{width:"abbreviated",context:"formatting"});case"EEEEE":return r.day(n,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},e:function(t,e,r,n){var o=t.getUTCDay(),a=(o-n.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return yr(a,2);case"eo":return r.ordinalNumber(a,{unit:"day"});case"eee":return r.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return r.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(o,{width:"short",context:"formatting"});default:return r.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,r,n){var o=t.getUTCDay(),a=(o-n.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return yr(a,e.length);case"co":return r.ordinalNumber(a,{unit:"day"});case"ccc":return r.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return r.day(o,{width:"narrow",context:"standalone"});case"cccccc":return r.day(o,{width:"short",context:"standalone"});default:return r.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,r){var n=t.getUTCDay(),o=0===n?7:n;switch(e){case"i":return String(o);case"ii":return yr(o,e.length);case"io":return r.ordinalNumber(o,{unit:"day"});case"iii":return r.day(n,{width:"abbreviated",context:"formatting"});case"iiiii":return r.day(n,{width:"narrow",context:"formatting"});case"iiiiii":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},a:function(t,e,r){var n=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"aaa":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},b:function(t,e,r){var n,o=t.getUTCHours();switch(n=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"bbb":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},B:function(t,e,r){var n,o=t.getUTCHours();switch(n=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"BBBBB":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},h:function(t,e,r){if("ho"===e){var n=t.getUTCHours()%12;return 0===n&&(n=12),r.ordinalNumber(n,{unit:"hour"})}return wr(t,e)},H:function(t,e,r){return"Ho"===e?r.ordinalNumber(t.getUTCHours(),{unit:"hour"}):xr(t,e)},K:function(t,e,r){var n=t.getUTCHours()%12;return"Ko"===e?r.ordinalNumber(n,{unit:"hour"}):yr(n,e.length)},k:function(t,e,r){var n=t.getUTCHours();return 0===n&&(n=24),"ko"===e?r.ordinalNumber(n,{unit:"hour"}):yr(n,e.length)},m:function(t,e,r){return"mo"===e?r.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Or(t,e)},s:function(t,e,r){return"so"===e?r.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Sr(t,e)},S:function(t,e){return Ar(t,e)},X:function(t,e,r,n){var o=(n._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Mr(o);case"XXXX":case"XX":return Rr(o);default:return Rr(o,":")}},x:function(t,e,r,n){var o=(n._originalDate||t).getTimezoneOffset();switch(e){case"x":return Mr(o);case"xxxx":case"xx":return Rr(o);default:return Rr(o,":")}},O:function(t,e,r,n){var o=(n._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+_r(o,":");default:return"GMT"+Rr(o,":")}},z:function(t,e,r,n){var o=(n._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+_r(o,":");default:return"GMT"+Rr(o,":")}},t:function(t,e,r,n){var o=n._originalDate||t;return yr(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,r,n){return yr((n._originalDate||t).getTime(),e.length)}};var Er=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,jr=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Tr=/^'([^]*?)'?$/,kr=/''/g,Cr=/[a-zA-Z]/;function Dr(t){return t.match(Tr)[1].replace(kr,"'")}r(26699),r(32023);const Ir=st((function(t,e){return dt((function(e,r){return tt(t(r),(function(t){return(e[t]||(e[t]=[])).push(r),e}))}),{},e)}));var $r=r(69301),Lr=X.mark(Fr);function Fr(t){var e;return X.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:r.t0=$r(X).call(X,t);case 1:if((r.t1=r.t0()).done){r.next=7;break}return e=r.t1.value,r.next=5,[e,t[e]];case 5:r.next=1;break;case 7:case"end":return r.stop()}}),Lr)}function Nr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Ur=[{index:"1",id:"str",group:"문자열",label:"문자열"},{index:"2",id:"amt",group:"금액",label:"금액",errorDiscription:"숫자(금액, 수량, 율) 데이터의 부정확한 입력<br />설명: 숫자 데이터형식은 금액, 수량, 율로 구분하고, 표준데이터 형식은 숫자, 소수점 마이너스(-)로만 표기",example:"표준형식: ①99999 ②-99999 ③-99999.999<br />예시: ①2,100원 -> 2100 ②->∆128.65% -> -128.65"},{index:"3",id:"qtt",group:"수량",label:"수량",errorDiscription:"숫자(금액, 수량, 율) 데이터의 부정확한 입력<br />설명: 숫자 데이터형식은 금액, 수량, 율로 구분하고, 표준데이터 형식은 숫자, 소수점 마이너스(-)로만 표기",example:"표준형식: ①99999 ②-99999 ③-99999.999<br />예시: ①2,100원 -> 2100 ②∆128.65% -> -128.65"},{index:"4",id:"pec",type:"율",label:"율",errorDiscription:"숫자(금액, 수량, 율) 데이터의 부정확한 입력<br />설명: 숫자 데이터형식은 금액, 수량, 율로 구분하고, 표준데이터 형식은 숫자, 소수점 마이너스(-)로만 표기",example:"표준형식: ①99999 ②-99999 ③-99999.999<br />예시: ①2,100원 -> 2100 ②∆128.65% -> -128.65"},{index:"5-1",id:"wheYN",group:"여부",label:"Y, N",errorDiscription:"여부(Y, N) 데이터의 부정확한 입력<br />설명: 여부 데이터형식은 Y 와 N 구분하고, 영문 대문자 Y와 N으로만 표기",example:"표준형식: ①Y ②N<br />예시: ①y -> Y ②n -> N ③예 -> Y ④아니오 -> N"},{index:"5-2",id:"wheSET",group:"여부",label:"여부값 지정",errorDiscription:"여부(여부값 지정) 데이터의 부정확한 입력<br />설명: 여부 데이터형식은 지정한 여부값으로만 표기",example:"표준형식: 여부값 지정 예시①적용 ②미적용<br />예시: ①적 용 -> 적용 ②Y -> 적용 ③미 적용 -> 미적용 ④아니오 -> 미적용"},{index:"6-1",id:"dtYYYYMMDDHH24MISS",group:"날짜",label:"YYYY-MM-DD HH24:MI:SS",content:"연월일 시간분초",errorDiscription:"날짜(YYYY-MM-DD HH24:MI:SS) 데이터의 부정확한 입력<br />설명: 년도, 월, 일자간의 표준데이터형식은 하이픈(-)을 사용하고, 시간, 분, 초간에는 콜론(:)을 사용하여 표기",example:"표준형식:9999-99-99 99:99:99<br />예시: ①2021-08-07 8:9:59 -> 2021-08-07 08:09:59 ②2021/08/078959 -> 2021/08/07 08:09:59"},{index:"6-2",id:"dtYYYYMMDDHH24MI",group:"날짜",label:"YYYY-MM-DD HH24:MI",content:"연월일 시간분",errorDiscription:"날짜(YYYY-MM-DD HH24:MI) 데이터의 부정확한 입력<br />설명: 년도, 월, 일자간의 표준데이터형식은 하이픈(-)을 사용하고, 시간, 분간에는 콜론(:)을 사용하여 표기",example:"표준형식:9999-99-99 99:99<br />예시: ①2021-08-07 8:9 -> 2021-08-07 08:09 ②2021/08/0789 -> 2021/08/07 08:09"},{index:"6-3",id:"dtYYYYMMDDHH24",group:"날짜",label:"YYYY-MM-DD HH24",content:"연월일 시간",errorDiscription:"날짜(YYYY-MM-DD HH24) 데이터의 부정확한 입력<br />설명: 년도, 월, 일자간의 표준데이터형식은 하이픈(-)을 사용하고, 시간을 표기",example:"표준형식:9999-99-99 99<br />예시: ①2021-08-07 8 -> 2021-08-07 08 ②2021/08/078 -> 2021/08/07 08"},{index:"6-4",id:"dtMMDDHH24MI",group:"날짜",label:"MM-DD HH24:MI",content:"월일 시간분",errorDiscription:"날짜(MM-DD HH24:MI) 데이터의 부정확한 입력<br />설명: 월, 일자간의 표준데이터형식은 하이픈(-)을 사용하고, 시간, 분간에는 콜론(:)을 사용하여 표기",example:"표준형식:99-99 99:99<br />예시: ①08-07 8:9 -> 08-07 08:09 ②8월7일8시6분 -> 08-07 08:06"},{index:"6-5",id:"dtHH24MISS",group:"날짜",label:"HH24:MI:SS",content:"시간분초",errorDiscription:"날짜(HH24:MI:SS) 데이터의 부정확한 입력<br />설명: 시간, 분, 초간에는 콜론(:)을 사용하여 표기",example:"표준형식:99:99:99<br />예시: ①8:6:59 -> 08:06:59 ②8시6분59초 -> 08:06:59"},{index:"6-6",id:"dtYYYYMMDD",group:"날짜",label:"YYYY-MM-DD",content:"연월일",errorDiscription:"날짜(YYYY-MM-DD) 데이터의 부정확한 입력<br />설명: 년도, 월, 일자간의 표준데이터형식은 하이픈(-)을 사용하여 표기",example:"표준형식:9999-99-99<br />예시: ①21.8.1 -> 2021-08-01 ②21/8/1 -> 2021-08-01"},{index:"6-7",id:"dtHH24MI",group:"날짜",label:"HH24:MI",content:"시간분",errorDiscription:"날짜(HH24:MI) 데이터의 부정확한 입력<br />설명: 시간, 분간에는 콜론(:)을 사용하여 표기",example:"표준형식:99:99<br />예시: ①8:6 -> 08:06 ②8시6분 -> 08:06"},{index:"6-8",id:"dtYYYYMM",group:"날짜",label:"YYYY-MM",content:"연월",errorDiscription:"날짜(YYYY-MM) 데이터의 부정확한 입력<br />설명: 년도, 월간의 표준데이터형식은 하이픈(-)을 사용하여 표기",example:"표준형식:9999-99<br />예시: ①21.8 -> 2021-08 ②21/8 -> 2021-08"},{index:"6-9",id:"dtMMDD",group:"날짜",label:"MM-DD",content:"월일",errorDiscription:"날짜(MM-DD) 데이터의 부정확한 입력<br />설명: 월, 일자간의 표준데이터형식은 하이픈(-)을 사용하여 표기",example:"표준형식:99-99<br />예시: ①5-9 -> 05-09 ②5.9 -> 05:09"},{index:"6-10",id:"dtHH24",group:"날짜",label:"HH24",content:"시간",errorDiscription:"날짜(HH24) 데이터의 부정확한 입력<br />설명: 시간(숫자2자리) 사용하여 표기",example:"표준형식:99<br />예시: ①9 -> 09 ②9시 -> 09"},{index:"6-11",id:"dtYYYY",group:"날짜",label:"YYYY",content:"연도",errorDiscription:"날짜(YYYY) 데이터의 부정확한 입력<br />설명: 년도(숫자4자리) 사용하여 표기",example:"표준형식: 9999<br />예시: ①21년 -> 2021 ②2021년 -> 2021"},{index:"6-12",id:"dtDD",group:"날짜",label:"DD",content:"일자",errorDiscription:"날짜(DD) 데이터의 부정확한 입력<br />설명: 일자(숫자2자리) 사용하여 표기",example:"표준형식: 99<br />예시: ①5월 -> 05 ②5 -> 05"},{index:"6-13",id:"dtMI",group:"날짜",label:"MI",content:"분",errorDiscription:"날짜(MI) 데이터의 부정확한 입력<br />설명: 분(숫자2자리) 사용하여 표기",example:"표준형식: 99<br />예시: ①5분 -> 05 ②5 -> 05"},{index:"6-14",id:"dtMM",group:"날짜",label:"MM",content:"월",errorDiscription:"날짜(MM) 데이터의 부정확한 입력<br />설명: 월(숫자2자리) 사용하여 표기",example:"표준형식: 99<br />예시: ①5월 -> 05 ②5월 -> 05"},{index:"6-15",id:"dtSS",group:"날짜",label:"SS",content:"초",errorDiscription:"날짜(SS) 데이터의 부정확한 입력<br />설명: 초(숫자2자리) 사용하여 표기",example:"표준형식: 99<br />예시: ①5초 -> 05 ②5 -> 05"},{index:"6-16",id:"dtMISS",group:"날짜",label:"MI:SS",content:"분초",errorDiscription:"날짜(MI:SS) 데이터의 부정확한 입력<br />설명: 분, 초간에는 콜론(:)을 사용하여 표기",example:"표준형식: 99:99<br />예시: ①5:1 -> 05:01 ②5.1 -> 05:01"},{index:"7-1",id:"numPhone",group:"번호",label:"전화번호",errorDiscription:"번호(전화번호) 데이터의 부정확한 입력<br />설명: 번호(전화번호)는 다양한 유형의 패턴(상세안내참조) 존재하고, 숫자와 하이픈(-)으로만 표기, 유형별 자릿수 준용",example:"표준형식: ①99-999-9999 ②99-9999-9999 ③999-999-9999 등<br />예시: ①0632714790 -> 063-271-4790 ②063)2714790 -> 063-271-4790 ③063- 271- 4790 -> 063-271-4790"},{index:"7-2",id:"numPostalCode",group:"번호",label:"우편번호",errorDiscription:"번호(우편번호) 데이터의 부정확한 입력<br />설명: 번호(우편번호)는 신우편번호, 구우편번호로 구분하고, 숫자와 하이픈(-)으로만 표기, 유형별 자릿수 준용",example:"표준형식: ①신우편번호 99999 ②구우편번호 999-999 <br />예시: ①(46987) -> 46987 ②701721 -> 701-721 ③6987 -> 06987"},{index:"7-3",id:"numBusiness",group:"번호",label:"사업자번호",errorDiscription:"번호(사업자번호) 데이터의 부정확한 입력<br />설명: 번호(사업자번호)는 숫자와 하이픈(-)으로만 표기, 3자리-2자리-5자리 자릿수를 준용",example:"표준형식: ①999-99-99999<br />예시: ①4020387956 -> 402-03-87956 ②402 03 87956 -> 402-03-87956"},{index:"7-4",id:"numPattern",group:"번호",label:"패턴지정번호",errorDiscription:"번호(패턴지정번호) 데이터의 부정확한 입력<br />설명: 번호(패턴지정번호)는 지정한 유형의 패턴번호만 유효하고, 숫자와 하이픈(-)으로만 표기, 지정한 자릿수 준용",example:"표준형식: 패턴 지정 예시 주차장관리번호 NNN-N-NNNNNN<br />예시: ①100-01-000001 -> 100-1-000001"},{index:"8",id:"conTime",group:"일관성",label:"시간순서 일관성",errorDiscription:"시간순서 데이터의 항목과 항목의 시간순서 규칙 오류<br />설명: 시간순서 데이터 항목 간 점검은 항목과 항목의 시간순서 규칙에 따라 입력",example:"표준형식: 시작일자 2021-01-01 종료일자 2021-12-31 (종료일자는 시작일자보다 같거나 커야 되는 규칙)<br />예시: 시작일자 2021-12-31 종료일자 2021-01-01 (시작일자가 종료일자 보다 큼)"},{index:"9",id:"conLogicRelationShip",group:"일관성",label:"컬럼 간 논리관계 일관성"},{index:"10-1",id:"calFormula",group:"계산식",label:"산식",errorDiscription:"계산식 > 산식 데이터의 항목 데이터간의 계산 산식 규칙 오류<br />설명: 산식 데이터 항목 간 진단은 항목과 항목의 계산 산식 규칙에 따라 입력",example:"표준형식: 시간당생산량 12 = 생산량 120/가동시간 10 (시간당생산량은 생산량 나누기 가동시간 규칙)<br />예시: 시간당생산량 11 = 생산량 120/가동시간 10 (계산식에 맞지 않음)"},{index:"10-2",id:"calSum",group:"계산식",label:"합계",errorDiscription:"계산식 > 합계 데이터의 항목 데이터간의 계산 합계 규칙 오류<br />설명: 계산 합계 데이터 항목 간 진단은 항목과 항목의 계산 합계 규칙에 따라 입력",example:"표준형식:전국매출액(억원) 120 = 서울매출액 60 + 부산매출액 40 + 대구매출액 20 (전국매출액은 서울, 부산, 대구 매출액의 합계 규칙 존재)<br />예시: 전국매출액(억원) 120 = 서울매출액 60 + 부산매출액 40 + 대구매출액 10 (계산 합계 규칙에 맞지 않음)"}],Yr=ht(Ur,Ir((function(t){return t.index.includes("-")})),(function(t){return Ot(Fr(t))}),St((function(t){var e,r,n=(r=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){u=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}}(e,r)||function(t,e){if(t){if("string"==typeof t)return Nr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Nr(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return n[0],n[1]}))),Br=function(t){switch(t){case"dtYYYYMMDDHH24MISS":return"yyyy-MM-dd HH:mm:ss";case"dtYYYYMMDDHH24MI":return"yyyy-MM-dd HH:mm";case"dtYYYYMMDDHH24":return"yyyy-MM-dd HH";case"dtMMDDHH24MI":return"MM-dd HH:mm";case"dtHH24MISS":return"HH:mm:ss";case"dtYYYYMMDD":return"yyyy-MM-dd";case"dtHH24MI":return"HH:mm";case"dtYYYYMM":return"yyyy-MM";case"dtMMDD":return"MM-dd";case"dtHH24":return"HH";case"dtYYYY":return"yyyy";case"dtDD":return"dd";case"dtMI":return"mm";case"dtMM":return"MM";case"dtSS":return"ss";case"dtMISS":return"mm:ss"}};function Hr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){u=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Gr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Gr(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Zr=function(t,e){var r=e.id;return"string"==typeof t&&function(t,e,r){return Xt(2,arguments),hr(lr(t,e,new Date,r))}(t,Br(r))&&t.length===Br(r).length},Wr=function(t){return""!==t||null!==t||void 0!==t},qr=(r(24603),r(88386),r(39714),function(t,e){var r=e.id,n=e.pattern;if("numPhone"===r)return"number"!=typeof t&&(/^\d{2}-\d{3}-\d{4}$/.test(t)||/^\d{2}-\d{4}-\d{4}$/.test(t)||/^\d{3}-\d{3}-\d{4}$/.test(t)||/^\d{3}-\d{4}-\d{4}$/.test(t)||/^\d{4}-\d{4}$/.test(t)||/^\d{4}-\d{3}-\d{4}$/.test(t)||/^\d{4}-\d{4}-\d{4}$/.test(t)||/^\d{2}-\d{3}$/.test(t)||/^\d{3}-\d{4}$/.test(t)||/^\d{3}-\d{3}$/.test(t)||/^\d{3}$/.test(t)||/^\d{4}$/.test(t));if("numPostalCode"===r)return"number"!=typeof t&&(/^\d{3}-\d{3}$/.test(t)||/^\d{5}$/.test(t));if("numBusiness"===r)return"number"!=typeof t&&/^\d{3}-\d{2}-\d{5}$/.test(t);if("numPattern"===r){var o=n.split("-").map((function(t){return"\\d{".concat(t.length,"}")})).join("-");return new RegExp("^".concat(o,"$")).test(t)}}),Kr=function(t){try{return"number"==typeof t||!(t.length>1&&"0"===t[0])&&(0,$t.isDecimal)(t)}catch(t){return!1}},Vr=function(t,e){var r=e.trueValue,n=void 0===r?"Y":r,o=e.falseValue,a=void 0===o?"N":o;return RegExp("^[".concat(n).concat(a,"]$")).test(t)};function zr(t,e,r,n,o){var a={text:r},i=n.essential,u=n.ruleset,c=n.id,s=!1;if(!r)return a;if("id"===c)return a;if(i&&!Wr(r))return a.addClasses="error-cell",a;var l=u.name;return("금액"===l&&!Lt(r)||"수량"===l&&!Nt(r)||"율"===l&&!Kr(r)||"여부"===l&&!Vr(r,u)||"날짜"===l&&!Zr(r,u)||"번호"===l&&!qr(r,u)||"일관성"===l&&!Ft(r,u,o)||"계산식"===l&&!It(r,u,o))&&(s=!0),s?Object.assign(a,{addClasses:"error-cell"}):a}function Xr(t){return Xr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Xr(t)}var Qr=["maxWidth"];function Jr(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function tn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Jr(Object(r),!0).forEach((function(e){en(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Jr(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function en(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function rn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function nn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function on(t,e){return on=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},on(t,e)}function an(t,e){if(e&&("object"===Xr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function un(t){return un=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},un(t)}var cn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&on(t,e)}(c,t);var e,r,o,a,u=(o=c,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=un(o);if(a){var r=un(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return an(this,t)});function c(){return rn(this,c),u.apply(this,arguments)}return e=c,r=[{key:"initState",value:function(){return{progress:n,noErrorData:!1}}},{key:"diagnosis",value:function(t){var e=this.parent.dataGrid.state.columns,r=t.getData().getItems(),n=[];$.each($(".essential"),(function(t,r){var n=$(r).is(":checked");e[t+1].essential=n})),ht(e,St((function(t){return tn(tn({},t),{},{formatter:zr})})),t.setColumns),e=e.map((function(t,e){return tn(tn({},t),{},{order:e,errorCount:0})}));for(var o=r.length,a=function(t){for(var o=r[t],a=Object.keys(o),i=a.length,u=function(t){var r=e.find((function(e){return e.id===a[t]})),i=r.essential,u=r.ruleset,c=o[a[t]];if(!u)return"continue";var s=u.name;if(i&&!Wr(c))return r.errorCount++,"continue";switch(s){case"금액":Lt(c)||(r.errorCount++,n[o.id]=!0);break;case"수량":Nt(c)||(r.errorCount++,n[o.id]=!0);break;case"율":Kr(c)||(r.errorCount++,n[o.id]=!0);break;case"여부":Vr(c,u)||(r.errorCount++,n[o.id]=!0);break;case"날짜":Zr(c,u)||(r.errorCount++,n[o.id]=!0);break;case"번호":qr(c,u)||(r.errorCount++,n[o.id]=!0);break;case"일관성":Ft(c,u,o)||(r.errorCount++,n[o.id]=!0);break;case"계산식":It(c,u,o)||(r.errorCount++,n[o.id]=!0)}},c=0;c<i;c++)u(c)},i=0;i<o;i++)a(i);this.setState({errorIndex:n}),this.renderGrid(e)}},{key:"renderGrid",value:function(t){var e=t.filter((function(t){return!!t.errorCount})).map((function(t){var e=t.id,r=t.order,n=t.errorCount,o=t.ruleset,a=Ur.find((function(t){var e=t.id;return o.id===e})),i=a.group,u=a.label,c=a.errorDiscription,s=a.example;return{columnNo:r,columnName:e,diagRule:i===u?u:"".concat(i,"(").concat(u,")"),diagResult:c||"에러 설명 미입력",format:s||"표현 형식 미입력",errorCount:n}}));if(0===e.length)return alert("진단 결과 규칙에 해당하는 오류가 없습니다."),void this.setState({noErrorData:!0});this.setState({noErrorData:!1});var r=new Slick.Grid("#diag-result-grid",e,[{id:"column-no",name:"컬럼순번",field:"columnNo",maxWidth:80},{id:"column-name",name:"컬럼명",field:"columnName",maxWidth:80},{id:"diag-rule",name:"진단규칙",field:"diagRule",maxWidth:80},{id:"diag-result",name:"진단결과",field:"diagResult",cssClass:"diag-result",formatter:function(){return arguments.length<=2?void 0:arguments[2]}},{id:"format",name:"표현형식/예시",field:"format",cssClass:"format",formatter:function(){return arguments.length<=2?void 0:arguments[2]}},{id:"error-count",name:"에러건수",field:"errorCount",maxWidth:80}],{enableCellNavigation:!0,forceFitColumns:!0,headerRowHeight:30,rowHeight:42});ht(r.getColumns(),St((function(t){return t.maxWidth,function(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}(t,Qr)})),r.setColumns)}},{key:"template",value:function(){var t=this.state,e=t.progress;return t.noErrorData?"":e===i?'\n        <section class="card">\n          <article class="card-body">\n            <div id="diag-result-grid" />\n          </article>\n        </section>\n      ':""}}],r&&nn(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),c}(Dt);function sn(t){return sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},sn(t)}function ln(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function fn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ln(Object(r),!0).forEach((function(e){dn(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ln(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function dn(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function pn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function hn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function vn(t,e){return vn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},vn(t,e)}function yn(t,e){if(e&&("object"===sn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function gn(t){return gn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},gn(t)}var mn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&vn(t,e)}(s,t);var r,o,a,i,c=(a=s,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=gn(a);if(i){var r=gn(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return yn(this,t)});function s(){return pn(this,s),c.apply(this,arguments)}return r=s,(o=[{key:"initState",value:function(){return{progress:n,grid:null,dataView:null,columns:[],gridId:"data-grid"}}},{key:"setEvents",value:function(){var t=this;e.call(this,"select-ruleset","change",(function(e){var r=e.target,n=$(r),o=t.state.columns,a=n.attr("id").replace("selectDiag-",""),i=n.find("option:selected").data("ruleset"),u=n.find("option:selected").val();"금액"!==i&&"수량"!==i&&"율"!==i&&"wheYN"!==u&&"numPhone"!==u&&"numPostalCode"!==u&&"numBusiness"!==u||(n.val(u),t.setState({columns:o.map((function(t){return t.id===a?fn(fn({},t),{},{ruleset:{id:u,name:i}}):t}))})),"wheSET"===u&&t.parent.whetherModal.show(n,t.state.grid),"날짜"===i&&t.parent.dateModal.show(n,u),"numPattern"===u&&t.parent.patternModal.show(n,t.state.grid),"conTime"===u&&t.parent.timeOrderModal.show(n,t.state),"conLogicRelationShip"===u&&t.parent.logicRelationshipModal.show(n,t.state),"calFormula"===u&&t.parent.formulaModal.show(n,t.state),"calSum"===u&&t.parent.sumModal.show(n,t.state)}))}},{key:"setStartRow",value:function(t,e){var r=this,n=Rt().setCollWidth,o=void 0===n?"":n,a=this.sliceDataColumns(t,e),i=a.columns,u=a.data,c=new Slick.Data.DataView,s={enableCellNavigation:!0,showHeaderRow:!0,forceFitColumns:!o,headerRowHeight:30,explicitInitialization:!0},l=new Slick.Grid("#data-grid",c,i,s);this.setState({grid:l,columns:l.getColumns().map((function(t){return fn(fn({},t),{},{ruleset:{id:"str",name:"문자열"}})}))}),c.onRowCountChanged.subscribe((function(t){l.updateRowCount(),l.render()})),c.onRowsChanged.subscribe((function(t,e){var r=e.rows;l.invalidateRows(r),l.render()})),l.onHeaderRowCellRendered.subscribe((function(t,e){var n=e.node,o=e.column,a=o.id,i=o.ruleset,u=void 0===i?{id:"str",name:"문자열"}:i;if("id"!==a){var c=r.rulesetSelectTemplate(a,u);$(n).append(c)}})),l.init(),c.setItems(u)}},{key:"template",value:function(){return'\n      <div class="row">\n        <div class="col">\n          <article class="card">\n            <div class="card-body">\n              <div id="data-grid">\n                <h1>CSV 파일을 선택해주세요.</h1>\n              </div>\n            </div>\n          </article>\n        </div>\n      </div>\n    '}},{key:"render",value:function(){var t=this.state.progress,e=Rt().oneGrid;t===n?this.$target.html(this.template()):e&&t===u&&this.$target.html("")}},{key:"rulesetSelectTemplate",value:function(t,e){var r=e.id;return $('\n        <div>\n          <input type="checkbox" class="essential" id="essential-'.concat(t,'" />\n          <select id=selectDiag-').concat(t,' class="custom-select selected-ruleset" data-action="select-ruleset">\n            ').concat(Yr.map((function(t,e){return t.map((function(t){var n=t.id,o=t.index,a=t.group,i=t.label;return'<option value="'.concat(n,'" data-ruleset="').concat(a,'" ').concat(n===r?"selected":"",">").concat(o,") ").concat(e?a+" > ":"").concat(i,"</option>")})).join("")})).join(""),"\n          </select>\n        </div>\n    "))}}])&&hn(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),s}(Dt);function bn(t,e){var r=void 0!==gt&&V(t)||t["@@iterator"];if(!r){if(mt(t)||(r=function(t,e){var r;if(t){if("string"==typeof t)return wn(t,e);var n=vt(r=Object.prototype.toString.call(t)).call(r,8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?yt(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){u=!0,a=t},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw a}}}}function wn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}r(73210);const xn=st(X.mark((function t(e,r){var n,o,a;return X.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=bn(J(r)),t.prev=1,a=X.mark((function t(){var r,n,a;return X.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=ct(o.value,2),n=r[0],a=r[1],t.next=3,tt(tt(a,e),(function(t){return[n,t]}));case 3:case"end":return t.stop()}}),t)})),n.s();case 4:if((o=n.n()).done){t.next=8;break}return t.delegateYield(a(),"t0",6);case 6:t.next=4;break;case 8:t.next=13;break;case 10:t.prev=10,t.t1=t.catch(1),n.e(t.t1);case 13:return t.prev=13,n.f(),t.finish(13);case 16:case"end":return t.stop()}}),t,null,[[1,10,13,16]])})));function On(t,e){var r=void 0!==gt&&V(t)||t["@@iterator"];if(!r){if(mt(t)||(r=function(t,e){var r;if(t){if("string"==typeof t)return Sn(t,e);var n=vt(r=Object.prototype.toString.call(t)).call(r,8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?yt(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Sn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){u=!0,a=t},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw a}}}}function Sn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const An=st(X.mark((function t(e,r){var n,o,a;return X.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=On(J(r)),t.prev=1,a=X.mark((function t(){var r,n;return X.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=o.value,!((n=tt(r,e))instanceof K)){t.next=7;break}return t.next=5,n.then((function(t){return t?r:K.reject(et)}));case 5:t.next=10;break;case 7:if(!n){t.next=10;break}return t.next=10,r;case 10:case"end":return t.stop()}}),t)})),n.s();case 4:if((o=n.n()).done){t.next=8;break}return t.delegateYield(a(),"t0",6);case 6:t.next=4;break;case 8:t.next=13;break;case 10:t.prev=10,t.t1=t.catch(1),n.e(t.t1);case 13:return t.prev=13,n.f(),t.finish(13);case 16:case"end":return t.stop()}}),t,null,[[1,10,13,16]])})));function _n(t){return function(e){for(var r,n=arguments.length,o=new Array(n>1?n-1:0),a=1;a<n;a++)o[a-1]=arguments[a];return o.length>1?t.apply(void 0,q(r=[e]).call(r,o)):1===o.length?function(){for(var r,n=arguments.length,a=new Array(n),i=0;i<n;i++)a[i]=arguments[i];return t.apply(void 0,q(r=[e,o[0]]).call(r,a))}:function(r){for(var n,o=arguments.length,a=new Array(o>1?o-1:0),i=1;i<o;i++)a[i-1]=arguments[i];return a.length?t.apply(void 0,q(n=[e,r]).call(n,a)):function(){for(var n,o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return t.apply(void 0,q(n=[e,r]).call(n,a))}}}}function Mn(t){return!t}const Rn=function(t){return t},Pn=(En=function(t,e,r){for(var n=arguments.length,o=new Array(n>3?n-3:0),a=3;a<n;a++)o[a-3]=arguments[a];return tt(t.apply(void 0,o),(function(t){return t?e.apply(void 0,o):r.apply(void 0,o)}))},function(t){for(var e,r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return n.length>2?En.apply(void 0,q(e=[t]).call(e,n)):2===n.length?function(){for(var e,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return En.apply(void 0,q(e=[t,n[0],n[1]]).call(e,o))}:1===n.length?function(e){for(var r,o=arguments.length,a=new Array(o>1?o-1:0),i=1;i<o;i++)a[i-1]=arguments[i];return a.length?En.apply(void 0,q(r=[t,n[0],e]).call(r,a)):function(){for(var r,o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return En.apply(void 0,q(r=[t,n[0],e]).call(r,a))}}:function(e){for(var r,n=arguments.length,o=new Array(n>1?n-1:0),a=1;a<n;a++)o[a-1]=arguments[a];return o.length>1?En.apply(void 0,q(r=[t,e]).call(r,o)):1===o.length?function(){for(var r,n=arguments.length,a=new Array(n),i=0;i<n;i++)a[i]=arguments[i];return En.apply(void 0,q(r=[t,e,o[0]]).call(r,a))}:function(r){for(var n,o=arguments.length,a=new Array(o>1?o-1:0),i=1;i<o;i++)a[i-1]=arguments[i];return a.length?En.apply(void 0,q(n=[t,e,r]).call(n,a)):function(){for(var n,o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return En.apply(void 0,q(n=[t,e,r]).call(n,a))}}}});var En;const jn=_n((function(t,e){for(var r,n=arguments.length,o=new Array(n>2?n-2:0),a=2;a<n;a++)o[a-2]=arguments[a];return Pn.apply(void 0,q(r=[t,e,Rn]).call(r,o))})),Tn=_n((function(t,e){for(var r=arguments.length,n=new Array(r>2?r-2:0),o=2;o<r;o++)n[o-2]=arguments[o];return ht(t.apply(void 0,n),jn(Mn,(function(){return e.apply(void 0,n)})),Boolean)}));var kn;const Cn=r(54103)(kn=mt).call(kn,Array);function Dn(t){return"function"==typeof t}function In(t){return null!=t&&!!V(t)}var $n=r(23882);function Ln(t){return Ln="function"==typeof ot&&"symbol"==typeof $n?function(t){return typeof t}:function(t){return t&&"function"==typeof ot&&t.constructor===ot&&t!==ot.prototype?"symbol":typeof t},Ln(t)}const Fn=function(t){return null!==t&&"object"===Ln(t)&&t.constructor===Object};function Nn(t){return"string"==typeof t}const Un=gt("clonedIterable");var Yn=X.mark((function t(e){return X.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.delegateYield(e,"t0",1);case 1:case"end":return t.stop()}}),t)})),Bn=function(t){var e=Yn(t);return e[Un]=!0,e};function Hn(t){return ht(t,Fr,xn(function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return ht(e,An((function(t){return ct(t,1)[0].apply(void 0,r)})),xt((function(t){var e=ct(t,2);return e[0],e[1].apply(void 0,r)})),ft)}}([Cn,function(t){return vt(t).call(t)}],[Nn,Rn],[In,Bn],[Tn(Fn,Dn),Hn],[function(){return!0},Rn])))}var Gn=function(t){return Mn(Nn(t))&&Mn(Cn(t))&&In(t)&&!0===Mn(t[Un])};function Zn(t){return dt((function(t,e){var r=ct(e,2),n=r[0];return ht(r[1],jn(Gn,Zn),(function(e){return t[n]=e,t}))}),{},t)}function Wn(t){return Zn(Hn(t))}var qn=X.mark(Kn);function Kn(t){var e;return X.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:r.t0=$r(X).call(X,t);case 1:if((r.t1=r.t0()).done){r.next=7;break}return e=r.t1.value,r.next=5,t[e];case 5:r.next=1;break;case 7:case"end":return r.stop()}}),qn)}function Vn(t){return Ot(Kn(t))}function zn(t){return zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},zn(t)}function Xn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Qn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Xn(Object(r),!0).forEach((function(e){Jn(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Xn(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Jn(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function to(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function eo(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function ro(t,e){return ro=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},ro(t,e)}function no(t,e){if(e&&("object"===zn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function oo(t){return oo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},oo(t)}var ao=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ro(t,e)}(c,t);var e,r,o,a,i=(o=c,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=oo(o);if(a){var r=oo(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return no(this,t)});function c(){return to(this,c),i.apply(this,arguments)}return e=c,r=[{key:"initState",value:function(){return{progress:n}}},{key:"renderGrid",value:function(t,e){var r=this.setRepairFormat(t),n=new Slick.Data.DataView,o=this.parent.diagResultGrid.state.errorIndex,a=new Slick.Grid("#repair-grid",n,r,this.setGridOptions());this.state.grid=a,this.state.dataView=n,a.setSelectionModel(new Slick.CellSelectionModel);var i=new Slick.Plugins.CustomTooltip;a.registerPlugin(i),this.setGridEvents(),a.init(),n.beginUpdate(),n.syncGridSelection(a,"repair"),n.setItems(e),n.setFilter((function(t){var e=t.id;return!!o[e]})),n.endUpdate()}},{key:"setGridOptions",value:function(){var t=this.parent.dataGrid.state.dataView;return{editable:!0,autoEdit:!1,headerRowHeight:30,forceFitColumns:!0,asyncEditorLoading:!1,enableCellNavigation:!0,explicitInitialization:!0,customTooltip:{formatter:function(e,r,n,o,a){var i=o.name,u=a.id;return'\n        <div class="my-tooltip">\n          <div>이전 데이터: <span class="error-text">'.concat(t.getItemById(u)[i],'</span></div>\n          <div>정비된 데이터: <span class="repaired-text">').concat(n,"</span></div>\n        </div>  \n      ")},headerFormatter:function(t,e,r,n,o){var a,i=n.name,u=n.ruleset.id,c=(a=u).includes("str")?"문자열":a.includes("amt")?"금액":a.includes("qtt")?"수량":a.includes("pec")?"율":a.includes("whe")?"여부":a.includes("dt")?"날짜":a.includes("num")?"번호":a.includes("con")?"일관성":a.includes("cal")?"계산식":void 0,s=function(t){return Ur.find((function(e){var r=e.id;return t.includes(r)})).label}(u);return'\n        <div class="my-tooltip">\n          <div style="font-weight: bold">\n            '.concat(i," 컬럼\n          </div>\n          <div>\n            적용된 진단 규칙: ").concat(c," (").concat(s,")\n          </div>\n        </div>\n      ")}}}}},{key:"setGridEvents",value:function(){var t=this.state,e=t.grid,r=t.dataView,n=Rt().oneGrid;if(void 0===n||!n){var o=this.parent.dataGrid.state.grid;e.onScroll.subscribe((function(t,e){e.scrollLeft;var r=e.scrollTop;o.scrollTo(r),o.render()})),o.onScroll.subscribe((function(t,r){r.scrollLeft;var n=r.scrollTop;e.scrollTo(n),e.render()}))}r.onRowCountChanged.subscribe((function(t,r){e.updateRowCount(),e.render()})),r.onRowsChanged.subscribe((function(t,r){e.invalidateRows(r.rows),e.render()})),e.setSelectionModel(new Slick.CellSelectionModel)}},{key:"repair",value:function(t){for(var e=t.getColumns(),r=ht(t.getData().getItems(),Wn,Vn),n={},o=r.length,a=function(t){for(var o=r[t],a=Object.keys(o),i=a.length,u=function(r){var i=e.find((function(t){return t.id===a[r]})),u=(i.essential,i.ruleset),c=i.errorCount,s=i.field;if(!u||c)return"continue";var l,f="string"==typeof o[a[r]]?o[a[r]].trim():o[a[r]],d=void 0;switch(u.name){case"문자열":d=f;break;case"금액":l=(l=f).replace("억","00000000").replace("만","0000").replace("천","000").replace("k","000").replace("백","00").replace("십","0").replace(/[^0-9\.-]/g,""),d=isNaN(Number(l))?l:Number(l);break;case"수량":case"율":d=function(t){return t=t.replace("억","00000000").replace("만","0000").replace("천","000").replace("k","000").replace("백","00").replace("십","0").replace(/[^0-9\.-]/g,""),isNaN(Number(t))?t:Number(t)}(f);break;case"여부":d=function(t,e){var r=e.trueValue,n=void 0===r?"Y":r,o=e.falseValue,a=void 0===o?"N":o;switch((t+="").toLowerCase()){case"o":case"true":case"1":case"예":case"y":case"적용":case"운영":case"사용가능":case"가능":return n;case"x":case"false":case"0":case"null":case"아니오":case"아니요":case"미운영":case"미적용":case"사용불가":case"불가":case"n":return a;default:return t}}(f,u);break;case"날짜":d=function(t,e){var r=e.id,n=t;try{switch(r){case"dtYYYYMMDDHH24MISS":14===(n=n.replaceAll("/","-").replaceAll(".","-").replaceAll("'","20").replace(/(년도|년|월)/g,"-").replace(/일/," ").replace(/(시|분)/,":").replace(/초/,"")).length&&(n="".concat(n.slice(0,4),"-").concat(n.slice(4,6),"-").concat(n.slice(6,8)," ").concat(n.slice(8,10),":").concat(n.slice(10,12),":").concat(n.slice(12,14)));var o=Hr(n.split(/[-\s:]/g),6),a=o[0],i=o[1],u=o[2],c=o[3],s=o[4],l=o[5];n=[a,i.padStart(2,"0"),u.padStart(2,"0")].join("-")+" "+[c.padStart(2,"0"),s.padStart(2,"0"),l.padStart(2,"0")].join(":");break;case"dtYYYYMMDDHH24MI":var f=Hr((n=n.replaceAll("/","-").replaceAll(".","-").replaceAll("'","20").replace(/(년도|년|월)/g,"-").replace(/시/,":").replace(/일/," ").replace(/분/,"")).split(/[-\s:]/g),5),d=f[0],p=f[1],h=f[2],v=f[3],y=f[4];n=[d,p.padStart(2,"0"),h.padStart(2,"0")].join("-")+" "+[v.padStart(2,"0").slice(0,2),y?y.padStart(2,"0"):v.slice(v.length-1).padStart(2,"0")].join(":");break;case"dtYYYYMMDDHH24":var g=Hr((n=n.replaceAll("/","-").replaceAll(".","-").replaceAll("'","20").replace(/(년도|년|월)/g,"-").replace(/(일|시)/g,"")).split("-"),3),m=g[0],b=g[1],w=g[2];w>2&&(n=[m,b.padStart(2,"0"),w.slice(0,2)].join("-")+" "+w.slice(2).padStart(2,"0")),console.log("value: ".concat(n));break;case"dtMMDDHH24MI":n=n.replaceAll("/","-").replaceAll(".","-").replaceAll("'","20").replace("월","-").replace(/(시|시간)/,":").replace(/(일|분)/g,"");break;case"dtHH24MISS":n=n.replace(/(시간|시|분)/g,":").replace(/초/,"").replace(/[;//.-]/g,":").replace(/[^0-9:]/g,":");break;case"dtYYYYMMDD":8===(n=n.replaceAll("/","-").replaceAll(".","-").replaceAll("'","20").replace(/(년도|년|월)/g,"-").replace("일","")).length&&(n="".concat(n.slice(0,4),"-").concat(n.slice(5,6),"-").concat(n.slice(7,8)));var x=Hr(n.split("-"),3),O=x[0],S=x[1],A=x[2];1!==S.length&&1!==A.length||(n=[O,S.padStart(2,"0"),A.padStart(2,"0")].join("-"));break;case"dtHH24MI":n=n.replace(/(시간|시)/,":").replace(/분/,"").replace(/[;//.-]/g,":").replace(/[^0-9:]/g,"");break;case"dtYYYYMM":var _=Hr((n=n.replaceAll(" ","").replaceAll("/","-").replaceAll(".","-").replaceAll("'","20").replace(/(년도|년)/g,"-").replace("월","")).split("-"),2),M=_[0],R=_[1];if(M.length<R.length){var P=[R,M];M=P[0],R=P[1]}n=[M,R.padStart(2,"0")].join("-");break;case"dtMMDD":n=n.replace(/[/.월]/g,"-").replace(/[^0-9-]/g,"");break;case"dtHH24":case"dtYYYY":case"dtDD":case"dtMI":case"dtMM":case"dtSS":n=n.replace("'","20").replace(/[^0-9]/g,"").padStart(2,"0");break;case"dtMISS":n=n.replace("분",":").replace("초","").replace(/[^0-9:]/g,"")}return function(t,e,r){Xt(2,arguments);var n=String(e),o=r||{},a=o.locale||Vt,i=a.options&&a.options.firstWeekContainsDate,u=null==i?1:zt(i),c=null==o.firstWeekContainsDate?u:zt(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=a.options&&a.options.weekStartsOn,l=null==s?0:zt(s),f=null==o.weekStartsOn?l:zt(o.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!a.localize)throw new RangeError("locale must contain localize property");if(!a.formatLong)throw new RangeError("locale must contain formatLong property");var d=Qt(t);if(!hr(d))throw new RangeError("Invalid time value");var p=te(d,ie(d)),h={firstWeekContainsDate:c,weekStartsOn:f,locale:a,_originalDate:d};return n.match(jr).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ae[e])(t,a.formatLong,h):t})).join("").match(Er).map((function(r){if("''"===r)return"'";var n=r[0];if("'"===n)return Dr(r);var i=Pr[n];if(i)return!o.useAdditionalWeekYearTokens&&le(r)&&fe(r,e,t),!o.useAdditionalDayOfYearTokens&&se(r)&&fe(r,e,t),i(p,r,a.localize,h);if(n.match(Cr))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return r})).join("")}(lr(n,Br(r),new Date),Br(r))}catch(e){return t}}(f,u);break;case"번호":d=function(t,e){var r=e.id,n=e.pattern;try{if("numPhone"===r){var o=t.replace(/\([^)]+\)/g,"").replace(/(~[0-9]|,[0-9])/g,"").replace(/[^0-9]/g,"");return 8===o.length?o.replace(/(\d{4})(\d{4})/,"$1-$2"):o.replace(/(^02|^0505|^1[0-9]{3}|^0[0-9]{2})([0-9]+)?([0-9]{4})$/,"$1-$2-$3")}if("numPostalCode"===r){var a=t.replace(/[^0-9]/g,"");return 6===a.length?a.replace(/(^[0-9]{3})([0-9]{3})$/,"$1-$2"):a.padStart(5,"0")}if("numBusiness"===r)return t.replace(/[^0-9]/g,"").replace(/(\d{3})(\d{2})(\d{5})/,"$1-$2-$3");if("numPattern"===r){var i=t.replace(/[^0-9]/g,""),u=new RegExp(n.split("-").map((function(t){return"(\\d{".concat(t.length,"})")})).join("")),c=n.split("-").map((function(t,e){return"$".concat(e+1)})).join("-");return i.replace(u,c)}}catch(e){return t}}(f,u);break;case"일관성":d=function(t,e,r){return e.id,e.target,e.op,e.replaceValue,t}(f,u);break;case"계산식":d=function(t,e,r){var n=e.id,o=e.targets,a=e.op;try{if("calFormula"===n){var i=[Number(r[o[0]]),Number(r[o[1]])],u=i[0],c=i[1];switch(a){case"+":return u+c;case"-":return u-c;case"×":return u*c;case"÷":return u/c}}if("calSum"===n)return o.reduce((function(t,e){return t+Number("string"==typeof r[e]?r[e].replace(/[^0-9]/g,""):r[e])}),0)}catch(e){return t}}(f,u,o)}f!=d&&(n.hasOwnProperty(t)||(n[t]={}),n[t][s]="repaired-cell"),o[a[r]]=d},c=0;c<i;c++)u(c)},i=0;i<o;i++)a(i);this.state=Qn(Qn({},this.state),{},{columns:e,repairStyleCss:n}),this.renderGrid(e,r)}},{key:"setRepairFormat",value:function(t){return t.map((function(t){return Qn(Qn({},t),{},{formatter:zr,editor:"id"!==t.id?Slick.Editors.Text:null})}))}},{key:"template",value:function(){return this.state.progress===u?'\n        <section class="card">\n          <article class="card-body">\n            <div id="repair-grid" />\n          </article>\n        </section>\n      ':""}}],r&&eo(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),c}(Dt);function io(t){return io="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},io(t)}function uo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function co(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function so(t,e){return so=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},so(t,e)}function lo(t,e){if(e&&("object"===io(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function fo(t){return fo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},fo(t)}var po=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&so(t,e)}(u,t);var e,r,o,a,i=(o=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=fo(o);if(a){var r=fo(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return lo(this,t)});function u(){return uo(this,u),i.apply(this,arguments)}return e=u,(r=[{key:"initState",value:function(){return{progress:n}}},{key:"template",value:function(){return this.state.progress===n?'\n      <article class="card">\n        <div class="card-body">\n          <strong>[사용법 안내]</strong>\n          <p>1. [파일선택] 버튼을 클릭해 CSV파일을 선택하고, 컬럼 헤더 시작행을 입력 후 [시작] 버튼을 클릭합니다.(진단이 처리된 경우는 진단결과 데이터가 조회됩니다.)</p>\n          <p>2. 컬럼 헤더 아래의 콤보박스에서 해당되는 데이터 타입인 품질진단기준을 선택합니다.</p>\n          <p>&nbsp&nbsp > 개방 표준 데이터셋인 경우는 [개방표준] 버튼을 클릭하면 자동으로 진단규칙을 추천합니다. </p>\n          <p>&nbsp&nbsp > 일반 개방 데이터셋인 경우는 [규칙추천] 버튼을 클릭하면 데이터 패턴유형에 진단규칙을 추천(진단규칙 확인 후 최종설정 필요)합니다. </p>\n          <p>3. [진단] 버튼을 클릭하여 진단을 실시하고, [보고서] 버튼을 클릭하여 보고서를 생성합니다.(변경된 데이터의 재진단은 초기화 후 진단처리) </p>\n        </div>\n      </article>\n    ':""}}])&&co(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(v);function ho(t){return ho="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ho(t)}function vo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function yo(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function go(t,e){return go=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},go(t,e)}function mo(t,e){if(e&&("object"===ho(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function bo(t){return bo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},bo(t)}r(74819);var wo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&go(t,e)}(i,t);var e,r,n,o,a=(n=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=bo(n);if(o){var r=bo(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return mo(this,t)});function i(){return vo(this,i),a.apply(this,arguments)}return e=i,(r=[{key:"show",value:function(){this.$target.find(".modal").modal("show")}},{key:"hide",value:function(){this.$target.find(".modal").modal("hide")}},{key:"setHeader",value:function(){return""}},{key:"setBody",value:function(){return""}},{key:"setFooter",value:function(){return""}},{key:"template",value:function(){return'\n      <div class="modal fade" id="modal" tabindex="-1" role="dialog">\n        <div class="modal-dialog modal-lg" role="document">\n          <div class="modal-content">\n            <div class="modal-header">\n              <h5 class="modal-title">'.concat(this.setHeader(),'</h5>\n            </div>\n            <div class="modal-body">').concat(this.setBody(),'</div>\n            <div class="modal-footer">').concat(this.setFooter(),"</div>\n          </div>\n        </div>\n      </div>\n    ")}}])&&yo(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),i}(v),xo=r(44341);function Oo(t,e,r){return e in t?xo(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var So=r(98341);function Ao(t){return Cn(t)||Nn(t)?t[t.length-1]:dt((function(t,e){return e}),t)}function _o(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=null,n=[J(t)];return Oo({next:function t(){var o=Ao(n);if(!o)return{done:!0};var a=o.next();return a.done?(n.pop(),t()):n.length<=e&&In(a.value)&&"string"!=typeof a.value?(n.push(z(a.value)),t()):a.value instanceof K?r&&!r.done?(n.length=0,{value:K.reject(new Error("'L.flat' can not be used with 'C' function.")),done:!1}):(r=r||{},{value:a.value.then((function(t){if(r.hasOwnProperty("done")||(r.done=!0),n.length>e||!In(t)||"string"==typeof t)return t;var o=z(t),a=o.next();return a.done?K.reject(et):(n.push(o),a.value)})).catch((function(t){return r.hasOwnProperty("done")||(r.done=!0),K.reject(t)})),done:!1}):a}},So,(function(){return this}))}var Mo=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return Ot(_o(t,e))}([{index:"1",id:"str",type:"문자열",label:"문자열"},{index:"2",id:"amt",type:"금액",label:"금액"},{index:"3",id:"qtt",type:"수량",label:"수량"},{index:"4",id:"pec",type:"율",label:"율"},[{index:"5-1",id:"wheYN",type:"여부",label:"Y, N"},{index:"5-2",id:"wheSET",type:"여부",label:"여부값 지정"}],[{index:"6-1",id:"dtYYYYMMDDHH24MISS",type:"날짜",label:"YYYY-MM-DD HH24:MI:SS",content:"연월일 시간분초"},{index:"6-2",id:"dtYYYYMMDDHH24MI",type:"날짜",label:"YYYY-MM-DD HH24:MI",content:"연월일 시간분"},{index:"6-3",id:"dtYYYYMMDDHH24",type:"날짜",label:"YYYY-MM-DD HH24",content:"연월일 시간"},{index:"6-4",id:"dtMMDDHH24MI",type:"날짜",label:"MM-DD HH24:MI",content:"월일 시간분"},{index:"6-5",id:"dtHH24MISS",type:"날짜",label:"HH24:MI:SS",content:"시간분초"},{index:"6-6",id:"dtYYYYMMDD",type:"날짜",label:"YYYY-MM-DD",content:"연월일",errorDiscription:"날짜(YYYY-MM-DD) 데이터의 부정확한 입력<br />설명: 년도, 월, 일자간의 표준데이터형식은 하이픈(-)을 사용하여 표기",example:"표준형식:9999-99-99<br />예시: ①21.8.1 -> 2021-08-01 ②21/8/1 -> 2021-08-01"},{index:"6-7",id:"dtHH24MI",type:"날짜",label:"HH24:MI",content:"시간분"},{index:"6-8",id:"dtYYYYMM",type:"날짜",label:"YYYY-MM",content:"연월"},{index:"6-9",id:"dtMMDD",type:"날짜",label:"MM-DD",content:"월일"},{index:"6-10",id:"dtHH24",type:"날짜",label:"HH24",content:"시간"},{index:"6-11",id:"dtYYYY",type:"날짜",label:"YYYY",content:"연도"},{index:"6-12",id:"dtDD",type:"날짜",label:"DD",content:"일자"},{index:"6-13",id:"dtMI",type:"날짜",label:"MI",content:"분"},{index:"6-14",id:"dtMM",type:"날짜",label:"MM",content:"월"},{index:"6-15",id:"dtSS",type:"날짜",label:"SS",content:"초"},{index:"6-16",id:"dtMISS",type:"날짜",label:"MI:SS",content:"분초"}],[{index:"7-1",id:"numPhone",type:"번호",label:"전화번호"},{index:"7-2",id:"numPostalCode",type:"번호",label:"우편번호"},{index:"7-3",id:"numBusiness",type:"번호",label:"사업자번호"},{index:"7-4",id:"numPattern",type:"번호",label:"패턴지정번호"}],[{index:"8-1",id:"conTime",type:"일관성",label:"시간순서 일관성"},{index:"8-2",id:"conLogicRelationShip",type:"일관성",label:"컬럼 간 논리관계 일관성"}],[{index:"9-1",id:"calFormula",type:"계산식",label:"산식"},{index:"9-2",id:"calSum",type:"계산식",label:"합계"}]]).filter((function(t){return"날짜"===t.type}));const Ro=st((function(t,e){return St((function(e){return tt(t(e),(function(t){return e}))}),e)}));function Po(t){return Po="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Po(t)}function Eo(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){u=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}}(t,e)||function(t,e){if(t){if("string"==typeof t)return jo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?jo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function To(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ko(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?To(Object(r),!0).forEach((function(e){Co(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):To(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Co(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Do(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Io(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function $o(){return $o="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=Lo(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},$o.apply(this,arguments)}function Lo(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Uo(t)););return t}function Fo(t,e){return Fo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Fo(t,e)}function No(t,e){if(e&&("object"===Po(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Uo(t){return Uo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Uo(t)}var Yo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Fo(t,e)}(u,t);var r,n,o,a,i=(o=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Uo(o);if(a){var r=Uo(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return No(this,t)});function u(){return Do(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"initState",value:function(){return{event:null,dateRuleset:{YYYY:!1,MM:!1,DD:!1,HH24:!1,MI:!1,SS:!1}}}},{key:"setEvents",value:function(){var t=this;this.$target.on("keypress",(function(e){"Enter"===e.key&&t.closeModal()})),e.call(this,"close-modal","click",(function(){t.closeModal()})),e.call(this,"date-check","change",(function(e){var r=e.target.dataset.datetype;"YYYYMMDDH24MISS"===r?t.setState({event:"check-all",dateRuleset:{YYYY:!0,MM:!0,DD:!0,HH24:!0,MI:!0,SS:!0}}):(t.state.dateRuleset[r]=!t.state.dateRuleset[r],t.setState({event:"check"}))})),e.call(this,"date-select","change",(function(e){var r=$(e.target).find("option:selected").val();t.setState({event:"select",dateRuleset:{YYYY:r.includes("YYYY"),MM:r.includes("MM"),DD:r.includes("DD"),HH24:r.includes("HH24"),MI:r.includes("MI"),SS:r.includes("SS")}})}))}},{key:"setState",value:function(t){this.state=ko(ko({},this.state),t);var e=this.$target.find("select"),r=this.$target.find("#selected-diag-rule"),n=this.state.dateRuleset,o=Mo.find((function(t){var e=t.id;return"dt".concat(Object.entries(n).filter((function(t){var e=Eo(t,2);return e[0],e[1]})).map((function(t){var e=Eo(t,2),r=e[0];return e[1],r})).join(""))===e}));"check"!==this.state.event&&ht(this.$target.find('input[type="checkbox"]'),Ro((function(t){var e=t.dataset.datetype;t.checked=n[e]}))),"select"!==this.state.event&&e.val(o.id).prop("selected",!0),r.val(o.label)}},{key:"show",value:function(t,e){this.setState({$select:t,dateRuleset:{YYYY:e.includes("YYYY"),MM:e.includes("MM"),DD:e.includes("DD"),HH24:e.includes("HH24"),MI:e.includes("MI"),SS:e.includes("SS")}}),$o(Uo(u.prototype),"show",this).call(this)}},{key:"closeModal",value:function(){this.hide();var t=this.state,e=t.$select,r=t.dateRuleset,n=e.attr("id").replace("selectDiag-",""),o=this.parent.dataGrid.state.columns;e.val(Mo.find((function(t){return t.id==="dt"+Object.entries(r).filter((function(t){var e=Eo(t,2);return e[0],e[1]})).map((function(t){var e=Eo(t,2),r=e[0];return e[1],r})).join("")})).id),this.parent.dataGrid.setState({columns:o.map((function(t){return t.id===n?ko(ko({},t),{},{ruleset:{id:e.val(),name:"날짜"}}):t}))})}},{key:"setHeader",value:function(){return"진단 날짜 유형 선택"}},{key:"setBody",value:function(){return'\n      <p>※ 사용법</p>\n      <p>1. 진단대상컬럼의 진단 날짜 유형 선택 > 2. 확인</p>\n      <div class="container-fluid">\n        <div class="row">\n          <div class="col">\n            <div class="row">\n              <input type="text" class="form-control text-center" style="visibility: hidden;" />\n            </div>\n            <div class="row">\n              <div>\n                <input data-action="date-check" data-datetype="YYYYMMDDH24MISS" type="checkbox" id="modal-date-all" class="custom-control-input">\n                <label class="custom-control-label" for="modal-date-all">전체</label>\n              </div>\n            </div>\n          </div>\n          '.concat([{type:"YYYY",text:"연"},{type:"MM",text:"월"},{type:"DD",text:"일"},{type:"HH24",text:"시간"},{type:"MI",text:"분"},{type:"SS",text:"초"}].map((function(t){var e=t.type,r=t.text;return'\n              <div class="col">\n                <div class="row px-1">\n                  <input type="text" class="form-control text-center mr-2" value="'.concat(e,'" readonly />\n                </div>\n                <div class="row">\n                  <div>\n                    <input data-action="date-check" data-datetype="').concat(e,'" type="checkbox" id="modal-date-').concat(e,'" class="custom-control-input" />\n                    <label class="custom-control-label" for="modal-date-').concat(e,'">').concat(r,"</label>\n                  </div>\n                </div>\n              </div>\n            ")})).join(""),'\n        <div class="row">\n          <div class="col">\n            <select data-action="date-select" class="custom-select" size="').concat(Mo.length,'">\n              ').concat(Mo.map((function(t){var e=t.id,r=t.content;return'<option value="'.concat(e,'">').concat(r,"</option>")})).join(""),'\n            </select>\n          </div>\n          <div class="col">\n            <h1>선택된 날짜 진단규칙</h1>\n            <div class="input-group input-group-lg">\n              <input id="selected-diag-rule" type="text" class="form-control text-center" readonly />\n            </div>\n          </div>\n        </div>\n      </div>\n    ')}},{key:"setFooter",value:function(){return'\n      <button type="button" class="btn btn-secondary" data-action="close-modal">취소</button>\n      <button type="button" class="btn btn-primary" data-action="close-modal">확인</button>\n    '}}])&&Io(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),u}(wo);function Bo(t){return Bo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Bo(t)}function Ho(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Go(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Zo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Go(Object(r),!0).forEach((function(e){Wo(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Go(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Wo(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function qo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ko(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Vo(){return Vo="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=zo(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},Vo.apply(this,arguments)}function zo(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Jo(t)););return t}function Xo(t,e){return Xo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Xo(t,e)}function Qo(t,e){if(e&&("object"===Bo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Jo(t){return Jo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Jo(t)}var ta=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Xo(t,e)}(u,t);var r,n,o,a,i=(o=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Jo(o);if(a){var r=Jo(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return Qo(this,t)});function u(){return qo(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"initState",value:function(){return{trueValue:"Y",falseValue:"N"}}},{key:"setEvents",value:function(){var t=this;e.call(this,"input-true-value","keyup",(function(e){var r=e.target.value;t.setState({trueValue:r})})),e.call(this,"input-false-value","keyup",(function(e){var r=e.target.value;t.setState({falseValue:r})})),e.call(this,"submit-whether","click",(function(){var e=t.state,r=e.$select,n=(e.dataGrid,e.trueValue),o=e.falseValue,a=r.attr("id").replace("selectDiag-",""),i=t.parent.dataGrid.state.columns;t.parent.dataGrid.setState({columns:i.map((function(t){return t.id===a?Zo(Zo({},t),{},{ruleset:{id:"wheSET",name:"여부",trueValue:n,falseValue:o}}):t}))}),t.hide()})),e.call(this,"cancel","click",(function(){t.hide()}))}},{key:"show",value:function(t,e){this.setState({$select:t,dataGrid:e}),Vo(Jo(u.prototype),"show",this).call(this)}},{key:"setState",value:function(t){this.state=Zo(Zo({},this.state),t);var e,r,n=this.state,o=n.trueValue,a=n.falseValue,i=(e=this.$target.find(".emphasis"),r=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){u=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}}(e,r)||function(t,e){if(t){if("string"==typeof t)return Ho(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ho(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=i[0],c=i[1];u.innerText="'".concat(o,"'"),c.innerText="'".concat(a,"'")}},{key:"setHeader",value:function(){return"여부값 지정"}},{key:"setBody",value:function(){var t=this.state,e=t.trueValue,r=t.falseValue;return'\n      <div class="container">\n        <p>※ 사용법</p>\n        <p>1. 진단대상컬럼의 여부 유효값 입력 > 2. 확인</p>\n\n        <form class="form-inline">\n          선택컬럼의 유효값은 \n          <input data-action="input-true-value" type="text" class="form-control text-center" value="'.concat(e,'" />\n          과(와) \n          <input data-action="input-false-value" type="text" class="form-control text-center" value="').concat(r,'" />\n          이다\n        </form>\n        <p>입력한 품질기준의 유효값은 \n          <span class="emphasis">\'').concat(e,"'</span>\n          과(와) \n          <span class=\"emphasis\">'").concat(r,"'</span>\n          값만 유효하다\n        </p>\n      </div>\n    ")}},{key:"setFooter",value:function(){return'\n      <button type="button" class="btn btn-secondary" data-action="cancel">취소</button>\n      <button type="button" class="btn btn-primary" data-action="submit-whether">확인</button>\n    '}}])&&Ko(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),u}(wo);function ea(t){return ea="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ea(t)}function ra(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function na(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ra(Object(r),!0).forEach((function(e){oa(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ra(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function oa(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function aa(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ia(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function ua(){return ua="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=ca(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},ua.apply(this,arguments)}function ca(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=fa(t)););return t}function sa(t,e){return sa=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},sa(t,e)}function la(t,e){if(e&&("object"===ea(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function fa(t){return fa=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},fa(t)}var da=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&sa(t,e)}(u,t);var r,n,o,a,i=(o=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=fa(o);if(a){var r=fa(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return la(this,t)});function u(){return aa(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"initState",value:function(){return{pattern:"N"}}},{key:"setEvents",value:function(){var t=this;e.call(this,"input-pattern","keyup",(function(e){e.target.value=e.target.value.replace(/[^N-]/g,""),t.setState({pattern:e.target.value})})),e.call(this,"submit-pattern","click",(function(){var e=t.state,r=e.$select,n=e.pattern,o=r.attr("id").replace("selectDiag-",""),a=t.parent.dataGrid.state.columns;t.parent.dataGrid.setState({columns:a.map((function(t){return t.id===o?na(na({},t),{},{ruleset:{id:"numPattern",name:"번호",pattern:n}}):t}))}),t.hide()})),e.call(this,"cancel","click",(function(){t.hide()}))}},{key:"show",value:function(t,e){this.setState({$select:t,dataGrid:e}),ua(fa(u.prototype),"show",this).call(this)}},{key:"setState",value:function(t){this.state=na(na({},this.state),t);var e=this.state.pattern;this.$target.find(".emphasis").text(e)}},{key:"setHeader",value:function(){return"패턴지정번호"}},{key:"setBody",value:function(){var t=this.state.pattern;return'\n      <div class="container">\n        <p>※ 사용법</p>\n        <p>1. 진단대상컬럼의 패턴지정번호 입력 > 2. 확인</p>\n\n        <form class="form-inline">\n          선택컬럼의 유효한 번호의 패턴값은\n          <input data-action="input-pattern" type="text" class="form-control text-center" value="'.concat(t,'" />\n          값만 유효하다.\n        </form>\n        <p>입력한 품질기준의 유효값은 <span class="emphasis">\'').concat(t,"'</span> 값만 유효하다\n        </p>\n      </div>\n    ")}},{key:"setFooter",value:function(){return'\n      <button type="button" class="btn btn-secondary" data-action="cancel">취소</button>\n      <button type="button" class="btn btn-primary" data-action="submit-pattern">확인</button>\n    '}}])&&ia(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),u}(wo);function pa(t){return pa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},pa(t)}function ha(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function va(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ha(Object(r),!0).forEach((function(e){ya(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ha(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function ya(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function ga(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ma(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function ba(){return ba="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=wa(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},ba.apply(this,arguments)}function wa(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Sa(t)););return t}function xa(t,e){return xa=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},xa(t,e)}function Oa(t,e){if(e&&("object"===pa(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Sa(t){return Sa=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Sa(t)}var Aa=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&xa(t,e)}(u,t);var r,n,o,a,i=(o=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Sa(o);if(a){var r=Sa(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return Oa(this,t)});function u(){return ga(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"initState",value:function(){return{target:"",op:">=",columnId:"",columns:[]}}},{key:"setEvents",value:function(){var t=this;e.call(this,"select-column","change",(function(e){var r=e.target.value;t.setState({target:r})})),e.call(this,"change-operator","change",(function(e){var r=e.target.value;t.setState({op:r})})),e.call(this,"submit-timeorder","click",(function(){var e=t.state,r=e.columnId,n=e.target,o=e.op,a=e.columns;t.parent.dataGrid.setState({columns:a.map((function(t){return t.id===r?va(va({},t),{},{ruleset:{id:"conTime",name:"일관성",target:n,op:o}}):t}))}),t.hide()})),e.call(this,"cancel","click",(function(){t.hide()}))}},{key:"show",value:function(t,e){var r=e.columns;this.setState({columnId:t.attr("id").replace("selectDiag-",""),columns:r,target:r[1].name}),this.render(),ba(Sa(u.prototype),"show",this).call(this)}},{key:"setState",value:function(t){this.state=va(va({},this.state),t);var e=this.state,r=e.op,n=e.target;this.$target.find(".emphasis").text(_a(r)),this.$target.find(".target-column").text(n)}},{key:"setHeader",value:function(){return"시간순서 일관성"}},{key:"setBody",value:function(){var t,e,r=this.state,n=r.columnId,o=r.columns,a=r.target,i=r.op,u=null===(t=o.find((function(t){return t.id===n})))||void 0===t?void 0:t.name;return'\n      <div class="container">\n        <p>※ 사용법</p>\n        <p>1. 진단대상컬럼의 비교컬럼 선택 > 2. 비교 연산자 선택 > 3. 확인</p>\n\n        <form class="form-inline">\n          선택한 <span class="bold">['.concat(u,'] </span>컬럼은 \n          <select data-action="select-column" class="custom-select">\n            ').concat(o.slice(1).map((function(t){var e=t.id,r=t.name;return'<option value="'.concat(e,'" ').concat(e===a?"selected":"",">").concat(r,"</option>")})).join(""),'\n          </select>\n          컬럼보다\n          <div class="radio-box">\n            <div class="form-check form-check-inline">\n              <input\n                id="greater-than-to-equal"\n                data-action="change-operator"\n                class="form-check-input"\n                type="radio"\n                name="operator"\n                value=">="\n                ').concat(">="===i?"checked":"",'>\n              <label class="form-check-label" for="greater-than-to-equal">>=</label>\n            </div>\n            <div class="form-check form-check-inline">\n              <input\n                id="greater-than"\n                data-action="change-operator"\n                class="form-check-input"\n                type="radio"\n                name="operator"\n                value=">"\n                ').concat(">"===i?"checked":"",'>\n                <label class="form-check-label" for="greater-than">></label>\n            </div>\n            <div class="form-check form-check-inline">\n              <input\n                id="less-than-to-equal"\n                data-action="change-operator"\n                class="form-check-input"\n                type="radio"\n                name="operator"\n                value="<="\n                ').concat("<="===i?"checked":"",'>\n              <label class="form-check-label" for="less-than-to-equal"><=</label>\n            </div>\n            <div class="form-check form-check-inline">\n              <input\n                id="less-than"\n                data-action="change-operator"\n                class="form-check-input"\n                type="radio"\n                name="operator"\n                value="<"\n                ').concat("<"===i?"checked":"",'>\n              <label class="form-check-label" for="less-than"><</label>\n            </div>\n          </div>\n        </form>\n        <p>\n          지정한 품질기준은 \n          <span class="bold">[').concat(u,'] </span>컬럼이\n          <span class="bold target-column">[').concat(null===(e=o[1])||void 0===e?void 0:e.name,'] </span>컬럼보다 \n          <span class="emphasis">').concat(_a(i),"</span> 한다.\n        </p>\n      </div>\n    ")}},{key:"setFooter",value:function(){return'\n      <button type="button" class="btn btn-secondary" data-action="cancel">취소</button>\n      <button type="button" class="btn btn-primary" data-action="submit-timeorder">확인</button>\n    '}}])&&ma(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),u}(wo);function _a(t){return">="===t?"크거나 같아야":">"===t?"커야":"<="===t?"작거나 같아야":"<"===t?"작아야":void 0}function Ma(t){return Ma="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ma(t)}function Ra(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Pa(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ra(Object(r),!0).forEach((function(e){Ea(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ra(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ea(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function ja(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ta(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function ka(){return ka="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=Ca(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},ka.apply(this,arguments)}function Ca(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=$a(t)););return t}function Da(t,e){return Da=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Da(t,e)}function Ia(t,e){if(e&&("object"===Ma(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function $a(t){return $a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},$a(t)}var La=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Da(t,e)}(u,t);var r,n,o,a,i=(o=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=$a(o);if(a){var r=$a(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return Ia(this,t)});function u(){return ja(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"initState",value:function(){return{replaceValue:"Y",columnId:"",target:"",columns:[]}}},{key:"setEvents",value:function(){var t=this;e.call(this,"select-column","change",(function(e){var r=e.target.value;t.setState({target:r})})),e.call(this,"input-replace-value","keyup",(function(e){var r=e.target.value;t.setState({replaceValue:r})})),e.call(this,"submit-logic-relationship","click",(function(){var e=t.state,r=e.columnId,n=e.columns,o=e.replaceValue,a=e.target;t.parent.dataGrid.setState({columns:n.map((function(t){return t.id===r?Pa(Pa({},t),{},{ruleset:{id:"conLogicRelationShip",name:"일관성",target:a,replaceValue:o}}):t}))}),t.hide()})),e.call(this,"cancel","click",(function(){t.hide()}))}},{key:"show",value:function(t,e){var r=e.columns;this.setState({columnId:t.attr("id").replace("selectDiag-",""),columns:r,target:r[1].name}),this.render(),ka($a(u.prototype),"show",this).call(this)}},{key:"setState",value:function(t){this.state=Pa(Pa({},this.state),t);var e=this.state,r=e.target,n=e.replaceValue;this.$target.find(".target-column").text(r),this.$target.find(".replace-value").text(n)}},{key:"setHeader",value:function(){return"컬럼 간 논리관계 일관성"}},{key:"setBody",value:function(){var t,e,r=this.state,n=r.columnId,o=r.columns,a=r.target,i=r.replaceValue,u=null===(t=o.find((function(t){return t.id===n})))||void 0===t?void 0:t.name;return'\n      <div class="container">\n        <p>※ 사용법</p>\n        <p>1. 진단대상컬럼의 조건 값 입력 > 2. 논리관계가 있는 날짜 컬럼 선택 > 3. 확인</p>\n\n        <form class="form-inline">\n          선택한 <span class="bold">['.concat(u,'] </span>컬럼이\n          <input \n            data-action="input-replace-value"\n            type="text"\n            class="form-control text-center"\n            value="').concat(i,'" />\n          라면\n          <select data-action="select-column" class="custom-select">\n            ').concat(o.slice(1).map((function(t){var e=t.id,r=t.name;return'<option value="'.concat(e,'" ').concat(e===a?"selected":"",">").concat(r,"</option>")})).join(""),'\n          </select>\n          컬럼은 반드시 날짜가 존재해야 한다\n        </form>\n        <p>\n          지정한 품질기준은 \n          <span class="bold">[').concat(u,'] </span>컬럼이\n          <span class="bold replace-value">\n            \'').concat(i,'\' \n          </span>\n           (이)라면 \n          <span class="bold target-column">\n            [').concat(null===(e=o[1])||void 0===e?void 0:e.name,"] \n          </span>\n          컬럼은 반드시 날짜가 존재해야 한다\n        </p>\n      </div>\n    ")}},{key:"setFooter",value:function(){return'\n      <button type="button" class="btn btn-secondary" data-action="cancel">취소</button>\n      <button type="button" class="btn btn-primary" data-action="submit-logic-relationship">확인</button>\n    '}}])&&Ta(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),u}(wo);function Fa(t){return Fa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fa(t)}function Na(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ua(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Na(Object(r),!0).forEach((function(e){Ya(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Na(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ya(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Ba(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){u=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Ha(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ha(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ha(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Ga(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Za(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Wa(){return Wa="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=qa(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},Wa.apply(this,arguments)}function qa(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=za(t)););return t}function Ka(t,e){return Ka=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Ka(t,e)}function Va(t,e){if(e&&("object"===Fa(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function za(t){return za=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},za(t)}var Xa=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ka(t,e)}(u,t);var r,n,o,a,i=(o=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=za(o);if(a){var r=za(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return Va(this,t)});function u(){return Ga(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"initState",value:function(){return{targets:[],op:"+",columnId:"",columns:[]}}},{key:"setEvents",value:function(){var t=this;e.call(this,"select-target1","change",(function(e){var r=e.target.value,n=Ba(t.state.targets,2),o=(n[0],n[1]);t.setState({targets:[r,o]})})),e.call(this,"select-target2","change",(function(e){var r=e.target.value,n=Ba(t.state.targets,2),o=n[0];n[1],t.setState({targets:[o,r]})})),e.call(this,"change-operator","change",(function(e){var r=e.target.value;t.setState({op:r})})),e.call(this,"submit-formula","click",(function(){var e=t.state,r=e.columnId,n=e.targets,o=e.op,a=e.columns;t.parent.dataGrid.setState({columns:a.map((function(t){return t.id===r?Ua(Ua({},t),{},{ruleset:{id:"calFormula",name:"계산식",targets:n,op:o}}):t}))}),t.hide()})),e.call(this,"cancel","click",(function(){t.hide()}))}},{key:"show",value:function(t,e){var r=e.columns;this.setState({columnId:t.attr("id").replace("selectDiag-",""),columns:r,targets:[r[1].name,r[1].name]}),this.render(),Wa(za(u.prototype),"show",this).call(this)}},{key:"setState",value:function(t){this.state=Ua(Ua({},this.state),t);var e=this.state,r=e.op,n=e.targets;this.$target.find(".emphasis").text(r),this.$target.find(".target1-text").text(n[0]),this.$target.find(".target2-text").text(n[1])}},{key:"setHeader",value:function(){return"산식"}},{key:"setBody",value:function(){var t,e,r,n=this.state,o=n.columnId,a=n.columns,i=n.op,u=null===(t=a.find((function(t){return t.id===o})))||void 0===t?void 0:t.name;return'\n      <div class="container">\n        <p>※ 사용법</p>\n        <p>1. 진단대상컬럼의 비교컬럼 선택 > 2. 계산식 선택 > 3. 두번째 비교컬럼 선택 > 4. 확인</p>\n\n        <form class="form-inline">\n          선택한 <span class="bold">['.concat(u,'] </span>컬럼은 \n          <select data-action="select-target1" class="custom-select">\n            ').concat(a.slice(1).reduce((function(t,e){var r=e.id,n=e.name;return t+'<option value="'.concat(r,'">').concat(n,"</option>")}),""),'\n          </select>\n          <div class="radio-box">\n            <div class="form-check form-check-inline">\n              <input\n                id="plus"\n                data-action="change-operator"\n                class="form-check-input"\n                type="radio"\n                name="operator"\n                value="+"\n                checked />\n              <label class="form-check-label" for="plus">+</label>\n            </div>\n            <div class="form-check form-check-inline">\n              <input\n                id="minus"\n                data-action="change-operator"\n                class="form-check-input"\n                type="radio"\n                name="operator"\n                value="−" />\n                <label class="form-check-label" for="minus">−</label>\n            </div>\n            <div class="form-check form-check-inline">\n              <input\n                id="multiple"\n                data-action="change-operator"\n                class="form-check-input"\n                type="radio"\n                name="operator"\n                value="×" />\n              <label class="form-check-label" for="multiple">×</label>\n            </div>\n            <div class="form-check form-check-inline">\n              <input\n                id="division"\n                data-action="change-operator"\n                class="form-check-input"\n                type="radio"\n                name="operator"\n                value="÷" />\n              <label class="form-check-label" for="division">÷</label>\n            </div>\n          </div>\n          <select data-action="select-target2" class="custom-select">\n            ').concat(a.slice(1).reduce((function(t,e){var r=e.id,n=e.name;return t+'<option value="'.concat(r,'">').concat(n,"</option>")}),""),'\n          </select>\n          와 같다\n        </form>\n        <p>\n          지정한 품질기준은 \n          <span class="bold">[').concat(u,'] </span>컬럼은\n          <span class="bold target1-text">[').concat(null===(e=a[1])||void 0===e?void 0:e.name,'] </span>\n          <span class="emphasis">').concat(i,'</span>\n          <span class="bold target2-text">[').concat(null===(r=a[1])||void 0===r?void 0:r.name,"] </span>\n          과 같다\n        </p>\n      </div>\n    ")}},{key:"setFooter",value:function(){return'\n      <button type="button" class="btn btn-secondary" data-action="cancel">취소</button>\n      <button type="button" class="btn btn-primary" data-action="submit-formula">확인</button>\n    '}}])&&Za(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),u}(wo);function Qa(t){return Qa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Qa(t)}function Ja(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ti(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ja(Object(r),!0).forEach((function(e){ei(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ja(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function ei(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function ri(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ni(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function oi(){return oi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=ai(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},oi.apply(this,arguments)}function ai(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ci(t)););return t}function ii(t,e){return ii=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},ii(t,e)}function ui(t,e){if(e&&("object"===Qa(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function ci(t){return ci=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ci(t)}var si=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ii(t,e)}(u,t);var r,n,o,a,i=(o=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ci(o);if(a){var r=ci(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return ui(this,t)});function u(){return ri(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"initState",value:function(){return{targets:[],op:"+",columnId:"",columns:[]}}},{key:"setEvents",value:function(){var t=this;e.call(this,"select-target","change",(function(e){var r=e.target;t.setState({targets:$(r).val()})})),e.call(this,"change-operator","change",(function(e){var r=e.target.value;t.setState({op:r})})),e.call(this,"submit-sum","click",(function(){var e=t.state,r=e.columnId,n=e.targets,o=e.op,a=e.columns;t.parent.dataGrid.setState({columns:a.map((function(t){return t.id===r?ti(ti({},t),{},{ruleset:{id:"calSum",name:"계산식",targets:n,op:o}}):t}))}),t.hide()})),e.call(this,"cancel","click",(function(){t.hide()}))}},{key:"show",value:function(t,e){var r=e.columns;this.setState({columnId:t.attr("id").replace("selectDiag-",""),columns:r}),this.render(),oi(ci(u.prototype),"show",this).call(this)}},{key:"setState",value:function(t){this.state=ti(ti({},this.state),t);var e=this.state,r=e.op,n=e.targets;this.$target.find(".emphasis").text(r),this.$target.find(".targets-text").text(n.map((function(t){return"[".concat(t,"]")})).join(" + "))}},{key:"setHeader",value:function(){return"합계"}},{key:"setBody",value:function(){var t,e,r=this.state,n=r.columnId,o=r.columns,a=null===(t=o.find((function(t){return t.id===n})))||void 0===t?void 0:t.name;return'\n      <div class="container">\n        <p>※ 사용법</p>\n        <p>1. 진단대상컬럼의 비교컬럼 선택 > 2. 확인</p>\n\n        <form class="form-inline">\n          선택한 <span class="bold">['.concat(a,'] </span>컬럼은 \n          <select data-action="select-target" class="custom-select" multiple>\n            ').concat(o.slice(1).reduce((function(t,e){var r=e.id,n=e.name;return t+'<option value="'.concat(r,'">').concat(n,"</option>")}),""),'\n          </select>\n          컬럼들의\n          <button type="button" class="btn btn-outline-success">더하기(+)</button> \n          와 같다\n        </form>\n        <p>\n          지정한 품질기준은 \n          <span class="bold">[').concat(a,'] = </span>\n          <span class="bold targets-text">[').concat(null===(e=o[1])||void 0===e?void 0:e.name,"] </span>\n          이어야 한다\n        </p>\n      </div>\n    ")}},{key:"setFooter",value:function(){return'\n      <button type="button" class="btn btn-secondary" data-action="cancel">취소</button>\n      <button type="button" class="btn btn-primary" data-action="submit-sum">확인</button>\n    '}}])&&ni(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),u}(wo);function li(t){return li="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},li(t)}function fi(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function di(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?fi(Object(r),!0).forEach((function(e){pi(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):fi(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function pi(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function hi(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function vi(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function yi(){return yi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=gi(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},yi.apply(this,arguments)}function gi(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=wi(t)););return t}function mi(t,e){return mi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},mi(t,e)}function bi(t,e){if(e&&("object"===li(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function wi(t){return wi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},wi(t)}var xi=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&mi(t,e)}(u,t);var r,n,o,a,i=(o=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=wi(o);if(a){var r=wi(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return bi(this,t)});function u(){return hi(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"setEvents",value:function(){var t=this;e.call(this,"submit-setting","click",(function(){var e,r;e={setCollWidth:$("#set-coll-width").val(),oneGrid:$("#one-grid").is(":checked")},r=Rt(),localStorage.setItem("odq-setting",JSON.stringify(_t(_t({},r),e))),alert("설정 내용이 저장되었습니다.\n초기화 버튼을 눌러 다시 시작해주세요!"),t.hide()})),e.call(this,"cancel","click",(function(){t.hide()}))}},{key:"show",value:function(t,e){this.setState({$select:t,dataGrid:e}),yi(wi(u.prototype),"show",this).call(this)}},{key:"setState",value:function(t){this.state=di(di({},this.state),t);var e=this.state.pattern;this.$target.find(".emphasis").text(e)}},{key:"setHeader",value:function(){return"설정"}},{key:"setBody",value:function(){var t=Rt(),e=t.setCollWidth,r=void 0===e?"":e,n=t.oneGrid,o=void 0!==n&&n;return'\n      <div class="container">\n        <div class="form-group row">\n          <label class="col-sm-3 col-form-label" title="열 너비를 지정할 수 있습니다. 아무값도 입력하지 않을 경우 너비에 맞춰집니다. ex) 100">열 너비 지정</label>\n          <div class="col-sm-3">\n            <input id="set-coll-width" type="text" class="form-control" value="'.concat(r,'">\n          </div>\n        </div>\n        <div class="custom-control custom-switch">\n          <label class="col-sm-3 custom-control-label" for="one-grid" title="정비 단계에서 원본 그리드의 표시여부를 선택할 수 있습니다.">정비 그리드 한 개 사용</label>\n          <input type="checkbox" class="custom-control-input" id="one-grid" ').concat(o?"checked":"",">\n        </div>\n      </div>\n    ")}},{key:"setFooter",value:function(){return'\n      <button type="button" class="btn btn-secondary" data-action="cancel">취소</button>\n      <button type="button" class="btn btn-primary" data-action="submit-setting">저장</button>\n    '}}])&&vi(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),u}(wo);function Oi(t){return Oi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Oi(t)}function Si(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ai(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _i(t,e){return _i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},_i(t,e)}function Mi(t,e){if(e&&("object"===Oi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Ri(t){return Ri=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Ri(t)}r.p;var Pi=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_i(t,e)}(i,t);var e,r,n,o,a=(n=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ri(n);if(o){var r=Ri(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return Mi(this,t)});function i(){return Si(this,i),a.apply(this,arguments)}return e=i,(r=[{key:"initState",value:function(){return{isLoading:!1}}},{key:"template",value:function(){return this.state.isLoading?'\n        <div class="overlay">\n          <div class="spinner-border text-primary" />\n        </div>\n        ':""}}])&&Ai(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),i}(v),Ei=r(70182),ji=r.n(Ei),Ti=["UTF-8"],ki=200*Math.pow(1024,2);function Ci(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){u=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Di(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Di(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Di(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Ii(t,e,r,n,o,a,i){try{var u=t[a](i),c=u.value}catch(t){return void r(t)}u.done?e(c):Promise.resolve(c).then(n,o)}function $i(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var a=t.apply(e,r);function i(t){Ii(a,n,o,i,u,"next",t)}function u(t){Ii(a,n,o,i,u,"throw",t)}i(void 0)}))}}function Li(t){return Fi.apply(this,arguments)}function Fi(){return Fi=$i(regeneratorRuntime.mark((function t(e){var r,n,o,a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Ni(e);case 2:if(r=t.sent,n=Ci(r,2),o=n[0],a=n[1],Yi(e)){t.next=8;break}return t.abrupt("return",Promise.reject("파일이 너무 큽니다.\n".concat(Math.floor(ki/Math.pow(1024,2)),"MB 이하 파일을 업로드 해주세요.")));case 8:if(o){t.next=10;break}return t.abrupt("return",Promise.reject("파일 인코딩이 유효하지 않습니다. 현재 인코딩 [".concat(null!=a?a:"확인불가","] \n허용 파일 인코딩 [").concat(Ti.join(", "),"]")));case 10:return t.abrupt("return",new Promise((function(t,r){(0,T.parse)(e,{complete:function(e){var r=e.data,n=e.meta.fields;return t({data:r,fields:n})},error:function(t){return r(t)}})})));case 11:case"end":return t.stop()}}),t)}))),Fi.apply(this,arguments)}function Ni(t){return Ui.apply(this,arguments)}function Ui(){return(Ui=$i(regeneratorRuntime.mark((function t(e){var r,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ji()(e);case 2:return r=t.sent,n=r.encoding,t.abrupt("return",[Ti.reduce((function(t,e){return t||e===n}),!1),n]);case 5:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Yi(t){return ki>=t.size}function Bi(t){return Bi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Bi(t)}function Hi(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Gi(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Hi(Object(r),!0).forEach((function(e){Zi(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Hi(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Zi(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Wi(t,e,r,n,o,a,i){try{var u=t[a](i),c=u.value}catch(t){return void r(t)}u.done?e(c):Promise.resolve(c).then(n,o)}function qi(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var a=t.apply(e,r);function i(t){Wi(a,n,o,i,u,"next",t)}function u(t){Wi(a,n,o,i,u,"throw",t)}i(void 0)}))}}function Ki(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Vi(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function zi(t,e){return zi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},zi(t,e)}function Xi(t,e){if(e&&("object"===Bi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Qi(t){return Qi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Qi(t)}var Ji=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&zi(t,e)}(y,e);var r,s,l,f,d,p,h,v=(p=y,h=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Qi(p);if(h){var r=Qi(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return Xi(this,t)});function y(){return Ki(this,y),v.apply(this,arguments)}return r=y,s=[{key:"initState",value:function(){return{progress:n,diagFile:null,dataCount:0,isLoading:!1}}},{key:"mounted",value:function(){this.selectFile=new S({$target:t("select-file"),parent:this}),this.startRow=new j({$target:t("start-row"),parent:this}),this.controlBox=new N({$target:t("control-box"),parent:this}),this.dataCount=new W({$target:t("data-count"),parent:this}),this.diagResultGrid=new cn({$target:t("diag-result-grid"),parent:this}),this.dataGrid=new mn({$target:t("data-grid"),parent:this}),this.repairGrid=new ao({$target:t("repair-grid"),parent:this}),this.discription=new po({$target:t("discription"),parent:this}),this.loadingSpinner=new Pi({$target:t("loading-spinner"),parent:this}),this.dateModal=new Yo({$target:t("date-modal"),parent:this}),this.whetherModal=new ta({$target:t("whether-modal"),parent:this}),this.patternModal=new da({$target:t("pattern-modal"),parent:this}),this.timeOrderModal=new Aa({$target:t("time-order-modal"),parent:this}),this.logicRelationshipModal=new La({$target:t("logic-relationship-modal"),parent:this}),this.formulaModal=new Xa({$target:t("formula-modal"),parent:this}),this.sumModal=new si({$target:t("sum-modal"),parent:this}),this.settingModal=new xi({$target:t("setting-modal"),parent:this})}},{key:"loadCsvFile",value:(d=qi(regeneratorRuntime.mark((function t(e){var r,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,this.onLoading(),t.next=4,Li(e);case 4:r=t.sent,n=r.data,this.setState({diagFile:e,progress:o,dataCount:n.length-1,columnCount:n[0].length}),this.dataGrid.renderGrid(n),t.next=14;break;case 10:t.prev=10,t.t0=t.catch(0),alert(t.t0),this.reset();case 14:return t.prev=14,this.offLoading(),t.finish(14);case 17:case"end":return t.stop()}}),t,this,[[0,10,14,17]])}))),function(t){return d.apply(this,arguments)})},{key:"setStartRow",value:(f=qi(regeneratorRuntime.mark((function t(e){var r,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.onLoading(),t.next=3,Li(this.state.diagFile);case 3:r=t.sent,n=r.data,this.setState({progress:a,startRow:e,dataCount:n.length-e-1}),this.dataGrid.setStartRow(n,e),this.offLoading();case 8:case"end":return t.stop()}}),t,this)}))),function(t){return f.apply(this,arguments)})},{key:"diagnosis",value:function(){this.onLoading(),this.setState({progress:i});var t=this.dataGrid.state.grid;this.diagResultGrid.diagnosis(t),this.offLoading()}},{key:"repair",value:(l=qi(regeneratorRuntime.mark((function t(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:this.onLoading(),this.setState({progress:u}),e=this.dataGrid.state.grid,this.repairGrid.repair(e),this.offLoading();case 5:case"end":return t.stop()}}),t,this)}))),function(){return l.apply(this,arguments)})},{key:"reset",value:function(){this.render(),this.mounted()}},{key:"onLoading",value:function(){this.loadingSpinner.setState({isLoading:!0})}},{key:"offLoading",value:function(){this.loadingSpinner.setState({isLoading:!1})}},{key:"setState",value:function(t){this.state=Gi(Gi({},this.state),t),console.log("%c******현재는 ".concat(c[this.state.progress]," 단계 입니다*******"),"background: #222; color: #bada55; font-weight: bold;"),this.selectFile.setState({progress:this.state.progress}),this.startRow.setState({progress:this.state.progress}),this.controlBox.setState({progress:this.state.progress}),this.dataCount.setState({progress:this.state.progress,dataCount:this.state.dataCount,columnCount:this.state.columnCount}),this.dataGrid.setState({progress:this.state.progress}),this.diagResultGrid.setState({progress:this.state.progress}),this.repairGrid.setState({progress:this.state.progress}),this.discription.setState({progress:this.state.progress})}},{key:"template",value:function(){return'\n      <div class="row justify-content-center">\n        <div class="card-group">\n          <section class="card">\n            <div class="card-body">\n              <article data-component="select-file" />\n              <article data-component="start-row" />\n            </div>\n          </section>\n          <section class="card">\n            <article data-component="control-box" class="card-body" />\n          </section>\n          <section class="card">\n            <article data-component="data-count" class="card-body" />\n          </section>\n        </div>\n      </div>\n      <div class="row">\n        <div class="col">\n          <section data-component="diag-result-grid" />\n        </div>\n      </div>\n      <section data-component="data-grid" />\n      <div class="row">\n        <div class="col">\n          <section data-component="repair-grid" />\n        </div>\n      </div>\n      <div class="row">\n        <div class="col">\n          <section data-component="discription" />\n        </div>\n      </div>\n      <section data-component="date-modal" />\n      <section data-component="whether-modal" />\n      <section data-component="pattern-modal" />\n      <section data-component="time-order-modal" />\n      <section data-component="logic-relationship-modal" />\n      <section data-component="formula-modal" />\n      <section data-component="sum-modal" />\n      <section data-component="setting-modal" />\n      <section data-component="loading-spinner" />\n    '}}],s&&Vi(r.prototype,s),Object.defineProperty(r,"prototype",{writable:!1}),y}(v);$((function(){new Ji({$target:t("app")})})),$((function(){$('[data-toggle="tooltip"]').tooltip()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwibWFwcGluZ3MiOiI7NkJBQUFBLEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsdUJDQUFELEVBQU9DLFFBQVUsRUFBakIsdUJDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsdUJDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUFELEVBQU9DLFFBQVUsRUFBakIsdUJDQUFELEVBQU9DLFFBQVUsRUFBakIsd0JDQUEsSUFBSUMsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxtQkNGakIsSUFBSUEsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxtQkNGakIsSUFBSUEsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxtQkNGakIsSUFBSUEsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxtQkNGakIsSUFBSUEsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxtQkNGakIsSUFBSUEsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxtQkNGakIsSUFBSUEsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxtQkNGakIsSUFBSUEsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxtQkNGakIsRUFBUSxPQUNSLEVBQVEsT0FDUixJQUFJQyxFQUFPLEVBQVEsT0FFbkJILEVBQU9DLFFBQVVFLEVBQUtDLE1BQU1DLHNCQ0o1QixFQUFRLE9BQ1IsSUFBSUYsRUFBTyxFQUFRLE9BRW5CSCxFQUFPQyxRQUFVRSxFQUFLQyxNQUFNRSx5QkNINUIsRUFBUSxPQUNSLElBQUlDLEVBQWUsRUFBUSxPQUUzQlAsRUFBT0MsUUFBVU0sRUFBYSxTQUFTQyx3QkNIdkMsRUFBUSxPQUNSLEVBQVEsT0FDUixJQUFJRCxFQUFlLEVBQVEsT0FFM0JQLEVBQU9DLFFBQVVNLEVBQWEsU0FBU0Usc0JDSnZDLEVBQVEsT0FDUixJQUFJRixFQUFlLEVBQVEsT0FFM0JQLEVBQU9DLFFBQVVNLEVBQWEsU0FBU0csdUJDSHZDLEVBQVEsT0FDUixJQUFJSCxFQUFlLEVBQVEsT0FFM0JQLEVBQU9DLFFBQVVNLEVBQWEsWUFBWUksc0JDSDFDLEVBQVEsT0FDUixFQUFRLE9BQ1IsSUFBSUMsRUFBb0IsRUFBUSxPQUVoQ1osRUFBT0MsUUFBVVcsbUJDSmpCLEVBQVEsT0FDUixFQUFRLE9BQ1IsSUFBSUMsRUFBYyxFQUFRLE9BRTFCYixFQUFPQyxRQUFVWSxtQkNKakIsSUFBSUMsRUFBZ0IsRUFBUSxNQUN4QkMsRUFBUyxFQUFRLE9BRWpCQyxFQUFvQkMsU0FBU0MsVUFFakNsQixFQUFPQyxRQUFVLFNBQVVrQixHQUN6QixJQUFJQyxFQUFNRCxFQUFHUixLQUNiLE9BQU9RLElBQU9ILEdBQXNCRixFQUFjRSxFQUFtQkcsSUFBT0MsSUFBUUosRUFBa0JMLEtBQVFJLEVBQVNLLG9CQ1B6SCxJQUFJTixFQUFnQixFQUFRLE1BQ3hCQyxFQUFTLEVBQVEsT0FFakJNLEVBQWlCakIsTUFBTWMsVUFFM0JsQixFQUFPQyxRQUFVLFNBQVVrQixHQUN6QixJQUFJQyxFQUFNRCxFQUFHWCxPQUNiLE9BQU9XLElBQU9FLEdBQW1CUCxFQUFjTyxFQUFnQkYsSUFBT0MsSUFBUUMsRUFBZWIsT0FBVU8sRUFBU0ssb0JDUGxILElBQUlOLEVBQWdCLEVBQVEsTUFDeEJDLEVBQVMsRUFBUSxPQUVqQk0sRUFBaUJqQixNQUFNYyxVQUUzQmxCLEVBQU9DLFFBQVUsU0FBVWtCLEdBQ3pCLElBQUlDLEVBQU1ELEVBQUdULE1BQ2IsT0FBT1MsSUFBT0UsR0FBbUJQLEVBQWNPLEVBQWdCRixJQUFPQyxJQUFRQyxFQUFlWCxNQUFTSyxFQUFTSyxvQkNQakgsRUFBUSxPQUNSLElBRUlFLEVBRk8sRUFBUSxPQUVEQSxPQUVkQyxFQUFpQnZCLEVBQU9DLFFBQVUsU0FBd0JrQixFQUFJSyxFQUFLQyxHQUNyRSxPQUFPSCxFQUFPQyxlQUFlSixFQUFJSyxFQUFLQyxJQUdwQ0gsRUFBT0MsZUFBZUcsT0FBTUgsRUFBZUcsTUFBTyxvQkNUdEQsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsTUFDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixJQUFJdkIsRUFBTyxFQUFRLE9BRW5CSCxFQUFPQyxRQUFVRSxFQUFLd0IseUJDVnRCLEVBQVEsT0FDUixJQUFJeEIsRUFBTyxFQUFRLE9BRW5CSCxFQUFPQyxRQUFVRSxFQUFLeUIsT0FBWSxxQkNIbEMsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxNQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsTUFDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsTUFDUixJQUFJekIsRUFBTyxFQUFRLE9BRW5CSCxFQUFPQyxRQUFVRSxFQUFLeUIsd0JDdEJ0QixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE1BQ1IsSUFBSUMsRUFBK0IsRUFBUSxPQUUzQzdCLEVBQU9DLFFBQVU0QixFQUE2QkMsRUFBRSw2QkNOaEQsSUFBSTVCLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsa0JDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUNyQixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUVSLEVBQVEsT0FFUixFQUFRLE9BRVJGLEVBQU9DLFFBQVVDLGtCQ1hqQixJQUFJQSxFQUFTLEVBQVEsT0FFckJGLEVBQU9DLFFBQVVDLG1CQ0ZqQixJQUFJNkIsRUFBUyxFQUFRLE9BQ2pCQyxFQUFhLEVBQVEsT0FDckJDLEVBQWMsRUFBUSxPQUV0QkMsRUFBWUgsRUFBT0csVUFHdkJsQyxFQUFPQyxRQUFVLFNBQVVrQyxHQUN6QixHQUFJSCxFQUFXRyxHQUFXLE9BQU9BLEVBQ2pDLE1BQU1ELEVBQVVELEVBQVlFLEdBQVksc0NDVDFDLElBQUlKLEVBQVMsRUFBUSxPQUNqQkssRUFBZ0IsRUFBUSxPQUN4QkgsRUFBYyxFQUFRLE9BRXRCQyxFQUFZSCxFQUFPRyxVQUd2QmxDLEVBQU9DLFFBQVUsU0FBVWtDLEdBQ3pCLEdBQUlDLEVBQWNELEdBQVcsT0FBT0EsRUFDcEMsTUFBTUQsRUFBVUQsRUFBWUUsR0FBWSwyQ0NUMUMsSUFBSUosRUFBUyxFQUFRLE9BQ2pCQyxFQUFhLEVBQVEsT0FFckJLLEVBQVNOLEVBQU9NLE9BQ2hCSCxFQUFZSCxFQUFPRyxVQUV2QmxDLEVBQU9DLFFBQVUsU0FBVWtDLEdBQ3pCLEdBQXVCLGlCQUFaQSxHQUF3QkgsRUFBV0csR0FBVyxPQUFPQSxFQUNoRSxNQUFNRCxFQUFVLGFBQWVHLEVBQU9GLEdBQVksK0JDUnBEbkMsRUFBT0MsUUFBVSw2QkNBakIsSUFBSThCLEVBQVMsRUFBUSxPQUNqQmpCLEVBQWdCLEVBQVEsTUFFeEJvQixFQUFZSCxFQUFPRyxVQUV2QmxDLEVBQU9DLFFBQVUsU0FBVWtCLEVBQUltQixHQUM3QixHQUFJeEIsRUFBY3dCLEVBQVduQixHQUFLLE9BQU9BLEVBQ3pDLE1BQU1lLEVBQVUsMENDUGxCLElBQUlILEVBQVMsRUFBUSxPQUNqQlEsRUFBVyxFQUFRLE9BRW5CRixFQUFTTixFQUFPTSxPQUNoQkgsRUFBWUgsRUFBT0csVUFHdkJsQyxFQUFPQyxRQUFVLFNBQVVrQyxHQUN6QixHQUFJSSxFQUFTSixHQUFXLE9BQU9BLEVBQy9CLE1BQU1ELEVBQVVHLEVBQU9GLEdBQVksb0RDUnJDLElBQUlKLEVBQVMsRUFBUSxPQUNqQnBCLEVBQU8sRUFBUSxPQUNmNkIsRUFBTyxFQUFRLE9BQ2ZDLEVBQVcsRUFBUSxPQUNuQkMsRUFBK0IsRUFBUSxPQUN2Q0MsRUFBd0IsRUFBUSxNQUNoQ1AsRUFBZ0IsRUFBUSxPQUN4QlEsRUFBb0IsRUFBUSxPQUM1QkMsRUFBaUIsRUFBUSxPQUN6QmhDLEVBQWMsRUFBUSxPQUN0QkQsRUFBb0IsRUFBUSxPQUU1QlIsRUFBUTJCLEVBQU8zQixNQUluQkosRUFBT0MsUUFBVSxTQUFjNkMsR0FDN0IsSUFBSUMsRUFBSU4sRUFBU0ssR0FDYkUsRUFBaUJaLEVBQWNhLE1BQy9CQyxFQUFrQkMsVUFBVUMsT0FDNUJDLEVBQVFILEVBQWtCLEVBQUlDLFVBQVUsUUFBS0csRUFDN0NDLE9BQW9CRCxJQUFWRCxFQUNWRSxJQUFTRixFQUFRMUMsRUFBSzBDLEVBQU9ILEVBQWtCLEVBQUlDLFVBQVUsUUFBS0csSUFDdEUsSUFFSUYsRUFBUUksRUFBUUMsRUFBTUMsRUFBVUMsRUFBTUMsRUFGdENDLEVBQWlCakQsRUFBa0JtQyxHQUNuQ2UsRUFBUSxFQUdaLElBQUlELEdBQW9CWixNQUFRN0MsR0FBU3VDLEVBQXNCa0IsR0FXN0QsSUFGQVQsRUFBU1IsRUFBa0JHLEdBQzNCUyxFQUFTUixFQUFpQixJQUFJQyxLQUFLRyxHQUFVaEQsRUFBTWdELEdBQzdDQSxFQUFTVSxFQUFPQSxJQUNwQkYsRUFBUUwsRUFBVUYsRUFBTU4sRUFBRWUsR0FBUUEsR0FBU2YsRUFBRWUsR0FDN0NqQixFQUFlVyxFQUFRTSxFQUFPRixRQVRoQyxJQUZBRCxHQURBRCxFQUFXN0MsRUFBWWtDLEVBQUdjLElBQ1ZGLEtBQ2hCSCxFQUFTUixFQUFpQixJQUFJQyxLQUFTLEtBQy9CUSxFQUFPakIsRUFBS21CLEVBQU1ELElBQVdLLEtBQU1ELElBQ3pDRixFQUFRTCxFQUFVYixFQUE2QmdCLEVBQVVMLEVBQU8sQ0FBQ0ksRUFBS0csTUFBT0UsSUFBUSxHQUFRTCxFQUFLRyxNQUNsR2YsRUFBZVcsRUFBUU0sRUFBT0YsR0FXbEMsT0FEQUosRUFBT0osT0FBU1UsRUFDVE4sb0JDN0NULElBQUlRLEVBQWtCLEVBQVEsT0FDMUJDLEVBQWtCLEVBQVEsT0FDMUJyQixFQUFvQixFQUFRLE9BRzVCc0IsRUFBZSxTQUFVQyxHQUMzQixPQUFPLFNBQVVDLEVBQU9DLEVBQUlDLEdBQzFCLElBR0lWLEVBSEFiLEVBQUlpQixFQUFnQkksR0FDcEJoQixFQUFTUixFQUFrQkcsR0FDM0JlLEVBQVFHLEVBQWdCSyxFQUFXbEIsR0FJdkMsR0FBSWUsR0FBZUUsR0FBTUEsR0FBSSxLQUFPakIsRUFBU1UsR0FHM0MsSUFGQUYsRUFBUWIsRUFBRWUsT0FFR0YsRUFBTyxPQUFPLE9BRXRCLEtBQU1SLEVBQVNVLEVBQU9BLElBQzNCLElBQUtLLEdBQWVMLEtBQVNmLElBQU1BLEVBQUVlLEtBQVdPLEVBQUksT0FBT0YsR0FBZUwsR0FBUyxFQUNuRixPQUFRSyxJQUFnQixJQUk5Qm5FLEVBQU9DLFFBQVUsQ0FHZnNFLFNBQVVMLEdBQWEsR0FHdkJNLFFBQVNOLEdBQWEsb0JDOUJ4QixJQUFJdkQsRUFBTyxFQUFRLE9BQ2Y4RCxFQUFjLEVBQVEsT0FDdEJDLEVBQWdCLEVBQVEsT0FDeEJqQyxFQUFXLEVBQVEsT0FDbkJHLEVBQW9CLEVBQVEsT0FDNUIrQixFQUFxQixFQUFRLE9BRTdCQyxFQUFPSCxFQUFZLEdBQUdHLE1BR3RCVixFQUFlLFNBQVVXLEdBQzNCLElBQUlDLEVBQWlCLEdBQVJELEVBQ1RFLEVBQW9CLEdBQVJGLEVBQ1pHLEVBQWtCLEdBQVJILEVBQ1ZJLEVBQW1CLEdBQVJKLEVBQ1hLLEVBQXdCLEdBQVJMLEVBQ2hCTSxFQUEyQixHQUFSTixFQUNuQk8sRUFBbUIsR0FBUlAsR0FBYUssRUFDNUIsT0FBTyxTQUFVZCxFQUFPaUIsRUFBWUMsRUFBTUMsR0FTeEMsSUFSQSxJQU9JM0IsRUFBT0osRUFQUFQsRUFBSU4sRUFBUzJCLEdBQ2JvQixFQUFPZCxFQUFjM0IsR0FDckIwQyxFQUFnQjlFLEVBQUswRSxFQUFZQyxHQUNqQ2xDLEVBQVNSLEVBQWtCNEMsR0FDM0IxQixFQUFRLEVBQ1I0QixFQUFTSCxHQUFrQlosRUFDM0JnQixFQUFTYixFQUFTWSxFQUFPdEIsRUFBT2hCLEdBQVUyQixHQUFhSSxFQUFtQk8sRUFBT3RCLEVBQU8sUUFBS2QsRUFFM0ZGLEVBQVNVLEVBQU9BLElBQVMsSUFBSXNCLEdBQVl0QixLQUFTMEIsS0FFdERoQyxFQUFTaUMsRUFEVDdCLEVBQVE0QixFQUFLMUIsR0FDaUJBLEVBQU9mLEdBQ2pDOEIsR0FDRixHQUFJQyxFQUFRYSxFQUFPN0IsR0FBU04sT0FDdkIsR0FBSUEsRUFBUSxPQUFRcUIsR0FDdkIsS0FBSyxFQUFHLE9BQU8sRUFDZixLQUFLLEVBQUcsT0FBT2pCLEVBQ2YsS0FBSyxFQUFHLE9BQU9FLEVBQ2YsS0FBSyxFQUFHYyxFQUFLZSxFQUFRL0IsUUFDaEIsT0FBUWlCLEdBQ2IsS0FBSyxFQUFHLE9BQU8sRUFDZixLQUFLLEVBQUdELEVBQUtlLEVBQVEvQixHQUkzQixPQUFPc0IsR0FBaUIsRUFBSUYsR0FBV0MsRUFBV0EsRUFBV1UsSUFJakUzRixFQUFPQyxRQUFVLENBR2YyRixRQUFTMUIsRUFBYSxHQUd0QjJCLElBQUszQixFQUFhLEdBR2xCNEIsT0FBUTVCLEVBQWEsR0FHckI2QixLQUFNN0IsRUFBYSxHQUduQjhCLE1BQU85QixFQUFhLEdBR3BCK0IsS0FBTS9CLEVBQWEsR0FHbkJnQyxVQUFXaEMsRUFBYSxHQUd4QmlDLGFBQWNqQyxFQUFhLHFCQ3ZFN0IsSUFBSWtDLEVBQVEsRUFBUSxPQUNoQkMsRUFBa0IsRUFBUSxPQUMxQkMsRUFBYSxFQUFRLE9BRXJCQyxFQUFVRixFQUFnQixXQUU5QnJHLEVBQU9DLFFBQVUsU0FBVXVHLEdBSXpCLE9BQU9GLEdBQWMsS0FBT0YsR0FBTSxXQUNoQyxJQUFJSyxFQUFRLEdBS1osT0FKa0JBLEVBQU1DLFlBQWMsSUFDMUJILEdBQVcsV0FDckIsTUFBTyxDQUFFSSxJQUFLLElBRTJCLElBQXBDRixFQUFNRCxHQUFhSSxTQUFTRCx5QkNoQnZDLElBQUk1RSxFQUFTLEVBQVEsT0FDakJrQyxFQUFrQixFQUFRLE9BQzFCckIsRUFBb0IsRUFBUSxPQUM1QkMsRUFBaUIsRUFBUSxPQUV6QnpDLEVBQVEyQixFQUFPM0IsTUFDZnlHLEVBQU1DLEtBQUtELElBRWY3RyxFQUFPQyxRQUFVLFNBQVU4QyxFQUFHZ0UsRUFBT0MsR0FLbkMsSUFKQSxJQUFJNUQsRUFBU1IsRUFBa0JHLEdBQzNCa0UsRUFBSWhELEVBQWdCOEMsRUFBTzNELEdBQzNCOEQsRUFBTWpELE9BQXdCWCxJQUFSMEQsRUFBb0I1RCxFQUFTNEQsRUFBSzVELEdBQ3hESSxFQUFTcEQsRUFBTXlHLEVBQUlLLEVBQU1ELEVBQUcsSUFDdkJFLEVBQUksRUFBR0YsRUFBSUMsRUFBS0QsSUFBS0UsSUFBS3RFLEVBQWVXLEVBQVEyRCxFQUFHcEUsRUFBRWtFLElBRS9ELE9BREF6RCxFQUFPSixPQUFTK0QsRUFDVDNELG9CQ2ZULElBQUlpQixFQUFjLEVBQVEsT0FFMUJ6RSxFQUFPQyxRQUFVd0UsRUFBWSxHQUFHL0QsdUJDRmhDLElBQUlxQixFQUFTLEVBQVEsT0FDakJ6QixFQUFVLEVBQVEsTUFDbEI4QixFQUFnQixFQUFRLE9BQ3hCRyxFQUFXLEVBQVEsT0FHbkJnRSxFQUZrQixFQUFRLE1BRWhCRixDQUFnQixXQUMxQmpHLEVBQVEyQixFQUFPM0IsTUFJbkJKLEVBQU9DLFFBQVUsU0FBVW1ILEdBQ3pCLElBQUlDLEVBU0YsT0FSRS9HLEVBQVE4RyxLQUNWQyxFQUFJRCxFQUFjVixhQUVkdEUsRUFBY2lGLEtBQU9BLElBQU1qSCxHQUFTRSxFQUFRK0csRUFBRW5HLGFBQ3pDcUIsRUFBUzhFLElBRU4sUUFEVkEsRUFBSUEsRUFBRWQsT0FGdURjLE9BQUkvRCxTQUt0REEsSUFBTitELEVBQWtCakgsRUFBUWlILG9CQ3JCckMsSUFBSUMsRUFBMEIsRUFBUSxNQUl0Q3RILEVBQU9DLFFBQVUsU0FBVW1ILEVBQWVoRSxHQUN4QyxPQUFPLElBQUtrRSxFQUF3QkYsR0FBN0IsQ0FBd0QsSUFBWGhFLEVBQWUsRUFBSUEscUJDTHpFLElBQUltRSxFQUFXLEVBQVEsT0FDbkJDLEVBQWdCLEVBQVEsTUFHNUJ4SCxFQUFPQyxRQUFVLFNBQVV5RCxFQUFVK0QsRUFBSTdELEVBQU84RCxHQUM5QyxJQUNFLE9BQU9BLEVBQVVELEVBQUdGLEVBQVMzRCxHQUFPLEdBQUlBLEVBQU0sSUFBTTZELEVBQUc3RCxHQUN2RCxNQUFPK0QsR0FDUEgsRUFBYzlELEVBQVUsUUFBU2lFLHNCQ1JyQyxJQUVJQyxFQUZrQixFQUFRLE1BRWZ2QixDQUFnQixZQUMzQndCLEdBQWUsRUFFbkIsSUFDRSxJQUFJQyxFQUFTLEVBQ1RDLEVBQXFCLENBQ3ZCcEUsS0FBTSxXQUNKLE1BQU8sQ0FBRUksT0FBUStELE1BRW5CLE9BQVUsV0FDUkQsR0FBZSxJQUduQkUsRUFBbUJILEdBQVksV0FDN0IsT0FBTzNFLE1BR1Q3QyxNQUFNQyxLQUFLMEgsR0FBb0IsV0FBYyxNQUFNLEtBQ25ELE1BQU9KLElBRVQzSCxFQUFPQyxRQUFVLFNBQVUrSCxFQUFNQyxHQUMvQixJQUFLQSxJQUFpQkosRUFBYyxPQUFPLEVBQzNDLElBQUlLLEdBQW9CLEVBQ3hCLElBQ0UsSUFBSUMsRUFBUyxHQUNiQSxFQUFPUCxHQUFZLFdBQ2pCLE1BQU8sQ0FDTGpFLEtBQU0sV0FDSixNQUFPLENBQUVJLEtBQU1tRSxHQUFvQixNQUl6Q0YsRUFBS0csR0FDTCxNQUFPUixJQUNULE9BQU9PLG9CQ3BDVCxJQUFJekQsRUFBYyxFQUFRLE9BRXRCMkQsRUFBVzNELEVBQVksR0FBRzJELFVBQzFCQyxFQUFjNUQsRUFBWSxHQUFHL0QsT0FFakNWLEVBQU9DLFFBQVUsU0FBVWtCLEdBQ3pCLE9BQU9rSCxFQUFZRCxFQUFTakgsR0FBSyxHQUFJLG9CQ052QyxJQUFJWSxFQUFTLEVBQVEsT0FDakJ1RyxFQUF3QixFQUFRLE9BQ2hDdEcsRUFBYSxFQUFRLE9BQ3JCdUcsRUFBYSxFQUFRLE9BR3JCQyxFQUZrQixFQUFRLE1BRVZuQyxDQUFnQixlQUNoQy9FLEVBQVNTLEVBQU9ULE9BR2hCbUgsRUFBdUUsYUFBbkRGLEVBQVcsV0FBYyxPQUFPcEYsVUFBckIsSUFVbkNuRCxFQUFPQyxRQUFVcUksRUFBd0JDLEVBQWEsU0FBVXBILEdBQzlELElBQUk0QixFQUFHMkYsRUFBS2xGLEVBQ1osWUFBY0YsSUFBUG5DLEVBQW1CLFlBQXFCLE9BQVBBLEVBQWMsT0FFTSxpQkFBaER1SCxFQVhELFNBQVV2SCxFQUFJSyxHQUN6QixJQUNFLE9BQU9MLEVBQUdLLEdBQ1YsTUFBT21HLEtBUVNnQixDQUFPNUYsRUFBSXpCLEVBQU9ILEdBQUtxSCxJQUE4QkUsRUFFbkVELEVBQW9CRixFQUFXeEYsR0FFSCxXQUEzQlMsRUFBUytFLEVBQVd4RixLQUFtQmYsRUFBV2UsRUFBRTZGLFFBQVUsWUFBY3BGLG9CQzVCbkYsSUFFSXFGLEVBRmMsRUFBUSxNQUVacEUsQ0FBWSxHQUFHb0UsU0FFekJDLEVBQWdDekcsT0FBTzBHLE1BQXNCLFVBQVhDLE9BQ2xEQyxFQUEyQix1QkFDM0JDLEVBQXdCRCxFQUF5QkUsS0FBS0wsR0FFMUQ5SSxFQUFPQyxRQUFVLFNBQVUrSSxFQUFPSSxHQUNoQyxHQUFJRixHQUF5QyxpQkFBVEYsRUFDbEMsS0FBT0ksS0FBZUosRUFBUUgsRUFBUUcsRUFBT0MsRUFBMEIsSUFDdkUsT0FBT0Qsb0JDWFgsSUFBSUssRUFBUyxFQUFRLE9BQ2pCQyxFQUFVLEVBQVEsT0FDbEJDLEVBQWlDLEVBQVEsT0FDekNDLEVBQXVCLEVBQVEsT0FFbkN4SixFQUFPQyxRQUFVLFNBQVUwRixFQUFROEQsRUFBUUMsR0FJekMsSUFIQSxJQUFJakosRUFBTzZJLEVBQVFHLEdBQ2ZsSSxFQUFpQmlJLEVBQXFCMUgsRUFDdEM2SCxFQUEyQkosRUFBK0J6SCxFQUNyRDhILEVBQUksRUFBR0EsRUFBSW5KLEVBQUsyQyxPQUFRd0csSUFBSyxDQUNwQyxJQUFJcEksRUFBTWYsRUFBS21KLEdBQ1ZQLEVBQU8xRCxFQUFRbkUsSUFBVWtJLEdBQWNMLEVBQU9LLEVBQVlsSSxJQUM3REQsRUFBZW9FLEVBQVFuRSxFQUFLbUksRUFBeUJGLEVBQVFqSSx1QkNabkUsSUFBSTRFLEVBQVEsRUFBUSxPQUVwQnBHLEVBQU9DLFNBQVdtRyxHQUFNLFdBQ3RCLFNBQVN5RCxLQUdULE9BRkFBLEVBQUUzSSxVQUFVd0YsWUFBYyxLQUVuQnBGLE9BQU93SSxlQUFlLElBQUlELEtBQVNBLEVBQUUzSSwyQ0NMOUMsSUFBSTZJLEVBQW9CLDJCQUNwQnJFLEVBQVMsRUFBUSxPQUNqQnNFLEVBQTJCLEVBQVEsT0FDbkNDLEVBQWlCLEVBQVEsT0FDekJDLEVBQVksRUFBUSxPQUVwQkMsRUFBYSxXQUFjLE9BQU9sSCxNQUV0Q2pELEVBQU9DLFFBQVUsU0FBVW1LLEVBQXFCQyxFQUFNMUcsRUFBTTJHLEdBQzFELElBQUk5QixFQUFnQjZCLEVBQU8sWUFJM0IsT0FIQUQsRUFBb0JsSixVQUFZd0UsRUFBT3FFLEVBQW1CLENBQUVwRyxLQUFNcUcsSUFBMkJNLEVBQWlCM0csS0FDOUdzRyxFQUFlRyxFQUFxQjVCLEdBQWUsR0FBTyxHQUMxRDBCLEVBQVUxQixHQUFpQjJCLEVBQ3BCQyxvQkNkVCxJQUFJRyxFQUFjLEVBQVEsT0FDdEJmLEVBQXVCLEVBQVEsT0FDL0JRLEVBQTJCLEVBQVEsT0FFdkNoSyxFQUFPQyxRQUFVc0ssRUFBYyxTQUFVcEMsRUFBUTNHLEVBQUtvQyxHQUNwRCxPQUFPNEYsRUFBcUIxSCxFQUFFcUcsRUFBUTNHLEVBQUt3SSxFQUF5QixFQUFHcEcsS0FDckUsU0FBVXVFLEVBQVEzRyxFQUFLb0MsR0FFekIsT0FEQXVFLEVBQU8zRyxHQUFPb0MsRUFDUHVFLGNDUlRuSSxFQUFPQyxRQUFVLFNBQVV1SyxFQUFRNUcsR0FDakMsTUFBTyxDQUNMNkcsYUFBdUIsRUFBVEQsR0FDZEUsZUFBeUIsRUFBVEYsR0FDaEJHLFdBQXFCLEVBQVRILEdBQ1o1RyxNQUFPQSxrQ0NKWCxJQUFJZ0gsRUFBZ0IsRUFBUSxPQUN4QnBCLEVBQXVCLEVBQVEsT0FDL0JRLEVBQTJCLEVBQVEsT0FFdkNoSyxFQUFPQyxRQUFVLFNBQVVrSSxFQUFRM0csRUFBS29DLEdBQ3RDLElBQUlpSCxFQUFjRCxFQUFjcEosR0FDNUJxSixLQUFlMUMsRUFBUXFCLEVBQXFCMUgsRUFBRXFHLEVBQVEwQyxFQUFhYixFQUF5QixFQUFHcEcsSUFDOUZ1RSxFQUFPMEMsR0FBZWpILGlDQ1A3QixJQUFJa0gsRUFBSSxFQUFRLE9BQ1p0SSxFQUFPLEVBQVEsT0FDZnVJLEVBQVUsRUFBUSxPQUNsQkMsRUFBZSxFQUFRLE9BQ3ZCaEosRUFBYSxFQUFRLE9BQ3JCaUosRUFBNEIsRUFBUSxPQUNwQ25CLEVBQWlCLEVBQVEsS0FDekJvQixFQUFpQixFQUFRLE9BQ3pCakIsRUFBaUIsRUFBUSxPQUN6QmtCLEVBQThCLEVBQVEsT0FDdENDLEVBQVcsRUFBUSxPQUNuQi9FLEVBQWtCLEVBQVEsT0FDMUI2RCxFQUFZLEVBQVEsT0FDcEJtQixFQUFnQixFQUFRLE9BRXhCQyxFQUF1Qk4sRUFBYU8sT0FDcENDLEVBQTZCUixFQUFhUyxhQUMxQzFCLEVBQW9Cc0IsRUFBY3RCLGtCQUNsQzJCLEVBQXlCTCxFQUFjSyx1QkFDdkM5RCxFQUFXdkIsRUFBZ0IsWUFDM0JzRixFQUFPLE9BQ1BDLEVBQVMsU0FDVGxFLEVBQVUsVUFFVnlDLEVBQWEsV0FBYyxPQUFPbEgsTUFFdENqRCxFQUFPQyxRQUFVLFNBQVU0TCxFQUFVeEIsRUFBTUQsRUFBcUJ6RyxFQUFNbUksRUFBU0MsRUFBUUMsR0FDckZmLEVBQTBCYixFQUFxQkMsRUFBTTFHLEdBRXJELElBa0JJc0ksRUFBMEJDLEVBQVNDLEVBbEJuQ0MsRUFBcUIsU0FBVUMsR0FDakMsR0FBSUEsSUFBU1AsR0FBV1EsRUFBaUIsT0FBT0EsRUFDaEQsSUFBS1osR0FBMEJXLEtBQVFFLEVBQW1CLE9BQU9BLEVBQWtCRixHQUNuRixPQUFRQSxHQUNOLEtBQUtWLEVBQ0wsS0FBS0MsRUFDTCxLQUFLbEUsRUFBUyxPQUFPLFdBQXFCLE9BQU8sSUFBSTBDLEVBQW9CbkgsS0FBTW9KLElBQy9FLE9BQU8sV0FBYyxPQUFPLElBQUlqQyxFQUFvQm5ILFFBR3BEdUYsRUFBZ0I2QixFQUFPLFlBQ3ZCbUMsR0FBd0IsRUFDeEJELEVBQW9CVixFQUFTM0ssVUFDN0J1TCxFQUFpQkYsRUFBa0IzRSxJQUNsQzJFLEVBQWtCLGVBQ2xCVCxHQUFXUyxFQUFrQlQsR0FDOUJRLEdBQW1CWixHQUEwQmUsR0FBa0JMLEVBQW1CTixHQUNsRlksRUFBNEIsU0FBUnJDLEdBQWtCa0MsRUFBa0JJLFNBQTRCRixFQStCeEYsR0EzQklDLElBQ0ZULEVBQTJCbkMsRUFBZTRDLEVBQWtCbEssS0FBSyxJQUFJcUosT0FDcEN2SyxPQUFPSixXQUFhK0ssRUFBeUJ0SSxPQUN2RW9ILEdBQVdqQixFQUFlbUMsS0FBOEJsQyxJQUN2RG1CLEVBQ0ZBLEVBQWVlLEVBQTBCbEMsR0FDL0IvSCxFQUFXaUssRUFBeUJyRSxLQUM5Q3dELEVBQVNhLEVBQTBCckUsRUFBVXVDLElBSWpERixFQUFlZ0MsRUFBMEJ6RCxHQUFlLEdBQU0sR0FDMUR1QyxJQUFTYixFQUFVMUIsR0FBaUIyQixJQUt4Q21CLEdBQXdCUSxHQUFXRixHQUFVYSxHQUFrQkEsRUFBZUcsT0FBU2hCLEtBQ3BGYixHQUFXUyxFQUNkTCxFQUE0Qm9CLEVBQW1CLE9BQVFYLElBRXZEWSxHQUF3QixFQUN4QkYsRUFBa0IsV0FBb0IsT0FBTzlKLEVBQUtpSyxFQUFnQnhKLFNBS2xFNkksRUFNRixHQUxBSSxFQUFVLENBQ1JXLE9BQVFULEVBQW1CUixHQUMzQm5MLEtBQU1zTCxFQUFTTyxFQUFrQkYsRUFBbUJULEdBQ3BEZ0IsUUFBU1AsRUFBbUIxRSxJQUUxQnNFLEVBQVEsSUFBS0csS0FBT0QsR0FDbEJSLEdBQTBCYyxLQUEyQkwsS0FBT0ksS0FDOURuQixFQUFTbUIsRUFBbUJKLEVBQUtELEVBQVFDLFNBRXRDckIsRUFBRSxDQUFFbkYsT0FBUTBFLEVBQU15QyxPQUFPLEVBQU1DLE9BQVFyQixHQUEwQmMsR0FBeUJOLEdBU25HLE9BTE1uQixJQUFXaUIsR0FBV08sRUFBa0IzRSxLQUFjMEUsR0FDMURsQixFQUFTbUIsRUFBbUIzRSxFQUFVMEUsRUFBaUIsQ0FBRU0sS0FBTWQsSUFFakU1QixFQUFVRyxHQUFRaUMsRUFFWEosb0JDakdULElBQUkvTCxFQUFPLEVBQVEsT0FDZmtKLEVBQVMsRUFBUSxPQUNqQjJELEVBQStCLEVBQVEsT0FDdkN6TCxFQUFpQixXQUVyQnZCLEVBQU9DLFFBQVUsU0FBVW9LLEdBQ3pCLElBQUl6SSxFQUFTekIsRUFBS3lCLFNBQVd6QixFQUFLeUIsT0FBUyxJQUN0Q3lILEVBQU96SCxFQUFReUksSUFBTzlJLEVBQWVLLEVBQVF5SSxFQUFNLENBQ3REekcsTUFBT29KLEVBQTZCbEwsRUFBRXVJLHVCQ1IxQyxJQUFJakUsRUFBUSxFQUFRLE9BR3BCcEcsRUFBT0MsU0FBV21HLEdBQU0sV0FFdEIsT0FBOEUsR0FBdkU5RSxPQUFPQyxlQUFlLEdBQUksRUFBRyxDQUFFMEwsSUFBSyxXQUFjLE9BQU8sS0FBUSx1QkNMMUUsSUFBSWxMLEVBQVMsRUFBUSxPQUNqQlEsRUFBVyxFQUFRLE9BRW5CMkssRUFBV25MLEVBQU9tTCxTQUVsQkMsRUFBUzVLLEVBQVMySyxJQUFhM0ssRUFBUzJLLEVBQVNFLGVBRXJEcE4sRUFBT0MsUUFBVSxTQUFVa0IsR0FDekIsT0FBT2dNLEVBQVNELEVBQVNFLGNBQWNqTSxHQUFNLGVDTi9DbkIsRUFBT0MsUUFBVSxDQUNmb04sWUFBYSxFQUNiQyxvQkFBcUIsRUFDckJDLGFBQWMsRUFDZEMsZUFBZ0IsRUFDaEJDLFlBQWEsRUFDYkMsY0FBZSxFQUNmQyxhQUFjLEVBQ2RDLHFCQUFzQixFQUN0QkMsU0FBVSxFQUNWQyxrQkFBbUIsRUFDbkJDLGVBQWdCLEVBQ2hCQyxnQkFBaUIsRUFDakJDLGtCQUFtQixFQUNuQkMsVUFBVyxFQUNYQyxjQUFlLEVBQ2ZDLGFBQWMsRUFDZEMsU0FBVSxFQUNWQyxpQkFBa0IsRUFDbEJDLE9BQVEsRUFDUkMsWUFBYSxFQUNiQyxjQUFlLEVBQ2ZDLGNBQWUsRUFDZkMsZUFBZ0IsRUFDaEJDLGFBQWMsRUFDZEMsY0FBZSxFQUNmQyxpQkFBa0IsRUFDbEJDLGlCQUFrQixFQUNsQkMsZUFBZ0IsRUFDaEJDLGlCQUFrQixFQUNsQkMsY0FBZSxFQUNmQyxVQUFXLGNDakNiblAsRUFBT0MsUUFBMkIsaUJBQVZtUCx1QkNBeEIsSUFBSUMsRUFBWSxFQUFRLE1BQ3BCdE4sRUFBUyxFQUFRLE9BRXJCL0IsRUFBT0MsUUFBVSxvQkFBb0JrSixLQUFLa0csU0FBZ0MvTCxJQUFsQnZCLEVBQU91Tix3QkNIL0QsSUFBSUQsRUFBWSxFQUFRLE1BRXhCclAsRUFBT0MsUUFBVSxxQ0FBcUNrSixLQUFLa0csbUJDRjNELElBQUlFLEVBQVUsRUFBUSxPQUNsQnhOLEVBQVMsRUFBUSxPQUVyQi9CLEVBQU9DLFFBQXFDLFdBQTNCc1AsRUFBUXhOLEVBQU95TiwwQkNIaEMsSUFBSUgsRUFBWSxFQUFRLE1BRXhCclAsRUFBT0MsUUFBVSxxQkFBcUJrSixLQUFLa0csbUJDRjNDLElBQUlJLEVBQWEsRUFBUSxLQUV6QnpQLEVBQU9DLFFBQVV3UCxFQUFXLFlBQWEsY0FBZ0Isb0JDRnpELElBT0lDLEVBQU9DLEVBUFA1TixFQUFTLEVBQVEsT0FDakJzTixFQUFZLEVBQVEsTUFFcEJHLEVBQVV6TixFQUFPeU4sUUFDakJJLEVBQU83TixFQUFPNk4sS0FDZEMsRUFBV0wsR0FBV0EsRUFBUUssVUFBWUQsR0FBUUEsRUFBS0QsUUFDdkRHLEVBQUtELEdBQVlBLEVBQVNDLEdBRzFCQSxJQUlGSCxHQUhBRCxFQUFRSSxFQUFHQyxNQUFNLE1BR0QsR0FBSyxHQUFLTCxFQUFNLEdBQUssRUFBSSxJQUFNQSxFQUFNLEdBQUtBLEVBQU0sTUFLN0RDLEdBQVdOLE1BQ2RLLEVBQVFMLEVBQVVLLE1BQU0saUJBQ1ZBLEVBQU0sSUFBTSxNQUN4QkEsRUFBUUwsRUFBVUssTUFBTSxvQkFDYkMsR0FBV0QsRUFBTSxJQUloQzFQLEVBQU9DLFFBQVUwUCxtQkMxQmpCLElBQUl4UCxFQUFPLEVBQVEsT0FFbkJILEVBQU9DLFFBQVUsU0FBVStQLEdBQ3pCLE9BQU83UCxFQUFLNlAsRUFBYyx5QkNGNUJoUSxFQUFPQyxRQUFVLENBQ2YsY0FDQSxpQkFDQSxnQkFDQSx1QkFDQSxpQkFDQSxXQUNBLDRCQ1JGLElBQUltRyxFQUFRLEVBQVEsT0FDaEI0RCxFQUEyQixFQUFRLE9BRXZDaEssRUFBT0MsU0FBV21HLEdBQU0sV0FDdEIsSUFBSXVCLEVBQVFvQixNQUFNLEtBQ2xCLFFBQU0sVUFBV3BCLEtBRWpCckcsT0FBT0MsZUFBZW9HLEVBQU8sUUFBU3FDLEVBQXlCLEVBQUcsSUFDM0MsSUFBaEJyQyxFQUFNcUIsd0NDUGYsSUFBSWpILEVBQVMsRUFBUSxPQUNqQmtPLEVBQVEsRUFBUSxPQUNoQnhMLEVBQWMsRUFBUSxPQUN0QnpDLEVBQWEsRUFBUSxPQUNyQjJILEVBQTJCLFdBQzNCdUcsRUFBVyxFQUFRLE9BQ25CL1AsRUFBTyxFQUFRLE9BQ2ZRLEVBQU8sRUFBUSxPQUNmd0ssRUFBOEIsRUFBUSxPQUN0QzlCLEVBQVMsRUFBUSxPQUVqQjhHLEVBQWtCLFNBQVVDLEdBQzlCLElBQUlDLEVBQVUsU0FBVUMsRUFBR0MsRUFBR0MsR0FDNUIsR0FBSXZOLGdCQUFnQm9OLEVBQVMsQ0FDM0IsT0FBUWxOLFVBQVVDLFFBQ2hCLEtBQUssRUFBRyxPQUFPLElBQUlnTixFQUNuQixLQUFLLEVBQUcsT0FBTyxJQUFJQSxFQUFrQkUsR0FDckMsS0FBSyxFQUFHLE9BQU8sSUFBSUYsRUFBa0JFLEVBQUdDLEdBQ3hDLE9BQU8sSUFBSUgsRUFBa0JFLEVBQUdDLEVBQUdDLEdBQ3JDLE9BQU9QLEVBQU1HLEVBQW1Cbk4sS0FBTUUsWUFHMUMsT0FEQWtOLEVBQVFuUCxVQUFZa1AsRUFBa0JsUCxVQUMvQm1QLEdBa0JUclEsRUFBT0MsUUFBVSxTQUFVd1EsRUFBU2hILEdBQ2xDLElBVVlpSCxFQUFZQyxFQUNwQm5QLEVBQUtvUCxFQUFnQkMsRUFBZ0JDLEVBQWdCQyxFQUFnQkMsRUFYckVDLEVBQVNSLEVBQVE5SyxPQUNqQnVMLEVBQVNULEVBQVExTyxPQUNqQm9QLEVBQVNWLEVBQVFXLEtBQ2pCQyxFQUFRWixFQUFRM0QsTUFFaEJ3RSxFQUFlSixFQUFTblAsRUFBU29QLEVBQVNwUCxFQUFPa1AsSUFBV2xQLEVBQU9rUCxJQUFXLElBQUkvUCxVQUVsRnlFLEVBQVN1TCxFQUFTL1EsRUFBT0EsRUFBSzhRLElBQVc5RixFQUE0QmhMLEVBQU04USxFQUFRLElBQUlBLEdBQ3ZGTSxFQUFrQjVMLEVBQU96RSxVQUs3QixJQUFLTSxLQUFPaUksRUFHVmlILEdBRlNSLEVBQVNnQixFQUFTMVAsRUFBTXlQLEdBQVVFLEVBQVMsSUFBTSxLQUFPM1AsRUFBS2lQLEVBQVExRCxTQUV0RHVFLEdBQWdCakksRUFBT2lJLEVBQWM5UCxHQUU3RHFQLEVBQWlCbEwsRUFBT25FLEdBRXBCa1AsSUFFRkksRUFGa0JMLEVBQVFlLGFBQzFCUixFQUFhckgsRUFBeUIySCxFQUFjOVAsS0FDckJ3UCxFQUFXcE4sTUFDcEIwTixFQUFhOVAsSUFHckNvUCxFQUFrQkYsR0FBY0ksRUFBa0JBLEVBQWlCckgsRUFBT2pJLEdBRXRFa1AsVUFBcUJHLFVBQXlCRCxJQUdsQkcsRUFBNUJOLEVBQVE5UCxNQUFRK1AsRUFBNkIvUCxFQUFLaVEsRUFBZ0I3TyxHQUU3RDBPLEVBQVFnQixNQUFRZixFQUE2QlAsRUFBZ0JTLEdBRTdEUyxHQUFTclAsRUFBVzRPLEdBQWtDbk0sRUFBWW1NLEdBRXJEQSxHQUdsQkgsRUFBUS9PLE1BQVNrUCxHQUFrQkEsRUFBZWxQLE1BQVVtUCxHQUFrQkEsRUFBZW5QLE9BQy9GeUosRUFBNEI0RixFQUFnQixRQUFRLEdBR3RENUYsRUFBNEJ4RixFQUFRbkUsRUFBS3VQLEdBRXJDTSxJQUVHaEksRUFBT2xKLEVBRFp3USxFQUFvQk0sRUFBUyxjQUUzQjlGLEVBQTRCaEwsRUFBTXdRLEVBQW1CLElBR3ZEeEYsRUFBNEJoTCxFQUFLd1EsR0FBb0JuUCxFQUFLb1AsR0FFdERILEVBQVFpQixNQUFRSCxJQUFvQkEsRUFBZ0IvUCxJQUN0RDJKLEVBQTRCb0csRUFBaUIvUCxFQUFLb1AsaUJDakcxRDVRLEVBQU9DLFFBQVUsU0FBVStILEdBQ3pCLElBQ0UsUUFBU0EsSUFDVCxNQUFPTCxHQUNQLE9BQU8scUJDSlgsSUFBSWdLLEVBQWMsRUFBUSxPQUV0QjNRLEVBQW9CQyxTQUFTQyxVQUM3QitPLEVBQVFqUCxFQUFrQmlQLE1BQzFCek4sRUFBT3hCLEVBQWtCd0IsS0FHN0J4QyxFQUFPQyxRQUE0QixpQkFBWDJSLFNBQXVCQSxRQUFRM0IsUUFBVTBCLEVBQWNuUCxFQUFLN0IsS0FBS3NQLEdBQVMsV0FDaEcsT0FBT3pOLEVBQUt5TixNQUFNQSxFQUFPOU0sOEJDUjNCLElBQUlzQixFQUFjLEVBQVEsT0FDdEJvTixFQUFZLEVBQVEsT0FDcEJGLEVBQWMsRUFBUSxPQUV0QmhSLEVBQU84RCxFQUFZQSxFQUFZOUQsTUFHbkNYLEVBQU9DLFFBQVUsU0FBVXdILEVBQUluQyxHQUU3QixPQURBdU0sRUFBVXBLLFFBQ01uRSxJQUFUZ0MsRUFBcUJtQyxFQUFLa0ssRUFBY2hSLEVBQUs4RyxFQUFJbkMsR0FBUSxXQUM5RCxPQUFPbUMsRUFBR3dJLE1BQU0zSyxFQUFNbkMsOEJDVjFCLElBQUlpRCxFQUFRLEVBQVEsT0FFcEJwRyxFQUFPQyxTQUFXbUcsR0FBTSxXQUN0QixJQUFJK0MsRUFBTyxhQUE4QnhJLE9BRXpDLE1BQXNCLG1CQUFSd0ksR0FBc0JBLEVBQUsySSxlQUFlLDhDQ0oxRCxJQUFJL1AsRUFBUyxFQUFRLE9BQ2pCMEMsRUFBYyxFQUFRLE9BQ3RCb04sRUFBWSxFQUFRLE9BQ3BCdFAsRUFBVyxFQUFRLE9BQ25COEcsRUFBUyxFQUFRLE9BQ2pCMEksRUFBYSxFQUFRLE9BQ3JCSixFQUFjLEVBQVEsT0FFdEIxUSxFQUFXYyxFQUFPZCxTQUNsQlQsRUFBU2lFLEVBQVksR0FBR2pFLFFBQ3hCd1IsRUFBT3ZOLEVBQVksR0FBR3VOLE1BQ3RCQyxFQUFZLEdBRVpDLEVBQVksU0FBVTdLLEVBQUc4SyxFQUFZQyxHQUN2QyxJQUFLL0ksRUFBTzRJLEVBQVdFLEdBQWEsQ0FDbEMsSUFBSyxJQUFJRSxFQUFPLEdBQUl6SSxFQUFJLEVBQUdBLEVBQUl1SSxFQUFZdkksSUFBS3lJLEVBQUt6SSxHQUFLLEtBQU9BLEVBQUksSUFDckVxSSxFQUFVRSxHQUFjbFIsRUFBUyxNQUFPLGdCQUFrQitRLEVBQUtLLEVBQU0sS0FBTyxLQUM1RSxPQUFPSixFQUFVRSxHQUFZOUssRUFBRytLLElBS3BDcFMsRUFBT0MsUUFBVTBSLEVBQWMxUSxFQUFTTixLQUFPLFNBQWMyRSxHQUMzRCxJQUFJdUUsRUFBSWdJLEVBQVU1TyxNQUNkWCxFQUFZdUgsRUFBRTNJLFVBQ2RvUixFQUFXUCxFQUFXNU8sVUFBVyxHQUNqQ3NDLEVBQWdCLFdBQ2xCLElBQUkyTSxFQUFPNVIsRUFBTzhSLEVBQVVQLEVBQVc1TyxZQUN2QyxPQUFPRixnQkFBZ0J3QyxFQUFnQnlNLEVBQVVySSxFQUFHdUksRUFBS2hQLE9BQVFnUCxHQUFRdkksRUFBRW9HLE1BQU0zSyxFQUFNOE0sSUFHekYsT0FESTdQLEVBQVNELEtBQVltRCxFQUFjdkUsVUFBWW9CLEdBQzVDbUQsb0JDaENULElBQUlrTSxFQUFjLEVBQVEsT0FFdEJuUCxFQUFPdkIsU0FBU0MsVUFBVXNCLEtBRTlCeEMsRUFBT0MsUUFBVTBSLEVBQWNuUCxFQUFLN0IsS0FBSzZCLEdBQVEsV0FDL0MsT0FBT0EsRUFBS3lOLE1BQU16TixFQUFNVyw2QkNMMUIsSUFBSW9ILEVBQWMsRUFBUSxPQUN0QmxCLEVBQVMsRUFBUSxPQUVqQnJJLEVBQW9CQyxTQUFTQyxVQUU3QnFSLEVBQWdCaEksR0FBZWpKLE9BQU9xSSx5QkFFdEN3RCxFQUFTOUQsRUFBT3JJLEVBQW1CLFFBRW5DdUssRUFBUzRCLEdBQTBELGNBQWhELGFBQXVDUCxLQUMxRG5CLEVBQWUwQixLQUFZNUMsR0FBZ0JBLEdBQWVnSSxFQUFjdlIsRUFBbUIsUUFBUTBKLGNBRXZHMUssRUFBT0MsUUFBVSxDQUNma04sT0FBUUEsRUFDUjVCLE9BQVFBLEVBQ1JFLGFBQWNBLG9CQ2ZoQixJQUFJa0csRUFBYyxFQUFRLE9BRXRCM1EsRUFBb0JDLFNBQVNDLFVBQzdCUCxFQUFPSyxFQUFrQkwsS0FDekI2QixFQUFPeEIsRUFBa0J3QixLQUN6QmlDLEVBQWNrTixHQUFlaFIsRUFBS0EsS0FBSzZCLEVBQU1BLEdBRWpEeEMsRUFBT0MsUUFBVTBSLEVBQWMsU0FBVWxLLEdBQ3ZDLE9BQU9BLEdBQU1oRCxFQUFZZ0QsSUFDdkIsU0FBVUEsR0FDWixPQUFPQSxHQUFNLFdBQ1gsT0FBT2pGLEVBQUt5TixNQUFNeEksRUFBSXRFLDRCQ1gxQixJQUFJaEQsRUFBTyxFQUFRLE9BQ2Y0QixFQUFTLEVBQVEsT0FDakJDLEVBQWEsRUFBUSxPQUVyQndRLEVBQVksU0FBVUMsR0FDeEIsT0FBT3pRLEVBQVd5USxHQUFZQSxPQUFXblAsR0FHM0N0RCxFQUFPQyxRQUFVLFNBQVV5UyxFQUFXM1IsR0FDcEMsT0FBT29DLFVBQVVDLE9BQVMsRUFBSW9QLEVBQVVyUyxFQUFLdVMsS0FBZUYsRUFBVXpRLEVBQU8yUSxJQUN6RXZTLEVBQUt1UyxJQUFjdlMsRUFBS3VTLEdBQVczUixJQUFXZ0IsRUFBTzJRLElBQWMzUSxFQUFPMlEsR0FBVzNSLHFCQ1YzRixJQUFJd08sRUFBVSxFQUFRLE1BQ2xCb0QsRUFBWSxFQUFRLE9BQ3BCekksRUFBWSxFQUFRLE9BR3BCdEMsRUFGa0IsRUFBUSxNQUVmdkIsQ0FBZ0IsWUFFL0JyRyxFQUFPQyxRQUFVLFNBQVVrQixHQUN6QixHQUFVbUMsTUFBTm5DLEVBQWlCLE9BQU93UixFQUFVeFIsRUFBSXlHLElBQ3JDK0ssRUFBVXhSLEVBQUksZUFDZCtJLEVBQVVxRixFQUFRcE8sc0JDVnpCLElBQUlZLEVBQVMsRUFBUSxPQUNqQlMsRUFBTyxFQUFRLE9BQ2ZxUCxFQUFZLEVBQVEsT0FDcEJ0SyxFQUFXLEVBQVEsT0FDbkJ0RixFQUFjLEVBQVEsT0FDdEJyQixFQUFvQixFQUFRLE9BRTVCc0IsRUFBWUgsRUFBT0csVUFFdkJsQyxFQUFPQyxRQUFVLFNBQVVrQyxFQUFVeVEsR0FDbkMsSUFBSS9PLEVBQWlCVixVQUFVQyxPQUFTLEVBQUl4QyxFQUFrQnVCLEdBQVl5USxFQUMxRSxHQUFJZixFQUFVaE8sR0FBaUIsT0FBTzBELEVBQVMvRSxFQUFLcUIsRUFBZ0IxQixJQUNwRSxNQUFNRCxFQUFVRCxFQUFZRSxHQUFZLHNDQ1oxQyxJQUFJMFAsRUFBWSxFQUFRLE9BSXhCN1IsRUFBT0MsUUFBVSxTQUFVNFMsRUFBR0MsR0FDNUIsSUFBSUMsRUFBT0YsRUFBRUMsR0FDYixPQUFlLE1BQVJDLE9BQWV6UCxFQUFZdU8sRUFBVWtCLHFCQ045QyxJQUFJQyxFQUFRLFNBQVU3UixHQUNwQixPQUFPQSxHQUFNQSxFQUFHMkYsTUFBUUEsTUFBUTNGLEdBSWxDbkIsRUFBT0MsUUFFTCtTLEVBQTJCLGlCQUFkQyxZQUEwQkEsYUFDdkNELEVBQXVCLGlCQUFWNUQsUUFBc0JBLFNBRW5DNEQsRUFBcUIsaUJBQVJ4TixNQUFvQkEsT0FDakN3TixFQUF1QixpQkFBVixFQUFBRSxHQUFzQixFQUFBQSxJQUVuQyxXQUFlLE9BQU9qUSxLQUF0QixJQUFvQ2hDLFNBQVMsY0FBVEEsb0JDYnRDLElBQUl3RCxFQUFjLEVBQVEsT0FDdEJoQyxFQUFXLEVBQVEsT0FFbkJxUCxFQUFpQnJOLEVBQVksR0FBR3FOLGdCQUlwQzlSLEVBQU9DLFFBQVVxQixPQUFPK0gsUUFBVSxTQUFnQmxJLEVBQUlLLEdBQ3BELE9BQU9zUSxFQUFlclAsRUFBU3RCLEdBQUtLLGVDUnRDeEIsRUFBT0MsUUFBVSxvQkNBakIsSUFBSThCLEVBQVMsRUFBUSxPQUVyQi9CLEVBQU9DLFFBQVUsU0FBVXFRLEVBQUdDLEdBQzVCLElBQUk0QyxFQUFVcFIsRUFBT29SLFFBQ2pCQSxHQUFXQSxFQUFReEwsUUFDRCxHQUFwQnhFLFVBQVVDLE9BQWMrUCxFQUFReEwsTUFBTTJJLEdBQUs2QyxFQUFReEwsTUFBTTJJLEVBQUdDLHNCQ0xoRSxJQUFJZCxFQUFhLEVBQVEsS0FFekJ6UCxFQUFPQyxRQUFVd1AsRUFBVyxXQUFZLG1DQ0Z4QyxJQUFJbEYsRUFBYyxFQUFRLE9BQ3RCbkUsRUFBUSxFQUFRLE9BQ2hCZ0gsRUFBZ0IsRUFBUSxPQUc1QnBOLEVBQU9DLFNBQVdzSyxJQUFnQm5FLEdBQU0sV0FFdEMsT0FFUSxHQUZEOUUsT0FBT0MsZUFBZTZMLEVBQWMsT0FBUSxJQUFLLENBQ3RESCxJQUFLLFdBQWMsT0FBTyxLQUN6QnFELHNCQ1RMLElBQUl2TyxFQUFTLEVBQVEsT0FDakIwQyxFQUFjLEVBQVEsT0FDdEIyQixFQUFRLEVBQVEsT0FDaEJtSixFQUFVLEVBQVEsT0FFbEJqTyxFQUFTUyxFQUFPVCxPQUNoQnlPLEVBQVF0TCxFQUFZLEdBQUdzTCxPQUczQi9QLEVBQU9DLFFBQVVtRyxHQUFNLFdBR3JCLE9BQVE5RSxFQUFPLEtBQUs4UixxQkFBcUIsTUFDdEMsU0FBVWpTLEdBQ2IsTUFBc0IsVUFBZm9PLEVBQVFwTyxHQUFrQjRPLEVBQU01TyxFQUFJLElBQU1HLEVBQU9ILElBQ3RERyxtQkNmSixJQUFJbUQsRUFBYyxFQUFRLE9BQ3RCekMsRUFBYSxFQUFRLE9BQ3JCcVIsRUFBUSxFQUFRLE9BRWhCQyxFQUFtQjdPLEVBQVl4RCxTQUFTbUgsVUFHdkNwRyxFQUFXcVIsRUFBTUUsaUJBQ3BCRixFQUFNRSxjQUFnQixTQUFVcFMsR0FDOUIsT0FBT21TLEVBQWlCblMsS0FJNUJuQixFQUFPQyxRQUFVb1QsRUFBTUUsK0JDYnZCLElBQUloUixFQUFXLEVBQVEsT0FDbkI0SSxFQUE4QixFQUFRLE9BSTFDbkwsRUFBT0MsUUFBVSxTQUFVOEMsRUFBRzBOLEdBQ3hCbE8sRUFBU2tPLElBQVksVUFBV0EsR0FDbEN0RixFQUE0QnBJLEVBQUcsUUFBUzBOLEVBQVErQyx5QkNQcEQsSUFhSUMsRUFBS3hHLEVBQUt5RyxFQWJWQyxFQUFrQixFQUFRLE9BQzFCNVIsRUFBUyxFQUFRLE9BQ2pCMEMsRUFBYyxFQUFRLE9BQ3RCbEMsRUFBVyxFQUFRLE9BQ25CNEksRUFBOEIsRUFBUSxPQUN0QzlCLEVBQVMsRUFBUSxPQUNqQnVLLEVBQVMsRUFBUSxPQUNqQkMsRUFBWSxFQUFRLE9BQ3BCQyxFQUFhLEVBQVEsT0FFckJDLEVBQTZCLDZCQUM3QjdSLEVBQVlILEVBQU9HLFVBQ25COFIsRUFBVWpTLEVBQU9pUyxRQWdCckIsR0FBSUwsR0FBbUJDLEVBQU9LLE1BQU8sQ0FDbkMsSUFBSVosRUFBUU8sRUFBT0ssUUFBVUwsRUFBT0ssTUFBUSxJQUFJRCxHQUM1Q0UsRUFBUXpQLEVBQVk0TyxFQUFNcEcsS0FDMUJrSCxFQUFRMVAsRUFBWTRPLEVBQU1LLEtBQzFCVSxFQUFRM1AsRUFBWTRPLEVBQU1JLEtBQzlCQSxFQUFNLFNBQVV0UyxFQUFJa1QsR0FDbEIsR0FBSUYsRUFBTWQsRUFBT2xTLEdBQUssTUFBTSxJQUFJZSxFQUFVNlIsR0FHMUMsT0FGQU0sRUFBU0MsT0FBU25ULEVBQ2xCaVQsRUFBTWYsRUFBT2xTLEVBQUlrVCxHQUNWQSxHQUVUcEgsRUFBTSxTQUFVOUwsR0FDZCxPQUFPK1MsRUFBTWIsRUFBT2xTLElBQU8sSUFFN0J1UyxFQUFNLFNBQVV2UyxHQUNkLE9BQU9nVCxFQUFNZCxFQUFPbFMsUUFFakIsQ0FDTCxJQUFJb1QsRUFBUVYsRUFBVSxTQUN0QkMsRUFBV1MsSUFBUyxFQUNwQmQsRUFBTSxTQUFVdFMsRUFBSWtULEdBQ2xCLEdBQUloTCxFQUFPbEksRUFBSW9ULEdBQVEsTUFBTSxJQUFJclMsRUFBVTZSLEdBRzNDLE9BRkFNLEVBQVNDLE9BQVNuVCxFQUNsQmdLLEVBQTRCaEssRUFBSW9ULEVBQU9GLEdBQ2hDQSxHQUVUcEgsRUFBTSxTQUFVOUwsR0FDZCxPQUFPa0ksRUFBT2xJLEVBQUlvVCxHQUFTcFQsRUFBR29ULEdBQVMsSUFFekNiLEVBQU0sU0FBVXZTLEdBQ2QsT0FBT2tJLEVBQU9sSSxFQUFJb1QsSUFJdEJ2VSxFQUFPQyxRQUFVLENBQ2Z3VCxJQUFLQSxFQUNMeEcsSUFBS0EsRUFDTHlHLElBQUtBLEVBQ0xjLFFBbkRZLFNBQVVyVCxHQUN0QixPQUFPdVMsRUFBSXZTLEdBQU04TCxFQUFJOUwsR0FBTXNTLEVBQUl0UyxFQUFJLEtBbURuQ3NULFVBaERjLFNBQVU1UCxHQUN4QixPQUFPLFNBQVUxRCxHQUNmLElBQUk4UyxFQUNKLElBQUsxUixFQUFTcEIsS0FBUThTLEVBQVFoSCxFQUFJOUwsSUFBS3VULE9BQVM3UCxFQUM5QyxNQUFNM0MsRUFBVSwwQkFBNEIyQyxFQUFPLGFBQ25ELE9BQU9vUCxxQkN4QmIsSUFBSTVOLEVBQWtCLEVBQVEsT0FDMUI2RCxFQUFZLEVBQVEsT0FFcEJ0QyxFQUFXdkIsRUFBZ0IsWUFDM0JoRixFQUFpQmpCLE1BQU1jLFVBRzNCbEIsRUFBT0MsUUFBVSxTQUFVa0IsR0FDekIsWUFBY21DLElBQVBuQyxJQUFxQitJLEVBQVU5SixRQUFVZSxHQUFNRSxFQUFldUcsS0FBY3pHLG9CQ1JyRixJQUFJb08sRUFBVSxFQUFRLE9BS3RCdlAsRUFBT0MsUUFBVUcsTUFBTUUsU0FBVyxTQUFpQjZCLEdBQ2pELE1BQTRCLFNBQXJCb04sRUFBUXBOLGVDSmpCbkMsRUFBT0MsUUFBVSxTQUFVa0MsR0FDekIsTUFBMEIsbUJBQVpBLG9CQ0hoQixJQUFJc0MsRUFBYyxFQUFRLE9BQ3RCMkIsRUFBUSxFQUFRLE9BQ2hCcEUsRUFBYSxFQUFRLE9BQ3JCdU4sRUFBVSxFQUFRLE1BQ2xCRSxFQUFhLEVBQVEsS0FDckI4RCxFQUFnQixFQUFRLE9BRXhCb0IsRUFBTyxhQUNQQyxFQUFRLEdBQ1IxQyxFQUFZekMsRUFBVyxVQUFXLGFBQ2xDb0YsRUFBb0IsMkJBQ3BCN00sRUFBT3ZELEVBQVlvUSxFQUFrQjdNLE1BQ3JDOE0sR0FBdUJELEVBQWtCN00sS0FBSzJNLEdBRTlDSSxFQUFzQixTQUF1QjVTLEdBQy9DLElBQUtILEVBQVdHLEdBQVcsT0FBTyxFQUNsQyxJQUVFLE9BREErUCxFQUFVeUMsRUFBTUMsRUFBT3pTLElBQ2hCLEVBQ1AsTUFBT3dGLEdBQ1AsT0FBTyxJQUlQcU4sRUFBc0IsU0FBdUI3UyxHQUMvQyxJQUFLSCxFQUFXRyxHQUFXLE9BQU8sRUFDbEMsT0FBUW9OLEVBQVFwTixJQUNkLElBQUssZ0JBQ0wsSUFBSyxvQkFDTCxJQUFLLHlCQUEwQixPQUFPLEVBRXhDLElBSUUsT0FBTzJTLEtBQXlCOU0sRUFBSzZNLEVBQW1CdEIsRUFBY3BSLElBQ3RFLE1BQU93RixHQUNQLE9BQU8sSUFJWHFOLEVBQW9CdFQsTUFBTyxFQUkzQjFCLEVBQU9DLFNBQVdpUyxHQUFhOUwsR0FBTSxXQUNuQyxJQUFJMEIsRUFDSixPQUFPaU4sRUFBb0JBLEVBQW9CdlMsUUFDekN1UyxFQUFvQnpULFVBQ3BCeVQsR0FBb0IsV0FBY2pOLEdBQVMsTUFDNUNBLEtBQ0ZrTixFQUFzQkQsbUJDbkQzQixJQUFJM08sRUFBUSxFQUFRLE9BQ2hCcEUsRUFBYSxFQUFRLE9BRXJCaVQsRUFBYyxrQkFFZC9FLEVBQVcsU0FBVWdGLEVBQVNDLEdBQ2hDLElBQUl2UixFQUFRd1IsRUFBS0MsRUFBVUgsSUFDM0IsT0FBT3RSLEdBQVMwUixHQUNaMVIsR0FBUzJSLElBQ1R2VCxFQUFXbVQsR0FBYS9PLEVBQU0rTyxLQUM1QkEsSUFHSkUsRUFBWW5GLEVBQVNtRixVQUFZLFNBQVVHLEdBQzdDLE9BQU9uVCxPQUFPbVQsR0FBUTNNLFFBQVFvTSxFQUFhLEtBQUtRLGVBRzlDTCxFQUFPbEYsRUFBU2tGLEtBQU8sR0FDdkJHLEVBQVNyRixFQUFTcUYsT0FBUyxJQUMzQkQsRUFBV3BGLEVBQVNvRixTQUFXLElBRW5DdFYsRUFBT0MsUUFBVWlRLG1CQ3JCakIsSUFBSWxPLEVBQWEsRUFBUSxPQUV6QmhDLEVBQU9DLFFBQVUsU0FBVWtCLEdBQ3pCLE1BQW9CLGlCQUFOQSxFQUF3QixPQUFQQSxFQUFjYSxFQUFXYixlQ0gxRG5CLEVBQU9DLFNBQVUsbUJDQWpCLElBQUk4QixFQUFTLEVBQVEsT0FDakIwTixFQUFhLEVBQVEsS0FDckJ6TixFQUFhLEVBQVEsT0FDckJsQixFQUFnQixFQUFRLE1BQ3hCNFUsRUFBb0IsRUFBUSxPQUU1QnBVLEVBQVNTLEVBQU9ULE9BRXBCdEIsRUFBT0MsUUFBVXlWLEVBQW9CLFNBQVV2VSxHQUM3QyxNQUFvQixpQkFBTkEsR0FDWixTQUFVQSxHQUNaLElBQUl3VSxFQUFVbEcsRUFBVyxVQUN6QixPQUFPek4sRUFBVzJULElBQVk3VSxFQUFjNlUsRUFBUXpVLFVBQVdJLEVBQU9ILHNCQ1p4RSxJQUFJWSxFQUFTLEVBQVEsT0FDakJwQixFQUFPLEVBQVEsT0FDZjZCLEVBQU8sRUFBUSxPQUNmK0UsRUFBVyxFQUFRLE9BQ25CdEYsRUFBYyxFQUFRLE9BQ3RCVSxFQUF3QixFQUFRLE1BQ2hDQyxFQUFvQixFQUFRLE9BQzVCOUIsRUFBZ0IsRUFBUSxNQUN4QkQsRUFBYyxFQUFRLE9BQ3RCRCxFQUFvQixFQUFRLE9BQzVCNEcsRUFBZ0IsRUFBUSxNQUV4QnRGLEVBQVlILEVBQU9HLFVBRW5CMFQsRUFBUyxTQUFVQyxFQUFTclMsR0FDOUJQLEtBQUs0UyxRQUFVQSxFQUNmNVMsS0FBS08sT0FBU0EsR0FHWnNTLEVBQWtCRixFQUFPMVUsVUFFN0JsQixFQUFPQyxRQUFVLFNBQVU4VixFQUFVQyxFQUFpQnZGLEdBQ3BELElBS0kvTSxFQUFVdVMsRUFBUW5TLEVBQU9WLEVBQVFJLEVBQVFHLEVBQU1GLEVBTC9DNkIsRUFBT21MLEdBQVdBLEVBQVFuTCxLQUMxQjRRLEtBQWdCekYsSUFBV0EsRUFBUXlGLFlBQ25DQyxLQUFpQjFGLElBQVdBLEVBQVEwRixhQUNwQ0MsS0FBaUIzRixJQUFXQSxFQUFRMkYsYUFDcEMzTyxFQUFLOUcsRUFBS3FWLEVBQWlCMVEsR0FHM0IrUSxFQUFPLFNBQVVDLEdBRW5CLE9BREk1UyxHQUFVOEQsRUFBYzlELEVBQVUsU0FBVTRTLEdBQ3pDLElBQUlWLEdBQU8sRUFBTVUsSUFHdEJDLEVBQVMsU0FBVTNTLEdBQ3JCLE9BQUlzUyxHQUNGM08sRUFBUzNELEdBQ0Z3UyxFQUFjM08sRUFBRzdELEVBQU0sR0FBSUEsRUFBTSxHQUFJeVMsR0FBUTVPLEVBQUc3RCxFQUFNLEdBQUlBLEVBQU0sS0FDaEV3UyxFQUFjM08sRUFBRzdELEVBQU95UyxHQUFRNU8sRUFBRzdELElBRzlDLEdBQUl1UyxFQUNGelMsRUFBV3FTLE1BQ04sQ0FFTCxLQURBRSxFQUFTclYsRUFBa0JtVixJQUNkLE1BQU03VCxFQUFVRCxFQUFZOFQsR0FBWSxvQkFFckQsR0FBSXBULEVBQXNCc1QsR0FBUyxDQUNqQyxJQUFLblMsRUFBUSxFQUFHVixFQUFTUixFQUFrQm1ULEdBQVczUyxFQUFTVSxFQUFPQSxJQUVwRSxJQURBTixFQUFTK1MsRUFBT1IsRUFBU2pTLE1BQ1hoRCxFQUFjZ1YsRUFBaUJ0UyxHQUFTLE9BQU9BLEVBQzdELE9BQU8sSUFBSW9TLEdBQU8sR0FFdEJsUyxFQUFXN0MsRUFBWWtWLEVBQVVFLEdBSW5DLElBREF0UyxFQUFPRCxFQUFTQyxPQUNQRixFQUFPakIsRUFBS21CLEVBQU1ELElBQVdLLE1BQU0sQ0FDMUMsSUFDRVAsRUFBUytTLEVBQU85UyxFQUFLRyxPQUNyQixNQUFPK0QsR0FDUEgsRUFBYzlELEVBQVUsUUFBU2lFLEdBRW5DLEdBQXFCLGlCQUFWbkUsR0FBc0JBLEdBQVUxQyxFQUFjZ1YsRUFBaUJ0UyxHQUFTLE9BQU9BLEVBQzFGLE9BQU8sSUFBSW9TLEdBQU8sb0JDaEV0QixJQUFJcFQsRUFBTyxFQUFRLE9BQ2YrRSxFQUFXLEVBQVEsT0FDbkJvTCxFQUFZLEVBQVEsT0FFeEIzUyxFQUFPQyxRQUFVLFNBQVV5RCxFQUFVOFMsRUFBTTVTLEdBQ3pDLElBQUk2UyxFQUFhQyxFQUNqQm5QLEVBQVM3RCxHQUNULElBRUUsS0FEQStTLEVBQWM5RCxFQUFValAsRUFBVSxXQUNoQixDQUNoQixHQUFhLFVBQVQ4UyxFQUFrQixNQUFNNVMsRUFDNUIsT0FBT0EsRUFFVDZTLEVBQWNqVSxFQUFLaVUsRUFBYS9TLEdBQ2hDLE1BQU9pRSxHQUNQK08sR0FBYSxFQUNiRCxFQUFjOU8sRUFFaEIsR0FBYSxVQUFUNk8sRUFBa0IsTUFBTTVTLEVBQzVCLEdBQUk4UyxFQUFZLE1BQU1ELEVBRXRCLE9BREFsUCxFQUFTa1AsR0FDRjdTLGlDQ3BCVCxJQWFJbUcsRUFBbUI0TSxFQUFtQ0MsRUFidER4USxFQUFRLEVBQVEsT0FDaEJwRSxFQUFhLEVBQVEsT0FDckIwRCxFQUFTLEVBQVEsT0FDakJvRSxFQUFpQixFQUFRLEtBQ3pCc0IsRUFBVyxFQUFRLE9BQ25CL0UsRUFBa0IsRUFBUSxPQUMxQjBFLEVBQVUsRUFBUSxPQUVsQm5ELEVBQVd2QixFQUFnQixZQUMzQnFGLEdBQXlCLEVBT3pCLEdBQUdqTCxPQUdDLFNBRk5tVyxFQUFnQixHQUFHblcsU0FJakJrVyxFQUFvQzdNLEVBQWVBLEVBQWU4TSxPQUN4QnRWLE9BQU9KLFlBQVc2SSxFQUFvQjRNLEdBSGxEakwsR0FBeUIsR0FPVHBJLE1BQXJCeUcsR0FBa0MzRCxHQUFNLFdBQ25FLElBQUkrQyxFQUFPLEdBRVgsT0FBT1ksRUFBa0JuQyxHQUFVcEYsS0FBSzJHLEtBQVVBLEtBR3hCWSxFQUFvQixHQUN2Q2dCLElBQVNoQixFQUFvQnJFLEVBQU9xRSxJQUl4Qy9ILEVBQVcrSCxFQUFrQm5DLEtBQ2hDd0QsRUFBU3JCLEVBQW1CbkMsR0FBVSxXQUNwQyxPQUFPM0UsUUFJWGpELEVBQU9DLFFBQVUsQ0FDZjhKLGtCQUFtQkEsRUFDbkIyQix1QkFBd0JBLGNDOUMxQjFMLEVBQU9DLFFBQVUsb0JDQWpCLElBQUk0VyxFQUFXLEVBQVEsT0FJdkI3VyxFQUFPQyxRQUFVLFNBQVU2VyxHQUN6QixPQUFPRCxFQUFTQyxFQUFJMVQsMEJDTHRCLElBaUJJMlQsRUFBT0MsRUFBTUMsRUFBTUMsRUFBUUMsRUFBUUMsRUFBTUMsRUFBU0MsRUFqQmxEdlYsRUFBUyxFQUFRLE9BQ2pCcEIsRUFBTyxFQUFRLE9BQ2ZnSixFQUEyQixXQUMzQjROLEVBQVksYUFDWkMsRUFBUyxFQUFRLE9BQ2pCQyxFQUFnQixFQUFRLE1BQ3hCQyxFQUFrQixFQUFRLE9BQzFCQyxFQUFVLEVBQVEsTUFFbEJDLEVBQW1CN1YsRUFBTzZWLGtCQUFvQjdWLEVBQU84Vix1QkFDckQzSyxFQUFXbkwsRUFBT21MLFNBQ2xCc0MsRUFBVXpOLEVBQU95TixRQUNqQjdOLEVBQVVJLEVBQU9KLFFBRWpCbVcsRUFBMkJuTyxFQUF5QjVILEVBQVEsa0JBQzVEZ1csRUFBaUJELEdBQTRCQSxFQUF5QmxVLE1BS3JFbVUsSUFDSGhCLEVBQVEsV0FDTixJQUFJN1csRUFBUXVILEVBRVosSUFESWtRLElBQVl6WCxFQUFTc1AsRUFBUXdJLFNBQVM5WCxFQUFPK1gsT0FDMUNqQixHQUFNLENBQ1h2UCxFQUFLdVAsRUFBS3ZQLEdBQ1Z1UCxFQUFPQSxFQUFLclQsS0FDWixJQUNFOEQsSUFDQSxNQUFPRSxHQUdQLE1BRklxUCxFQUFNRSxJQUNMRCxPQUFPM1QsRUFDTnFFLEdBRVJzUCxPQUFPM1QsRUFDTHBELEdBQVFBLEVBQU9nWSxTQUtoQlYsR0FBV0csR0FBWUQsSUFBbUJFLElBQW9CMUssR0FRdkR1SyxHQUFpQjlWLEdBQVdBLEVBQVF3VyxVQUU5Q2QsRUFBVTFWLEVBQVF3VyxhQUFRN1UsSUFFbEJvRCxZQUFjL0UsRUFDdEIyVixFQUFPM1csRUFBSzBXLEVBQVFDLEtBQU1ELEdBQzFCSCxFQUFTLFdBQ1BJLEVBQUtQLEtBR0VZLEVBQ1RULEVBQVMsV0FDUDFILEVBQVE0SSxTQUFTckIsS0FVbkJRLEVBQVk1VyxFQUFLNFcsRUFBV3hWLEdBQzVCbVYsRUFBUyxXQUNQSyxFQUFVUixNQS9CWkksR0FBUyxFQUNUQyxFQUFPbEssRUFBU21MLGVBQWUsSUFDL0IsSUFBSVQsRUFBaUJiLEdBQU91QixRQUFRbEIsRUFBTSxDQUFFbUIsZUFBZSxJQUMzRHJCLEVBQVMsV0FDUEUsRUFBS2hDLEtBQU8rQixHQUFVQSxLQWdDNUJuWCxFQUFPQyxRQUFVOFgsR0FBa0IsU0FBVXRRLEdBQzNDLElBQUkrUSxFQUFPLENBQUUvUSxHQUFJQSxFQUFJOUQsVUFBTUwsR0FDdkIyVCxJQUFNQSxFQUFLdFQsS0FBTzZVLEdBQ2pCeEIsSUFDSEEsRUFBT3dCLEVBQ1B0QixLQUNBRCxFQUFPdUIsb0JDbkZYLElBQUl6VyxFQUFTLEVBQVEsT0FFckIvQixFQUFPQyxRQUFVOEIsRUFBT0oseUJDRHhCLElBQUkyRSxFQUFhLEVBQVEsT0FDckJGLEVBQVEsRUFBUSxPQUdwQnBHLEVBQU9DLFVBQVlxQixPQUFPbVgsd0JBQTBCclMsR0FBTSxXQUN4RCxJQUFJc1MsRUFBUzlXLFNBR2IsT0FBUVMsT0FBT3FXLE1BQWFwWCxPQUFPb1gsYUFBbUI5VyxVQUVuREEsT0FBT0YsTUFBUTRFLEdBQWNBLEVBQWEsdUJDWC9DLElBQUl2RSxFQUFTLEVBQVEsT0FDakJDLEVBQWEsRUFBUSxPQUNyQnVSLEVBQWdCLEVBQVEsT0FFeEJTLEVBQVVqUyxFQUFPaVMsUUFFckJoVSxFQUFPQyxRQUFVK0IsRUFBV2dTLElBQVksY0FBYzdLLEtBQUtvSyxFQUFjUyxrQ0NMekUsSUFBSW5DLEVBQVksRUFBUSxPQUVwQjhHLEVBQW9CLFNBQVV0UixHQUNoQyxJQUFJOFEsRUFBU1MsRUFDYjNWLEtBQUtvVSxRQUFVLElBQUloUSxHQUFFLFNBQVV3UixFQUFXQyxHQUN4QyxRQUFnQnhWLElBQVo2VSxRQUFvQzdVLElBQVhzVixFQUFzQixNQUFNMVcsVUFBVSwyQkFDbkVpVyxFQUFVVSxFQUNWRCxFQUFTRSxLQUVYN1YsS0FBS2tWLFFBQVV0RyxFQUFVc0csR0FDekJsVixLQUFLMlYsT0FBUy9HLEVBQVUrRyxJQUsxQjVZLEVBQU9DLFFBQVE2QixFQUFJLFNBQVV1RixHQUMzQixPQUFPLElBQUlzUixFQUFrQnRSLHFCQ2pCL0IsSUFBSWUsRUFBVyxFQUFRLE9BRXZCcEksRUFBT0MsUUFBVSxTQUFVa0MsRUFBVTRXLEdBQ25DLFlBQW9CelYsSUFBYm5CLEVBQXlCZ0IsVUFBVUMsT0FBUyxFQUFJLEdBQUsyVixFQUFXM1EsRUFBU2pHLHFCQ0ZsRixJQW1ESTZXLEVBbkRBelIsRUFBVyxFQUFRLE9BQ25CMFIsRUFBeUIsRUFBUSxPQUNqQ0MsRUFBYyxFQUFRLE9BQ3RCcEYsRUFBYSxFQUFRLE9BQ3JCcUYsRUFBTyxFQUFRLE9BQ2ZDLEVBQXdCLEVBQVEsT0FPaENDLEVBTlksRUFBUSxNQU1UeEYsQ0FBVSxZQUVyQnlGLEVBQW1CLGFBRW5CQyxFQUFZLFNBQVVDLEdBQ3hCLE1BQU9DLFdBQW1CRCxFQUFuQkMsY0FJTEMsRUFBNEIsU0FBVVYsR0FDeENBLEVBQWdCVyxNQUFNSixFQUFVLEtBQ2hDUCxFQUFnQlksUUFDaEIsSUFBSUMsRUFBT2IsRUFBZ0JjLGFBQWF4WSxPQUV4QyxPQURBMFgsRUFBa0IsS0FDWGEsR0EwQkxFLEVBQWtCLFdBQ3BCLElBQ0VmLEVBQWtCLElBQUlnQixjQUFjLFlBQ3BDLE1BQU9yUyxJQXpCb0IsSUFJekJzUyxFQUZBQyxFQXdCSkgsRUFBcUMsb0JBQVo3TSxTQUNyQkEsU0FBUzhLLFFBQVVnQixFQUNqQlUsRUFBMEJWLEtBMUI1QmtCLEVBQVNkLEVBQXNCLFdBRzVCZSxNQUFNQyxRQUFVLE9BQ3ZCakIsRUFBS2tCLFlBQVlILEdBRWpCQSxFQUFPSSxJQUFNalksT0FMSixnQkFNVDRYLEVBQWlCQyxFQUFPSyxjQUFjck4sVUFDdkJzTixPQUNmUCxFQUFlTixNQUFNSixFQUFVLHNCQUMvQlUsRUFBZUwsUUFDUkssRUFBZXBRLEdBaUJsQjZQLEVBQTBCVixHQUU5QixJQURBLElBQUk1VixFQUFTOFYsRUFBWTlWLE9BQ2xCQSxZQUFpQjJXLEVBQXlCLFVBQUViLEVBQVk5VixJQUMvRCxPQUFPMlcsS0FHVGpHLEVBQVd1RixJQUFZLEVBSXZCclosRUFBT0MsUUFBVXFCLE9BQU9vRSxRQUFVLFNBQWdCM0MsRUFBRzBYLEdBQ25ELElBQUlqWCxFQVFKLE9BUFUsT0FBTlQsR0FDRnVXLEVBQTBCLFVBQUkvUixFQUFTeEUsR0FDdkNTLEVBQVMsSUFBSThWLEVBQ2JBLEVBQTBCLFVBQUksS0FFOUI5VixFQUFPNlYsR0FBWXRXLEdBQ2RTLEVBQVN1VyxTQUNNelcsSUFBZm1YLEVBQTJCalgsRUFBU3lWLEVBQXVCblgsRUFBRTBCLEVBQVFpWCxxQkNoRjlFLElBQUlsUSxFQUFjLEVBQVEsT0FDdEJtUSxFQUEwQixFQUFRLE9BQ2xDbFIsRUFBdUIsRUFBUSxPQUMvQmpDLEVBQVcsRUFBUSxPQUNuQnZELEVBQWtCLEVBQVEsT0FDMUIyVyxFQUFhLEVBQVEsT0FLekIxYSxFQUFRNkIsRUFBSXlJLElBQWdCbVEsRUFBMEJwWixPQUFPc1osaUJBQW1CLFNBQTBCN1gsRUFBRzBYLEdBQzNHbFQsRUFBU3hFLEdBTVQsSUFMQSxJQUlJdkIsRUFKQXFaLEVBQVE3VyxFQUFnQnlXLEdBQ3hCaGEsRUFBT2thLEVBQVdGLEdBQ2xCclgsRUFBUzNDLEVBQUsyQyxPQUNkVSxFQUFRLEVBRUxWLEVBQVNVLEdBQU8wRixFQUFxQjFILEVBQUVpQixFQUFHdkIsRUFBTWYsRUFBS3FELEtBQVUrVyxFQUFNclosSUFDNUUsT0FBT3VCLG9CQ2xCVCxJQUFJaEIsRUFBUyxFQUFRLE9BQ2pCd0ksRUFBYyxFQUFRLE9BQ3RCdVEsRUFBaUIsRUFBUSxNQUN6QkosRUFBMEIsRUFBUSxPQUNsQ25ULEVBQVcsRUFBUSxPQUNuQnFELEVBQWdCLEVBQVEsT0FFeEIxSSxFQUFZSCxFQUFPRyxVQUVuQjZZLEVBQWtCelosT0FBT0MsZUFFekJ5WixFQUE0QjFaLE9BQU9xSSx5QkFPdkMxSixFQUFRNkIsRUFBSXlJLEVBQWNtUSxFQUEwQixTQUF3QjNYLEVBQUcrUCxFQUFHbUksR0FJaEYsR0FIQTFULEVBQVN4RSxHQUNUK1AsRUFBSWxJLEVBQWNrSSxHQUNsQnZMLEVBQVMwVCxHQUNRLG1CQUFObFksR0FBMEIsY0FBTitQLEdBQXFCLFVBQVdtSSxHQVJsRCxhQVE0RUEsSUFBZUEsRUFBbUIsU0FBRyxDQUM1SCxJQUFJQyxFQUFVRixFQUEwQmpZLEVBQUcrUCxHQUN2Q29JLEdBQVdBLEVBQWdCLFdBQzdCblksRUFBRStQLEdBQUttSSxFQUFXclgsTUFDbEJxWCxFQUFhLENBQ1h2USxhQWRXLGlCQWNtQnVRLEVBQWFBLEVBQXVCLGFBQUlDLEVBQW9CLGFBQzFGelEsV0FoQlMsZUFnQmlCd1EsRUFBYUEsRUFBcUIsV0FBSUMsRUFBa0IsV0FDbEZ2USxVQUFVLElBR2QsT0FBT29RLEVBQWdCaFksRUFBRytQLEVBQUdtSSxJQUM3QkYsRUFBa0IsU0FBd0JoWSxFQUFHK1AsRUFBR21JLEdBSWxELEdBSEExVCxFQUFTeEUsR0FDVCtQLEVBQUlsSSxFQUFja0ksR0FDbEJ2TCxFQUFTMFQsR0FDTEgsRUFBZ0IsSUFDbEIsT0FBT0MsRUFBZ0JoWSxFQUFHK1AsRUFBR21JLEdBQzdCLE1BQU90VCxJQUNULEdBQUksUUFBU3NULEdBQWMsUUFBU0EsRUFBWSxNQUFNL1ksRUFBVSwyQkFFaEUsTUFESSxVQUFXK1ksSUFBWWxZLEVBQUUrUCxHQUFLbUksRUFBV3JYLE9BQ3RDYixvQkMxQ1QsSUFBSXdILEVBQWMsRUFBUSxPQUN0Qi9ILEVBQU8sRUFBUSxPQUNmMlksRUFBNkIsRUFBUSxPQUNyQ25SLEVBQTJCLEVBQVEsT0FDbkNoRyxFQUFrQixFQUFRLE9BQzFCNEcsRUFBZ0IsRUFBUSxPQUN4QnZCLEVBQVMsRUFBUSxPQUNqQnlSLEVBQWlCLEVBQVEsTUFHekJFLEVBQTRCMVosT0FBT3FJLHlCQUl2QzFKLEVBQVE2QixFQUFJeUksRUFBY3lRLEVBQTRCLFNBQWtDalksRUFBRytQLEdBR3pGLEdBRkEvUCxFQUFJaUIsRUFBZ0JqQixHQUNwQitQLEVBQUlsSSxFQUFja0ksR0FDZGdJLEVBQWdCLElBQ2xCLE9BQU9FLEVBQTBCalksRUFBRytQLEdBQ3BDLE1BQU9uTCxJQUNULEdBQUkwQixFQUFPdEcsRUFBRytQLEdBQUksT0FBTzlJLEdBQTBCeEgsRUFBSzJZLEVBQTJCclosRUFBR2lCLEVBQUcrUCxHQUFJL1AsRUFBRStQLG9CQ25CakcsSUFBSXZELEVBQVUsRUFBUSxPQUNsQnZMLEVBQWtCLEVBQVEsT0FDMUJvWCxFQUF1QixXQUN2QnJKLEVBQWEsRUFBUSxPQUVyQnNKLEVBQStCLGlCQUFWak0sUUFBc0JBLFFBQVU5TixPQUFPZ2Esb0JBQzVEaGEsT0FBT2dhLG9CQUFvQmxNLFFBQVUsR0FXekNwUCxFQUFPQyxRQUFRNkIsRUFBSSxTQUE2QlgsR0FDOUMsT0FBT2thLEdBQThCLFVBQWY5TCxFQUFRcE8sR0FWWCxTQUFVQSxHQUM3QixJQUNFLE9BQU9pYSxFQUFxQmphLEdBQzVCLE1BQU93RyxHQUNQLE9BQU9vSyxFQUFXc0osSUFPaEJFLENBQWVwYSxHQUNmaWEsRUFBcUJwWCxFQUFnQjdDLHNCQ3JCM0MsSUFBSXFhLEVBQXFCLEVBQVEsT0FHN0IxSCxFQUZjLEVBQVEsT0FFR3RULE9BQU8sU0FBVSxhQUs5Q1AsRUFBUTZCLEVBQUlSLE9BQU9nYSxxQkFBdUIsU0FBNkJ2WSxHQUNyRSxPQUFPeVksRUFBbUJ6WSxFQUFHK1EsbUJDUi9CN1QsRUFBUTZCLEVBQUlSLE9BQU9tWCxxQ0NEbkIsSUFBSTFXLEVBQVMsRUFBUSxPQUNqQnNILEVBQVMsRUFBUSxPQUNqQnJILEVBQWEsRUFBUSxPQUNyQlMsRUFBVyxFQUFRLE9BQ25Cb1IsRUFBWSxFQUFRLE9BQ3BCNEgsRUFBMkIsRUFBUSxPQUVuQ3BDLEVBQVd4RixFQUFVLFlBQ3JCdlMsRUFBU1MsRUFBT1QsT0FDaEJvYSxFQUFrQnBhLEVBQU9KLFVBSTdCbEIsRUFBT0MsUUFBVXdiLEVBQTJCbmEsRUFBT3dJLGVBQWlCLFNBQVUvRyxHQUM1RSxJQUFJb0YsRUFBUzFGLEVBQVNNLEdBQ3RCLEdBQUlzRyxFQUFPbEIsRUFBUWtSLEdBQVcsT0FBT2xSLEVBQU9rUixHQUM1QyxJQUFJM1MsRUFBY3lCLEVBQU96QixZQUN6QixPQUFJMUUsRUFBVzBFLElBQWdCeUIsYUFBa0J6QixFQUN4Q0EsRUFBWXhGLFVBQ1ppSCxhQUFrQjdHLEVBQVNvYSxFQUFrQixzQkNuQnhELElBQUlqWCxFQUFjLEVBQVEsT0FFMUJ6RSxFQUFPQyxRQUFVd0UsRUFBWSxHQUFHM0QsZ0NDRmhDLElBQUkyRCxFQUFjLEVBQVEsT0FDdEI0RSxFQUFTLEVBQVEsT0FDakJyRixFQUFrQixFQUFRLE9BQzFCUSxFQUFVLGlCQUNWc1AsRUFBYSxFQUFRLE9BRXJCbFAsRUFBT0gsRUFBWSxHQUFHRyxNQUUxQjVFLEVBQU9DLFFBQVUsU0FBVWtJLEVBQVF3VCxHQUNqQyxJQUdJbmEsRUFIQXVCLEVBQUlpQixFQUFnQm1FLEdBQ3BCeUIsRUFBSSxFQUNKcEcsRUFBUyxHQUViLElBQUtoQyxLQUFPdUIsR0FBSXNHLEVBQU95SyxFQUFZdFMsSUFBUTZILEVBQU90RyxFQUFHdkIsSUFBUW9ELEVBQUtwQixFQUFRaEMsR0FFMUUsS0FBT21hLEVBQU12WSxPQUFTd0csR0FBT1AsRUFBT3RHLEVBQUd2QixFQUFNbWEsRUFBTS9SLFNBQ2hEcEYsRUFBUWhCLEVBQVFoQyxJQUFRb0QsRUFBS3BCLEVBQVFoQyxJQUV4QyxPQUFPZ0Msb0JDbEJULElBQUlnWSxFQUFxQixFQUFRLE9BQzdCdEMsRUFBYyxFQUFRLE9BSzFCbFosRUFBT0MsUUFBVXFCLE9BQU9iLE1BQVEsU0FBY3NDLEdBQzVDLE9BQU95WSxFQUFtQnpZLEVBQUdtVyxnQ0NOL0IsSUFBSTBDLEVBQXdCLEdBQUd4SSxxQkFFM0J6SixFQUEyQnJJLE9BQU9xSSx5QkFHbENrUyxFQUFjbFMsSUFBNkJpUyxFQUFzQnBaLEtBQUssQ0FBRSxFQUFHLEdBQUssR0FJcEZ2QyxFQUFRNkIsRUFBSStaLEVBQWMsU0FBOEJoSixHQUN0RCxJQUFJN0IsRUFBYXJILEVBQXlCMUcsS0FBTTRQLEdBQ2hELFFBQVM3QixHQUFjQSxFQUFXdkcsWUFDaENtUixtQkNaSixJQUFJblgsRUFBYyxFQUFRLE9BQ3RCOEMsRUFBVyxFQUFRLE9BQ25CdVUsRUFBcUIsRUFBUSxPQU1qQzliLEVBQU9DLFFBQVVxQixPQUFPNEosaUJBQW1CLGFBQWUsR0FBSyxXQUM3RCxJQUVJNlEsRUFGQUMsR0FBaUIsRUFDakI3UyxFQUFPLEdBRVgsS0FFRTRTLEVBQVN0WCxFQUFZbkQsT0FBT3FJLHlCQUF5QnJJLE9BQU9KLFVBQVcsYUFBYXVTLE1BQzdFdEssRUFBTSxJQUNiNlMsRUFBaUI3UyxhQUFnQi9JLE1BQ2pDLE1BQU91SCxJQUNULE9BQU8sU0FBd0I1RSxFQUFHK0osR0FLaEMsT0FKQXZGLEVBQVN4RSxHQUNUK1ksRUFBbUJoUCxHQUNma1AsRUFBZ0JELEVBQU9oWixFQUFHK0osR0FDekIvSixFQUFFa1osVUFBWW5QLEVBQ1ovSixHQWZvRCxRQWlCekRPLGlDQ3pCTixJQUFJZ0YsRUFBd0IsRUFBUSxPQUNoQ2lILEVBQVUsRUFBUSxNQUl0QnZQLEVBQU9DLFFBQVVxSSxFQUF3QixHQUFHRixTQUFXLFdBQ3JELE1BQU8sV0FBYW1ILEVBQVF0TSxNQUFRLHNCQ1B0QyxJQUFJbEIsRUFBUyxFQUFRLE9BQ2pCUyxFQUFPLEVBQVEsT0FDZlIsRUFBYSxFQUFRLE9BQ3JCTyxFQUFXLEVBQVEsT0FFbkJMLEVBQVlILEVBQU9HLFVBSXZCbEMsRUFBT0MsUUFBVSxTQUFVaWMsRUFBT0MsR0FDaEMsSUFBSTFVLEVBQUkyVSxFQUNSLEdBQWEsV0FBVEQsR0FBcUJuYSxFQUFXeUYsRUFBS3lVLEVBQU05VCxZQUFjN0YsRUFBUzZaLEVBQU01WixFQUFLaUYsRUFBSXlVLElBQVMsT0FBT0UsRUFDckcsR0FBSXBhLEVBQVd5RixFQUFLeVUsRUFBTUcsV0FBYTlaLEVBQVM2WixFQUFNNVosRUFBS2lGLEVBQUl5VSxJQUFTLE9BQU9FLEVBQy9FLEdBQWEsV0FBVEQsR0FBcUJuYSxFQUFXeUYsRUFBS3lVLEVBQU05VCxZQUFjN0YsRUFBUzZaLEVBQU01WixFQUFLaUYsRUFBSXlVLElBQVMsT0FBT0UsRUFDckcsTUFBTWxhLEVBQVUsNkRDZGxCLElBQUl1TixFQUFhLEVBQVEsS0FDckJoTCxFQUFjLEVBQVEsT0FDdEI2WCxFQUE0QixFQUFRLE9BQ3BDQyxFQUE4QixFQUFRLE9BQ3RDaFYsRUFBVyxFQUFRLE9BRW5CL0csRUFBU2lFLEVBQVksR0FBR2pFLFFBRzVCUixFQUFPQyxRQUFVd1AsRUFBVyxVQUFXLFlBQWMsU0FBaUJ0TyxHQUNwRSxJQUFJVixFQUFPNmIsRUFBMEJ4YSxFQUFFeUYsRUFBU3BHLElBQzVDc1gsRUFBd0I4RCxFQUE0QnphLEVBQ3hELE9BQU8yVyxFQUF3QmpZLEVBQU9DLEVBQU1nWSxFQUFzQnRYLElBQU9WLGNDWjNFVCxFQUFPQyxRQUFVLGNDQWpCRCxFQUFPQyxRQUFVLFNBQVUrSCxHQUN6QixJQUNFLE1BQU8sQ0FBRUwsT0FBTyxFQUFPL0QsTUFBT29FLEtBQzlCLE1BQU9MLEdBQ1AsTUFBTyxDQUFFQSxPQUFPLEVBQU0vRCxNQUFPK0Qsc0JDSmpDLElBQUlKLEVBQVcsRUFBUSxPQUNuQmhGLEVBQVcsRUFBUSxPQUNuQmlhLEVBQXVCLEVBQVEsT0FFbkN4YyxFQUFPQyxRQUFVLFNBQVVvSCxFQUFHb1YsR0FFNUIsR0FEQWxWLEVBQVNGLEdBQ0w5RSxFQUFTa2EsSUFBTUEsRUFBRS9WLGNBQWdCVyxFQUFHLE9BQU9vVixFQUMvQyxJQUFJQyxFQUFvQkYsRUFBcUIxYSxFQUFFdUYsR0FHL0MsT0FEQThRLEVBRGN1RSxFQUFrQnZFLFNBQ3hCc0UsR0FDREMsRUFBa0JyRixvQkNWM0IsSUFBSXNGLEVBQVEsV0FDVjFaLEtBQUsrVCxLQUFPLEtBQ1ovVCxLQUFLMlosS0FBTyxNQUdkRCxFQUFNemIsVUFBWSxDQUNoQjJiLElBQUssU0FBVUMsR0FDYixJQUFJQyxFQUFRLENBQUVELEtBQU1BLEVBQU1uWixLQUFNLE1BQzVCVixLQUFLK1QsS0FBTS9ULEtBQUsyWixLQUFLalosS0FBT29aLEVBQzNCOVosS0FBSytULEtBQU8rRixFQUNqQjlaLEtBQUsyWixLQUFPRyxHQUVkOVAsSUFBSyxXQUNILElBQUk4UCxFQUFROVosS0FBSytULEtBQ2pCLEdBQUkrRixFQUdGLE9BRkE5WixLQUFLK1QsS0FBTytGLEVBQU1wWixLQUNkVixLQUFLMlosT0FBU0csSUFBTzlaLEtBQUsyWixLQUFPLE1BQzlCRyxFQUFNRCxPQUtuQjljLEVBQU9DLFFBQVUwYyxtQkN0QmpCLElBQUl2UixFQUFXLEVBQVEsT0FFdkJwTCxFQUFPQyxRQUFVLFNBQVUwRixFQUFRMlUsRUFBSzdKLEdBQ3RDLElBQUssSUFBSWpQLEtBQU84WSxFQUNWN0osR0FBV0EsRUFBUXVNLFFBQVVyWCxFQUFPbkUsR0FBTW1FLEVBQU9uRSxHQUFPOFksRUFBSTlZLEdBQzNENEosRUFBU3pGLEVBQVFuRSxFQUFLOFksRUFBSTlZLEdBQU1pUCxHQUNyQyxPQUFPOUssb0JDTlgsSUFBSXdGLEVBQThCLEVBQVEsT0FFMUNuTCxFQUFPQyxRQUFVLFNBQVUwRixFQUFRbkUsRUFBS29DLEVBQU82TSxHQUN6Q0EsR0FBV0EsRUFBUWhHLFdBQVk5RSxFQUFPbkUsR0FBT29DLEVBQzVDdUgsRUFBNEJ4RixFQUFRbkUsRUFBS29DLHFCQ0poRCxJQUVJMUIsRUFGUyxFQUFRLE9BRUVBLFVBSXZCbEMsRUFBT0MsUUFBVSxTQUFVa0IsR0FDekIsR0FBVW1DLE1BQU5uQyxFQUFpQixNQUFNZSxFQUFVLHdCQUEwQmYsR0FDL0QsT0FBT0EsbUJDUlQsSUFBSVksRUFBUyxFQUFRLE9BR2pCUixFQUFpQkQsT0FBT0MsZUFFNUJ2QixFQUFPQyxRQUFVLFNBQVV1QixFQUFLb0MsR0FDOUIsSUFDRXJDLEVBQWVRLEVBQVFQLEVBQUssQ0FBRW9DLE1BQU9BLEVBQU84RyxjQUFjLEVBQU1DLFVBQVUsSUFDMUUsTUFBT2hELEdBQ1A1RixFQUFPUCxHQUFPb0MsRUFDZCxPQUFPQSxpQ0NUWCxJQUFJNkwsRUFBYSxFQUFRLEtBQ3JCakcsRUFBdUIsRUFBUSxPQUMvQm5ELEVBQWtCLEVBQVEsT0FDMUJrRSxFQUFjLEVBQVEsT0FFdEJoRSxFQUFVRixFQUFnQixXQUU5QnJHLEVBQU9DLFFBQVUsU0FBVWdkLEdBQ3pCLElBQUlDLEVBQWN6TixFQUFXd04sR0FDekIxYixFQUFpQmlJLEVBQXFCMUgsRUFFdEN5SSxHQUFlMlMsSUFBZ0JBLEVBQVkzVyxJQUM3Q2hGLEVBQWUyYixFQUFhM1csRUFBUyxDQUNuQ21FLGNBQWMsRUFDZHVDLElBQUssV0FBYyxPQUFPaEssMEJDZmhDLElBQUlxRixFQUF3QixFQUFRLE9BQ2hDL0csRUFBaUIsV0FDakI0SixFQUE4QixFQUFRLE9BQ3RDOUIsRUFBUyxFQUFRLE9BQ2pCakIsRUFBVyxFQUFRLE9BR25CSSxFQUZrQixFQUFRLE1BRVZuQyxDQUFnQixlQUVwQ3JHLEVBQU9DLFFBQVUsU0FBVWtCLEVBQUlnYyxFQUFLaE0sRUFBUWlNLEdBQzFDLEdBQUlqYyxFQUFJLENBQ04sSUFBSXdFLEVBQVN3TCxFQUFTaFEsRUFBS0EsRUFBR0QsVUFDekJtSSxFQUFPMUQsRUFBUTZDLElBQ2xCakgsRUFBZW9FLEVBQVE2QyxFQUFlLENBQUVrQyxjQUFjLEVBQU05RyxNQUFPdVosSUFFakVDLElBQWU5VSxHQUNqQjZDLEVBQTRCeEYsRUFBUSxXQUFZeUMsc0JDaEJ0RCxJQUFJd0wsRUFBUyxFQUFRLE9BQ2pCeUosRUFBTSxFQUFRLE9BRWQ1YyxFQUFPbVQsRUFBTyxRQUVsQjVULEVBQU9DLFFBQVUsU0FBVXVCLEdBQ3pCLE9BQU9mLEVBQUtlLEtBQVNmLEVBQUtlLEdBQU82YixFQUFJN2Isc0JDTnZDLElBQUlPLEVBQVMsRUFBUSxPQUNqQnViLEVBQVksRUFBUSxNQUVwQkMsRUFBUyxxQkFDVGxLLEVBQVF0UixFQUFPd2IsSUFBV0QsRUFBVUMsRUFBUSxJQUVoRHZkLEVBQU9DLFFBQVVvVCxtQkNOakIsSUFBSXRJLEVBQVUsRUFBUSxPQUNsQnNJLEVBQVEsRUFBUSxRQUVuQnJULEVBQU9DLFFBQVUsU0FBVXVCLEVBQUtvQyxHQUMvQixPQUFPeVAsRUFBTTdSLEtBQVM2UixFQUFNN1IsUUFBaUI4QixJQUFWTSxFQUFzQkEsRUFBUSxNQUNoRSxXQUFZLElBQUlnQixLQUFLLENBQ3RCK0ssUUFBUyxTQUNUNk4sS0FBTXpTLEVBQVUsT0FBUyxTQUN6QjBTLFVBQVcsNENBQ1hDLFFBQVMsMkRBQ1RqVSxPQUFRLHlEQ1ZWLElBQUlsQyxFQUFXLEVBQVEsT0FDbkJvVyxFQUFlLEVBQVEsS0FHdkJwWCxFQUZrQixFQUFRLE1BRWhCRixDQUFnQixXQUk5QnJHLEVBQU9DLFFBQVUsU0FBVThDLEVBQUc2YSxHQUM1QixJQUNJQyxFQURBeFcsRUFBSUUsRUFBU3hFLEdBQUcyRCxZQUVwQixZQUFhcEQsSUFBTitELEdBQWlEL0QsT0FBN0J1YSxFQUFJdFcsRUFBU0YsR0FBR2QsSUFBeUJxWCxFQUFxQkQsRUFBYUUscUJDWHhHLElBQUlwWixFQUFjLEVBQVEsT0FDdEJxWixFQUFzQixFQUFRLE9BQzlCMVYsRUFBVyxFQUFRLE9BQ25CMlYsRUFBeUIsRUFBUSxPQUVqQ0MsRUFBU3ZaLEVBQVksR0FBR3VaLFFBQ3hCQyxFQUFheFosRUFBWSxHQUFHd1osWUFDNUI1VixFQUFjNUQsRUFBWSxHQUFHL0QsT0FFN0J3RCxFQUFlLFNBQVVnYSxHQUMzQixPQUFPLFNBQVU5WixFQUFPK1osR0FDdEIsSUFHSUMsRUFBT0MsRUFIUFIsRUFBSXpWLEVBQVMyVixFQUF1QjNaLElBQ3BDa2EsRUFBV1IsRUFBb0JLLEdBQy9CSSxFQUFPVixFQUFFemEsT0FFYixPQUFJa2IsRUFBVyxHQUFLQSxHQUFZQyxFQUFhTCxFQUFvQixRQUFLNWEsR0FDdEU4YSxFQUFRSCxFQUFXSixFQUFHUyxJQUNQLE9BQVVGLEVBQVEsT0FBVUUsRUFBVyxJQUFNQyxJQUN0REYsRUFBU0osRUFBV0osRUFBR1MsRUFBVyxJQUFNLE9BQVVELEVBQVMsTUFDM0RILEVBQ0VGLEVBQU9ILEVBQUdTLEdBQ1ZGLEVBQ0ZGLEVBQ0U3VixFQUFZd1YsRUFBR1MsRUFBVUEsRUFBVyxHQUNWRCxFQUFTLE9BQWxDRCxFQUFRLE9BQVUsSUFBMEIsUUFJekRwZSxFQUFPQyxRQUFVLENBR2Z1ZSxPQUFRdGEsR0FBYSxHQUdyQjhaLE9BQVE5WixHQUFhLHFCQ2xDdkIsSUFzQkl1YSxFQUFVQyxFQUFPQyxFQUFTQyxFQXRCMUI3YyxFQUFTLEVBQVEsT0FDakJrTyxFQUFRLEVBQVEsT0FDaEJ0UCxFQUFPLEVBQVEsT0FDZnFCLEVBQWEsRUFBUSxPQUNyQnFILEVBQVMsRUFBUSxPQUNqQmpELEVBQVEsRUFBUSxPQUNoQitTLEVBQU8sRUFBUSxPQUNmcEgsRUFBYSxFQUFRLE9BQ3JCM0UsRUFBZ0IsRUFBUSxPQUN4Qm9LLEVBQVMsRUFBUSxPQUNqQkcsRUFBVSxFQUFRLE1BRWxCbEUsRUFBTTFSLEVBQU84YyxhQUNiQyxFQUFRL2MsRUFBT2dkLGVBQ2Z2UCxFQUFVek4sRUFBT3lOLFFBQ2pCd1AsRUFBV2pkLEVBQU9pZCxTQUNsQi9kLEVBQVdjLEVBQU9kLFNBQ2xCZ2UsRUFBaUJsZCxFQUFPa2QsZUFDeEI1YyxFQUFTTixFQUFPTSxPQUNoQjZjLEVBQVUsRUFDVkMsRUFBUSxHQUlaLElBRUVWLEVBQVcxYyxFQUFPMGMsU0FDbEIsTUFBTzlXLElBRVQsSUFBSXlYLEVBQU0sU0FBVUMsR0FDbEIsR0FBSWhXLEVBQU84VixFQUFPRSxHQUFLLENBQ3JCLElBQUk1WCxFQUFLMFgsRUFBTUUsVUFDUkYsRUFBTUUsR0FDYjVYLE1BSUE2WCxFQUFTLFNBQVVELEdBQ3JCLE9BQU8sV0FDTEQsRUFBSUMsS0FJSkUsRUFBVyxTQUFVQyxHQUN2QkosRUFBSUksRUFBTXBLLE9BR1JxSyxFQUFPLFNBQVVKLEdBRW5CdGQsRUFBTzJkLFlBQVlyZCxFQUFPZ2QsR0FBS1osRUFBU2tCLFNBQVcsS0FBT2xCLEVBQVNtQixPQUloRW5NLEdBQVFxTCxJQUNYckwsRUFBTSxTQUFzQmhNLEdBQzFCLElBQUkySyxFQUFPTCxFQUFXNU8sVUFBVyxHQUtqQyxPQUpBZ2MsSUFBUUQsR0FBVyxXQUNqQmpQLEVBQU1qTyxFQUFXeUYsR0FBTUEsRUFBS3hHLEVBQVN3RyxRQUFLbkUsRUFBVzhPLElBRXZEc00sRUFBTVEsR0FDQ0EsR0FFVEosRUFBUSxTQUF3Qk8sVUFDdkJGLEVBQU1FLElBR1gxSCxFQUNGK0csRUFBUSxTQUFVVyxHQUNoQjdQLEVBQVE0SSxTQUFTa0gsRUFBT0QsS0FHakJMLEdBQVlBLEVBQVNhLElBQzlCbkIsRUFBUSxTQUFVVyxHQUNoQkwsRUFBU2EsSUFBSVAsRUFBT0QsS0FJYkosSUFBbUJ6SCxHQUU1Qm9ILEdBREFELEVBQVUsSUFBSU0sR0FDQ2EsTUFDZm5CLEVBQVFvQixNQUFNQyxVQUFZVCxFQUMxQmIsRUFBUS9kLEVBQUtpZSxFQUFLYyxZQUFhZCxJQUkvQjdjLEVBQU9rZSxrQkFDUGplLEVBQVdELEVBQU8yZCxlQUNqQjNkLEVBQU9tZSxlQUNSekIsR0FBa0MsVUFBdEJBLEVBQVNrQixXQUNwQnZaLEVBQU1xWixJQUVQZixFQUFRZSxFQUNSMWQsRUFBT2tlLGlCQUFpQixVQUFXVixHQUFVLElBRzdDYixFQTFFcUIsdUJBeUVVdFIsRUFBYyxVQUNyQyxTQUFVaVMsR0FDaEJsRyxFQUFLa0IsWUFBWWpOLEVBQWMsV0FBNkIsbUJBQUksV0FDOUQrTCxFQUFLZ0gsWUFBWWxkLE1BQ2pCbWMsRUFBSUMsS0FLQSxTQUFVQSxHQUNoQmUsV0FBV2QsRUFBT0QsR0FBSyxLQUs3QnJmLEVBQU9DLFFBQVUsQ0FDZndULElBQUtBLEVBQ0xxTCxNQUFPQSxvQkMvR1QsSUFBSWhCLEVBQXNCLEVBQVEsT0FFOUJqWCxFQUFNQyxLQUFLRCxJQUNYd1osRUFBTXZaLEtBQUt1WixJQUtmcmdCLEVBQU9DLFFBQVUsU0FBVTZELEVBQU9WLEdBQ2hDLElBQUlrZCxFQUFVeEMsRUFBb0JoYSxHQUNsQyxPQUFPd2MsRUFBVSxFQUFJelosRUFBSXlaLEVBQVVsZCxFQUFRLEdBQUtpZCxFQUFJQyxFQUFTbGQscUJDVC9ELElBQUlzQixFQUFnQixFQUFRLE9BQ3hCcVosRUFBeUIsRUFBUSxPQUVyQy9kLEVBQU9DLFFBQVUsU0FBVWtCLEdBQ3pCLE9BQU91RCxFQUFjcVosRUFBdUI1YyxnQkNMOUMsSUFBSW9mLEVBQU96WixLQUFLeVosS0FDWkMsRUFBUTFaLEtBQUswWixNQUlqQnhnQixFQUFPQyxRQUFVLFNBQVVrQyxHQUN6QixJQUFJc2UsR0FBVXRlLEVBRWQsT0FBT3NlLEdBQVdBLEdBQXFCLElBQVhBLEVBQWUsR0FBS0EsRUFBUyxFQUFJRCxFQUFRRCxHQUFNRSxxQkNSN0UsSUFBSTNDLEVBQXNCLEVBQVEsT0FFOUJ1QyxFQUFNdlosS0FBS3VaLElBSWZyZ0IsRUFBT0MsUUFBVSxTQUFVa0MsR0FDekIsT0FBT0EsRUFBVyxFQUFJa2UsRUFBSXZDLEVBQW9CM2IsR0FBVyxrQkFBb0Isb0JDUC9FLElBQUlKLEVBQVMsRUFBUSxPQUNqQmdjLEVBQXlCLEVBQVEsT0FFakN6YyxFQUFTUyxFQUFPVCxPQUlwQnRCLEVBQU9DLFFBQVUsU0FBVWtDLEdBQ3pCLE9BQU9iLEVBQU95YyxFQUF1QjViLHNCQ1J2QyxJQUFJSixFQUFTLEVBQVEsT0FDakJTLEVBQU8sRUFBUSxPQUNmRCxFQUFXLEVBQVEsT0FDbkJtZSxFQUFXLEVBQVEsT0FDbkIvTixFQUFZLEVBQVEsT0FDcEJnTyxFQUFzQixFQUFRLE9BQzlCdGEsRUFBa0IsRUFBUSxPQUUxQm5FLEVBQVlILEVBQU9HLFVBQ25CMGUsRUFBZXZhLEVBQWdCLGVBSW5DckcsRUFBT0MsUUFBVSxTQUFVaWMsRUFBT0MsR0FDaEMsSUFBSzVaLEVBQVMyWixJQUFVd0UsRUFBU3hFLEdBQVEsT0FBT0EsRUFDaEQsSUFDSTFZLEVBREFxZCxFQUFlbE8sRUFBVXVKLEVBQU8wRSxHQUVwQyxHQUFJQyxFQUFjLENBR2hCLFFBRmF2ZCxJQUFUNlksSUFBb0JBLEVBQU8sV0FDL0IzWSxFQUFTaEIsRUFBS3FlLEVBQWMzRSxFQUFPQyxJQUM5QjVaLEVBQVNpQixJQUFXa2QsRUFBU2xkLEdBQVMsT0FBT0EsRUFDbEQsTUFBTXRCLEVBQVUsMkNBR2xCLFlBRGFvQixJQUFUNlksSUFBb0JBLEVBQU8sVUFDeEJ3RSxFQUFvQnpFLEVBQU9DLHFCQ3hCcEMsSUFBSTJFLEVBQWMsRUFBUSxPQUN0QkosRUFBVyxFQUFRLE9BSXZCMWdCLEVBQU9DLFFBQVUsU0FBVWtDLEdBQ3pCLElBQUlYLEVBQU1zZixFQUFZM2UsRUFBVSxVQUNoQyxPQUFPdWUsRUFBU2xmLEdBQU9BLEVBQU1BLEVBQU0scUJDUHJDLElBR0kySCxFQUFPLEdBRVhBLEVBTHNCLEVBQVEsTUFFVjlDLENBQWdCLGdCQUdkLElBRXRCckcsRUFBT0MsUUFBMkIsZUFBakJvQyxPQUFPOEcsb0JDUHhCLElBQUlwSCxFQUFTLEVBQVEsT0FDakJ3TixFQUFVLEVBQVEsTUFFbEJsTixFQUFTTixFQUFPTSxPQUVwQnJDLEVBQU9DLFFBQVUsU0FBVWtDLEdBQ3pCLEdBQTBCLFdBQXRCb04sRUFBUXBOLEdBQXdCLE1BQU1ELFVBQVUsNkNBQ3BELE9BQU9HLEVBQU9GLHFCQ1BoQixJQUVJRSxFQUZTLEVBQVEsT0FFREEsT0FFcEJyQyxFQUFPQyxRQUFVLFNBQVVrQyxHQUN6QixJQUNFLE9BQU9FLEVBQU9GLEdBQ2QsTUFBT3dGLEdBQ1AsTUFBTyw0QkNSWCxJQUFJbEQsRUFBYyxFQUFRLE9BRXRCNGEsRUFBSyxFQUNMMEIsRUFBVWphLEtBQUtrYSxTQUNmNVksRUFBVzNELEVBQVksR0FBSTJELFVBRS9CcEksRUFBT0MsUUFBVSxTQUFVdUIsR0FDekIsTUFBTyxnQkFBcUI4QixJQUFSOUIsRUFBb0IsR0FBS0EsR0FBTyxLQUFPNEcsSUFBV2lYLEVBQUswQixFQUFTLHNCQ050RixJQUFJRSxFQUFnQixFQUFRLE9BRTVCamhCLEVBQU9DLFFBQVVnaEIsSUFDWHJmLE9BQU9GLE1BQ2tCLGlCQUFuQkUsT0FBTzhCLDBCQ0xuQixJQUFJNkcsRUFBYyxFQUFRLE9BQ3RCbkUsRUFBUSxFQUFRLE9BSXBCcEcsRUFBT0MsUUFBVXNLLEdBQWVuRSxHQUFNLFdBRXBDLE9BR2dCLElBSFQ5RSxPQUFPQyxnQkFBZSxjQUE2QixZQUFhLENBQ3JFcUMsTUFBTyxHQUNQK0csVUFBVSxJQUNUekosOEJDVkwsSUFBSW1GLEVBQWtCLEVBQVEsT0FFOUJwRyxFQUFRNkIsRUFBSXVFLG1CQ0ZaLElBQUl0RSxFQUFTLEVBQVEsT0FDakI2UixFQUFTLEVBQVEsT0FDakJ2SyxFQUFTLEVBQVEsT0FDakJnVSxFQUFNLEVBQVEsT0FDZDRELEVBQWdCLEVBQVEsT0FDeEJ2TCxFQUFvQixFQUFRLE9BRTVCd0wsRUFBd0J0TixFQUFPLE9BQy9CaFMsRUFBU0csRUFBT0gsT0FDaEJ1ZixFQUFZdmYsR0FBVUEsRUFBWSxJQUNsQ3dmLEVBQXdCMUwsRUFBb0I5VCxFQUFTQSxHQUFVQSxFQUFPeWYsZUFBaUJoRSxFQUUzRnJkLEVBQU9DLFFBQVUsU0FBVTJNLEdBQ3pCLElBQUt2RCxFQUFPNlgsRUFBdUJ0VSxLQUFXcVUsR0FBdUQsaUJBQS9CQyxFQUFzQnRVLEdBQW9CLENBQzlHLElBQUkwVSxFQUFjLFVBQVkxVSxFQUMxQnFVLEdBQWlCNVgsRUFBT3pILEVBQVFnTCxHQUNsQ3NVLEVBQXNCdFUsR0FBUWhMLEVBQU9nTCxHQUVyQ3NVLEVBQXNCdFUsR0FEYjhJLEdBQXFCeUwsRUFDQUEsRUFBVUcsR0FFVkYsRUFBc0JFLEdBRXRELE9BQU9KLEVBQXNCdFUsa0NDckJqQyxJQUFJOUIsRUFBSSxFQUFRLE9BQ1ovSSxFQUFTLEVBQVEsT0FDakJqQixFQUFnQixFQUFRLE1BQ3hCZ0osRUFBaUIsRUFBUSxLQUN6Qm9CLEVBQWlCLEVBQVEsT0FDekJxVyxFQUE0QixFQUFRLE9BQ3BDN2IsRUFBUyxFQUFRLE9BQ2pCeUYsRUFBOEIsRUFBUSxPQUN0Q25CLEVBQTJCLEVBQVEsT0FDbkN3WCxFQUFrQixFQUFRLE9BQzFCQyxFQUFvQixFQUFRLE9BQzVCQyxFQUFVLEVBQVEsT0FDbEJDLEVBQTBCLEVBQVEsT0FDbEN0YixFQUFrQixFQUFRLE9BQzFCdWIsRUFBMEIsRUFBUSxPQUVsQ3BaLEVBQWdCbkMsRUFBZ0IsZUFDaEMwQyxFQUFRaEgsRUFBT2dILE1BQ2ZuRSxFQUFPLEdBQUdBLEtBRVZpZCxFQUFrQixTQUF3QkMsRUFBUUMsR0FDcEQsSUFFSXpjLEVBRkFtTCxFQUFVdE4sVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLEVBQ2hEMGUsRUFBYWxoQixFQUFjbWhCLEVBQXlCaGYsTUFFcERpSSxFQUNGNUYsRUFBTzRGLEVBQWUsSUFBSW5DLEVBQVNpWixFQUFhbFksRUFBZTdHLE1BQVFnZixJQUV2RTNjLEVBQU8wYyxFQUFhL2UsS0FBT3lDLEVBQU91YyxHQUNsQzlXLEVBQTRCN0YsRUFBTWtELEVBQWUsZUFFbkNsRixJQUFaeWUsR0FBdUI1VyxFQUE0QjdGLEVBQU0sVUFBV3FjLEVBQXdCSSxJQUM1RkgsR0FBeUJ6VyxFQUE0QjdGLEVBQU0sUUFBU2tjLEVBQWdCbGMsRUFBSzBELE1BQU8sSUFDcEd5WSxFQUFrQm5jLEVBQU1tTCxHQUN4QixJQUFJeVIsRUFBYyxHQUdsQixPQUZBUixFQUFRSSxFQUFRbGQsRUFBTSxDQUFFVSxLQUFNNGMsSUFDOUIvVyxFQUE0QjdGLEVBQU0sU0FBVTRjLEdBQ3JDNWMsR0FHTDRGLEVBQWdCQSxFQUFlMlcsRUFBaUI5WSxHQUMvQ3dZLEVBQTBCTSxFQUFpQjlZLEVBQU8sQ0FBRTZELE1BQU0sSUFFL0QsSUFBSXFWLEVBQTBCSixFQUFnQjNnQixVQUFZd0UsRUFBT3FELEVBQU03SCxVQUFXLENBQ2hGd0YsWUFBYXNELEVBQXlCLEVBQUc2WCxHQUN6Q0UsUUFBUy9YLEVBQXlCLEVBQUcsSUFDckM0QyxLQUFNNUMsRUFBeUIsRUFBRyxvQkFLcENjLEVBQUUsQ0FBRS9JLFFBQVEsR0FBUSxDQUNsQm9nQixlQUFnQk4sa0NDbkRsQixJQUFJL1csRUFBSSxFQUFRLE9BQ1ovSSxFQUFTLEVBQVEsT0FDakJxRSxFQUFRLEVBQVEsT0FDaEI5RixFQUFVLEVBQVEsTUFDbEJpQyxFQUFXLEVBQVEsT0FDbkJFLEVBQVcsRUFBUSxPQUNuQkcsRUFBb0IsRUFBUSxPQUM1QkMsRUFBaUIsRUFBUSxPQUN6QjhCLEVBQXFCLEVBQVEsT0FDN0J5ZCxFQUErQixFQUFRLE9BQ3ZDL2IsRUFBa0IsRUFBUSxPQUMxQkMsRUFBYSxFQUFRLE9BRXJCK2IsRUFBdUJoYyxFQUFnQixzQkFDdkNpYyxFQUFtQixpQkFDbkJDLEVBQWlDLGlDQUNqQ3JnQixFQUFZSCxFQUFPRyxVQUtuQnNnQixFQUErQmxjLEdBQWMsS0FBT0YsR0FBTSxXQUM1RCxJQUFJSyxFQUFRLEdBRVosT0FEQUEsRUFBTTRiLElBQXdCLEVBQ3ZCNWIsRUFBTWpHLFNBQVMsS0FBT2lHLEtBRzNCZ2MsRUFBa0JMLEVBQTZCLFVBRS9DTSxFQUFxQixTQUFVM2YsR0FDakMsSUFBS1IsRUFBU1EsR0FBSSxPQUFPLEVBQ3pCLElBQUk0ZixFQUFhNWYsRUFBRXNmLEdBQ25CLFlBQXNCL2UsSUFBZnFmLElBQTZCQSxFQUFhcmlCLEVBQVF5QyxJQVEzRCtILEVBQUUsQ0FBRW5GLE9BQVEsUUFBU21ILE9BQU8sRUFBTUMsUUFMcEJ5VixJQUFpQ0MsR0FLSyxDQUVsRGppQixPQUFRLFNBQWdCb2lCLEdBQ3RCLElBR0loWixFQUFHM0MsRUFBRzdELEVBQVF5ZixFQUFLQyxFQUhuQi9mLEVBQUlOLEVBQVNRLE1BQ2I4ZixFQUFJcGUsRUFBbUI1QixFQUFHLEdBQzFCb0UsRUFBSSxFQUVSLElBQUt5QyxHQUFLLEVBQUd4RyxFQUFTRCxVQUFVQyxPQUFRd0csRUFBSXhHLEVBQVF3RyxJQUVsRCxHQUFJOFksRUFESkksR0FBVyxJQUFQbFosRUFBVzdHLEVBQUlJLFVBQVV5RyxJQUNGLENBRXpCLEdBQUl6QyxHQURKMGIsRUFBTWpnQixFQUFrQmtnQixJQUNWUixFQUFrQixNQUFNcGdCLEVBQVVxZ0IsR0FDaEQsSUFBS3RiLEVBQUksRUFBR0EsRUFBSTRiLEVBQUs1YixJQUFLRSxJQUFTRixLQUFLNmIsR0FBR2pnQixFQUFla2dCLEVBQUc1YixFQUFHMmIsRUFBRTdiLFFBQzdELENBQ0wsR0FBSUUsR0FBS21iLEVBQWtCLE1BQU1wZ0IsRUFBVXFnQixHQUMzQzFmLEVBQWVrZ0IsRUFBRzViLElBQUsyYixHQUkzQixPQURBQyxFQUFFM2YsT0FBUytELEVBQ0o0YixzQkM1RFgsSUFBSWpZLEVBQUksRUFBUSxPQUNaekssRUFBTyxFQUFRLE9BVW5CeUssRUFBRSxDQUFFbkYsT0FBUSxRQUFTeUwsTUFBTSxFQUFNckUsUUFUQyxFQUFRLE1BRWZpVyxFQUE0QixTQUFVak4sR0FFL0QzVixNQUFNQyxLQUFLMFYsT0FLbUQsQ0FDOUQxVixLQUFNQSxxQkNaQSxFQUFRLE1BS2hCeUssQ0FBRSxDQUFFbkYsT0FBUSxRQUFTeUwsTUFBTSxHQUFRLENBQ2pDOVEsUUFMWSxFQUFRLHNDQ0F0QixJQUFJMEQsRUFBa0IsRUFBUSxPQUMxQmlmLEVBQW1CLEVBQVEsT0FDM0IvWSxFQUFZLEVBQVEsT0FDcEJnWixFQUFzQixFQUFRLE9BQzlCM2hCLEVBQWlCLFdBQ2pCNGhCLEVBQWlCLEVBQVEsT0FDekJwWSxFQUFVLEVBQVEsT0FDbEJSLEVBQWMsRUFBUSxPQUV0QjZZLEVBQWlCLGlCQUNqQkMsRUFBbUJILEVBQW9CelAsSUFDdkM2UCxFQUFtQkosRUFBb0J6TyxVQUFVMk8sR0FZckRwakIsRUFBT0MsUUFBVWtqQixFQUFlL2lCLE1BQU8sU0FBUyxTQUFVbWpCLEVBQVUvTSxHQUNsRTZNLEVBQWlCcGdCLEtBQU0sQ0FDckJ5UixLQUFNME8sRUFDTnpkLE9BQVEzQixFQUFnQnVmLEdBQ3hCemYsTUFBTyxFQUNQMFMsS0FBTUEsT0FJUCxXQUNELElBQUl2QyxFQUFRcVAsRUFBaUJyZ0IsTUFDekIwQyxFQUFTc08sRUFBTXRPLE9BQ2Y2USxFQUFPdkMsRUFBTXVDLEtBQ2IxUyxFQUFRbVEsRUFBTW5RLFFBQ2xCLE9BQUs2QixHQUFVN0IsR0FBUzZCLEVBQU92QyxRQUM3QjZRLEVBQU10TyxZQUFTckMsRUFDUixDQUFFTSxXQUFPTixFQUFXUyxNQUFNLElBRXZCLFFBQVJ5UyxFQUF1QixDQUFFNVMsTUFBT0UsRUFBT0MsTUFBTSxHQUNyQyxVQUFSeVMsRUFBeUIsQ0FBRTVTLE1BQU8rQixFQUFPN0IsR0FBUUMsTUFBTSxHQUNwRCxDQUFFSCxNQUFPLENBQUNFLEVBQU82QixFQUFPN0IsSUFBU0MsTUFBTSxLQUM3QyxVQUtILElBQUk4SSxFQUFTM0MsRUFBVXNaLFVBQVl0WixFQUFVOUosTUFRN0MsR0FMQTZpQixFQUFpQixRQUNqQkEsRUFBaUIsVUFDakJBLEVBQWlCLFlBR1psWSxHQUFXUixHQUErQixXQUFoQnNDLEVBQU9ELEtBQW1CLElBQ3ZEckwsRUFBZXNMLEVBQVEsT0FBUSxDQUFFakosTUFBTyxXQUN4QyxNQUFPK0QsbUNDM0RULElBQUltRCxFQUFJLEVBQVEsT0FDWi9JLEVBQVMsRUFBUSxPQUNqQnpCLEVBQVUsRUFBUSxNQUNsQjhCLEVBQWdCLEVBQVEsT0FDeEJHLEVBQVcsRUFBUSxPQUNuQjBCLEVBQWtCLEVBQVEsT0FDMUJyQixFQUFvQixFQUFRLE9BQzVCb0IsRUFBa0IsRUFBUSxPQUMxQm5CLEVBQWlCLEVBQVEsT0FDekJ3RCxFQUFrQixFQUFRLE9BQzFCK2IsRUFBK0IsRUFBUSxPQUN2Q3FCLEVBQVcsRUFBUSxPQUVuQkMsRUFBc0J0QixFQUE2QixTQUVuRDdiLEVBQVVGLEVBQWdCLFdBQzFCakcsRUFBUTJCLEVBQU8zQixNQUNmeUcsRUFBTUMsS0FBS0QsSUFLZmlFLEVBQUUsQ0FBRW5GLE9BQVEsUUFBU21ILE9BQU8sRUFBTUMsUUFBUzJXLEdBQXVCLENBQ2hFaGpCLE1BQU8sU0FBZXFHLEVBQU9DLEdBQzNCLElBS0lrVyxFQUFhMVosRUFBUTJELEVBTHJCcEUsRUFBSWlCLEVBQWdCZixNQUNwQkcsRUFBU1IsRUFBa0JHLEdBQzNCa0UsRUFBSWhELEVBQWdCOEMsRUFBTzNELEdBQzNCOEQsRUFBTWpELE9BQXdCWCxJQUFSMEQsRUFBb0I1RCxFQUFTNEQsRUFBSzVELEdBRzVELEdBQUk5QyxFQUFReUMsS0FDVm1hLEVBQWNuYSxFQUFFMkQsYUFFWnRFLEVBQWM4YSxLQUFpQkEsSUFBZ0I5YyxHQUFTRSxFQUFRNGMsRUFBWWhjLGFBRXJFcUIsRUFBUzJhLElBRUUsUUFEcEJBLEVBQWNBLEVBQVkzVyxPQUYxQjJXLE9BQWM1WixHQUtaNFosSUFBZ0I5YyxRQUF5QmtELElBQWhCNFosR0FDM0IsT0FBT3VHLEVBQVMxZ0IsRUFBR2tFLEVBQUdDLEdBSTFCLElBREExRCxFQUFTLFNBQXFCRixJQUFoQjRaLEVBQTRCOWMsRUFBUThjLEdBQWFyVyxFQUFJSyxFQUFNRCxFQUFHLElBQ3ZFRSxFQUFJLEVBQUdGLEVBQUlDLEVBQUtELElBQUtFLElBQVNGLEtBQUtsRSxHQUFHRixFQUFlVyxFQUFRMkQsRUFBR3BFLEVBQUVrRSxJQUV2RSxPQURBekQsRUFBT0osT0FBUytELEVBQ1QzRCxzQkMvQ1gsSUFBSXNILEVBQUksRUFBUSxPQUNabkssRUFBTyxFQUFRLE9BSW5CbUssRUFBRSxDQUFFbkYsT0FBUSxXQUFZbUgsT0FBTyxFQUFNQyxPQUFROUwsU0FBU04sT0FBU0EsR0FBUSxDQUNyRUEsS0FBTUEscUJDTlIsSUFBSW9CLEVBQVMsRUFBUSxPQUNBLEVBQVEsTUFJN0JrSSxDQUFlbEksRUFBTzRoQixLQUFNLFFBQVEsaUNDTHBDLElBQUk3WSxFQUFJLEVBQVEsT0FDWlAsRUFBYyxFQUFRLE9BQ3RCaEosRUFBaUIsV0FLckJ1SixFQUFFLENBQUVuRixPQUFRLFNBQVV5TCxNQUFNLEVBQU1yRSxPQUFRekwsT0FBT0MsaUJBQW1CQSxFQUFnQkcsTUFBTzZJLEdBQWUsQ0FDeEdoSixlQUFnQkEsOENDUGxCLElBQUl1SixFQUFJLEVBQVEsT0FDWnRJLEVBQU8sRUFBUSxPQUNmcVAsRUFBWSxFQUFRLE9BQ3BCK1IsRUFBNkIsRUFBUSxPQUNyQ0MsRUFBVSxFQUFRLE9BQ2xCbkMsRUFBVSxFQUFRLE9BSXRCNVcsRUFBRSxDQUFFbkYsT0FBUSxVQUFXeUwsTUFBTSxHQUFRLENBQ25DMFMsV0FBWSxTQUFvQi9OLEdBQzlCLElBQUkxTyxFQUFJcEUsS0FDSjhnQixFQUFhSCxFQUEyQjloQixFQUFFdUYsR0FDMUM4USxFQUFVNEwsRUFBVzVMLFFBQ3JCUyxFQUFTbUwsRUFBV25MLE9BQ3BCcFYsRUFBU3FnQixHQUFRLFdBQ25CLElBQUlHLEVBQWlCblMsRUFBVXhLLEVBQUU4USxTQUM3QnRMLEVBQVMsR0FDVHFTLEVBQVUsRUFDVitFLEVBQVksRUFDaEJ2QyxFQUFRM0wsR0FBVSxTQUFVc0IsR0FDMUIsSUFBSXZULEVBQVFvYixJQUNSZ0YsR0FBZ0IsRUFDcEJELElBQ0F6aEIsRUFBS3doQixFQUFnQjNjLEVBQUdnUSxHQUFTQyxNQUFLLFNBQVUxVCxHQUMxQ3NnQixJQUNKQSxHQUFnQixFQUNoQnJYLEVBQU8vSSxHQUFTLENBQUVxZ0IsT0FBUSxZQUFhdmdCLE1BQU9BLEtBQzVDcWdCLEdBQWE5TCxFQUFRdEwsT0FDdEIsU0FBVWxGLEdBQ1B1YyxJQUNKQSxHQUFnQixFQUNoQnJYLEVBQU8vSSxHQUFTLENBQUVxZ0IsT0FBUSxXQUFZQyxPQUFRemMsS0FDNUNzYyxHQUFhOUwsRUFBUXRMLFlBR3pCb1gsR0FBYTlMLEVBQVF0TCxNQUd6QixPQURJckosRUFBT21FLE9BQU9pUixFQUFPcFYsRUFBT0ksT0FDekJtZ0IsRUFBVzFNLHlDQ3ZDdEIsSUFBSXZNLEVBQUksRUFBUSxPQUNaK0csRUFBWSxFQUFRLE9BQ3BCcEMsRUFBYSxFQUFRLEtBQ3JCak4sRUFBTyxFQUFRLE9BQ2ZvaEIsRUFBNkIsRUFBUSxPQUNyQ0MsRUFBVSxFQUFRLE9BQ2xCbkMsRUFBVSxFQUFRLE9BRWxCMkMsRUFBb0IsMEJBSXhCdlosRUFBRSxDQUFFbkYsT0FBUSxVQUFXeUwsTUFBTSxHQUFRLENBQ25Da1QsSUFBSyxTQUFhdk8sR0FDaEIsSUFBSTFPLEVBQUlwRSxLQUNKa2YsRUFBaUIxUyxFQUFXLGtCQUM1QnNVLEVBQWFILEVBQTJCOWhCLEVBQUV1RixHQUMxQzhRLEVBQVU0TCxFQUFXNUwsUUFDckJTLEVBQVNtTCxFQUFXbkwsT0FDcEJwVixFQUFTcWdCLEdBQVEsV0FDbkIsSUFBSUcsRUFBaUJuUyxFQUFVeEssRUFBRThRLFNBQzdCMkosRUFBUyxHQUNUNUMsRUFBVSxFQUNWK0UsRUFBWSxFQUNaTSxHQUFrQixFQUN0QjdDLEVBQVEzTCxHQUFVLFNBQVVzQixHQUMxQixJQUFJdlQsRUFBUW9iLElBQ1JzRixHQUFrQixFQUN0QlAsSUFDQXpoQixFQUFLd2hCLEVBQWdCM2MsRUFBR2dRLEdBQVNDLE1BQUssU0FBVTFULEdBQzFDNGdCLEdBQW1CRCxJQUN2QkEsR0FBa0IsRUFDbEJwTSxFQUFRdlUsT0FDUCxTQUFVK0QsR0FDUDZjLEdBQW1CRCxJQUN2QkMsR0FBa0IsRUFDbEIxQyxFQUFPaGUsR0FBUzZELElBQ2RzYyxHQUFhckwsRUFBTyxJQUFJdUosRUFBZUwsRUFBUXVDLGFBR25ESixHQUFhckwsRUFBTyxJQUFJdUosRUFBZUwsRUFBUXVDLE9BR25ELE9BREk3Z0IsRUFBT21FLE9BQU9pUixFQUFPcFYsRUFBT0ksT0FDekJtZ0IsRUFBVzFNLHlDQzNDdEIsSUFBSXZNLEVBQUksRUFBUSxPQUNaQyxFQUFVLEVBQVEsT0FDbEIwWixFQUFnQixFQUFRLE9BQ3hCcmUsRUFBUSxFQUFRLE9BQ2hCcUosRUFBYSxFQUFRLEtBQ3JCek4sRUFBYSxFQUFRLE9BQ3JCMGlCLEVBQXFCLEVBQVEsT0FDN0JWLEVBQWlCLEVBQVEsT0FDekI1WSxFQUFXLEVBQVEsT0EwQnZCLEdBaEJBTixFQUFFLENBQUVuRixPQUFRLFVBQVdtSCxPQUFPLEVBQU00RSxNQUFNLEVBQU0zRSxTQVA1QjBYLEdBQWlCcmUsR0FBTSxXQUV6Q3FlLEVBQWN2akIsVUFBbUIsUUFBRXNCLEtBQUssQ0FBRThVLEtBQU0sZUFBK0IsbUJBS1YsQ0FDckUsUUFBVyxTQUFVcU4sR0FDbkIsSUFBSXRkLEVBQUlxZCxFQUFtQnpoQixLQUFNd00sRUFBVyxZQUN4Q21WLEVBQWE1aUIsRUFBVzJpQixHQUM1QixPQUFPMWhCLEtBQUtxVSxLQUNWc04sRUFBYSxTQUFVbkksR0FDckIsT0FBT3VILEVBQWUzYyxFQUFHc2QsS0FBYXJOLE1BQUssV0FBYyxPQUFPbUYsTUFDOURrSSxFQUNKQyxFQUFhLFNBQVVDLEdBQ3JCLE9BQU9iLEVBQWUzYyxFQUFHc2QsS0FBYXJOLE1BQUssV0FBYyxNQUFNdU4sTUFDN0RGLE9BTUw1WixHQUFXL0ksRUFBV3lpQixHQUFnQixDQUN6QyxJQUFJMWpCLEVBQVMwTyxFQUFXLFdBQVd2TyxVQUFtQixRQUNsRHVqQixFQUFjdmpCLFVBQW1CLFVBQU1ILEdBQ3pDcUssRUFBU3FaLEVBQWN2akIsVUFBVyxVQUFXSCxFQUFRLENBQUVpYyxRQUFRLG1DQ3JDbkUsSUEyREk4SCxFQUFVQyxFQUFzQkMsRUFBZ0JDLEVBM0RoRG5hLEVBQUksRUFBUSxPQUNaQyxFQUFVLEVBQVEsT0FDbEJoSixFQUFTLEVBQVEsT0FDakIwTixFQUFhLEVBQVEsS0FDckJqTixFQUFPLEVBQVEsT0FDZmlpQixFQUFnQixFQUFRLE9BQ3hCclosRUFBVyxFQUFRLE9BQ25COFosRUFBYyxFQUFRLE9BQ3RCaGEsRUFBaUIsRUFBUSxPQUN6QmpCLEVBQWlCLEVBQVEsT0FDekJrYixFQUFhLEVBQVEsT0FDckJ0VCxFQUFZLEVBQVEsT0FDcEI3UCxFQUFhLEVBQVEsT0FDckJPLEVBQVcsRUFBUSxPQUNuQjZpQixFQUFhLEVBQVEsTUFDckI3UixFQUFnQixFQUFRLE9BQ3hCbU8sRUFBVSxFQUFRLE9BQ2xCc0IsRUFBOEIsRUFBUSxPQUN0QzBCLEVBQXFCLEVBQVEsT0FDN0JsTSxFQUFPLGFBQ1A2TSxFQUFZLEVBQVEsT0FDcEJyQixFQUFpQixFQUFRLE9BQ3pCc0IsRUFBbUIsRUFBUSxPQUMzQjFCLEVBQTZCLEVBQVEsT0FDckNDLEVBQVUsRUFBUSxPQUNsQmxILEVBQVEsRUFBUSxPQUNoQnVHLEVBQXNCLEVBQVEsT0FDOUJoVCxFQUFXLEVBQVEsT0FDbkI3SixFQUFrQixFQUFRLE9BQzFCa2YsRUFBYSxFQUFRLE9BQ3JCNU4sRUFBVSxFQUFRLE1BQ2xCclIsRUFBYSxFQUFRLE9BRXJCQyxFQUFVRixFQUFnQixXQUMxQm1mLEVBQVUsVUFFVmxDLEVBQW1CSixFQUFvQnpPLFVBQVUrUSxHQUNqRG5DLEVBQW1CSCxFQUFvQnpQLElBQ3ZDZ1MsRUFBMEJ2QyxFQUFvQnpPLFVBQVUrUSxHQUN4REUsRUFBeUJqQixHQUFpQkEsRUFBY3ZqQixVQUN4RHlrQixFQUFxQmxCLEVBQ3JCbUIsRUFBbUJGLEVBQ25CeGpCLEVBQVlILEVBQU9HLFVBQ25CZ0wsRUFBV25MLEVBQU9tTCxTQUNsQnNDLEVBQVV6TixFQUFPeU4sUUFDakJnTixFQUF1Qm9ILEVBQTJCOWhCLEVBQ2xEK2pCLEVBQThCckosRUFFOUJzSixLQUFvQjVZLEdBQVlBLEVBQVM2WSxhQUFlaGtCLEVBQU9pa0IsZUFDL0RDLEVBQXlCamtCLEVBQVdELEVBQU9ta0IsdUJBQzNDQyxHQUFzQixxQkFPdEJDLElBQWMsRUFJZHBhLEdBQVNrRSxFQUFTc1YsR0FBUyxXQUM3QixJQUFJYSxFQUE2QjlTLEVBQWNvUyxHQUMzQ1csRUFBeUJELElBQStCaGtCLE9BQU9zakIsR0FJbkUsSUFBS1csR0FBeUMsS0FBZmhnQixFQUFtQixPQUFPLEVBRXpELEdBQUl5RSxJQUFZNmEsRUFBMEIsUUFBRyxPQUFPLEVBSXBELEdBQUl0ZixHQUFjLElBQU0sY0FBYzZDLEtBQUtrZCxHQUE2QixPQUFPLEVBRS9FLElBQUloUCxFQUFVLElBQUlzTyxHQUFtQixTQUFVeE4sR0FBV0EsRUFBUSxNQUM5RG9PLEVBQWMsU0FBVXZlLEdBQzFCQSxHQUFLLGVBQTZCLGdCQUtwQyxPQUhrQnFQLEVBQVEzUSxZQUFjLElBQzVCSCxHQUFXZ2dCLElBQ3ZCSCxHQUFjL08sRUFBUUMsTUFBSyx5QkFBd0NpUCxLQUczREQsR0FBMEJmLElBQWVVLEtBRy9DTyxHQUFzQnhhLEtBQVdnWCxHQUE0QixTQUFVak4sR0FDekU0UCxFQUFtQmMsSUFBSTFRLEdBQWlCLE9BQUUsa0JBSXhDMlEsR0FBYSxTQUFVdmxCLEdBQ3pCLElBQUltVyxFQUNKLFNBQU8vVSxFQUFTcEIsS0FBT2EsRUFBV3NWLEVBQU9uVyxFQUFHbVcsUUFBUUEsR0FHbERxUCxHQUFlLFNBQVVDLEVBQVUzUyxHQUNyQyxJQU1JelEsRUFBUThULEVBQU11UCxFQU5kampCLEVBQVFxUSxFQUFNclEsTUFDZGtqQixFQTlDVSxHQThDTDdTLEVBQU1BLE1BQ1g4UyxFQUFVRCxFQUFLRixFQUFTRSxHQUFLRixFQUFTSSxLQUN0QzdPLEVBQVV5TyxFQUFTek8sUUFDbkJTLEVBQVNnTyxFQUFTaE8sT0FDbEJaLEVBQVM0TyxFQUFTNU8sT0FFdEIsSUFDTStPLEdBQ0dELElBbkRLLElBb0RKN1MsRUFBTWdULFdBQXlCQyxHQUFrQmpULEdBQ3JEQSxFQUFNZ1QsVUF0REEsSUF3RFEsSUFBWkYsRUFBa0J2akIsRUFBU0ksR0FFekJvVSxHQUFRQSxFQUFPRSxRQUNuQjFVLEVBQVN1akIsRUFBUW5qQixHQUNib1UsSUFDRkEsRUFBT0MsT0FDUDRPLEdBQVMsSUFHVHJqQixJQUFXb2pCLEVBQVN2UCxRQUN0QnVCLEVBQU8xVyxFQUFVLHlCQUNSb1YsRUFBT29QLEdBQVdsakIsSUFDM0JoQixFQUFLOFUsRUFBTTlULEVBQVEyVSxFQUFTUyxHQUN2QlQsRUFBUTNVLElBQ1ZvVixFQUFPaFYsR0FDZCxNQUFPK0QsR0FDSHFRLElBQVc2TyxHQUFRN08sRUFBT0MsT0FDOUJXLEVBQU9qUixLQUlQdVAsR0FBUyxTQUFVakQsRUFBT2tULEdBQ3hCbFQsRUFBTW1ULFdBQ1ZuVCxFQUFNbVQsVUFBVyxFQUNqQi9CLEdBQVUsV0FHUixJQUZBLElBQ0l1QixFQURBUyxFQUFZcFQsRUFBTW9ULFVBRWZULEVBQVdTLEVBQVVwYSxPQUMxQjBaLEdBQWFDLEVBQVUzUyxHQUV6QkEsRUFBTW1ULFVBQVcsRUFDYkQsSUFBYWxULEVBQU1nVCxXQUFXSyxHQUFZclQsUUFJOUMrUixHQUFnQixTQUFVcFosRUFBTXlLLEVBQVMrTSxHQUMzQyxJQUFJNUUsRUFBT3VILEVBQ1BqQixJQUNGdEcsRUFBUXRTLEVBQVM2WSxZQUFZLFVBQ3ZCMU8sUUFBVUEsRUFDaEJtSSxFQUFNNEUsT0FBU0EsRUFDZjVFLEVBQU0rSCxVQUFVM2EsR0FBTSxHQUFPLEdBQzdCN0ssRUFBT2lrQixjQUFjeEcsSUFDaEJBLEVBQVEsQ0FBRW5JLFFBQVNBLEVBQVMrTSxPQUFRQSxJQUN0QzZCLElBQTJCYyxFQUFVaGxCLEVBQU8sS0FBTzZLLElBQVFtYSxFQUFRdkgsR0FDL0Q1UyxJQUFTdVosSUFBcUJiLEVBQWlCLDhCQUErQmxCLElBR3JGa0QsR0FBYyxTQUFVclQsR0FDMUJ6UixFQUFLZ1csRUFBTXpXLEdBQVEsV0FDakIsSUFHSXlCLEVBSEE2VCxFQUFVcEQsRUFBTUssT0FDaEIxUSxFQUFRcVEsRUFBTXJRLE1BR2xCLEdBRm1CNGpCLEdBQVl2VCxLQUc3QnpRLEVBQVNxZ0IsR0FBUSxXQUNYbE0sRUFDRm5JLEVBQVFpWSxLQUFLLHFCQUFzQjdqQixFQUFPeVQsR0FDckMyTyxHQUFjRyxHQUFxQjlPLEVBQVN6VCxNQUdyRHFRLEVBQU1nVCxVQUFZdFAsR0FBVzZQLEdBQVl2VCxHQXBIL0IsRUFERixFQXNISnpRLEVBQU9tRSxPQUFPLE1BQU1uRSxFQUFPSSxVQUtqQzRqQixHQUFjLFNBQVV2VCxHQUMxQixPQTVIWSxJQTRITEEsRUFBTWdULFlBQTBCaFQsRUFBTS9ULFFBRzNDZ25CLEdBQW9CLFNBQVVqVCxHQUNoQ3pSLEVBQUtnVyxFQUFNelcsR0FBUSxXQUNqQixJQUFJc1YsRUFBVXBELEVBQU1LLE9BQ2hCcUQsRUFDRm5JLEVBQVFpWSxLQUFLLG1CQUFvQnBRLEdBQzVCMk8sR0F4SWEsbUJBd0lvQjNPLEVBQVNwRCxFQUFNclEsV0FJdkRqRCxHQUFPLFNBQVU4RyxFQUFJd00sRUFBT3lULEdBQzlCLE9BQU8sU0FBVTlqQixHQUNmNkQsRUFBR3dNLEVBQU9yUSxFQUFPOGpCLEtBSWpCQyxHQUFpQixTQUFVMVQsRUFBT3JRLEVBQU84akIsR0FDdkN6VCxFQUFNbFEsT0FDVmtRLEVBQU1sUSxNQUFPLEVBQ1QyakIsSUFBUXpULEVBQVF5VCxHQUNwQnpULEVBQU1yUSxNQUFRQSxFQUNkcVEsRUFBTUEsTUFwSk8sRUFxSmJpRCxHQUFPakQsR0FBTyxLQUdaMlQsR0FBa0IsU0FBVTNULEVBQU9yUSxFQUFPOGpCLEdBQzVDLElBQUl6VCxFQUFNbFEsS0FBVixDQUNBa1EsRUFBTWxRLE1BQU8sRUFDVDJqQixJQUFRelQsRUFBUXlULEdBQ3BCLElBQ0UsR0FBSXpULEVBQU1LLFNBQVcxUSxFQUFPLE1BQU0xQixFQUFVLG9DQUM1QyxJQUFJb1YsRUFBT29QLEdBQVc5aUIsR0FDbEIwVCxFQUNGK04sR0FBVSxXQUNSLElBQUl3QyxFQUFVLENBQUU5akIsTUFBTSxHQUN0QixJQUNFdkIsRUFBSzhVLEVBQU0xVCxFQUNUakQsR0FBS2luQixHQUFpQkMsRUFBUzVULEdBQy9CdFQsR0FBS2duQixHQUFnQkUsRUFBUzVULElBRWhDLE1BQU90TSxHQUNQZ2dCLEdBQWVFLEVBQVNsZ0IsRUFBT3NNLFFBSW5DQSxFQUFNclEsTUFBUUEsRUFDZHFRLEVBQU1BLE1BOUtJLEVBK0tWaUQsR0FBT2pELEdBQU8sSUFFaEIsTUFBT3RNLEdBQ1BnZ0IsR0FBZSxDQUFFNWpCLE1BQU0sR0FBUzRELEVBQU9zTSxNQUszQyxHQUFJakksS0FhRjRaLEdBWEFELEVBQXFCLFNBQWlCbUMsR0FDcEMxQyxFQUFXbmlCLEtBQU0yaUIsR0FDakIvVCxFQUFVaVcsR0FDVnRsQixFQUFLc2lCLEVBQVU3aEIsTUFDZixJQUFJZ1IsRUFBUXFQLEVBQWlCcmdCLE1BQzdCLElBQ0U2a0IsRUFBU25uQixHQUFLaW5CLEdBQWlCM1QsR0FBUXRULEdBQUtnbkIsR0FBZ0IxVCxJQUM1RCxNQUFPdE0sR0FDUGdnQixHQUFlMVQsRUFBT3RNLE1BR1l6RyxXQUV0QzRqQixFQUFXLFNBQWlCZ0QsR0FDMUJ6RSxFQUFpQnBnQixLQUFNLENBQ3JCeVIsS0FBTThRLEVBQ056aEIsTUFBTSxFQUNOcWpCLFVBQVUsRUFDVmxuQixRQUFRLEVBQ1JtbkIsVUFBVyxJQUFJMUssRUFDZnNLLFdBQVcsRUFDWGhULE1BL01RLEVBZ05SclEsV0FBT04sTUFHRnBDLFVBQVlna0IsRUFBWVUsRUFBa0IsQ0FJakR0TyxLQUFNLFNBQWN5USxFQUFhQyxHQUMvQixJQUFJL1QsRUFBUXdSLEVBQXdCeGlCLE1BQ2hDMmpCLEVBQVdwSyxFQUFxQmtJLEVBQW1CemhCLEtBQU0waUIsSUFTN0QsT0FSQTFSLEVBQU0vVCxRQUFTLEVBQ2YwbUIsRUFBU0UsSUFBSzlrQixFQUFXK2xCLElBQWVBLEVBQ3hDbkIsRUFBU0ksS0FBT2hsQixFQUFXZ21CLElBQWVBLEVBQzFDcEIsRUFBUzVPLE9BQVNMLEVBQVVuSSxFQUFRd0ksWUFBUzFVLEVBN05yQyxHQThOSjJRLEVBQU1BLE1BQWtCQSxFQUFNb1QsVUFBVXhLLElBQUkrSixHQUMzQ3ZCLEdBQVUsV0FDYnNCLEdBQWFDLEVBQVUzUyxNQUVsQjJTLEVBQVN2UCxTQUlsQixNQUFTLFNBQVUyUSxHQUNqQixPQUFPL2tCLEtBQUtxVSxVQUFLaFUsRUFBVzBrQixNQUdoQ2pELEVBQXVCLFdBQ3JCLElBQUkxTixFQUFVLElBQUl5TixFQUNkN1EsRUFBUXFQLEVBQWlCak0sR0FDN0JwVSxLQUFLb1UsUUFBVUEsRUFDZnBVLEtBQUtrVixRQUFVeFgsR0FBS2luQixHQUFpQjNULEdBQ3JDaFIsS0FBSzJWLE9BQVNqWSxHQUFLZ25CLEdBQWdCMVQsSUFFckMyUCxFQUEyQjloQixFQUFJMGEsRUFBdUIsU0FBVW5WLEdBQzlELE9BQU9BLElBQU1zZSxHQUFzQnRlLElBQU0yZCxFQUNyQyxJQUFJRCxFQUFxQjFkLEdBQ3pCd2UsRUFBNEJ4ZSxLQUc3QjBELEdBQVcvSSxFQUFXeWlCLElBQWtCaUIsSUFBMkJwa0IsT0FBT0osV0FBVyxDQUN4RitqQixFQUFhUyxFQUF1QnBPLEtBRS9COE8sS0FFSGhiLEVBQVNzYSxFQUF3QixRQUFRLFNBQWNxQyxFQUFhQyxHQUNsRSxJQUFJMWlCLEVBQU9yQyxLQUNYLE9BQU8sSUFBSTBpQixHQUFtQixTQUFVeE4sRUFBU1MsR0FDL0NwVyxFQUFLeWlCLEVBQVkzZixFQUFNNlMsRUFBU1MsTUFDL0J0QixLQUFLeVEsRUFBYUMsS0FFcEIsQ0FBRWhMLFFBQVEsSUFHYjVSLEVBQVNzYSxFQUF3QixRQUFTRSxFQUF3QixNQUFHLENBQUU1SSxRQUFRLEtBSWpGLFdBQ1MwSSxFQUF1QmhmLFlBQzlCLE1BQU9pQixJQUdMdUQsR0FDRkEsRUFBZXdhLEVBQXdCRSxHQUs3QzlhLEVBQUUsQ0FBRS9JLFFBQVEsRUFBTTBQLE1BQU0sRUFBTTFFLE9BQVFmLElBQVUsQ0FDOUNySyxRQUFTZ2tCLElBR1gxYixFQUFlMGIsRUFBb0JILEdBQVMsR0FBTyxHQUNuREwsRUFBV0ssR0FFWFIsRUFBaUJ2VixFQUFXK1YsR0FHNUIxYSxFQUFFLENBQUVuRixPQUFRNmYsRUFBU3BVLE1BQU0sRUFBTXJFLE9BQVFmLElBQVUsQ0FHakQ0TSxPQUFRLFNBQWdCcVAsR0FDdEIsSUFBSWxFLEVBQWF2SCxFQUFxQnZaLE1BRXRDLE9BREFULEVBQUt1aEIsRUFBV25MLFlBQVF0VixFQUFXMmtCLEdBQzVCbEUsRUFBVzFNLFdBSXRCdk0sRUFBRSxDQUFFbkYsT0FBUTZmLEVBQVNwVSxNQUFNLEVBQU1yRSxPQUFRaEMsR0FBV2lCLElBQVUsQ0FHNURtTSxRQUFTLFNBQWlCc0UsR0FDeEIsT0FBT3VILEVBQWVqWixHQUFXOUgsT0FBUytoQixFQUFpQlcsRUFBcUIxaUIsS0FBTXdaLE1BSTFGM1IsRUFBRSxDQUFFbkYsT0FBUTZmLEVBQVNwVSxNQUFNLEVBQU1yRSxPQUFReVosSUFBdUIsQ0FHOURDLElBQUssU0FBYTFRLEdBQ2hCLElBQUkxTyxFQUFJcEUsS0FDSjhnQixFQUFhdkgsRUFBcUJuVixHQUNsQzhRLEVBQVU0TCxFQUFXNUwsUUFDckJTLEVBQVNtTCxFQUFXbkwsT0FDcEJwVixFQUFTcWdCLEdBQVEsV0FDbkIsSUFBSXFFLEVBQWtCclcsRUFBVXhLLEVBQUU4USxTQUM5QnRMLEVBQVMsR0FDVHFTLEVBQVUsRUFDVitFLEVBQVksRUFDaEJ2QyxFQUFRM0wsR0FBVSxTQUFVc0IsR0FDMUIsSUFBSXZULEVBQVFvYixJQUNSZ0YsR0FBZ0IsRUFDcEJELElBQ0F6aEIsRUFBSzBsQixFQUFpQjdnQixFQUFHZ1EsR0FBU0MsTUFBSyxTQUFVMVQsR0FDM0NzZ0IsSUFDSkEsR0FBZ0IsRUFDaEJyWCxFQUFPL0ksR0FBU0YsSUFDZHFnQixHQUFhOUwsRUFBUXRMLE1BQ3RCK0wsUUFFSHFMLEdBQWE5TCxFQUFRdEwsTUFHekIsT0FESXJKLEVBQU9tRSxPQUFPaVIsRUFBT3BWLEVBQU9JLE9BQ3pCbWdCLEVBQVcxTSxTQUlwQjhRLEtBQU0sU0FBY3BTLEdBQ2xCLElBQUkxTyxFQUFJcEUsS0FDSjhnQixFQUFhdkgsRUFBcUJuVixHQUNsQ3VSLEVBQVNtTCxFQUFXbkwsT0FDcEJwVixFQUFTcWdCLEdBQVEsV0FDbkIsSUFBSXFFLEVBQWtCclcsRUFBVXhLLEVBQUU4USxTQUNsQ3VKLEVBQVEzTCxHQUFVLFNBQVVzQixHQUMxQjdVLEVBQUswbEIsRUFBaUI3Z0IsRUFBR2dRLEdBQVNDLEtBQUt5TSxFQUFXNUwsUUFBU1MsU0FJL0QsT0FESXBWLEVBQU9tRSxPQUFPaVIsRUFBT3BWLEVBQU9JLE9BQ3pCbWdCLEVBQVcxTSxxREM5WXRCLElBQUkyRyxFQUFTLGdCQUNUNVYsRUFBVyxFQUFRLE9BQ25COGEsRUFBc0IsRUFBUSxPQUM5QkMsRUFBaUIsRUFBUSxPQUV6QmlGLEVBQWtCLGtCQUNsQi9FLEVBQW1CSCxFQUFvQnpQLElBQ3ZDNlAsRUFBbUJKLEVBQW9Cek8sVUFBVTJULEdBSXJEakYsRUFBZTlnQixPQUFRLFVBQVUsU0FBVWtoQixHQUN6Q0YsRUFBaUJwZ0IsS0FBTSxDQUNyQnlSLEtBQU0wVCxFQUNONVMsT0FBUXBOLEVBQVNtYixHQUNqQnpmLE1BQU8sT0FJUixXQUNELElBR0l1a0IsRUFIQXBVLEVBQVFxUCxFQUFpQnJnQixNQUN6QnVTLEVBQVN2QixFQUFNdUIsT0FDZjFSLEVBQVFtUSxFQUFNblEsTUFFbEIsT0FBSUEsR0FBUzBSLEVBQU9wUyxPQUFlLENBQUVRLFdBQU9OLEVBQVdTLE1BQU0sSUFDN0Rza0IsRUFBUXJLLEVBQU94SSxFQUFRMVIsR0FDdkJtUSxFQUFNblEsT0FBU3VrQixFQUFNamxCLE9BQ2QsQ0FBRVEsTUFBT3lrQixFQUFPdGtCLE1BQU0sdUJDNUJILEVBQVEsTUFJcEN1a0IsQ0FBc0IsK0NDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsZ0NDSk0sRUFBUSxNQUlwQ0EsQ0FBc0Isc0NDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsMENDSHRCLElBQUl4ZCxFQUFJLEVBQVEsT0FDWi9JLEVBQVMsRUFBUSxPQUNqQjBOLEVBQWEsRUFBUSxLQUNyQlEsRUFBUSxFQUFRLE9BQ2hCek4sRUFBTyxFQUFRLE9BQ2ZpQyxFQUFjLEVBQVEsT0FDdEJzRyxFQUFVLEVBQVEsT0FDbEJSLEVBQWMsRUFBUSxPQUN0QjBXLEVBQWdCLEVBQVEsT0FDeEI3YSxFQUFRLEVBQVEsT0FDaEJpRCxFQUFTLEVBQVEsT0FDakIvSSxFQUFVLEVBQVEsTUFDbEIwQixFQUFhLEVBQVEsT0FDckJPLEVBQVcsRUFBUSxPQUNuQnpCLEVBQWdCLEVBQVEsTUFDeEI0ZixFQUFXLEVBQVEsT0FDbkJuWixFQUFXLEVBQVEsT0FDbkI5RSxFQUFXLEVBQVEsT0FDbkJ1QixFQUFrQixFQUFRLE9BQzFCNEcsRUFBZ0IsRUFBUSxPQUN4QjJkLEVBQVksRUFBUSxPQUNwQnZlLEVBQTJCLEVBQVEsT0FDbkN3ZSxFQUFxQixFQUFRLE9BQzdCN04sRUFBYSxFQUFRLE9BQ3JCMkIsRUFBNEIsRUFBUSxPQUNwQ21NLEVBQThCLEVBQVEsS0FDdENsTSxFQUE4QixFQUFRLE9BQ3RDaFQsRUFBaUMsRUFBUSxPQUN6Q0MsRUFBdUIsRUFBUSxPQUMvQnlQLEVBQXlCLEVBQVEsT0FDakNrQyxFQUE2QixFQUFRLE9BQ3JDcEosRUFBYSxFQUFRLE9BQ3JCM0csRUFBVyxFQUFRLE9BQ25Cd0ksRUFBUyxFQUFRLE9BQ2pCQyxFQUFZLEVBQVEsT0FDcEJDLEVBQWEsRUFBUSxPQUNyQnVKLEVBQU0sRUFBUSxPQUNkaFgsRUFBa0IsRUFBUSxPQUMxQjJHLEVBQStCLEVBQVEsT0FDdkNzYixFQUF3QixFQUFRLE9BQ2hDcmUsRUFBaUIsRUFBUSxPQUN6QmlaLEVBQXNCLEVBQVEsT0FDOUJ3RixFQUFXLGdCQUVYQyxFQUFTOVUsRUFBVSxVQUNuQitVLEVBQVMsU0FFVGhJLEVBQWV2YSxFQUFnQixlQUUvQmdkLEVBQW1CSCxFQUFvQnpQLElBQ3ZDNlAsRUFBbUJKLEVBQW9Cek8sVUFBVW1VLEdBRWpEbE4sRUFBa0JwYSxPQUFnQixVQUNsQ3FVLEVBQVU1VCxFQUFPSCxPQUNqQmluQixFQUFrQmxULEdBQVdBLEVBQWlCLFVBQzlDelQsR0FBWUgsRUFBT0csVUFDbkI0bUIsR0FBVS9tQixFQUFPK21CLFFBQ2pCQyxHQUFhdFosRUFBVyxPQUFRLGFBQ2hDdVosR0FBaUN6ZixFQUErQnpILEVBQ2hFbW5CLEdBQXVCemYsRUFBcUIxSCxFQUM1Q29uQixHQUE0QlQsRUFBNEIzbUIsRUFDeERxbkIsR0FBNkJoTyxFQUEyQnJaLEVBQ3hEOEMsR0FBT0gsRUFBWSxHQUFHRyxNQUV0QndrQixHQUFheFYsRUFBTyxXQUNwQnlWLEdBQXlCelYsRUFBTyxjQUNoQzBWLEdBQXlCMVYsRUFBTyw2QkFDaEMyVixHQUF5QjNWLEVBQU8sNkJBQ2hDc04sR0FBd0J0TixFQUFPLE9BRy9CNFYsSUFBY1YsS0FBWUEsR0FBaUIsWUFBTUEsR0FBaUIsVUFBRVcsVUFHcEVDLEdBQXNCbmYsR0FBZW5FLEdBQU0sV0FDN0MsT0FFUyxHQUZGb2lCLEVBQW1CUyxHQUFxQixHQUFJLElBQUssQ0FDdERoYyxJQUFLLFdBQWMsT0FBT2djLEdBQXFCaG1CLEtBQU0sSUFBSyxDQUFFVyxNQUFPLElBQUswTSxNQUN0RUEsS0FDRCxTQUFVdk4sRUFBRytQLEVBQUdtSSxHQUNuQixJQUFJME8sRUFBNEJYLEdBQStCdE4sRUFBaUI1SSxHQUM1RTZXLFVBQWtDak8sRUFBZ0I1SSxHQUN0RG1XLEdBQXFCbG1CLEVBQUcrUCxFQUFHbUksR0FDdkIwTyxHQUE2QjVtQixJQUFNMlksR0FDckN1TixHQUFxQnZOLEVBQWlCNUksRUFBRzZXLElBRXpDVixHQUVBeFgsR0FBTyxTQUFVL0ksRUFBSzRZLEdBQ3hCLElBQUk1SSxFQUFTMFEsR0FBVzFnQixHQUFPOGYsRUFBbUJLLEdBT2xELE9BTkF4RixFQUFpQjNLLEVBQVEsQ0FDdkJoRSxLQUFNa1UsRUFDTmxnQixJQUFLQSxFQUNMNFksWUFBYUEsSUFFVi9XLElBQWFtTyxFQUFPNEksWUFBY0EsR0FDaEM1SSxHQUdMcUMsR0FBa0IsU0FBd0JoWSxFQUFHK1AsRUFBR21JLEdBQzlDbFksSUFBTTJZLEdBQWlCWCxHQUFnQnNPLEdBQXdCdlcsRUFBR21JLEdBQ3RFMVQsRUFBU3hFLEdBQ1QsSUFBSXZCLEVBQU1vSixFQUFja0ksR0FFeEIsT0FEQXZMLEVBQVMwVCxHQUNMNVIsRUFBTytmLEdBQVk1bkIsSUFDaEJ5WixFQUFXeFEsWUFJVnBCLEVBQU90RyxFQUFHNGxCLElBQVc1bEIsRUFBRTRsQixHQUFRbm5CLEtBQU11QixFQUFFNGxCLEdBQVFubkIsSUFBTyxHQUMxRHlaLEVBQWF1TixFQUFtQnZOLEVBQVksQ0FBRXhRLFdBQVlULEVBQXlCLEdBQUcsT0FKakZYLEVBQU90RyxFQUFHNGxCLElBQVNNLEdBQXFCbG1CLEVBQUc0bEIsRUFBUTNlLEVBQXlCLEVBQUcsS0FDcEZqSCxFQUFFNGxCLEdBQVFubkIsSUFBTyxHQUlWa29CLEdBQW9CM21CLEVBQUd2QixFQUFLeVosSUFDOUJnTyxHQUFxQmxtQixFQUFHdkIsRUFBS3laLElBR3BDMk8sR0FBb0IsU0FBMEI3bUIsRUFBRzBYLEdBQ25EbFQsRUFBU3hFLEdBQ1QsSUFBSThtQixFQUFhN2xCLEVBQWdCeVcsR0FDN0JoYSxFQUFPa2EsRUFBV2tQLEdBQVlycEIsT0FBT3NwQixHQUF1QkQsSUFJaEUsT0FIQW5CLEVBQVNqb0IsR0FBTSxTQUFVZSxHQUNsQitJLElBQWUvSCxFQUFLb1osR0FBdUJpTyxFQUFZcm9CLElBQU11WixHQUFnQmhZLEVBQUd2QixFQUFLcW9CLEVBQVdyb0IsT0FFaEd1QixHQU9MNlksR0FBd0IsU0FBOEIvSSxHQUN4RCxJQUFJQyxFQUFJbEksRUFBY2lJLEdBQ2xCcEksRUFBYWpJLEVBQUsybUIsR0FBNEJsbUIsS0FBTTZQLEdBQ3hELFFBQUk3UCxPQUFTeVksR0FBbUJyUyxFQUFPK2YsR0FBWXRXLEtBQU96SixFQUFPZ2dCLEdBQXdCdlcsUUFDbEZySSxJQUFlcEIsRUFBT3BHLEtBQU02UCxLQUFPekosRUFBTytmLEdBQVl0VyxJQUFNekosRUFBT3BHLEtBQU0wbEIsSUFBVzFsQixLQUFLMGxCLEdBQVE3VixLQUNwR3JJLElBR0Z1USxHQUE0QixTQUFrQ2pZLEVBQUcrUCxHQUNuRSxJQUFJM1IsRUFBSzZDLEVBQWdCakIsR0FDckJ2QixFQUFNb0osRUFBY2tJLEdBQ3hCLEdBQUkzUixJQUFPdWEsSUFBbUJyUyxFQUFPK2YsR0FBWTVuQixJQUFTNkgsRUFBT2dnQixHQUF3QjduQixHQUF6RixDQUNBLElBQUl3UCxFQUFhZ1ksR0FBK0I3bkIsRUFBSUssR0FJcEQsT0FISXdQLElBQWMzSCxFQUFPK2YsR0FBWTVuQixJQUFVNkgsRUFBT2xJLEVBQUl3bkIsSUFBV3huQixFQUFHd25CLEdBQVFubkIsS0FDOUV3UCxFQUFXdkcsWUFBYSxHQUVuQnVHLElBR0xvSyxHQUF1QixTQUE2QnJZLEdBQ3RELElBQUk0WSxFQUFRdU4sR0FBMEJsbEIsRUFBZ0JqQixJQUNsRFMsRUFBUyxHQUliLE9BSEFrbEIsRUFBUy9NLEdBQU8sU0FBVW5hLEdBQ25CNkgsRUFBTytmLEdBQVk1bkIsSUFBUzZILEVBQU95SyxFQUFZdFMsSUFBTW9ELEdBQUtwQixFQUFRaEMsTUFFbEVnQyxHQUdMc21CLEdBQXlCLFNBQStCL21CLEdBQzFELElBQUlnbkIsRUFBc0JobkIsSUFBTTJZLEVBQzVCQyxFQUFRdU4sR0FBMEJhLEVBQXNCVixHQUF5QnJsQixFQUFnQmpCLElBQ2pHUyxFQUFTLEdBTWIsT0FMQWtsQixFQUFTL00sR0FBTyxTQUFVbmEsSUFDcEI2SCxFQUFPK2YsR0FBWTVuQixJQUFVdW9CLElBQXVCMWdCLEVBQU9xUyxFQUFpQmxhLElBQzlFb0QsR0FBS3BCLEVBQVE0bEIsR0FBVzVuQixPQUdyQmdDLEdBa0pULEdBN0lLeWQsSUFnQkg3VixFQUZBeWQsR0FiQWxULEVBQVUsV0FDUixHQUFJN1UsRUFBYytuQixFQUFpQjVsQixNQUFPLE1BQU1mLEdBQVUsK0JBQzFELElBQUlvZixFQUFlbmUsVUFBVUMsYUFBMkJFLElBQWpCSCxVQUFVLEdBQStCb2xCLEVBQVVwbEIsVUFBVSxTQUFoQ0csRUFDaEVvRixFQUFNMlUsRUFBSWlFLEdBQ1Z2RixFQUFTLFNBQVVuWSxHQUNqQlgsT0FBU3lZLEdBQWlCbFosRUFBS3VaLEVBQVFzTixHQUF3QnpsQixHQUMvRHlGLEVBQU9wRyxLQUFNMGxCLElBQVd0ZixFQUFPcEcsS0FBSzBsQixHQUFTamdCLEtBQU16RixLQUFLMGxCLEdBQVFqZ0IsSUFBTyxHQUMzRWdoQixHQUFvQnptQixLQUFNeUYsRUFBS3NCLEVBQXlCLEVBQUdwRyxLQUc3RCxPQURJMkcsR0FBZWlmLElBQVlFLEdBQW9CaE8sRUFBaUJoVCxFQUFLLENBQUVnQyxjQUFjLEVBQU0rSSxJQUFLc0ksSUFDN0Z0SyxHQUFLL0ksRUFBSzRZLEtBR2dCLFVBRVQsWUFBWSxXQUNwQyxPQUFPZ0MsRUFBaUJyZ0IsTUFBTXlGLE9BR2hDMEMsRUFBU3VLLEVBQVMsaUJBQWlCLFNBQVUyTCxHQUMzQyxPQUFPN1AsR0FBSzRMLEVBQUlpRSxHQUFjQSxNQUdoQ25HLEVBQTJCclosRUFBSThaLEdBQy9CcFMsRUFBcUIxSCxFQUFJaVosR0FDekI5QixFQUF1Qm5YLEVBQUk4bkIsR0FDM0JyZ0IsRUFBK0J6SCxFQUFJa1osR0FDbkNzQixFQUEwQnhhLEVBQUkybUIsRUFBNEIzbUIsRUFBSXNaLEdBQzlEbUIsRUFBNEJ6YSxFQUFJZ29CLEdBRWhDOWMsRUFBNkJsTCxFQUFJLFNBQVU4SyxHQUN6QyxPQUFPNkUsR0FBS3BMLEVBQWdCdUcsR0FBT0EsSUFHakNyQyxJQUVGMGUsR0FBcUJKLEVBQWlCLGNBQWUsQ0FDbkRuZSxjQUFjLEVBQ2R1QyxJQUFLLFdBQ0gsT0FBT3FXLEVBQWlCcmdCLE1BQU1xZSxlQUc3QnZXLEdBQ0hLLEVBQVNzUSxFQUFpQix1QkFBd0JFLEdBQXVCLENBQUVvQixRQUFRLE1BS3pGbFMsRUFBRSxDQUFFL0ksUUFBUSxFQUFNMFAsTUFBTSxFQUFNMUUsUUFBU2tVLEVBQWV2ZixNQUFPdWYsR0FBaUIsQ0FDNUVyZixPQUFRK1QsSUFHVitTLEVBQVMvTixFQUFXdUcsS0FBd0IsU0FBVXRVLEdBQ3BEMGIsRUFBc0IxYixNQUd4QjlCLEVBQUUsQ0FBRW5GLE9BQVFpakIsRUFBUXhYLE1BQU0sRUFBTXJFLFFBQVNrVSxHQUFpQixDQUd4RCxJQUFPLFNBQVV6ZixHQUNmLElBQUlnVSxFQUFTK1MsRUFBVS9tQixHQUN2QixHQUFJNkgsRUFBT2lnQixHQUF3QjlULEdBQVMsT0FBTzhULEdBQXVCOVQsR0FDMUUsSUFBSWtELEVBQVMvQyxFQUFRSCxHQUdyQixPQUZBOFQsR0FBdUI5VCxHQUFVa0QsRUFDakM2USxHQUF1QjdRLEdBQVVsRCxFQUMxQmtELEdBSVRzUixPQUFRLFNBQWdCQyxHQUN0QixJQUFLdkosRUFBU3VKLEdBQU0sTUFBTS9uQixHQUFVK25CLEVBQU0sb0JBQzFDLEdBQUk1Z0IsRUFBT2tnQixHQUF3QlUsR0FBTSxPQUFPVixHQUF1QlUsSUFFekVDLFVBQVcsV0FBY1YsSUFBYSxHQUN0Q1csVUFBVyxXQUFjWCxJQUFhLEtBR3hDMWUsRUFBRSxDQUFFbkYsT0FBUSxTQUFVeUwsTUFBTSxFQUFNckUsUUFBU2tVLEVBQWV2ZixNQUFPNkksR0FBZSxDQUc5RTdFLE9BL0hZLFNBQWdCM0MsRUFBRzBYLEdBQy9CLFlBQXNCblgsSUFBZm1YLEVBQTJCK04sRUFBbUJ6bEIsR0FBSzZtQixHQUFrQnBCLEVBQW1CemxCLEdBQUkwWCxJQWlJbkdsWixlQUFnQndaLEdBR2hCSCxpQkFBa0JnUCxHQUdsQmpnQix5QkFBMEJxUixLQUc1QmxRLEVBQUUsQ0FBRW5GLE9BQVEsU0FBVXlMLE1BQU0sRUFBTXJFLFFBQVNrVSxHQUFpQixDQUcxRDNGLG9CQUFxQkYsR0FHckIzQyxzQkFBdUJxUixLQUt6QmhmLEVBQUUsQ0FBRW5GLE9BQVEsU0FBVXlMLE1BQU0sRUFBTXJFLE9BQVEzRyxHQUFNLFdBQWNtVyxFQUE0QnphLEVBQUUsT0FBVSxDQUNwRzJXLHNCQUF1QixTQUErQnRYLEdBQ3BELE9BQU9vYixFQUE0QnphLEVBQUVXLEVBQVN0QixPQU05QzRuQixJQVdGamUsRUFBRSxDQUFFbkYsT0FBUSxPQUFReUwsTUFBTSxFQUFNckUsUUFWSGtVLEdBQWlCN2EsR0FBTSxXQUNsRCxJQUFJc1MsRUFBUy9DLElBRWIsTUFBK0IsVUFBeEJvVCxHQUFXLENBQUNyUSxLQUVlLE1BQTdCcVEsR0FBVyxDQUFFelksRUFBR29JLEtBRWMsTUFBOUJxUSxHQUFXem5CLE9BQU9vWCxRQUd3QyxDQUUvRDBSLFVBQVcsU0FBbUJqcEIsRUFBSWtwQixFQUFVQyxHQUMxQyxJQUFJbFksRUFBT0wsRUFBVzVPLFdBQ2xCb25CLEVBQVlGLEVBQ2hCLElBQUs5bkIsRUFBUzhuQixTQUFvQi9tQixJQUFQbkMsS0FBb0J1ZixFQUFTdmYsR0FNeEQsT0FMS2IsRUFBUStwQixLQUFXQSxFQUFXLFNBQVU3b0IsRUFBS29DLEdBRWhELEdBREk1QixFQUFXdW9CLEtBQVkzbUIsRUFBUXBCLEVBQUsrbkIsRUFBV3RuQixLQUFNekIsRUFBS29DLEtBQ3pEOGMsRUFBUzljLEdBQVEsT0FBT0EsSUFFL0J3TyxFQUFLLEdBQUtpWSxFQUNIcGEsRUFBTThZLEdBQVksS0FBTTNXLE9BT2hDeVcsRUFBZ0JqSSxHQUFlLENBQ2xDLElBQUl2RSxHQUFVd00sRUFBZ0J4TSxRQUU5QmpSLEVBQVN5ZCxFQUFpQmpJLEdBQWMsU0FBVTRKLEdBRWhELE9BQU9ob0IsRUFBSzZaLEdBQVNwWixTQUt6QmdILEVBQWUwTCxFQUFTaVQsR0FFeEI5VSxFQUFXNlUsSUFBVSxtQkNwVU8sRUFBUSxNQUlwQ0wsQ0FBc0IsNkJDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsMEJDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsNEJDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsMkJDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsNEJDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsMEJDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsZ0NDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsZ0NDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsZ0NDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsaUNDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsNEJDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsNEJDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsNkJDSk0sRUFBUSxNQUlwQ0EsQ0FBc0IsK0JDSE0sRUFBUSxNQUlwQ0EsQ0FBc0IsaUNDSk0sRUFBUSxNQUVwQ0EsQ0FBc0IsOEJDSHRCLEVBQVEsT0FDUixJQUFJbUMsRUFBZSxFQUFRLE9BQ3ZCMW9CLEVBQVMsRUFBUSxPQUNqQndOLEVBQVUsRUFBUSxNQUNsQnBFLEVBQThCLEVBQVEsT0FDdENqQixFQUFZLEVBQVEsT0FHcEIxQixFQUZrQixFQUFRLE1BRVZuQyxDQUFnQixlQUVwQyxJQUFLLElBQUlxa0IsS0FBbUJELEVBQWMsQ0FDeEMsSUFBSUUsRUFBYTVvQixFQUFPMm9CLEdBQ3BCRSxFQUFzQkQsR0FBY0EsRUFBV3pwQixVQUMvQzBwQixHQUF1QnJiLEVBQVFxYixLQUF5QnBpQixHQUMxRDJDLEVBQTRCeWYsRUFBcUJwaUIsRUFBZWtpQixHQUVsRXhnQixFQUFVd2dCLEdBQW1CeGdCLEVBQVU5Six3QkNoQnpDLElBQUlGLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUNyQixFQUFRLE1BRVJGLEVBQU9DLFFBQVVDLG1CQ0hqQixJQUFJQSxFQUFTLEVBQVEsT0FDckIsRUFBUSxNQUVSRixFQUFPQyxRQUFVQyxtQkNIakIsSUFBSUEsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxrQkNGakIsSUFBSUEsRUFBUyxFQUFRLE9BRXJCRixFQUFPQyxRQUFVQyxtQkNGakIsRUFBUSxNQUNSLElBQUlxUCxFQUFVLEVBQVEsTUFDbEJsRyxFQUFTLEVBQVEsT0FDakJ2SSxFQUFnQixFQUFRLE1BQ3hCQyxFQUFTLEVBQVEsT0FFakJNLEVBQWlCakIsTUFBTWMsVUFFdkJ1cEIsRUFBZSxDQUNqQjljLGNBQWMsRUFDZFUsVUFBVSxHQUdack8sRUFBT0MsUUFBVSxTQUFVa0IsR0FDekIsSUFBSUMsRUFBTUQsRUFBR1YsS0FDYixPQUFPVSxJQUFPRSxHQUFtQlAsRUFBY08sRUFBZ0JGLElBQU9DLElBQVFDLEVBQWVaLE1BQ3hGNEksRUFBT29oQixFQUFjbGIsRUFBUXBPLElBQU9KLEVBQVNLLG9CQ2hCcEQsSUFBSWxCLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUVyQkYsRUFBT0MsUUFBVUMsbUJDRmpCLElBQUlBLEVBQVMsRUFBUSxPQUNyQixFQUFRLE1BRVJGLEVBQU9DLFFBQVVDLG1CQ0hqQixJQUFJQSxFQUFTLEVBQVEsT0FFckJGLEVBQU9DLFFBQVVDLG1CQ0ZqQixJQUFJQSxFQUFTLEVBQVEsT0FDckIsRUFBUSxNQUVSRixFQUFPQyxRQUFVQyxtQkNIakIsSUFBSUEsRUFBUyxFQUFRLE9BQ3JCLEVBQVEsTUFFUkYsRUFBT0MsUUFBVUMsbUJDSGpCLElBQUk2QixFQUFTLEVBQVEsT0FDakJDLEVBQWEsRUFBUSxPQUNyQkMsRUFBYyxFQUFRLE9BRXRCQyxFQUFZSCxFQUFPRyxVQUd2QmxDLEVBQU9DLFFBQVUsU0FBVWtDLEdBQ3pCLEdBQUlILEVBQVdHLEdBQVcsT0FBT0EsRUFDakMsTUFBTUQsRUFBVUQsRUFBWUUsR0FBWSx3Q0NUMUMsSUFBSUosRUFBUyxFQUFRLE9BQ2pCSyxFQUFnQixFQUFRLE1BQ3hCSCxFQUFjLEVBQVEsT0FFdEJDLEVBQVlILEVBQU9HLFVBR3ZCbEMsRUFBT0MsUUFBVSxTQUFVa0MsR0FDekIsR0FBSUMsRUFBY0QsR0FBVyxPQUFPQSxFQUNwQyxNQUFNRCxFQUFVRCxFQUFZRSxHQUFZLDJDQ1QxQyxJQUFJSixFQUFTLEVBQVEsT0FDakJDLEVBQWEsRUFBUSxPQUVyQkssRUFBU04sRUFBT00sT0FDaEJILEVBQVlILEVBQU9HLFVBRXZCbEMsRUFBT0MsUUFBVSxTQUFVa0MsR0FDekIsR0FBdUIsaUJBQVpBLEdBQXdCSCxFQUFXRyxHQUFXLE9BQU9BLEVBQ2hFLE1BQU1ELEVBQVUsYUFBZUcsRUFBT0YsR0FBWSxxQ0NScEQsSUFBSWtFLEVBQWtCLEVBQVEsTUFDMUJYLEVBQVMsRUFBUSxPQUNqQjhELEVBQXVCLEVBQVEsTUFFL0JxaEIsRUFBY3hrQixFQUFnQixlQUM5QmhGLEVBQWlCakIsTUFBTWMsVUFJUW9DLE1BQS9CakMsRUFBZXdwQixJQUNqQnJoQixFQUFxQjFILEVBQUVULEVBQWdCd3BCLEVBQWEsQ0FDbERuZ0IsY0FBYyxFQUNkOUcsTUFBTzhCLEVBQU8sUUFLbEIxRixFQUFPQyxRQUFVLFNBQVV1QixHQUN6QkgsRUFBZXdwQixHQUFhcnBCLElBQU8saUNDakJyQyxJQUFJd2MsRUFBUyxnQkFJYmhlLEVBQU9DLFFBQVUsU0FBVTRkLEVBQUcvWixFQUFPZ25CLEdBQ25DLE9BQU9obkIsR0FBU2duQixFQUFVOU0sRUFBT0gsRUFBRy9aLEdBQU9WLE9BQVMscUJDTnRELElBQUlyQixFQUFTLEVBQVEsT0FDakJqQixFQUFnQixFQUFRLE9BRXhCb0IsRUFBWUgsRUFBT0csVUFFdkJsQyxFQUFPQyxRQUFVLFNBQVVrQixFQUFJbUIsR0FDN0IsR0FBSXhCLEVBQWN3QixFQUFXbkIsR0FBSyxPQUFPQSxFQUN6QyxNQUFNZSxFQUFVLDBDQ1BsQixJQUFJSCxFQUFTLEVBQVEsT0FDakJRLEVBQVcsRUFBUSxPQUVuQkYsRUFBU04sRUFBT00sT0FDaEJILEVBQVlILEVBQU9HLFVBR3ZCbEMsRUFBT0MsUUFBVSxTQUFVa0MsR0FDekIsR0FBSUksRUFBU0osR0FBVyxPQUFPQSxFQUMvQixNQUFNRCxFQUFVRyxFQUFPRixHQUFZLGlDQ1JyQ25DLEVBQU9DLFFBQWdDLG9CQUFmOHFCLGFBQWlELG9CQUFaQyx5QkNBN0QsSUFBSTVrQixFQUFRLEVBQVEsT0FFcEJwRyxFQUFPQyxRQUFVbUcsR0FBTSxXQUNyQixHQUEwQixtQkFBZjJrQixZQUEyQixDQUNwQyxJQUFJRSxFQUFTLElBQUlGLFlBQVksR0FFekJ6cEIsT0FBTzRwQixhQUFhRCxJQUFTM3BCLE9BQU9DLGVBQWUwcEIsRUFBUSxJQUFLLENBQUVybkIsTUFBTyxzQ0NOakYsSUFnQ0l5RyxFQUFNNlMsRUFBYTVhLEVBaENuQjZvQixFQUFzQixFQUFRLE9BQzlCNWdCLEVBQWMsRUFBUSxPQUN0QnhJLEVBQVMsRUFBUSxPQUNqQkMsRUFBYSxFQUFRLE9BQ3JCTyxFQUFXLEVBQVEsT0FDbkI4RyxFQUFTLEVBQVEsT0FDakJrRyxFQUFVLEVBQVEsT0FDbEJ0TixFQUFjLEVBQVEsT0FDdEJrSixFQUE4QixFQUFRLE9BQ3RDQyxFQUFXLEVBQVEsT0FDbkI3SixFQUFpQixVQUNqQlQsRUFBZ0IsRUFBUSxPQUN4QmdKLEVBQWlCLEVBQVEsT0FDekJvQixFQUFpQixFQUFRLE9BQ3pCN0UsRUFBa0IsRUFBUSxNQUMxQmdYLEVBQU0sRUFBUSxPQUVkK04sRUFBWXJwQixFQUFPcXBCLFVBQ25CQyxFQUFxQkQsR0FBYUEsRUFBVWxxQixVQUM1Q29xQixFQUFvQnZwQixFQUFPdXBCLGtCQUMzQkMsRUFBNkJELEdBQXFCQSxFQUFrQnBxQixVQUNwRXNxQixFQUFhSixHQUFhdGhCLEVBQWVzaEIsR0FDekNLLEVBQXNCSixHQUFzQnZoQixFQUFldWhCLEdBQzNEM1AsRUFBa0JwYSxPQUFPSixVQUN6QmdCLEVBQVlILEVBQU9HLFVBRW5Cc0csRUFBZ0JuQyxFQUFnQixlQUNoQ3FsQixFQUFrQnJPLEVBQUksbUJBQ3RCc08sRUFBMEJ0TyxFQUFJLDJCQUU5QnVPLEVBQTRCVCxLQUF5QmpnQixHQUE0QyxVQUExQnFFLEVBQVF4TixFQUFPOHBCLE9BQ3RGQyxHQUEyQixFQUczQkMsRUFBNkIsQ0FDL0JYLFVBQVcsRUFDWFksV0FBWSxFQUNaVixrQkFBbUIsRUFDbkJXLFdBQVksRUFDWkMsWUFBYSxFQUNiQyxXQUFZLEVBQ1pDLFlBQWEsRUFDYkMsYUFBYyxFQUNkQyxhQUFjLEdBR1pDLEVBQThCLENBQ2hDQyxjQUFlLEVBQ2ZDLGVBQWdCLEdBV2RDLEVBQWUsU0FBVXZyQixHQUMzQixJQUFLb0IsRUFBU3BCLEdBQUssT0FBTyxFQUMxQixJQUFJd3JCLEVBQVFwZCxFQUFRcE8sR0FDcEIsT0FBT2tJLEVBQU8waUIsRUFBNEJZLElBQ3JDdGpCLEVBQU9rakIsRUFBNkJJLElBeUQzQyxJQUFLdGlCLEtBQVEwaEIsR0FFWHpwQixHQURBNGEsRUFBY25iLEVBQU9zSSxLQUNNNlMsRUFBWWhjLFdBQ3hCaUssRUFBNEI3SSxFQUFXcXBCLEVBQXlCek8sR0FDMUUwTyxHQUE0QixFQUduQyxJQUFLdmhCLEtBQVFraUIsR0FFWGpxQixHQURBNGEsRUFBY25iLEVBQU9zSSxLQUNNNlMsRUFBWWhjLFlBQ3hCaUssRUFBNEI3SSxFQUFXcXBCLEVBQXlCek8sR0FJakYsS0FBSzBPLElBQThCNXBCLEVBQVd3cEIsSUFBZUEsSUFBZXZxQixTQUFTQyxhQUVuRnNxQixFQUFhLFdBQ1gsTUFBTXRwQixFQUFVLHlCQUVkMHBCLEdBQTJCLElBQUt2aEIsS0FBUTBoQixFQUN0Q2hxQixFQUFPc0ksSUFBT2EsRUFBZW5KLEVBQU9zSSxHQUFPbWhCLEdBSW5ELEtBQUtJLElBQThCSCxHQUF1QkEsSUFBd0IvUCxLQUNoRitQLEVBQXNCRCxFQUFXdHFCLFVBQzdCMHFCLEdBQTJCLElBQUt2aEIsS0FBUTBoQixFQUN0Q2hxQixFQUFPc0ksSUFBT2EsRUFBZW5KLEVBQU9zSSxHQUFNbkosVUFBV3VxQixHQVM3RCxHQUpJRyxHQUE2QjloQixFQUFleWhCLEtBQWdDRSxHQUM5RXZnQixFQUFlcWdCLEVBQTRCRSxHQUd6Q2xoQixJQUFnQmxCLEVBQU9vaUIsRUFBcUJqakIsR0FLOUMsSUFBSzZCLEtBSkx5aEIsR0FBMkIsRUFDM0J2cUIsRUFBZWtxQixFQUFxQmpqQixFQUFlLENBQUV5RSxJQUFLLFdBQ3hELE9BQU8xSyxFQUFTVSxNQUFRQSxLQUFLeW9CLFFBQW1CcG9CLEtBRXJDeW9CLEVBQWdDaHFCLEVBQU9zSSxJQUNsRGMsRUFBNEJwSixFQUFPc0ksR0FBT3FoQixFQUFpQnJoQixHQUkvRHJLLEVBQU9DLFFBQVUsQ0FDZjJyQiwwQkFBMkJBLEVBQzNCRCx3QkFBeUJBLEVBQ3pCRCxnQkFBaUJJLEdBQTRCSixFQUM3Q2tCLFlBeEdnQixTQUFVenJCLEdBQzFCLEdBQUl1ckIsRUFBYXZyQixHQUFLLE9BQU9BLEVBQzdCLE1BQU1lLEVBQVUsZ0NBdUdoQjJxQix1QkFwRzJCLFNBQVV4bEIsR0FDckMsR0FBSXJGLEVBQVdxRixNQUFRNkQsR0FBa0JwSyxFQUFjMHFCLEVBQVlua0IsSUFBSyxPQUFPQSxFQUMvRSxNQUFNbkYsRUFBVUQsRUFBWW9GLEdBQUssc0NBbUdqQ3lsQix1QkFoRzJCLFNBQVUzZ0IsRUFBSzRnQixFQUFVaGdCLEVBQVEwRCxHQUM1RCxHQUFLbEcsRUFBTCxDQUNBLEdBQUl3QyxFQUFRLElBQUssSUFBSWlnQixLQUFTakIsRUFBNEIsQ0FDeEQsSUFBSWtCLEVBQXdCbHJCLEVBQU9pckIsR0FDbkMsR0FBSUMsR0FBeUI1akIsRUFBTzRqQixFQUFzQi9yQixVQUFXaUwsR0FBTSxXQUNsRThnQixFQUFzQi9yQixVQUFVaUwsR0FDdkMsTUFBT3hFLEdBRVAsSUFDRXNsQixFQUFzQi9yQixVQUFVaUwsR0FBTzRnQixFQUN2QyxNQUFPRyxNQUdSekIsRUFBb0J0ZixLQUFRWSxHQUMvQjNCLEVBQVNxZ0IsRUFBcUJ0ZixFQUFLWSxFQUFTZ2dCLEVBQ3hDbkIsR0FBNkJQLEVBQW1CbGYsSUFBUTRnQixFQUFVdGMsS0FrRnhFMGMsNkJBOUVpQyxTQUFVaGhCLEVBQUs0Z0IsRUFBVWhnQixHQUMxRCxJQUFJaWdCLEVBQU9DLEVBQ1gsR0FBSzFpQixFQUFMLENBQ0EsR0FBSVcsRUFBZ0IsQ0FDbEIsR0FBSTZCLEVBQVEsSUFBS2lnQixLQUFTakIsRUFFeEIsSUFEQWtCLEVBQXdCbHJCLEVBQU9pckIsS0FDRjNqQixFQUFPNGpCLEVBQXVCOWdCLEdBQU0sV0FDeEQ4Z0IsRUFBc0I5Z0IsR0FDN0IsTUFBT3hFLElBRVgsR0FBSzZqQixFQUFXcmYsS0FBUVksRUFLakIsT0FITCxJQUNFLE9BQU8zQixFQUFTb2dCLEVBQVlyZixFQUFLWSxFQUFTZ2dCLEVBQVduQixHQUE2QkosRUFBV3JmLElBQVE0Z0IsR0FDckcsTUFBT3BsQixLQUdiLElBQUtxbEIsS0FBU2pCLElBQ1prQixFQUF3QmxyQixFQUFPaXJCLEtBQ0FDLEVBQXNCOWdCLEtBQVFZLEdBQzNEM0IsRUFBUzZoQixFQUF1QjlnQixFQUFLNGdCLEtBMkR6Q0ssT0EzSFcsU0FBZ0Jqc0IsR0FDM0IsSUFBS29CLEVBQVNwQixHQUFLLE9BQU8sRUFDMUIsSUFBSXdyQixFQUFRcGQsRUFBUXBPLEdBQ3BCLE1BQWlCLGFBQVZ3ckIsR0FDRnRqQixFQUFPMGlCLEVBQTRCWSxJQUNuQ3RqQixFQUFPa2pCLEVBQTZCSSxJQXVIekNELGFBQWNBLEVBQ2RsQixXQUFZQSxFQUNaQyxvQkFBcUJBLGlDQ2pMdkIsSUFBSTFwQixFQUFTLEVBQVEsT0FDakIwQyxFQUFjLEVBQVEsTUFDdEI4RixFQUFjLEVBQVEsT0FDdEI0Z0IsRUFBc0IsRUFBUSxPQUM5Qm5nQixFQUFlLEVBQVEsT0FDdkJHLEVBQThCLEVBQVEsT0FDdEMrWixFQUFjLEVBQVEsT0FDdEI5ZSxFQUFRLEVBQVEsT0FDaEJnZixFQUFhLEVBQVEsT0FDckJ0SCxFQUFzQixFQUFRLE9BQzlCakgsRUFBVyxFQUFRLE9BQ25Cd1csRUFBVSxFQUFRLE9BQ2xCQyxFQUFVLEVBQVEsT0FDbEJ4akIsRUFBaUIsRUFBUSxPQUN6Qm9CLEVBQWlCLEVBQVEsT0FDekJvUSxFQUFzQixVQUN0Qi9aLEVBQWlCLFVBQ2pCZ3NCLEVBQVksRUFBUSxPQUNwQnhiLEVBQWEsRUFBUSxPQUNyQjlILEVBQWlCLEVBQVEsT0FDekJpWixFQUFzQixFQUFRLE9BRTlCNVgsRUFBdUJOLEVBQWFPLE9BQ3BDQyxFQUE2QlIsRUFBYVMsYUFDMUM2WCxFQUFtQkosRUFBb0JqVyxJQUN2Q29XLEVBQW1CSCxFQUFvQnpQLElBQ3ZDK1osRUFBZSxjQUlmQyxFQUFjLGNBQ2RDLEVBQW9CM3JCLEVBQW1CLFlBQ3ZDNHJCLEVBQWVELEVBQ2ZFLEVBQXVCRCxHQUFnQkEsRUFBc0IsVUFDN0RFLEVBQVk5ckIsRUFBZ0IsU0FDNUIrckIsRUFBb0JELEdBQWFBLEVBQW1CLFVBQ3BEblMsRUFBa0JwYSxPQUFPSixVQUN6QmQsRUFBUTJCLEVBQU8zQixNQUNmMnRCLEVBQWFoc0IsRUFBT2dzQixXQUNwQkMsRUFBT3ZwQixFQUFZOG9CLEdBQ25CVSxFQUFVeHBCLEVBQVksR0FBR3dwQixTQUV6QkMsRUFBY1osRUFBUWEsS0FDdEJDLEVBQWdCZCxFQUFRZSxPQUV4QkMsRUFBVyxTQUFVN04sR0FDdkIsTUFBTyxDQUFVLElBQVRBLElBR044TixFQUFZLFNBQVU5TixHQUN4QixNQUFPLENBQVUsSUFBVEEsRUFBZUEsR0FBVSxFQUFJLE1BR25DK04sRUFBWSxTQUFVL04sR0FDeEIsTUFBTyxDQUFVLElBQVRBLEVBQWVBLEdBQVUsRUFBSSxJQUFNQSxHQUFVLEdBQUssSUFBTUEsR0FBVSxHQUFLLE1BRzdFZ08sRUFBYyxTQUFVeEQsR0FDMUIsT0FBT0EsRUFBTyxJQUFNLEdBQUtBLEVBQU8sSUFBTSxHQUFLQSxFQUFPLElBQU0sRUFBSUEsRUFBTyxJQUdqRXlELEVBQWMsU0FBVWpPLEdBQzFCLE9BQU95TixFQUFZek4sRUFBUSxHQUFJLElBRzdCa08sRUFBYyxTQUFVbE8sR0FDMUIsT0FBT3lOLEVBQVl6TixFQUFRLEdBQUksSUFHN0JtTyxFQUFZLFNBQVUxUixFQUFhMWIsR0FDckNELEVBQWUyYixFQUFxQixVQUFHMWIsRUFBSyxDQUFFeUwsSUFBSyxXQUFjLE9BQU9xVyxFQUFpQnJnQixNQUFNekIsT0FHN0Z5TCxFQUFNLFNBQVU0aEIsRUFBTUMsRUFBT2hyQixFQUFPaXJCLEdBQ3RDLElBQUlDLEVBQVczQixFQUFRdnBCLEdBQ25CdVAsRUFBUWlRLEVBQWlCdUwsR0FDN0IsR0FBSUcsRUFBV0YsRUFBUXpiLEVBQU00YixXQUFZLE1BQU1sQixFQUFXTixHQUMxRCxJQUFJeUIsRUFBUTVMLEVBQWlCalEsRUFBTTRYLFFBQVFpRSxNQUN2Q25vQixFQUFRaW9CLEVBQVczYixFQUFNOGIsV0FDekJoQixFQUFPcGMsRUFBV21kLEVBQU9ub0IsRUFBT0EsRUFBUStuQixHQUM1QyxPQUFPQyxFQUFpQlosRUFBT0YsRUFBUUUsSUFHckMxYSxFQUFNLFNBQVVvYixFQUFNQyxFQUFPaHJCLEVBQU9zckIsRUFBWXhyQixFQUFPbXJCLEdBQ3pELElBQUlDLEVBQVczQixFQUFRdnBCLEdBQ25CdVAsRUFBUWlRLEVBQWlCdUwsR0FDN0IsR0FBSUcsRUFBV0YsRUFBUXpiLEVBQU00YixXQUFZLE1BQU1sQixFQUFXTixHQUkxRCxJQUhBLElBQUl5QixFQUFRNUwsRUFBaUJqUSxFQUFNNFgsUUFBUWlFLE1BQ3ZDbm9CLEVBQVFpb0IsRUFBVzNiLEVBQU04YixXQUN6QmhCLEVBQU9pQixHQUFZeHJCLEdBQ2RnRyxFQUFJLEVBQUdBLEVBQUlrbEIsRUFBT2xsQixJQUFLc2xCLEVBQU1ub0IsRUFBUTZDLEdBQUt1a0IsRUFBS1ksRUFBaUJubEIsRUFBSWtsQixFQUFRbGxCLEVBQUksSUFHM0YsR0FBS3VoQixFQThGRSxDQUNMLElBQUlrRSxFQUE4Qi9qQixHQUF3Qm9pQixFQUFrQjlnQixPQUFTNGdCLEVBRXJGLEdBQUtwbkIsR0FBTSxXQUNUc25CLEVBQWtCLE9BQ2J0bkIsR0FBTSxXQUNYLElBQUlzbkIsR0FBbUIsUUFDbkJ0bkIsR0FBTSxXQUlWLE9BSEEsSUFBSXNuQixFQUNKLElBQUlBLEVBQWtCLEtBQ3RCLElBQUlBLEVBQWtCNEIsS0FDZkQsSUFBZ0M3akIsS0FpQjlCNmpCLEdBQStCN2pCLEdBQ3hDTCxFQUE0QnVpQixFQUFtQixPQUFRRixPQWpCckQsRUFFRkcsRUFBZSxTQUFxQnZxQixHQUVsQyxPQURBZ2lCLEVBQVduaUIsS0FBTTJxQixHQUNWLElBQUlGLEVBQWtCTCxFQUFRanFCLE1BR2pCLFVBQUl3cUIsRUFFMUIsSUFBSyxJQUEwRHBzQixFQUF0RGYsRUFBTzZhLEVBQW9Cb1MsR0FBb0I2QixHQUFJLEVBQVE5dUIsRUFBSzJDLE9BQVNtc0IsS0FDekUvdEIsRUFBTWYsRUFBSzh1QixTQUFTNUIsR0FDekJ4aUIsRUFBNEJ3aUIsRUFBY25zQixFQUFLa3NCLEVBQWtCbHNCLElBSXJFb3NCLEVBQXFCbG5CLFlBQWNpbkIsRUFNakN6aUIsR0FBa0JwQixFQUFlZ2tCLEtBQXVCcFMsR0FDMUR4USxFQUFlNGlCLEVBQW1CcFMsR0FJcEMsSUFBSThULEdBQVcsSUFBSTNCLEVBQVUsSUFBSUYsRUFBYSxJQUMxQzhCLEdBQVdockIsRUFBWXFwQixFQUFrQjRCLFNBQzdDRixHQUFTRSxRQUFRLEVBQUcsWUFDcEJGLEdBQVNFLFFBQVEsRUFBRyxhQUNoQkYsR0FBU0csUUFBUSxJQUFPSCxHQUFTRyxRQUFRLElBQUl6SyxFQUFZNEksRUFBbUIsQ0FDOUU0QixRQUFTLFNBQWlCUCxFQUFZdnJCLEdBQ3BDNnJCLEdBQVN4c0IsS0FBTWtzQixFQUFZdnJCLEdBQVMsSUFBTSxLQUU1Q2dzQixTQUFVLFNBQWtCVCxFQUFZdnJCLEdBQ3RDNnJCLEdBQVN4c0IsS0FBTWtzQixFQUFZdnJCLEdBQVMsSUFBTSxNQUUzQyxDQUFFb1osUUFBUSxTQXBJYjRRLEdBVkFELEVBQWUsU0FBcUJ2cUIsR0FDbENnaUIsRUFBV25pQixLQUFNMnFCLEdBQ2pCLElBQUlxQixFQUFhNUIsRUFBUWpxQixHQUN6QmlnQixFQUFpQnBnQixLQUFNLENBQ3JCaXNCLE1BQU9sQixFQUFLNXRCLEVBQU02dUIsR0FBYSxHQUMvQkEsV0FBWUEsSUFFVDFrQixJQUFhdEgsS0FBS2dzQixXQUFhQSxLQUdPLFVBc0I3Q25CLEdBcEJBRCxFQUFZLFNBQWtCNUMsRUFBUWtFLEVBQVlGLEdBQ2hEN0osRUFBV25pQixLQUFNNnFCLEdBQ2pCMUksRUFBVzZGLEVBQVEyQyxHQUNuQixJQUFJaUMsRUFBZXZNLEVBQWlCMkgsR0FBUWdFLFdBQ3hDYSxFQUFTaFMsRUFBb0JxUixHQUNqQyxHQUFJVyxFQUFTLEdBQUtBLEVBQVNELEVBQWMsTUFBTTlCLEVBQVcsZ0JBRTFELEdBQUkrQixHQURKYixPQUE0QjNyQixJQUFmMnJCLEVBQTJCWSxFQUFlQyxFQUFTalosRUFBU29ZLElBQy9DWSxFQUFjLE1BQU05QixFQXBGL0IsZ0JBcUZmMUssRUFBaUJwZ0IsS0FBTSxDQUNyQmdvQixPQUFRQSxFQUNSZ0UsV0FBWUEsRUFDWkUsV0FBWVcsSUFFVHZsQixJQUNIdEgsS0FBS2dvQixPQUFTQSxFQUNkaG9CLEtBQUtnc0IsV0FBYUEsRUFDbEJoc0IsS0FBS2tzQixXQUFhVyxLQUlpQixVQUVuQ3ZsQixJQUNGcWtCLEVBQVVqQixFQUFjLGNBQ3hCaUIsRUFBVWYsRUFBVyxVQUNyQmUsRUFBVWYsRUFBVyxjQUNyQmUsRUFBVWYsRUFBVyxlQUd2QjNJLEVBQVk0SSxFQUFtQixDQUM3QjZCLFFBQVMsU0FBaUJSLEdBQ3hCLE9BQU9saUIsRUFBSWhLLEtBQU0sRUFBR2tzQixHQUFZLElBQU0sSUFBTSxJQUU5Q1ksU0FBVSxTQUFrQlosR0FDMUIsT0FBT2xpQixFQUFJaEssS0FBTSxFQUFHa3NCLEdBQVksSUFFbENhLFNBQVUsU0FBa0JiLEdBQzFCLElBQUlELEVBQVFqaUIsRUFBSWhLLEtBQU0sRUFBR2tzQixFQUFZaHNCLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxHQUMzRSxPQUFRNHJCLEVBQU0sSUFBTSxFQUFJQSxFQUFNLEtBQU8sSUFBTSxJQUU3Q2UsVUFBVyxTQUFtQmQsR0FDNUIsSUFBSUQsRUFBUWppQixFQUFJaEssS0FBTSxFQUFHa3NCLEVBQVloc0IsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLEdBQzNFLE9BQU80ckIsRUFBTSxJQUFNLEVBQUlBLEVBQU0sSUFFL0JnQixTQUFVLFNBQWtCZixHQUMxQixPQUFPVixFQUFZeGhCLEVBQUloSyxLQUFNLEVBQUdrc0IsRUFBWWhzQixVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csS0FFcEY2c0IsVUFBVyxTQUFtQmhCLEdBQzVCLE9BQU9WLEVBQVl4aEIsRUFBSWhLLEtBQU0sRUFBR2tzQixFQUFZaHNCLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxNQUFnQixHQUVwRzhzQixXQUFZLFNBQW9CakIsR0FDOUIsT0FBT2YsRUFBY25oQixFQUFJaEssS0FBTSxFQUFHa3NCLEVBQVloc0IsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLEdBQVksS0FFbEcrc0IsV0FBWSxTQUFvQmxCLEdBQzlCLE9BQU9mLEVBQWNuaEIsRUFBSWhLLEtBQU0sRUFBR2tzQixFQUFZaHNCLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxHQUFZLEtBRWxHb3NCLFFBQVMsU0FBaUJQLEVBQVl2ckIsR0FDcEM2UCxFQUFJeFEsS0FBTSxFQUFHa3NCLEVBQVliLEVBQVUxcUIsSUFFckNnc0IsU0FBVSxTQUFrQlQsRUFBWXZyQixHQUN0QzZQLEVBQUl4USxLQUFNLEVBQUdrc0IsRUFBWWIsRUFBVTFxQixJQUVyQzBzQixTQUFVLFNBQWtCbkIsRUFBWXZyQixHQUN0QzZQLEVBQUl4USxLQUFNLEVBQUdrc0IsRUFBWVosRUFBVzNxQixFQUFPVCxVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csSUFFbkZpdEIsVUFBVyxTQUFtQnBCLEVBQVl2ckIsR0FDeEM2UCxFQUFJeFEsS0FBTSxFQUFHa3NCLEVBQVlaLEVBQVczcUIsRUFBT1QsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLElBRW5Ga3RCLFNBQVUsU0FBa0JyQixFQUFZdnJCLEdBQ3RDNlAsRUFBSXhRLEtBQU0sRUFBR2tzQixFQUFZWCxFQUFXNXFCLEVBQU9ULFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxJQUVuRm10QixVQUFXLFNBQW1CdEIsRUFBWXZyQixHQUN4QzZQLEVBQUl4USxLQUFNLEVBQUdrc0IsRUFBWVgsRUFBVzVxQixFQUFPVCxVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csSUFFbkZvdEIsV0FBWSxTQUFvQnZCLEVBQVl2ckIsR0FDMUM2UCxFQUFJeFEsS0FBTSxFQUFHa3NCLEVBQVlULEVBQWE5cUIsRUFBT1QsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLElBRXJGcXRCLFdBQVksU0FBb0J4QixFQUFZdnJCLEdBQzFDNlAsRUFBSXhRLEtBQU0sRUFBR2tzQixFQUFZUixFQUFhL3FCLEVBQU9ULFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxNQXVEekYyRyxFQUFlMGpCLEVBQWNILEdBQzdCdmpCLEVBQWU0akIsRUFyTkMsWUF1TmhCN3RCLEVBQU9DLFFBQVUsQ0FDZjhxQixZQUFhNEMsRUFDYjNDLFNBQVU2QyxnQ0NwUFosSUFBSXByQixFQUFXLEVBQVEsT0FDbkJ3QixFQUFrQixFQUFRLE9BQzFCckIsRUFBb0IsRUFBUSxPQUU1QnlkLEVBQU12WixLQUFLdVosSUFLZnJnQixFQUFPQyxRQUFVLEdBQUcyd0IsWUFBYyxTQUFvQmpyQixFQUFrQm9CLEdBQ3RFLElBQUloRSxFQUFJTixFQUFTUSxNQUNiNGYsRUFBTWpnQixFQUFrQkcsR0FDeEI4dEIsRUFBSzVzQixFQUFnQjBCLEVBQVFrZCxHQUM3QnhpQixFQUFPNEQsRUFBZ0I4QyxFQUFPOGIsR0FDOUI3YixFQUFNN0QsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLEVBQzVDd3JCLEVBQVF6TyxRQUFhL2MsSUFBUjBELEVBQW9CNmIsRUFBTTVlLEVBQWdCK0MsRUFBSzZiLElBQVF4aUIsRUFBTXdpQixFQUFNZ08sR0FDaEZDLEVBQU0sRUFNVixJQUxJendCLEVBQU93d0IsR0FBTUEsRUFBS3h3QixFQUFPeXVCLElBQzNCZ0MsR0FBTyxFQUNQendCLEdBQVF5dUIsRUFBUSxFQUNoQitCLEdBQU0vQixFQUFRLEdBRVRBLEtBQVUsR0FDWHp1QixLQUFRMEMsRUFBR0EsRUFBRTh0QixHQUFNOXRCLEVBQUUxQyxVQUNiMEMsRUFBRTh0QixHQUNkQSxHQUFNQyxFQUNOendCLEdBQVF5d0IsRUFDUixPQUFPL3RCLGlDQzNCWCxJQUFJTixFQUFXLEVBQVEsT0FDbkJ3QixFQUFrQixFQUFRLE9BQzFCckIsRUFBb0IsRUFBUSxPQUloQzVDLEVBQU9DLFFBQVUsU0FBYzJELEdBTzdCLElBTkEsSUFBSWIsRUFBSU4sRUFBU1EsTUFDYkcsRUFBU1IsRUFBa0JHLEdBQzNCRyxFQUFrQkMsVUFBVUMsT0FDNUJVLEVBQVFHLEVBQWdCZixFQUFrQixFQUFJQyxVQUFVLFFBQUtHLEVBQVdGLEdBQ3hFNEQsRUFBTTlELEVBQWtCLEVBQUlDLFVBQVUsUUFBS0csRUFDM0N5dEIsT0FBaUJ6dEIsSUFBUjBELEVBQW9CNUQsRUFBU2EsRUFBZ0IrQyxFQUFLNUQsR0FDeEQydEIsRUFBU2p0QixHQUFPZixFQUFFZSxLQUFXRixFQUNwQyxPQUFPYixpQ0NkVCxJQUFJMmxCLEVBQVcsaUJBR1hzSSxFQUZzQixFQUFRLEtBRWRDLENBQW9CLFdBSXhDanhCLEVBQU9DLFFBQVcrd0IsRUFHZCxHQUFHcHJCLFFBSDJCLFNBQWlCUCxHQUNqRCxPQUFPcWpCLEVBQVN6bEIsS0FBTW9DLEVBQVlsQyxVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0cscUJDVDFFLElBQUlWLEVBQW9CLEVBQVEsT0FFaEM1QyxFQUFPQyxRQUFVLFNBQVVpZCxFQUFhN0ssR0FJdEMsSUFIQSxJQUFJdk8sRUFBUSxFQUNSVixFQUFTUixFQUFrQnlQLEdBQzNCN08sRUFBUyxJQUFJMFosRUFBWTlaLEdBQ3RCQSxFQUFTVSxHQUFPTixFQUFPTSxHQUFTdU8sRUFBS3ZPLEtBQzVDLE9BQU9OLGlDQ05ULElBQUl6QixFQUFTLEVBQVEsT0FDakJwQixFQUFPLEVBQVEsT0FDZjZCLEVBQU8sRUFBUSxPQUNmQyxFQUFXLEVBQVEsT0FDbkJDLEVBQStCLEVBQVEsT0FDdkNDLEVBQXdCLEVBQVEsT0FDaENQLEVBQWdCLEVBQVEsTUFDeEJRLEVBQW9CLEVBQVEsT0FDNUJDLEVBQWlCLEVBQVEsT0FDekJoQyxFQUFjLEVBQVEsT0FDdEJELEVBQW9CLEVBQVEsT0FFNUJSLEVBQVEyQixFQUFPM0IsTUFJbkJKLEVBQU9DLFFBQVUsU0FBYzZDLEdBQzdCLElBQUlDLEVBQUlOLEVBQVNLLEdBQ2JFLEVBQWlCWixFQUFjYSxNQUMvQkMsRUFBa0JDLFVBQVVDLE9BQzVCQyxFQUFRSCxFQUFrQixFQUFJQyxVQUFVLFFBQUtHLEVBQzdDQyxPQUFvQkQsSUFBVkQsRUFDVkUsSUFBU0YsRUFBUTFDLEVBQUswQyxFQUFPSCxFQUFrQixFQUFJQyxVQUFVLFFBQUtHLElBQ3RFLElBRUlGLEVBQVFJLEVBQVFDLEVBQU1DLEVBQVVDLEVBQU1DLEVBRnRDQyxFQUFpQmpELEVBQWtCbUMsR0FDbkNlLEVBQVEsRUFHWixJQUFJRCxHQUFvQlosTUFBUTdDLEdBQVN1QyxFQUFzQmtCLEdBVzdELElBRkFULEVBQVNSLEVBQWtCRyxHQUMzQlMsRUFBU1IsRUFBaUIsSUFBSUMsS0FBS0csR0FBVWhELEVBQU1nRCxHQUM3Q0EsRUFBU1UsRUFBT0EsSUFDcEJGLEVBQVFMLEVBQVVGLEVBQU1OLEVBQUVlLEdBQVFBLEdBQVNmLEVBQUVlLEdBQzdDakIsRUFBZVcsRUFBUU0sRUFBT0YsUUFUaEMsSUFGQUQsR0FEQUQsRUFBVzdDLEVBQVlrQyxFQUFHYyxJQUNWRixLQUNoQkgsRUFBU1IsRUFBaUIsSUFBSUMsS0FBUyxLQUMvQlEsRUFBT2pCLEVBQUttQixFQUFNRCxJQUFXSyxLQUFNRCxJQUN6Q0YsRUFBUUwsRUFBVWIsRUFBNkJnQixFQUFVTCxFQUFPLENBQUNJLEVBQUtHLE1BQU9FLElBQVEsR0FBUUwsRUFBS0csTUFDbEdmLEVBQWVXLEVBQVFNLEVBQU9GLEdBV2xDLE9BREFKLEVBQU9KLE9BQVNVLEVBQ1ROLG9CQzdDVCxJQUFJUSxFQUFrQixFQUFRLE9BQzFCQyxFQUFrQixFQUFRLE9BQzFCckIsRUFBb0IsRUFBUSxPQUc1QnNCLEVBQWUsU0FBVUMsR0FDM0IsT0FBTyxTQUFVQyxFQUFPQyxFQUFJQyxHQUMxQixJQUdJVixFQUhBYixFQUFJaUIsRUFBZ0JJLEdBQ3BCaEIsRUFBU1IsRUFBa0JHLEdBQzNCZSxFQUFRRyxFQUFnQkssRUFBV2xCLEdBSXZDLEdBQUllLEdBQWVFLEdBQU1BLEdBQUksS0FBT2pCLEVBQVNVLEdBRzNDLElBRkFGLEVBQVFiLEVBQUVlLE9BRUdGLEVBQU8sT0FBTyxPQUV0QixLQUFNUixFQUFTVSxFQUFPQSxJQUMzQixJQUFLSyxHQUFlTCxLQUFTZixJQUFNQSxFQUFFZSxLQUFXTyxFQUFJLE9BQU9GLEdBQWVMLEdBQVMsRUFDbkYsT0FBUUssSUFBZ0IsSUFJOUJuRSxFQUFPQyxRQUFVLENBR2ZzRSxTQUFVTCxHQUFhLEdBR3ZCTSxRQUFTTixHQUFhLHFCQzlCeEIsSUFBSXZELEVBQU8sRUFBUSxPQUNmOEQsRUFBYyxFQUFRLE1BQ3RCQyxFQUFnQixFQUFRLE9BQ3hCakMsRUFBVyxFQUFRLE9BQ25CRyxFQUFvQixFQUFRLE9BQzVCK0IsRUFBcUIsRUFBUSxPQUU3QkMsRUFBT0gsRUFBWSxHQUFHRyxNQUd0QlYsRUFBZSxTQUFVVyxHQUMzQixJQUFJQyxFQUFpQixHQUFSRCxFQUNURSxFQUFvQixHQUFSRixFQUNaRyxFQUFrQixHQUFSSCxFQUNWSSxFQUFtQixHQUFSSixFQUNYSyxFQUF3QixHQUFSTCxFQUNoQk0sRUFBMkIsR0FBUk4sRUFDbkJPLEVBQW1CLEdBQVJQLEdBQWFLLEVBQzVCLE9BQU8sU0FBVWQsRUFBT2lCLEVBQVlDLEVBQU1DLEdBU3hDLElBUkEsSUFPSTNCLEVBQU9KLEVBUFBULEVBQUlOLEVBQVMyQixHQUNib0IsRUFBT2QsRUFBYzNCLEdBQ3JCMEMsRUFBZ0I5RSxFQUFLMEUsRUFBWUMsR0FDakNsQyxFQUFTUixFQUFrQjRDLEdBQzNCMUIsRUFBUSxFQUNSNEIsRUFBU0gsR0FBa0JaLEVBQzNCZ0IsRUFBU2IsRUFBU1ksRUFBT3RCLEVBQU9oQixHQUFVMkIsR0FBYUksRUFBbUJPLEVBQU90QixFQUFPLFFBQUtkLEVBRTNGRixFQUFTVSxFQUFPQSxJQUFTLElBQUlzQixHQUFZdEIsS0FBUzBCLEtBRXREaEMsRUFBU2lDLEVBRFQ3QixFQUFRNEIsRUFBSzFCLEdBQ2lCQSxFQUFPZixHQUNqQzhCLEdBQ0YsR0FBSUMsRUFBUWEsRUFBTzdCLEdBQVNOLE9BQ3ZCLEdBQUlBLEVBQVEsT0FBUXFCLEdBQ3ZCLEtBQUssRUFBRyxPQUFPLEVBQ2YsS0FBSyxFQUFHLE9BQU9qQixFQUNmLEtBQUssRUFBRyxPQUFPRSxFQUNmLEtBQUssRUFBR2MsRUFBS2UsRUFBUS9CLFFBQ2hCLE9BQVFpQixHQUNiLEtBQUssRUFBRyxPQUFPLEVBQ2YsS0FBSyxFQUFHRCxFQUFLZSxFQUFRL0IsR0FJM0IsT0FBT3NCLEdBQWlCLEVBQUlGLEdBQVdDLEVBQVdBLEVBQVdVLElBSWpFM0YsRUFBT0MsUUFBVSxDQUdmMkYsUUFBUzFCLEVBQWEsR0FHdEIyQixJQUFLM0IsRUFBYSxHQUdsQjRCLE9BQVE1QixFQUFhLEdBR3JCNkIsS0FBTTdCLEVBQWEsR0FHbkI4QixNQUFPOUIsRUFBYSxHQUdwQitCLEtBQU0vQixFQUFhLEdBR25CZ0MsVUFBV2hDLEVBQWEsR0FHeEJpQyxhQUFjakMsRUFBYSxrQ0NyRTdCLElBQUkrTCxFQUFRLEVBQVEsT0FDaEJqTSxFQUFrQixFQUFRLE9BQzFCOFosRUFBc0IsRUFBUSxPQUM5QmxiLEVBQW9CLEVBQVEsT0FDNUJxdUIsRUFBc0IsRUFBUSxNQUU5QjVRLEVBQU12WixLQUFLdVosSUFDWDZRLEVBQWUsR0FBR0MsWUFDbEJDLElBQWtCRixHQUFnQixFQUFJLENBQUMsR0FBR0MsWUFBWSxHQUFJLEdBQUssRUFDL0RILEVBQWdCQyxFQUFvQixlQUNwQ2psQixFQUFTb2xCLElBQWtCSixFQUkvQmh4QixFQUFPQyxRQUFVK0wsRUFBUyxTQUFxQnFsQixHQUU3QyxHQUFJRCxFQUFlLE9BQU9uaEIsRUFBTWloQixFQUFjanVCLEtBQU1FLFlBQWMsRUFDbEUsSUFBSUosRUFBSWlCLEVBQWdCZixNQUNwQkcsRUFBU1IsRUFBa0JHLEdBQzNCZSxFQUFRVixFQUFTLEVBR3JCLElBRklELFVBQVVDLE9BQVMsSUFBR1UsRUFBUXVjLEVBQUl2YyxFQUFPZ2EsRUFBb0IzYSxVQUFVLE1BQ3ZFVyxFQUFRLElBQUdBLEVBQVFWLEVBQVNVLEdBQzFCQSxHQUFTLEVBQUdBLElBQVMsR0FBSUEsS0FBU2YsR0FBS0EsRUFBRWUsS0FBV3V0QixFQUFlLE9BQU92dEIsR0FBUyxFQUN6RixPQUFRLEdBQ05vdEIsbUJDMUJKLElBQUk5cUIsRUFBUSxFQUFRLE9BQ2hCQyxFQUFrQixFQUFRLE1BQzFCQyxFQUFhLEVBQVEsTUFFckJDLEVBQVVGLEVBQWdCLFdBRTlCckcsRUFBT0MsUUFBVSxTQUFVdUcsR0FJekIsT0FBT0YsR0FBYyxLQUFPRixHQUFNLFdBQ2hDLElBQUlLLEVBQVEsR0FLWixPQUprQkEsRUFBTUMsWUFBYyxJQUMxQkgsR0FBVyxXQUNyQixNQUFPLENBQUVJLElBQUssSUFFMkIsSUFBcENGLEVBQU1ELEdBQWFJLFNBQVNELHFDQ2Z2QyxJQUFJUCxFQUFRLEVBQVEsT0FFcEJwRyxFQUFPQyxRQUFVLFNBQVV1RyxFQUFhckUsR0FDdEMsSUFBSXBCLEVBQVMsR0FBR3lGLEdBQ2hCLFFBQVN6RixHQUFVcUYsR0FBTSxXQUV2QnJGLEVBQU95QixLQUFLLEtBQU1MLEdBQVksV0FBYyxNQUFNLEdBQU0sd0JDUDVELElBQUlKLEVBQVMsRUFBUSxPQUNqQjhQLEVBQVksRUFBUSxPQUNwQnBQLEVBQVcsRUFBUSxPQUNuQmlDLEVBQWdCLEVBQVEsT0FDeEI5QixFQUFvQixFQUFRLE9BRTVCVixFQUFZSCxFQUFPRyxVQUduQmdDLEVBQWUsU0FBVW90QixHQUMzQixPQUFPLFNBQVVoc0IsRUFBTUQsRUFBWW5DLEVBQWlCcXVCLEdBQ2xEMWYsRUFBVXhNLEdBQ1YsSUFBSXRDLEVBQUlOLEVBQVM2QyxHQUNiRSxFQUFPZCxFQUFjM0IsR0FDckJLLEVBQVNSLEVBQWtCRyxHQUMzQmUsRUFBUXd0QixFQUFXbHVCLEVBQVMsRUFBSSxFQUNoQ3dHLEVBQUkwbkIsR0FBWSxFQUFJLEVBQ3hCLEdBQUlwdUIsRUFBa0IsRUFBRyxPQUFhLENBQ3BDLEdBQUlZLEtBQVMwQixFQUFNLENBQ2pCK3JCLEVBQU8vckIsRUFBSzFCLEdBQ1pBLEdBQVM4RixFQUNULE1BR0YsR0FEQTlGLEdBQVM4RixFQUNMMG5CLEVBQVd4dEIsRUFBUSxFQUFJVixHQUFVVSxFQUNuQyxNQUFNNUIsRUFBVSwrQ0FHcEIsS0FBTW92QixFQUFXeHRCLEdBQVMsRUFBSVYsRUFBU1UsRUFBT0EsR0FBUzhGLEVBQU85RixLQUFTMEIsSUFDckUrckIsRUFBT2xzQixFQUFXa3NCLEVBQU0vckIsRUFBSzFCLEdBQVFBLEVBQU9mLElBRTlDLE9BQU93dUIsSUFJWHZ4QixFQUFPQyxRQUFVLENBR2Z1eEIsS0FBTXR0QixHQUFhLEdBR25CdXRCLE1BQU92dEIsR0FBYSxxQkN6Q3RCLElBQUluQyxFQUFTLEVBQVEsT0FDakJrQyxFQUFrQixFQUFRLE9BQzFCckIsRUFBb0IsRUFBUSxPQUM1QkMsRUFBaUIsRUFBUSxPQUV6QnpDLEVBQVEyQixFQUFPM0IsTUFDZnlHLEVBQU1DLEtBQUtELElBRWY3RyxFQUFPQyxRQUFVLFNBQVU4QyxFQUFHZ0UsRUFBT0MsR0FLbkMsSUFKQSxJQUFJNUQsRUFBU1IsRUFBa0JHLEdBQzNCa0UsRUFBSWhELEVBQWdCOEMsRUFBTzNELEdBQzNCOEQsRUFBTWpELE9BQXdCWCxJQUFSMEQsRUFBb0I1RCxFQUFTNEQsRUFBSzVELEdBQ3hESSxFQUFTcEQsRUFBTXlHLEVBQUlLLEVBQU1ELEVBQUcsSUFDdkJFLEVBQUksRUFBR0YsRUFBSUMsRUFBS0QsSUFBS0UsSUFBS3RFLEVBQWVXLEVBQVEyRCxFQUFHcEUsRUFBRWtFLElBRS9ELE9BREF6RCxFQUFPSixPQUFTK0QsRUFDVDNELG9CQ2ZULElBQUlpQixFQUFjLEVBQVEsTUFFMUJ6RSxFQUFPQyxRQUFVd0UsRUFBWSxHQUFHL0Qsd0JDRmhDLElBQUlxUixFQUFhLEVBQVEsT0FFckJ5TyxFQUFRMVosS0FBSzBaLE1BRWJrUixFQUFZLFNBQVVqckIsRUFBT2tyQixHQUMvQixJQUFJdnVCLEVBQVNxRCxFQUFNckQsT0FDZnd1QixFQUFTcFIsRUFBTXBkLEVBQVMsR0FDNUIsT0FBT0EsRUFBUyxFQUFJeXVCLEVBQWNwckIsRUFBT2tyQixHQUFhRyxFQUNwRHJyQixFQUNBaXJCLEVBQVUzZixFQUFXdEwsRUFBTyxFQUFHbXJCLEdBQVNELEdBQ3hDRCxFQUFVM2YsRUFBV3RMLEVBQU9tckIsR0FBU0QsR0FDckNBLElBSUFFLEVBQWdCLFNBQVVwckIsRUFBT2tyQixHQUtuQyxJQUpBLElBRUlJLEVBQVN4QyxFQUZUbnNCLEVBQVNxRCxFQUFNckQsT0FDZndHLEVBQUksRUFHREEsRUFBSXhHLEdBQVEsQ0FHakIsSUFGQW1zQixFQUFJM2xCLEVBQ0ptb0IsRUFBVXRyQixFQUFNbUQsR0FDVDJsQixHQUFLb0MsRUFBVWxyQixFQUFNOG9CLEVBQUksR0FBSXdDLEdBQVcsR0FDN0N0ckIsRUFBTThvQixHQUFLOW9CLElBQVE4b0IsR0FFakJBLElBQU0zbEIsTUFBS25ELEVBQU04b0IsR0FBS3dDLEdBQzFCLE9BQU90ckIsR0FHUHFyQixFQUFRLFNBQVVyckIsRUFBTytxQixFQUFNQyxFQUFPRSxHQU14QyxJQUxBLElBQUlLLEVBQVVSLEVBQUtwdUIsT0FDZjZ1QixFQUFVUixFQUFNcnVCLE9BQ2hCOHVCLEVBQVMsRUFDVEMsRUFBUyxFQUVORCxFQUFTRixHQUFXRyxFQUFTRixHQUNsQ3hyQixFQUFNeXJCLEVBQVNDLEdBQVdELEVBQVNGLEdBQVdHLEVBQVNGLEVBQ25ETixFQUFVSCxFQUFLVSxHQUFTVCxFQUFNVSxLQUFZLEVBQUlYLEVBQUtVLEtBQVlULEVBQU1VLEtBQ3JFRCxFQUFTRixFQUFVUixFQUFLVSxLQUFZVCxFQUFNVSxLQUM5QyxPQUFPMXJCLEdBR1h6RyxFQUFPQyxRQUFVeXhCLG1CQzNDakIsSUFBSTN2QixFQUFTLEVBQVEsT0FDakJ6QixFQUFVLEVBQVEsT0FDbEI4QixFQUFnQixFQUFRLE1BQ3hCRyxFQUFXLEVBQVEsT0FHbkJnRSxFQUZrQixFQUFRLEtBRWhCRixDQUFnQixXQUMxQmpHLEVBQVEyQixFQUFPM0IsTUFJbkJKLEVBQU9DLFFBQVUsU0FBVW1ILEdBQ3pCLElBQUlDLEVBU0YsT0FSRS9HLEVBQVE4RyxLQUNWQyxFQUFJRCxFQUFjVixhQUVkdEUsRUFBY2lGLEtBQU9BLElBQU1qSCxHQUFTRSxFQUFRK0csRUFBRW5HLGFBQ3pDcUIsRUFBUzhFLElBRU4sUUFEVkEsRUFBSUEsRUFBRWQsT0FGdURjLE9BQUkvRCxTQUt0REEsSUFBTitELEVBQWtCakgsRUFBUWlILG9CQ3JCckMsSUFBSUMsRUFBMEIsRUFBUSxPQUl0Q3RILEVBQU9DLFFBQVUsU0FBVW1ILEVBQWVoRSxHQUN4QyxPQUFPLElBQUtrRSxFQUF3QkYsR0FBN0IsQ0FBd0QsSUFBWGhFLEVBQWUsRUFBSUEscUJDTHpFLElBQUltRSxFQUFXLEVBQVEsT0FDbkJDLEVBQWdCLEVBQVEsT0FHNUJ4SCxFQUFPQyxRQUFVLFNBQVV5RCxFQUFVK0QsRUFBSTdELEVBQU84RCxHQUM5QyxJQUNFLE9BQU9BLEVBQVVELEVBQUdGLEVBQVMzRCxHQUFPLEdBQUlBLEVBQU0sSUFBTTZELEVBQUc3RCxHQUN2RCxNQUFPK0QsR0FDUEgsRUFBYzlELEVBQVUsUUFBU2lFLHNCQ1JyQyxJQUVJQyxFQUZrQixFQUFRLEtBRWZ2QixDQUFnQixZQUMzQndCLEdBQWUsRUFFbkIsSUFDRSxJQUFJQyxFQUFTLEVBQ1RDLEVBQXFCLENBQ3ZCcEUsS0FBTSxXQUNKLE1BQU8sQ0FBRUksT0FBUStELE1BRW5CLE9BQVUsV0FDUkQsR0FBZSxJQUduQkUsRUFBbUJILEdBQVksV0FDN0IsT0FBTzNFLE1BR1Q3QyxNQUFNQyxLQUFLMEgsR0FBb0IsV0FBYyxNQUFNLEtBQ25ELE1BQU9KLElBRVQzSCxFQUFPQyxRQUFVLFNBQVUrSCxFQUFNQyxHQUMvQixJQUFLQSxJQUFpQkosRUFBYyxPQUFPLEVBQzNDLElBQUlLLEdBQW9CLEVBQ3hCLElBQ0UsSUFBSUMsRUFBUyxHQUNiQSxFQUFPUCxHQUFZLFdBQ2pCLE1BQU8sQ0FDTGpFLEtBQU0sV0FDSixNQUFPLENBQUVJLEtBQU1tRSxHQUFvQixNQUl6Q0YsRUFBS0csR0FDTCxNQUFPUixJQUNULE9BQU9PLG9CQ3BDVCxJQUFJekQsRUFBYyxFQUFRLE1BRXRCMkQsRUFBVzNELEVBQVksR0FBRzJELFVBQzFCQyxFQUFjNUQsRUFBWSxHQUFHL0QsT0FFakNWLEVBQU9DLFFBQVUsU0FBVWtCLEdBQ3pCLE9BQU9rSCxFQUFZRCxFQUFTakgsR0FBSyxHQUFJLHFCQ052QyxJQUFJWSxFQUFTLEVBQVEsT0FDakJ1RyxFQUF3QixFQUFRLE9BQ2hDdEcsRUFBYSxFQUFRLE9BQ3JCdUcsRUFBYSxFQUFRLE9BR3JCQyxFQUZrQixFQUFRLEtBRVZuQyxDQUFnQixlQUNoQy9FLEVBQVNTLEVBQU9ULE9BR2hCbUgsRUFBdUUsYUFBbkRGLEVBQVcsV0FBYyxPQUFPcEYsVUFBckIsSUFVbkNuRCxFQUFPQyxRQUFVcUksRUFBd0JDLEVBQWEsU0FBVXBILEdBQzlELElBQUk0QixFQUFHMkYsRUFBS2xGLEVBQ1osWUFBY0YsSUFBUG5DLEVBQW1CLFlBQXFCLE9BQVBBLEVBQWMsT0FFTSxpQkFBaER1SCxFQVhELFNBQVV2SCxFQUFJSyxHQUN6QixJQUNFLE9BQU9MLEVBQUdLLEdBQ1YsTUFBT21HLEtBUVNnQixDQUFPNUYsRUFBSXpCLEVBQU9ILEdBQUtxSCxJQUE4QkUsRUFFbkVELEVBQW9CRixFQUFXeEYsR0FFSCxXQUEzQlMsRUFBUytFLEVBQVd4RixLQUFtQmYsRUFBV2UsRUFBRTZGLFFBQVUsWUFBY3BGLGlDQzNCbkYsSUFBSWpDLEVBQWlCLFVBQ2pCbUUsRUFBUyxFQUFRLE9BQ2pCd2YsRUFBYyxFQUFRLE9BQ3RCdmtCLEVBQU8sRUFBUSxPQUNmeWtCLEVBQWEsRUFBUSxPQUNyQjFELEVBQVUsRUFBUSxPQUNsQnlCLEVBQWlCLEVBQVEsT0FDekJnQyxFQUFhLEVBQVEsT0FDckI1YSxFQUFjLEVBQVEsT0FDdEI2bkIsRUFBVSxpQkFDVmxQLEVBQXNCLEVBQVEsT0FFOUJHLEVBQW1CSCxFQUFvQnpQLElBQ3ZDNGUsRUFBeUJuUCxFQUFvQnpPLFVBRWpEelUsRUFBT0MsUUFBVSxDQUNmcXlCLGVBQWdCLFNBQVV6SyxFQUFTNUssRUFBa0JuWSxFQUFReXRCLEdBQzNELElBQUlyVixFQUFjMkssR0FBUSxTQUFVdmlCLEVBQU15USxHQUN4Q3FQLEVBQVc5ZixFQUFNaEQsR0FDakIrZ0IsRUFBaUIvZCxFQUFNLENBQ3JCb1AsS0FBTXVJLEVBQ05uWixNQUFPNEIsRUFBTyxNQUNkMFksV0FBTzlhLEVBQ1AyVCxVQUFNM1QsRUFDTmliLEtBQU0sSUFFSGhVLElBQWFqRixFQUFLaVosS0FBTyxHQUNkamIsTUFBWnlTLEdBQXVCMkwsRUFBUTNMLEVBQVV6USxFQUFLaXRCLEdBQVEsQ0FBRWp0QixLQUFNQSxFQUFNNFEsV0FBWXBSLE9BR2xGeEMsRUFBWTRhLEVBQVloYyxVQUV4Qm9pQixFQUFtQitPLEVBQXVCcFYsR0FFMUN1VixFQUFTLFNBQVVsdEIsRUFBTTlELEVBQUtvQyxHQUNoQyxJQUVJNnVCLEVBQVUzdUIsRUFGVm1RLEVBQVFxUCxFQUFpQmhlLEdBQ3pCeVgsRUFBUTJWLEVBQVNwdEIsRUFBTTlELEdBcUJ6QixPQWxCRXViLEVBQ0ZBLEVBQU1uWixNQUFRQSxHQUdkcVEsRUFBTWdELEtBQU84RixFQUFRLENBQ25CalosTUFBT0EsRUFBUXN1QixFQUFRNXdCLEdBQUssR0FDNUJBLElBQUtBLEVBQ0xvQyxNQUFPQSxFQUNQNnVCLFNBQVVBLEVBQVd4ZSxFQUFNZ0QsS0FDM0J0VCxVQUFNTCxFQUNOcXZCLFNBQVMsR0FFTjFlLEVBQU1tSyxRQUFPbkssRUFBTW1LLE1BQVFyQixHQUM1QjBWLElBQVVBLEVBQVM5dUIsS0FBT29aLEdBQzFCeFMsRUFBYTBKLEVBQU1zSyxPQUNsQmpaLEVBQUtpWixPQUVJLE1BQVZ6YSxJQUFlbVEsRUFBTW5RLE1BQU1BLEdBQVNpWixJQUNqQ3pYLEdBR1BvdEIsRUFBVyxTQUFVcHRCLEVBQU05RCxHQUM3QixJQUdJdWIsRUFIQTlJLEVBQVFxUCxFQUFpQmhlLEdBRXpCeEIsRUFBUXN1QixFQUFRNXdCLEdBRXBCLEdBQWMsTUFBVnNDLEVBQWUsT0FBT21RLEVBQU1uUSxNQUFNQSxHQUV0QyxJQUFLaVosRUFBUTlJLEVBQU1tSyxNQUFPckIsRUFBT0EsRUFBUUEsRUFBTXBaLEtBQzdDLEdBQUlvWixFQUFNdmIsS0FBT0EsRUFBSyxPQUFPdWIsR0F3RmpDLE9BcEZBbUksRUFBWTVpQixFQUFXLENBSXJCd2MsTUFBTyxXQUtMLElBSkEsSUFDSTdLLEVBQVFxUCxFQUREcmdCLE1BRVBtUyxFQUFPbkIsRUFBTW5RLE1BQ2JpWixFQUFROUksRUFBTW1LLE1BQ1hyQixHQUNMQSxFQUFNNFYsU0FBVSxFQUNaNVYsRUFBTTBWLFdBQVUxVixFQUFNMFYsU0FBVzFWLEVBQU0wVixTQUFTOXVCLFVBQU9MLFVBQ3BEOFIsRUFBSzJILEVBQU1qWixPQUNsQmlaLEVBQVFBLEVBQU1wWixLQUVoQnNRLEVBQU1tSyxNQUFRbkssRUFBTWdELFVBQU8zVCxFQUN2QmlILEVBQWEwSixFQUFNc0ssS0FBTyxFQVhuQnRiLEtBWURzYixLQUFPLEdBS25CLE9BQVUsU0FBVS9jLEdBQ2xCLElBQUk4RCxFQUFPckMsS0FDUGdSLEVBQVFxUCxFQUFpQmhlLEdBQ3pCeVgsRUFBUTJWLEVBQVNwdEIsRUFBTTlELEdBQzNCLEdBQUl1YixFQUFPLENBQ1QsSUFBSXBaLEVBQU9vWixFQUFNcFosS0FDYml2QixFQUFPN1YsRUFBTTBWLGdCQUNWeGUsRUFBTW5RLE1BQU1pWixFQUFNalosT0FDekJpWixFQUFNNFYsU0FBVSxFQUNaQyxJQUFNQSxFQUFLanZCLEtBQU9BLEdBQ2xCQSxJQUFNQSxFQUFLOHVCLFNBQVdHLEdBQ3RCM2UsRUFBTW1LLE9BQVNyQixJQUFPOUksRUFBTW1LLE1BQVF6YSxHQUNwQ3NRLEVBQU1nRCxNQUFROEYsSUFBTzlJLEVBQU1nRCxLQUFPMmIsR0FDbENyb0IsRUFBYTBKLEVBQU1zSyxPQUNsQmpaLEVBQUtpWixPQUNWLFFBQVN4QixHQUtiblgsUUFBUyxTQUFpQlAsR0FJeEIsSUFIQSxJQUVJMFgsRUFGQTlJLEVBQVFxUCxFQUFpQnJnQixNQUN6QndDLEVBQWdCOUUsRUFBSzBFLEVBQVlsQyxVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csR0FFcEV5WixFQUFRQSxFQUFRQSxFQUFNcFosS0FBT3NRLEVBQU1tSyxPQUd4QyxJQUZBM1ksRUFBY3NYLEVBQU1uWixNQUFPbVosRUFBTXZiLElBQUt5QixNQUUvQjhaLEdBQVNBLEVBQU00VixTQUFTNVYsRUFBUUEsRUFBTTBWLFVBTWpEL2UsSUFBSyxTQUFhbFMsR0FDaEIsUUFBU2t4QixFQUFTenZCLEtBQU16QixNQUk1QjBqQixFQUFZNWlCLEVBQVd3QyxFQUFTLENBRzlCbUksSUFBSyxTQUFhekwsR0FDaEIsSUFBSXViLEVBQVEyVixFQUFTenZCLEtBQU16QixHQUMzQixPQUFPdWIsR0FBU0EsRUFBTW5aLE9BSXhCNlAsSUFBSyxTQUFhalMsRUFBS29DLEdBQ3JCLE9BQU80dUIsRUFBT3Z2QixLQUFjLElBQVJ6QixFQUFZLEVBQUlBLEVBQUtvQyxLQUV6QyxDQUdGaVosSUFBSyxTQUFhalosR0FDaEIsT0FBTzR1QixFQUFPdnZCLEtBQU1XLEVBQWtCLElBQVZBLEVBQWMsRUFBSUEsRUFBT0EsTUFHckQyRyxHQUFhaEosRUFBZWUsRUFBVyxPQUFRLENBQ2pEMkssSUFBSyxXQUNILE9BQU9xVyxFQUFpQnJnQixNQUFNc2IsUUFHM0JyQixHQUVUMlYsVUFBVyxTQUFVM1YsRUFBYUQsRUFBa0JuWSxHQUNsRCxJQUFJZ3VCLEVBQWdCN1YsRUFBbUIsWUFDbkM4VixFQUE2QlYsRUFBdUJwVixHQUNwRCtWLEVBQTJCWCxFQUF1QlMsR0FVdEQzUCxFQUFlakcsRUFBYUQsR0FBa0IsU0FBVXNHLEVBQVUvTSxHQUNoRTZNLEVBQWlCcGdCLEtBQU0sQ0FDckJ5UixLQUFNb2UsRUFDTm50QixPQUFRNGQsRUFDUnRQLE1BQU84ZSxFQUEyQnhQLEdBQ2xDL00sS0FBTUEsRUFDTlMsVUFBTTNULE9BRVAsV0FLRCxJQUpBLElBQUkyUSxFQUFRK2UsRUFBeUIvdkIsTUFDakN1VCxFQUFPdkMsRUFBTXVDLEtBQ2J1RyxFQUFROUksRUFBTWdELEtBRVg4RixHQUFTQSxFQUFNNFYsU0FBUzVWLEVBQVFBLEVBQU0wVixTQUU3QyxPQUFLeGUsRUFBTXRPLFNBQVlzTyxFQUFNZ0QsS0FBTzhGLEVBQVFBLEVBQVFBLEVBQU1wWixLQUFPc1EsRUFBTUEsTUFBTW1LLE9BTWpFLFFBQVI1SCxFQUF1QixDQUFFNVMsTUFBT21aLEVBQU12YixJQUFLdUMsTUFBTSxHQUN6QyxVQUFSeVMsRUFBeUIsQ0FBRTVTLE1BQU9tWixFQUFNblosTUFBT0csTUFBTSxHQUNsRCxDQUFFSCxNQUFPLENBQUNtWixFQUFNdmIsSUFBS3ViLEVBQU1uWixPQUFRRyxNQUFNLElBTjlDa1EsRUFBTXRPLFlBQVNyQyxFQUNSLENBQUVNLFdBQU9OLEVBQVdTLE1BQU0sTUFNbENlLEVBQVMsVUFBWSxVQUFXQSxHQUFRLEdBSzNDcWdCLEVBQVdsSSxtQ0N4TWYsSUFBSW5TLEVBQUksRUFBUSxPQUNaL0ksRUFBUyxFQUFRLE9BQ2pCMEMsRUFBYyxFQUFRLE1BQ3RCeUwsRUFBVyxFQUFRLE9BQ25COUUsRUFBVyxFQUFRLE9BQ25CNm5CLEVBQXlCLEVBQVEsT0FDakN2UixFQUFVLEVBQVEsT0FDbEIwRCxFQUFhLEVBQVEsT0FDckJwakIsRUFBYSxFQUFRLE9BQ3JCTyxFQUFXLEVBQVEsT0FDbkI2RCxFQUFRLEVBQVEsT0FDaEI0YyxFQUE4QixFQUFRLE9BQ3RDL1ksRUFBaUIsRUFBUSxPQUN6QmlwQixFQUFvQixFQUFRLE9BRWhDbHpCLEVBQU9DLFFBQVUsU0FBVWdkLEVBQWtCNEssRUFBU3NMLEdBQ3BELElBQUlydUIsR0FBOEMsSUFBckNtWSxFQUFpQnpZLFFBQVEsT0FDbEM0dUIsR0FBZ0QsSUFBdENuVyxFQUFpQnpZLFFBQVEsUUFDbkMrdEIsRUFBUXp0QixFQUFTLE1BQVEsTUFDekJzTCxFQUFvQnJPLEVBQU9rYixHQUMzQm9XLEVBQWtCampCLEdBQXFCQSxFQUFrQmxQLFVBQ3pEZ2MsRUFBYzlNLEVBQ2RrakIsRUFBVyxHQUVYQyxFQUFZLFNBQVVwbkIsR0FDeEIsSUFBSXFuQixFQUF3Qi91QixFQUFZNHVCLEVBQWdCbG5CLElBQ3hEZixFQUFTaW9CLEVBQWlCbG5CLEVBQ2pCLE9BQVBBLEVBQWUsU0FBYXZJLEdBRTFCLE9BREE0dkIsRUFBc0J2d0IsS0FBZ0IsSUFBVlcsRUFBYyxFQUFJQSxHQUN2Q1gsTUFDRSxVQUFQa0osRUFBa0IsU0FBVTNLLEdBQzlCLFFBQU80eEIsSUFBWTd3QixFQUFTZixLQUFlZ3lCLEVBQXNCdndCLEtBQWMsSUFBUnpCLEVBQVksRUFBSUEsSUFDOUUsT0FBUDJLLEVBQWUsU0FBYTNLLEdBQzlCLE9BQU80eEIsSUFBWTd3QixFQUFTZixRQUFPOEIsRUFBWWt3QixFQUFzQnZ3QixLQUFjLElBQVJ6QixFQUFZLEVBQUlBLElBQ2xGLE9BQVAySyxFQUFlLFNBQWEzSyxHQUM5QixRQUFPNHhCLElBQVk3d0IsRUFBU2YsS0FBZWd5QixFQUFzQnZ3QixLQUFjLElBQVJ6QixFQUFZLEVBQUlBLElBQ3JGLFNBQWFBLEVBQUtvQyxHQUVwQixPQURBNHZCLEVBQXNCdndCLEtBQWMsSUFBUnpCLEVBQVksRUFBSUEsRUFBS29DLEdBQzFDWCxRQVliLEdBUGNpTixFQUNaK00sR0FDQ2piLEVBQVdvTyxNQUF3QmdqQixHQUFXQyxFQUFnQnp0QixVQUFZUSxHQUFNLFlBQy9FLElBQUlnSyxHQUFvQnpELFVBQVVoSixZQU1wQ3VaLEVBQWNpVyxFQUFPYixlQUFlekssRUFBUzVLLEVBQWtCblksRUFBUXl0QixHQUN2RVUsRUFBdUJRLGNBQ2xCLEdBQUl2akIsRUFBUytNLEdBQWtCLEdBQU8sQ0FDM0MsSUFBSXlXLEVBQVcsSUFBSXhXLEVBRWZ5VyxFQUFpQkQsRUFBU25CLEdBQU9hLEVBQVUsSUFBTSxFQUFHLElBQU1NLEVBRTFERSxFQUF1Qnh0QixHQUFNLFdBQWNzdEIsRUFBU2hnQixJQUFJLE1BR3hEbWdCLEVBQW1CN1EsR0FBNEIsU0FBVWpOLEdBQVksSUFBSTNGLEVBQWtCMkYsTUFFM0YrZCxHQUFjVixHQUFXaHRCLEdBQU0sV0FJakMsSUFGQSxJQUFJMnRCLEVBQVksSUFBSTNqQixFQUNoQnRNLEVBQVEsRUFDTEEsS0FBU2l3QixFQUFVeEIsR0FBT3p1QixFQUFPQSxHQUN4QyxPQUFRaXdCLEVBQVVyZ0IsS0FBSyxNQUdwQm1nQixLQUNIM1csRUFBYzJLLEdBQVEsU0FBVW1NLEVBQU9qZSxHQUNyQ3FQLEVBQVc0TyxFQUFPWCxHQUNsQixJQUFJL3RCLEVBQU80dEIsRUFBa0IsSUFBSTlpQixFQUFxQjRqQixFQUFPOVcsR0FFN0QsT0FEZ0I1WixNQUFaeVMsR0FBdUIyTCxFQUFRM0wsRUFBVXpRLEVBQUtpdEIsR0FBUSxDQUFFanRCLEtBQU1BLEVBQU00USxXQUFZcFIsSUFDN0VRLE1BRUdwRSxVQUFZbXlCLEVBQ3hCQSxFQUFnQjNzQixZQUFjd1csSUFHNUIwVyxHQUF3QkUsS0FDMUJQLEVBQVUsVUFDVkEsRUFBVSxPQUNWenVCLEdBQVV5dUIsRUFBVSxTQUdsQk8sR0FBY0gsSUFBZ0JKLEVBQVVoQixHQUd4Q2EsR0FBV0MsRUFBZ0J2VSxjQUFjdVUsRUFBZ0J2VSxNQVUvRCxPQVBBd1UsRUFBU3JXLEdBQW9CQyxFQUM3QnBTLEVBQUUsQ0FBRS9JLFFBQVEsRUFBTWdMLE9BQVFtUSxHQUFlOU0sR0FBcUJrakIsR0FFOURycEIsRUFBZWlULEVBQWFELEdBRXZCbVcsR0FBU0QsRUFBT04sVUFBVTNWLEVBQWFELEVBQWtCblksR0FFdkRvWSxvQkN2R1QsSUFBSTdULEVBQVMsRUFBUSxPQUNqQkMsRUFBVSxFQUFRLE9BQ2xCQyxFQUFpQyxFQUFRLE9BQ3pDQyxFQUF1QixFQUFRLE1BRW5DeEosRUFBT0MsUUFBVSxTQUFVMEYsRUFBUThELEVBQVFDLEdBSXpDLElBSEEsSUFBSWpKLEVBQU82SSxFQUFRRyxHQUNmbEksRUFBaUJpSSxFQUFxQjFILEVBQ3RDNkgsRUFBMkJKLEVBQStCekgsRUFDckQ4SCxFQUFJLEVBQUdBLEVBQUluSixFQUFLMkMsT0FBUXdHLElBQUssQ0FDcEMsSUFBSXBJLEVBQU1mLEVBQUttSixHQUNWUCxFQUFPMUQsRUFBUW5FLElBQVVrSSxHQUFjTCxFQUFPSyxFQUFZbEksSUFDN0RELEVBQWVvRSxFQUFRbkUsRUFBS21JLEVBQXlCRixFQUFRakksdUJDWm5FLElBRUl5eUIsRUFGa0IsRUFBUSxLQUVsQjV0QixDQUFnQixTQUU1QnJHLEVBQU9DLFFBQVUsU0FBVXVHLEdBQ3pCLElBQUkwdEIsRUFBUyxJQUNiLElBQ0UsTUFBTTF0QixHQUFhMHRCLEdBQ25CLE1BQU9DLEdBQ1AsSUFFRSxPQURBRCxFQUFPRCxJQUFTLEVBQ1QsTUFBTXp0QixHQUFhMHRCLEdBQzFCLE1BQU9oSCxLQUNULE9BQU8sb0JDYlgsSUFBSTltQixFQUFRLEVBQVEsT0FFcEJwRyxFQUFPQyxTQUFXbUcsR0FBTSxXQUN0QixTQUFTeUQsS0FHVCxPQUZBQSxFQUFFM0ksVUFBVXdGLFlBQWMsS0FFbkJwRixPQUFPd0ksZUFBZSxJQUFJRCxLQUFTQSxFQUFFM0ksMkNDTDlDLElBQUk2SSxFQUFvQiwyQkFDcEJyRSxFQUFTLEVBQVEsT0FDakJzRSxFQUEyQixFQUFRLE9BQ25DQyxFQUFpQixFQUFRLE9BQ3pCQyxFQUFZLEVBQVEsT0FFcEJDLEVBQWEsV0FBYyxPQUFPbEgsTUFFdENqRCxFQUFPQyxRQUFVLFNBQVVtSyxFQUFxQkMsRUFBTTFHLEVBQU0yRyxHQUMxRCxJQUFJOUIsRUFBZ0I2QixFQUFPLFlBSTNCLE9BSEFELEVBQW9CbEosVUFBWXdFLEVBQU9xRSxFQUFtQixDQUFFcEcsS0FBTXFHLElBQTJCTSxFQUFpQjNHLEtBQzlHc0csRUFBZUcsRUFBcUI1QixHQUFlLEdBQU8sR0FDMUQwQixFQUFVMUIsR0FBaUIyQixFQUNwQkMsb0JDZFQsSUFBSUcsRUFBYyxFQUFRLE9BQ3RCZixFQUF1QixFQUFRLE1BQy9CUSxFQUEyQixFQUFRLE9BRXZDaEssRUFBT0MsUUFBVXNLLEVBQWMsU0FBVXBDLEVBQVEzRyxFQUFLb0MsR0FDcEQsT0FBTzRGLEVBQXFCMUgsRUFBRXFHLEVBQVEzRyxFQUFLd0ksRUFBeUIsRUFBR3BHLEtBQ3JFLFNBQVV1RSxFQUFRM0csRUFBS29DLEdBRXpCLE9BREF1RSxFQUFPM0csR0FBT29DLEVBQ1B1RSxjQ1JUbkksRUFBT0MsUUFBVSxTQUFVdUssRUFBUTVHLEdBQ2pDLE1BQU8sQ0FDTDZHLGFBQXVCLEVBQVRELEdBQ2RFLGVBQXlCLEVBQVRGLEdBQ2hCRyxXQUFxQixFQUFUSCxHQUNaNUcsTUFBT0Esa0NDSlgsSUFBSWdILEVBQWdCLEVBQVEsT0FDeEJwQixFQUF1QixFQUFRLE1BQy9CUSxFQUEyQixFQUFRLE9BRXZDaEssRUFBT0MsUUFBVSxTQUFVa0ksRUFBUTNHLEVBQUtvQyxHQUN0QyxJQUFJaUgsRUFBY0QsRUFBY3BKLEdBQzVCcUosS0FBZTFDLEVBQVFxQixFQUFxQjFILEVBQUVxRyxFQUFRMEMsRUFBYWIsRUFBeUIsRUFBR3BHLElBQzlGdUUsRUFBTzBDLEdBQWVqSCxpQ0NQN0IsSUFBSWtILEVBQUksRUFBUSxPQUNadEksRUFBTyxFQUFRLE9BQ2Z1SSxFQUFVLEVBQVEsT0FDbEJDLEVBQWUsRUFBUSxPQUN2QmhKLEVBQWEsRUFBUSxPQUNyQmlKLEVBQTRCLEVBQVEsT0FDcENuQixFQUFpQixFQUFRLE9BQ3pCb0IsRUFBaUIsRUFBUSxPQUN6QmpCLEVBQWlCLEVBQVEsT0FDekJrQixFQUE4QixFQUFRLE9BQ3RDQyxFQUFXLEVBQVEsT0FDbkIvRSxFQUFrQixFQUFRLE1BQzFCNkQsRUFBWSxFQUFRLE9BQ3BCbUIsRUFBZ0IsRUFBUSxPQUV4QkMsRUFBdUJOLEVBQWFPLE9BQ3BDQyxFQUE2QlIsRUFBYVMsYUFDMUMxQixFQUFvQnNCLEVBQWN0QixrQkFDbEMyQixFQUF5QkwsRUFBY0ssdUJBQ3ZDOUQsRUFBV3ZCLEVBQWdCLFlBQzNCc0YsRUFBTyxPQUNQQyxFQUFTLFNBQ1RsRSxFQUFVLFVBRVZ5QyxFQUFhLFdBQWMsT0FBT2xILE1BRXRDakQsRUFBT0MsUUFBVSxTQUFVNEwsRUFBVXhCLEVBQU1ELEVBQXFCekcsRUFBTW1JLEVBQVNDLEVBQVFDLEdBQ3JGZixFQUEwQmIsRUFBcUJDLEVBQU0xRyxHQUVyRCxJQWtCSXNJLEVBQTBCQyxFQUFTQyxFQWxCbkNDLEVBQXFCLFNBQVVDLEdBQ2pDLEdBQUlBLElBQVNQLEdBQVdRLEVBQWlCLE9BQU9BLEVBQ2hELElBQUtaLEdBQTBCVyxLQUFRRSxFQUFtQixPQUFPQSxFQUFrQkYsR0FDbkYsT0FBUUEsR0FDTixLQUFLVixFQUNMLEtBQUtDLEVBQ0wsS0FBS2xFLEVBQVMsT0FBTyxXQUFxQixPQUFPLElBQUkwQyxFQUFvQm5ILEtBQU1vSixJQUMvRSxPQUFPLFdBQWMsT0FBTyxJQUFJakMsRUFBb0JuSCxRQUdwRHVGLEVBQWdCNkIsRUFBTyxZQUN2Qm1DLEdBQXdCLEVBQ3hCRCxFQUFvQlYsRUFBUzNLLFVBQzdCdUwsRUFBaUJGLEVBQWtCM0UsSUFDbEMyRSxFQUFrQixlQUNsQlQsR0FBV1MsRUFBa0JULEdBQzlCUSxHQUFtQlosR0FBMEJlLEdBQWtCTCxFQUFtQk4sR0FDbEZZLEVBQTRCLFNBQVJyQyxHQUFrQmtDLEVBQWtCSSxTQUE0QkYsRUErQnhGLEdBM0JJQyxJQUNGVCxFQUEyQm5DLEVBQWU0QyxFQUFrQmxLLEtBQUssSUFBSXFKLE9BQ3BDdkssT0FBT0osV0FBYStLLEVBQXlCdEksT0FDdkVvSCxHQUFXakIsRUFBZW1DLEtBQThCbEMsSUFDdkRtQixFQUNGQSxFQUFlZSxFQUEwQmxDLEdBQy9CL0gsRUFBV2lLLEVBQXlCckUsS0FDOUN3RCxFQUFTYSxFQUEwQnJFLEVBQVV1QyxJQUlqREYsRUFBZWdDLEVBQTBCekQsR0FBZSxHQUFNLEdBQzFEdUMsSUFBU2IsRUFBVTFCLEdBQWlCMkIsSUFLeENtQixHQUF3QlEsR0FBV0YsR0FBVWEsR0FBa0JBLEVBQWVHLE9BQVNoQixLQUNwRmIsR0FBV1MsRUFDZEwsRUFBNEJvQixFQUFtQixPQUFRWCxJQUV2RFksR0FBd0IsRUFDeEJGLEVBQWtCLFdBQW9CLE9BQU85SixFQUFLaUssRUFBZ0J4SixTQUtsRTZJLEVBTUYsR0FMQUksRUFBVSxDQUNSVyxPQUFRVCxFQUFtQlIsR0FDM0JuTCxLQUFNc0wsRUFBU08sRUFBa0JGLEVBQW1CVCxHQUNwRGdCLFFBQVNQLEVBQW1CMUUsSUFFMUJzRSxFQUFRLElBQUtHLEtBQU9ELEdBQ2xCUixHQUEwQmMsS0FBMkJMLEtBQU9JLEtBQzlEbkIsRUFBU21CLEVBQW1CSixFQUFLRCxFQUFRQyxTQUV0Q3JCLEVBQUUsQ0FBRW5GLE9BQVEwRSxFQUFNeUMsT0FBTyxFQUFNQyxPQUFRckIsR0FBMEJjLEdBQXlCTixHQVNuRyxPQUxNbkIsSUFBV2lCLEdBQVdPLEVBQWtCM0UsS0FBYzBFLEdBQzFEbEIsRUFBU21CLEVBQW1CM0UsRUFBVTBFLEVBQWlCLENBQUVNLEtBQU1kLElBRWpFNUIsRUFBVUcsR0FBUWlDLEVBRVhKLG9CQ2pHVCxJQUFJL0wsRUFBTyxFQUFRLE9BQ2ZrSixFQUFTLEVBQVEsT0FDakIyRCxFQUErQixFQUFRLE1BQ3ZDekwsRUFBaUIsVUFFckJ2QixFQUFPQyxRQUFVLFNBQVVvSyxHQUN6QixJQUFJekksRUFBU3pCLEVBQUt5QixTQUFXekIsRUFBS3lCLE9BQVMsSUFDdEN5SCxFQUFPekgsRUFBUXlJLElBQU85SSxFQUFlSyxFQUFReUksRUFBTSxDQUN0RHpHLE1BQU9vSixFQUE2QmxMLEVBQUV1SSx1QkNSMUMsSUFBSWpFLEVBQVEsRUFBUSxPQUdwQnBHLEVBQU9DLFNBQVdtRyxHQUFNLFdBRXRCLE9BQThFLEdBQXZFOUUsT0FBT0MsZUFBZSxHQUFJLEVBQUcsQ0FBRTBMLElBQUssV0FBYyxPQUFPLEtBQVEsdUJDTDFFLElBQUlsTCxFQUFTLEVBQVEsT0FDakJRLEVBQVcsRUFBUSxPQUVuQjJLLEVBQVduTCxFQUFPbUwsU0FFbEJDLEVBQVM1SyxFQUFTMkssSUFBYTNLLEVBQVMySyxFQUFTRSxlQUVyRHBOLEVBQU9DLFFBQVUsU0FBVWtCLEdBQ3pCLE9BQU9nTSxFQUFTRCxFQUFTRSxjQUFjak0sR0FBTSxlQ04vQ25CLEVBQU9DLFFBQVUsQ0FDZm9OLFlBQWEsRUFDYkMsb0JBQXFCLEVBQ3JCQyxhQUFjLEVBQ2RDLGVBQWdCLEVBQ2hCQyxZQUFhLEVBQ2JDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxxQkFBc0IsRUFDdEJDLFNBQVUsRUFDVkMsa0JBQW1CLEVBQ25CQyxlQUFnQixFQUNoQkMsZ0JBQWlCLEVBQ2pCQyxrQkFBbUIsRUFDbkJDLFVBQVcsRUFDWEMsY0FBZSxFQUNmQyxhQUFjLEVBQ2RDLFNBQVUsRUFDVkMsaUJBQWtCLEVBQ2xCQyxPQUFRLEVBQ1JDLFlBQWEsRUFDYkMsY0FBZSxFQUNmQyxjQUFlLEVBQ2ZDLGVBQWdCLEVBQ2hCQyxhQUFjLEVBQ2RDLGNBQWUsRUFDZkMsaUJBQWtCLEVBQ2xCQyxpQkFBa0IsRUFDbEJDLGVBQWdCLEVBQ2hCQyxpQkFBa0IsRUFDbEJDLGNBQWUsRUFDZkMsVUFBVyxvQkNoQ2IsSUFFSWlsQixFQUZ3QixFQUFRLE1BRXBCaGIsQ0FBc0IsUUFBUWdiLFVBQzFDQyxFQUF3QkQsR0FBYUEsRUFBVTF0QixhQUFlMHRCLEVBQVUxdEIsWUFBWXhGLFVBRXhGbEIsRUFBT0MsUUFBVW8wQixJQUEwQi95QixPQUFPSixlQUFZb0MsRUFBWSt3QixtQkNOMUUsSUFFSUMsRUFGWSxFQUFRLE9BRUE1a0IsTUFBTSxtQkFFOUIxUCxFQUFPQyxVQUFZcTBCLElBQVlBLEVBQVEsYUNKdkN0MEIsRUFBT0MsUUFBMkIsaUJBQVZtUCx3QkNBeEIsSUFBSW1sQixFQUFLLEVBQVEsT0FFakJ2MEIsRUFBT0MsUUFBVSxlQUFla0osS0FBS29yQixvQkNGckMsSUFBSWxsQixFQUFZLEVBQVEsT0FDcEJ0TixFQUFTLEVBQVEsT0FFckIvQixFQUFPQyxRQUFVLG9CQUFvQmtKLEtBQUtrRyxTQUFnQy9MLElBQWxCdkIsRUFBT3VOLHVCQ0gvRCxJQUFJRCxFQUFZLEVBQVEsT0FFeEJyUCxFQUFPQyxRQUFVLHFDQUFxQ2tKLEtBQUtrRyxvQkNGM0QsSUFBSUUsRUFBVSxFQUFRLE9BQ2xCeE4sRUFBUyxFQUFRLE9BRXJCL0IsRUFBT0MsUUFBcUMsV0FBM0JzUCxFQUFReE4sRUFBT3lOLDBCQ0hoQyxJQUFJSCxFQUFZLEVBQVEsT0FFeEJyUCxFQUFPQyxRQUFVLHFCQUFxQmtKLEtBQUtrRyxvQkNGM0MsSUFBSUksRUFBYSxFQUFRLE9BRXpCelAsRUFBT0MsUUFBVXdQLEVBQVcsWUFBYSxjQUFnQixtQkNGekQsSUFPSUMsRUFBT0MsRUFQUDVOLEVBQVMsRUFBUSxPQUNqQnNOLEVBQVksRUFBUSxPQUVwQkcsRUFBVXpOLEVBQU95TixRQUNqQkksRUFBTzdOLEVBQU82TixLQUNkQyxFQUFXTCxHQUFXQSxFQUFRSyxVQUFZRCxHQUFRQSxFQUFLRCxRQUN2REcsRUFBS0QsR0FBWUEsRUFBU0MsR0FHMUJBLElBSUZILEdBSEFELEVBQVFJLEVBQUdDLE1BQU0sTUFHRCxHQUFLLEdBQUtMLEVBQU0sR0FBSyxFQUFJLElBQU1BLEVBQU0sR0FBS0EsRUFBTSxNQUs3REMsR0FBV04sTUFDZEssRUFBUUwsRUFBVUssTUFBTSxpQkFDVkEsRUFBTSxJQUFNLE1BQ3hCQSxFQUFRTCxFQUFVSyxNQUFNLG9CQUNiQyxHQUFXRCxFQUFNLElBSWhDMVAsRUFBT0MsUUFBVTBQLG1CQzFCakIsSUFFSTZrQixFQUZZLEVBQVEsT0FFRDlrQixNQUFNLHdCQUU3QjFQLEVBQU9DLFVBQVl1MEIsSUFBV0EsRUFBTyxjQ0hyQ3gwQixFQUFPQyxRQUFVLENBQ2YsY0FDQSxpQkFDQSxnQkFDQSx1QkFDQSxpQkFDQSxXQUNBLDRCQ1JGLElBQUk4QixFQUFTLEVBQVEsT0FDakI0SCxFQUEyQixXQUMzQndCLEVBQThCLEVBQVEsT0FDdENDLEVBQVcsRUFBUSxPQUNuQmtTLEVBQVksRUFBUSxPQUNwQmlFLEVBQTRCLEVBQVEsT0FDcENyUixFQUFXLEVBQVEsT0FpQnZCbFEsRUFBT0MsUUFBVSxTQUFVd1EsRUFBU2hILEdBQ2xDLElBR1k5RCxFQUFRbkUsRUFBS3FQLEVBQWdCRCxFQUFnQkksRUFIckRDLEVBQVNSLEVBQVE5SyxPQUNqQnVMLEVBQVNULEVBQVExTyxPQUNqQm9QLEVBQVNWLEVBQVFXLEtBU3JCLEdBTkV6TCxFQURFdUwsRUFDT25QLEVBQ0FvUCxFQUNBcFAsRUFBT2tQLElBQVdxTSxFQUFVck0sRUFBUSxLQUVuQ2xQLEVBQU9rUCxJQUFXLElBQUkvUCxVQUV0QixJQUFLTSxLQUFPaUksRUFBUSxDQVE5QixHQVBBbUgsRUFBaUJuSCxFQUFPakksR0FHdEJxUCxFQUZFSixFQUFRZSxhQUNWUixFQUFhckgsRUFBeUJoRSxFQUFRbkUsS0FDZndQLEVBQVdwTixNQUNwQitCLEVBQU9uRSxJQUN0QjBPLEVBQVNnQixFQUFTMVAsRUFBTXlQLEdBQVVFLEVBQVMsSUFBTSxLQUFPM1AsRUFBS2lQLEVBQVExRCxjQUU1Q3pKLElBQW5CdU4sRUFBOEIsQ0FDM0MsVUFBV0QsVUFBeUJDLEVBQWdCLFNBQ3BEMFEsRUFBMEIzUSxFQUFnQkMsSUFHeENKLEVBQVEvTyxNQUFTbVAsR0FBa0JBLEVBQWVuUCxPQUNwRHlKLEVBQTRCeUYsRUFBZ0IsUUFBUSxHQUd0RHhGLEVBQVN6RixFQUFRbkUsRUFBS29QLEVBQWdCSCxnQkNwRDFDelEsRUFBT0MsUUFBVSxTQUFVK0gsR0FDekIsSUFDRSxRQUFTQSxJQUNULE1BQU9MLEdBQ1AsT0FBTyxrQ0NGWCxFQUFRLE9BQ1IsSUFBSWxELEVBQWMsRUFBUSxNQUN0QjJHLEVBQVcsRUFBUSxPQUNuQnFwQixFQUFhLEVBQVEsT0FDckJydUIsRUFBUSxFQUFRLE9BQ2hCQyxFQUFrQixFQUFRLE1BQzFCOEUsRUFBOEIsRUFBUSxPQUV0QzVFLEVBQVVGLEVBQWdCLFdBQzFCcXVCLEVBQWtCQyxPQUFPenpCLFVBRTdCbEIsRUFBT0MsUUFBVSxTQUFVa00sRUFBS25FLEVBQU1nRSxFQUFRNG9CLEdBQzVDLElBQUloTSxFQUFTdmlCLEVBQWdCOEYsR0FFekIwb0IsR0FBdUJ6dUIsR0FBTSxXQUUvQixJQUFJckQsRUFBSSxHQUVSLE9BREFBLEVBQUU2bEIsR0FBVSxXQUFjLE9BQU8sR0FDWixHQUFkLEdBQUd6YyxHQUFLcEosTUFHYit4QixFQUFvQkQsSUFBd0J6dUIsR0FBTSxXQUVwRCxJQUFJMnVCLEdBQWEsRUFDYkMsRUFBSyxJQWtCVCxNQWhCWSxVQUFSN29CLEtBSUY2b0IsRUFBSyxJQUdGdHVCLFlBQWMsR0FDakJzdUIsRUFBR3R1QixZQUFZSCxHQUFXLFdBQWMsT0FBT3l1QixHQUMvQ0EsRUFBR0MsTUFBUSxHQUNYRCxFQUFHcE0sR0FBVSxJQUFJQSxJQUduQm9NLEVBQUdodEIsS0FBTyxXQUFpQyxPQUFuQitzQixHQUFhLEVBQWEsTUFFbERDLEVBQUdwTSxHQUFRLEtBQ0htTSxLQUdWLElBQ0dGLElBQ0FDLEdBQ0Q5b0IsRUFDQSxDQUNBLElBQUlrcEIsRUFBOEJ6d0IsRUFBWSxJQUFJbWtCLElBQzlDMWMsRUFBVWxFLEVBQUs0Z0IsRUFBUSxHQUFHemMsSUFBTSxTQUFVZ3BCLEVBQWNqQixFQUFRa0IsRUFBS0MsRUFBTUMsR0FDN0UsSUFBSTlCLEVBQXdCL3VCLEVBQVkwd0IsR0FDcENJLEVBQVFyQixFQUFPbHNCLEtBQ25CLE9BQUl1dEIsSUFBVWQsR0FBY2MsSUFBVWIsRUFBZ0Ixc0IsS0FDaEQ2c0IsSUFBd0JTLEVBSW5CLENBQUV2eEIsTUFBTSxFQUFNSCxNQUFPc3hCLEVBQTRCaEIsRUFBUWtCLEVBQUtDLElBRWhFLENBQUV0eEIsTUFBTSxFQUFNSCxNQUFPNHZCLEVBQXNCNEIsRUFBS2xCLEVBQVFtQixJQUUxRCxDQUFFdHhCLE1BQU0sTUFHakJxSCxFQUFTL0ksT0FBT25CLFVBQVdpTCxFQUFLRCxFQUFRLElBQ3hDZCxFQUFTc3BCLEVBQWlCOUwsRUFBUTFjLEVBQVEsSUFHeEMwb0IsR0FBTXpwQixFQUE0QnVwQixFQUFnQjlMLEdBQVMsUUFBUSxxQkN4RXpFLElBQUl4aUIsRUFBUSxFQUFRLE9BRXBCcEcsRUFBT0MsU0FBV21HLEdBQU0sV0FFdEIsT0FBTzlFLE9BQU80cEIsYUFBYTVwQixPQUFPazBCLGtCQUFrQixtQkNKdEQsSUFBSXgwQixFQUFvQkMsU0FBU0MsVUFDN0IrTyxFQUFRalAsRUFBa0JpUCxNQUMxQnRQLEVBQU9LLEVBQWtCTCxLQUN6QjZCLEVBQU94QixFQUFrQndCLEtBRzdCeEMsRUFBT0MsUUFBNEIsaUJBQVgyUixTQUF1QkEsUUFBUTNCLFFBQVV0UCxFQUFPNkIsRUFBSzdCLEtBQUtzUCxHQUFTLFdBQ3pGLE9BQU96TixFQUFLeU4sTUFBTUEsRUFBTzlNLDhCQ1AzQixJQUFJc0IsRUFBYyxFQUFRLE1BQ3RCb04sRUFBWSxFQUFRLE9BRXBCbFIsRUFBTzhELEVBQVlBLEVBQVk5RCxNQUduQ1gsRUFBT0MsUUFBVSxTQUFVd0gsRUFBSW5DLEdBRTdCLE9BREF1TSxFQUFVcEssUUFDTW5FLElBQVRnQyxFQUFxQm1DLEVBQUs5RyxFQUFPQSxFQUFLOEcsRUFBSW5DLEdBQVEsV0FDdkQsT0FBT21DLEVBQUd3SSxNQUFNM0ssRUFBTW5DLDJDQ1IxQixJQUFJcEIsRUFBUyxFQUFRLE9BQ2pCMEMsRUFBYyxFQUFRLE1BQ3RCb04sRUFBWSxFQUFRLE9BQ3BCdFAsRUFBVyxFQUFRLE9BQ25COEcsRUFBUyxFQUFRLE9BQ2pCMEksRUFBYSxFQUFRLE9BRXJCOVEsRUFBV2MsRUFBT2QsU0FDbEJULEVBQVNpRSxFQUFZLEdBQUdqRSxRQUN4QndSLEVBQU92TixFQUFZLEdBQUd1TixNQUN0QkMsRUFBWSxHQUVaQyxFQUFZLFNBQVU3SyxFQUFHOEssRUFBWUMsR0FDdkMsSUFBSy9JLEVBQU80SSxFQUFXRSxHQUFhLENBQ2xDLElBQUssSUFBSUUsRUFBTyxHQUFJekksRUFBSSxFQUFHQSxFQUFJdUksRUFBWXZJLElBQUt5SSxFQUFLekksR0FBSyxLQUFPQSxFQUFJLElBQ3JFcUksRUFBVUUsR0FBY2xSLEVBQVMsTUFBTyxnQkFBa0IrUSxFQUFLSyxFQUFNLEtBQU8sS0FDNUUsT0FBT0osRUFBVUUsR0FBWTlLLEVBQUcrSyxJQUtwQ3BTLEVBQU9DLFFBQVVnQixFQUFTTixNQUFRLFNBQWMyRSxHQUM5QyxJQUFJdUUsRUFBSWdJLEVBQVU1TyxNQUNkWCxFQUFZdUgsRUFBRTNJLFVBQ2RvUixFQUFXUCxFQUFXNU8sVUFBVyxHQUNqQ3NDLEVBQWdCLFdBQ2xCLElBQUkyTSxFQUFPNVIsRUFBTzhSLEVBQVVQLEVBQVc1TyxZQUN2QyxPQUFPRixnQkFBZ0J3QyxFQUFnQnlNLEVBQVVySSxFQUFHdUksRUFBS2hQLE9BQVFnUCxHQUFRdkksRUFBRW9HLE1BQU0zSyxFQUFNOE0sSUFHekYsT0FESTdQLEVBQVNELEtBQVltRCxFQUFjdkUsVUFBWW9CLEdBQzVDbUQsY0MvQlQsSUFBSWpELEVBQU92QixTQUFTQyxVQUFVc0IsS0FFOUJ4QyxFQUFPQyxRQUFVdUMsRUFBSzdCLEtBQU82QixFQUFLN0IsS0FBSzZCLEdBQVEsV0FDN0MsT0FBT0EsRUFBS3lOLE1BQU16TixFQUFNVyw2QkNIMUIsSUFBSW9ILEVBQWMsRUFBUSxPQUN0QmxCLEVBQVMsRUFBUSxPQUVqQnJJLEVBQW9CQyxTQUFTQyxVQUU3QnFSLEVBQWdCaEksR0FBZWpKLE9BQU9xSSx5QkFFdEN3RCxFQUFTOUQsRUFBT3JJLEVBQW1CLFFBRW5DdUssRUFBUzRCLEdBQTBELGNBQWhELGFBQXVDUCxLQUMxRG5CLEVBQWUwQixLQUFZNUMsR0FBZ0JBLEdBQWVnSSxFQUFjdlIsRUFBbUIsUUFBUTBKLGNBRXZHMUssRUFBT0MsUUFBVSxDQUNma04sT0FBUUEsRUFDUjVCLE9BQVFBLEVBQ1JFLGFBQWNBLGFDZmhCLElBQUl6SyxFQUFvQkMsU0FBU0MsVUFDN0JQLEVBQU9LLEVBQWtCTCxLQUN6QjZCLEVBQU94QixFQUFrQndCLEtBQ3pCaUMsRUFBYzlELEdBQVFBLEVBQUtBLEtBQUs2QixFQUFNQSxHQUUxQ3hDLEVBQU9DLFFBQVVVLEVBQU8sU0FBVThHLEdBQ2hDLE9BQU9BLEdBQU1oRCxFQUFZZ0QsSUFDdkIsU0FBVUEsR0FDWixPQUFPQSxHQUFNLFdBQ1gsT0FBT2pGLEVBQUt5TixNQUFNeEksRUFBSXRFLDhCQ1QxQixJQUFJcEIsRUFBUyxFQUFRLE9BQ2pCQyxFQUFhLEVBQVEsT0FFckJ3USxFQUFZLFNBQVVyUSxHQUN4QixPQUFPSCxFQUFXRyxHQUFZQSxPQUFXbUIsR0FHM0N0RCxFQUFPQyxRQUFVLFNBQVV5UyxFQUFXM1IsR0FDcEMsT0FBT29DLFVBQVVDLE9BQVMsRUFBSW9QLEVBQVV6USxFQUFPMlEsSUFBYzNRLEVBQU8yUSxJQUFjM1EsRUFBTzJRLEdBQVczUixxQkNSdEcsSUFBSXdPLEVBQVUsRUFBUSxPQUNsQm9ELEVBQVksRUFBUSxPQUNwQnpJLEVBQVksRUFBUSxPQUdwQnRDLEVBRmtCLEVBQVEsS0FFZnZCLENBQWdCLFlBRS9CckcsRUFBT0MsUUFBVSxTQUFVa0IsR0FDekIsR0FBVW1DLE1BQU5uQyxFQUFpQixPQUFPd1IsRUFBVXhSLEVBQUl5RyxJQUNyQytLLEVBQVV4UixFQUFJLGVBQ2QrSSxFQUFVcUYsRUFBUXBPLHNCQ1Z6QixJQUFJWSxFQUFTLEVBQVEsT0FDakJTLEVBQU8sRUFBUSxPQUNmcVAsRUFBWSxFQUFRLE9BQ3BCdEssRUFBVyxFQUFRLE9BQ25CdEYsRUFBYyxFQUFRLE9BQ3RCckIsRUFBb0IsRUFBUSxPQUU1QnNCLEVBQVlILEVBQU9HLFVBRXZCbEMsRUFBT0MsUUFBVSxTQUFVa0MsRUFBVXlRLEdBQ25DLElBQUkvTyxFQUFpQlYsVUFBVUMsT0FBUyxFQUFJeEMsRUFBa0J1QixHQUFZeVEsRUFDMUUsR0FBSWYsRUFBVWhPLEdBQWlCLE9BQU8wRCxFQUFTL0UsRUFBS3FCLEVBQWdCMUIsSUFDcEUsTUFBTUQsRUFBVUQsRUFBWUUsR0FBWSxzQ0NaMUMsSUFBSTBQLEVBQVksRUFBUSxPQUl4QjdSLEVBQU9DLFFBQVUsU0FBVTRTLEVBQUdDLEdBQzVCLElBQUlDLEVBQU9GLEVBQUVDLEdBQ2IsT0FBZSxNQUFSQyxPQUFlelAsRUFBWXVPLEVBQVVrQixxQkNOOUMsSUFBSXRPLEVBQWMsRUFBUSxNQUN0QmhDLEVBQVcsRUFBUSxPQUVuQitkLEVBQVExWixLQUFLMFosTUFDYnhDLEVBQVN2WixFQUFZLEdBQUd1WixRQUN4Qm5WLEVBQVVwRSxFQUFZLEdBQUdvRSxTQUN6QlIsRUFBYzVELEVBQVksR0FBRy9ELE9BQzdCKzBCLEVBQXVCLDhCQUN2QkMsRUFBZ0Msc0JBSXBDMTFCLEVBQU9DLFFBQVUsU0FBVTAxQixFQUFTUCxFQUFLOVcsRUFBVXNYLEVBQVVDLEVBQWU1Z0IsR0FDMUUsSUFBSTZnQixFQUFVeFgsRUFBV3FYLEVBQVF2eUIsT0FDN0IyeUIsRUFBSUgsRUFBU3h5QixPQUNiNHlCLEVBQVVOLEVBS2QsWUFKc0JweUIsSUFBbEJ1eUIsSUFDRkEsRUFBZ0JwekIsRUFBU296QixHQUN6QkcsRUFBVVAsR0FFTDVzQixFQUFRb00sRUFBYStnQixHQUFTLFNBQVV0bUIsRUFBT3VtQixHQUNwRCxJQUFJQyxFQUNKLE9BQVFsWSxFQUFPaVksRUFBSSxJQUNqQixJQUFLLElBQUssTUFBTyxJQUNqQixJQUFLLElBQUssT0FBT04sRUFDakIsSUFBSyxJQUFLLE9BQU90dEIsRUFBWStzQixFQUFLLEVBQUc5VyxHQUNyQyxJQUFLLElBQUssT0FBT2pXLEVBQVkrc0IsRUFBS1UsR0FDbEMsSUFBSyxJQUNISSxFQUFVTCxFQUFjeHRCLEVBQVk0dEIsRUFBSSxHQUFJLElBQzVDLE1BQ0YsUUFDRSxJQUFJOXVCLEdBQUs4dUIsRUFDVCxHQUFVLElBQU45dUIsRUFBUyxPQUFPdUksRUFDcEIsR0FBSXZJLEVBQUk0dUIsRUFBRyxDQUNULElBQUlqMEIsRUFBSTBlLEVBQU1yWixFQUFJLElBQ2xCLE9BQVUsSUFBTnJGLEVBQWdCNE4sRUFDaEI1TixHQUFLaTBCLE9BQThCenlCLElBQXBCc3lCLEVBQVM5ekIsRUFBSSxHQUFtQmtjLEVBQU9pWSxFQUFJLEdBQUtMLEVBQVM5ekIsRUFBSSxHQUFLa2MsRUFBT2lZLEVBQUksR0FDekZ2bUIsRUFFVHdtQixFQUFVTixFQUFTenVCLEVBQUksR0FFM0IsWUFBbUI3RCxJQUFaNHlCLEVBQXdCLEdBQUtBLHVCQ3pDeEMsSUFBSWxqQixFQUFRLFNBQVU3UixHQUNwQixPQUFPQSxHQUFNQSxFQUFHMkYsTUFBUUEsTUFBUTNGLEdBSWxDbkIsRUFBT0MsUUFFTCtTLEVBQTJCLGlCQUFkQyxZQUEwQkEsYUFDdkNELEVBQXVCLGlCQUFWNUQsUUFBc0JBLFNBRW5DNEQsRUFBcUIsaUJBQVJ4TixNQUFvQkEsT0FDakN3TixFQUF1QixpQkFBVixFQUFBRSxHQUFzQixFQUFBQSxJQUVuQyxXQUFlLE9BQU9qUSxLQUF0QixJQUFvQ2hDLFNBQVMsY0FBVEEsb0JDYnRDLElBQUl3RCxFQUFjLEVBQVEsTUFDdEJoQyxFQUFXLEVBQVEsT0FFbkJxUCxFQUFpQnJOLEVBQVksR0FBR3FOLGdCQUlwQzlSLEVBQU9DLFFBQVVxQixPQUFPK0gsUUFBVSxTQUFnQmxJLEVBQUlLLEdBQ3BELE9BQU9zUSxFQUFlclAsRUFBU3RCLEdBQUtLLGNDUnRDeEIsRUFBT0MsUUFBVSxrQkNBakIsSUFBSThCLEVBQVMsRUFBUSxPQUVyQi9CLEVBQU9DLFFBQVUsU0FBVXFRLEVBQUdDLEdBQzVCLElBQUk0QyxFQUFVcFIsRUFBT29SLFFBQ2pCQSxHQUFXQSxFQUFReEwsUUFDRCxHQUFwQnhFLFVBQVVDLE9BQWMrUCxFQUFReEwsTUFBTTJJLEdBQUs2QyxFQUFReEwsTUFBTTJJLEVBQUdDLHNCQ0xoRSxJQUFJZCxFQUFhLEVBQVEsT0FFekJ6UCxFQUFPQyxRQUFVd1AsRUFBVyxXQUFZLG9DQ0Z4QyxJQUFJbEYsRUFBYyxFQUFRLE9BQ3RCbkUsRUFBUSxFQUFRLE9BQ2hCZ0gsRUFBZ0IsRUFBUSxPQUc1QnBOLEVBQU9DLFNBQVdzSyxJQUFnQm5FLEdBQU0sV0FFdEMsT0FFUSxHQUZEOUUsT0FBT0MsZUFBZTZMLEVBQWMsT0FBUSxJQUFLLENBQ3RESCxJQUFLLFdBQWMsT0FBTyxLQUN6QnFELHNCQ1JMLElBRUlsUSxFQUZTLEVBQVEsT0FFRkEsTUFDZisxQixFQUFNcnZCLEtBQUtxdkIsSUFDWEMsRUFBTXR2QixLQUFLc3ZCLElBQ1g1VixFQUFRMVosS0FBSzBaLE1BQ2I2VixFQUFNdnZCLEtBQUt1dkIsSUFDWEMsRUFBTXh2QixLQUFLd3ZCLElBNEZmdDJCLEVBQU9DLFFBQVUsQ0FDZmt1QixLQTNGUyxTQUFVMU4sRUFBUThWLEVBQWdCckgsR0FDM0MsSUFPSXNILEVBQVVDLEVBQVVqbUIsRUFQcEJ5YSxFQUFTN3FCLEVBQU04dUIsR0FDZndILEVBQXlCLEVBQVJ4SCxFQUFZcUgsRUFBaUIsRUFDOUNJLEdBQVEsR0FBS0QsR0FBa0IsRUFDL0JFLEVBQVFELEdBQVEsRUFDaEJFLEVBQXdCLEtBQW5CTixFQUF3QkgsRUFBSSxHQUFJLElBQU1BLEVBQUksR0FBSSxJQUFNLEVBQ3pEVSxFQUFPclcsRUFBUyxHQUFnQixJQUFYQSxHQUFnQixFQUFJQSxFQUFTLEVBQUksRUFBSSxFQUMxRDNjLEVBQVEsRUFtQ1osS0FqQ0EyYyxFQUFTMFYsRUFBSTFWLEtBRUNBLEdBQVVBLElBQVdzVyxFQUFBQSxHQUVqQ04sRUFBV2hXLEdBQVVBLEVBQVMsRUFBSSxFQUNsQytWLEVBQVdHLElBRVhILEVBQVdoVyxFQUFNNlYsRUFBSTVWLEdBQVU2VixHQUUzQjdWLEdBREpqUSxFQUFJNGxCLEVBQUksR0FBSUksSUFDSyxJQUNmQSxJQUNBaG1CLEdBQUssSUFHTGlRLEdBREUrVixFQUFXSSxHQUFTLEVBQ1pDLEVBQUtybUIsRUFFTHFtQixFQUFLVCxFQUFJLEVBQUcsRUFBSVEsSUFFZnBtQixHQUFLLElBQ2hCZ21CLElBQ0FobUIsR0FBSyxHQUVIZ21CLEVBQVdJLEdBQVNELEdBQ3RCRixFQUFXLEVBQ1hELEVBQVdHLEdBQ0ZILEVBQVdJLEdBQVMsR0FDN0JILEdBQVloVyxFQUFTalEsRUFBSSxHQUFLNGxCLEVBQUksRUFBR0csR0FDckNDLEdBQXNCSSxJQUV0QkgsRUFBV2hXLEVBQVMyVixFQUFJLEVBQUdRLEVBQVEsR0FBS1IsRUFBSSxFQUFHRyxHQUMvQ0MsRUFBVyxJQUdSRCxHQUFrQixHQUN2QnRMLEVBQU9ubkIsS0FBc0IsSUFBWDJ5QixFQUNsQkEsR0FBWSxJQUNaRixHQUFrQixFQUlwQixJQUZBQyxFQUFXQSxHQUFZRCxFQUFpQkUsRUFDeENDLEdBQWtCSCxFQUNYRyxFQUFpQixHQUN0QnpMLEVBQU9ubkIsS0FBc0IsSUFBWDB5QixFQUNsQkEsR0FBWSxJQUNaRSxHQUFrQixFQUdwQixPQURBekwsSUFBU25uQixJQUFpQixJQUFQZ3pCLEVBQ1o3TCxHQXFDUG9ELE9BbENXLFNBQVVwRCxFQUFRc0wsR0FDN0IsSUFRSUUsRUFSQXZILEVBQVFqRSxFQUFPN25CLE9BQ2ZzekIsRUFBeUIsRUFBUnhILEVBQVlxSCxFQUFpQixFQUM5Q0ksR0FBUSxHQUFLRCxHQUFrQixFQUMvQkUsRUFBUUQsR0FBUSxFQUNoQkssRUFBUU4sRUFBaUIsRUFDekI1eUIsRUFBUW9yQixFQUFRLEVBQ2hCNEgsRUFBTzdMLEVBQU9ubkIsS0FDZDB5QixFQUFrQixJQUFQTSxFQUdmLElBREFBLElBQVMsRUFDRkUsRUFBUSxHQUNiUixFQUFzQixJQUFYQSxFQUFpQnZMLEVBQU9ubkIsS0FDbkNrekIsR0FBUyxFQUtYLElBSEFQLEVBQVdELEdBQVksSUFBTVEsR0FBUyxFQUN0Q1IsS0FBY1EsRUFDZEEsR0FBU1QsRUFDRlMsRUFBUSxHQUNiUCxFQUFzQixJQUFYQSxFQUFpQnhMLEVBQU9ubkIsS0FDbkNrekIsR0FBUyxFQUVYLEdBQWlCLElBQWJSLEVBQ0ZBLEVBQVcsRUFBSUksTUFDVixJQUFJSixJQUFhRyxFQUN0QixPQUFPRixFQUFXbkgsSUFBTXdILEdBQU8sSUFBWUMsRUFBQUEsRUFFM0NOLEdBQXNCTCxFQUFJLEVBQUdHLEdBQzdCQyxHQUFzQkksRUFDdEIsT0FBUUUsR0FBUSxFQUFJLEdBQUtMLEVBQVdMLEVBQUksRUFBR0ksRUFBV0Qsc0JDakcxRCxJQUFJeDBCLEVBQVMsRUFBUSxPQUNqQjBDLEVBQWMsRUFBUSxNQUN0QjJCLEVBQVEsRUFBUSxPQUNoQm1KLEVBQVUsRUFBUSxPQUVsQmpPLEVBQVNTLEVBQU9ULE9BQ2hCeU8sRUFBUXRMLEVBQVksR0FBR3NMLE9BRzNCL1AsRUFBT0MsUUFBVW1HLEdBQU0sV0FHckIsT0FBUTlFLEVBQU8sS0FBSzhSLHFCQUFxQixNQUN0QyxTQUFValMsR0FDYixNQUFzQixVQUFmb08sRUFBUXBPLEdBQWtCNE8sRUFBTTVPLEVBQUksSUFBTUcsRUFBT0gsSUFDdERHLG1CQ2ZKLElBQUlVLEVBQWEsRUFBUSxPQUNyQk8sRUFBVyxFQUFRLE9BQ25CMkksRUFBaUIsRUFBUSxPQUc3QmxMLEVBQU9DLFFBQVUsU0FBVW1FLEVBQU80dkIsRUFBTzNqQixHQUN2QyxJQUFJNG1CLEVBQVdDLEVBVWYsT0FQRWhzQixHQUVBbEosRUFBV2kxQixFQUFZakQsRUFBTXR0QixjQUM3QnV3QixJQUFjNW1CLEdBQ2Q5TixFQUFTMjBCLEVBQXFCRCxFQUFVLzFCLFlBQ3hDZzJCLElBQXVCN21CLEVBQVFuUCxXQUMvQmdLLEVBQWU5RyxFQUFPOHlCLEdBQ2pCOXlCLG9CQ2hCVCxJQUFJSyxFQUFjLEVBQVEsTUFDdEJ6QyxFQUFhLEVBQVEsT0FDckJxUixFQUFRLEVBQVEsTUFFaEJDLEVBQW1CN08sRUFBWXhELFNBQVNtSCxVQUd2Q3BHLEVBQVdxUixFQUFNRSxpQkFDcEJGLEVBQU1FLGNBQWdCLFNBQVVwUyxHQUM5QixPQUFPbVMsRUFBaUJuUyxLQUk1Qm5CLEVBQU9DLFFBQVVvVCxFQUFNRSwrQkNidkIsSUFBSXpJLEVBQUksRUFBUSxPQUNackcsRUFBYyxFQUFRLE1BQ3RCcVAsRUFBYSxFQUFRLE1BQ3JCdlIsRUFBVyxFQUFRLE9BQ25COEcsRUFBUyxFQUFRLE9BQ2pCOUgsRUFBaUIsVUFDakIrYSxFQUE0QixFQUFRLE1BQ3BDNmEsRUFBb0MsRUFBUSxNQUM1Q2pNLEVBQWUsRUFBUSxPQUN2QjdOLEVBQU0sRUFBUSxPQUNkK1osRUFBVyxFQUFRLE9BRW5CQyxHQUFXLEVBQ1hDLEVBQVdqYSxFQUFJLFFBQ2ZnQyxFQUFLLEVBRUxrWSxFQUFjLFNBQVVwMkIsR0FDMUJJLEVBQWVKLEVBQUltMkIsRUFBVSxDQUFFMXpCLE1BQU8sQ0FDcEM0ekIsU0FBVSxJQUFNblksSUFDaEJvWSxTQUFVLE9BOERWQyxFQUFPMTNCLEVBQU9DLFFBQVUsQ0FDMUJ3ekIsT0EzQlcsV0FDWGlFLEVBQUtqRSxPQUFTLGFBQ2Q0RCxHQUFXLEVBQ1gsSUFBSS9iLEVBQXNCZ0IsRUFBMEJ4YSxFQUNoRDYxQixFQUFTbHpCLEVBQVksR0FBR2t6QixRQUN4Qnh1QixFQUFPLEdBQ1hBLEVBQUttdUIsR0FBWSxFQUdiaGMsRUFBb0JuUyxHQUFNL0YsU0FDNUJrWixFQUEwQnhhLEVBQUksU0FBVVgsR0FFdEMsSUFEQSxJQUFJcUMsRUFBUzhYLEVBQW9CbmEsR0FDeEJ5SSxFQUFJLEVBQUd4RyxFQUFTSSxFQUFPSixPQUFRd0csRUFBSXhHLEVBQVF3RyxJQUNsRCxHQUFJcEcsRUFBT29HLEtBQU8wdEIsRUFBVSxDQUMxQkssRUFBT24wQixFQUFRb0csRUFBRyxHQUNsQixNQUVGLE9BQU9wRyxHQUdYc0gsRUFBRSxDQUFFbkYsT0FBUSxTQUFVeUwsTUFBTSxFQUFNckUsUUFBUSxHQUFRLENBQ2hEdU8sb0JBQXFCNmIsRUFBa0NyMUIsTUFPM0Rzd0IsUUE1RFksU0FBVWp4QixFQUFJdUUsR0FFMUIsSUFBS25ELEVBQVNwQixHQUFLLE1BQW9CLGlCQUFOQSxFQUFpQkEsR0FBbUIsaUJBQU5BLEVBQWlCLElBQU0sS0FBT0EsRUFDN0YsSUFBS2tJLEVBQU9sSSxFQUFJbTJCLEdBQVcsQ0FFekIsSUFBS3BNLEVBQWEvcEIsR0FBSyxNQUFPLElBRTlCLElBQUt1RSxFQUFRLE1BQU8sSUFFcEI2eEIsRUFBWXAyQixHQUVaLE9BQU9BLEVBQUdtMkIsR0FBVUUsVUFrRHRCSSxZQS9DZ0IsU0FBVXoyQixFQUFJdUUsR0FDOUIsSUFBSzJELEVBQU9sSSxFQUFJbTJCLEdBQVcsQ0FFekIsSUFBS3BNLEVBQWEvcEIsR0FBSyxPQUFPLEVBRTlCLElBQUt1RSxFQUFRLE9BQU8sRUFFcEI2eEIsRUFBWXAyQixHQUVaLE9BQU9BLEVBQUdtMkIsR0FBVUcsVUF1Q3RCSSxTQW5DYSxTQUFVMTJCLEdBRXZCLE9BRElpMkIsR0FBWUMsR0FBWW5NLEVBQWEvcEIsS0FBUWtJLEVBQU9sSSxFQUFJbTJCLElBQVdDLEVBQVlwMkIsR0FDNUVBLElBb0NUMlMsRUFBV3dqQixJQUFZLG1CQ3hGdkIsSUFhSTdqQixFQUFLeEcsRUFBS3lHLEVBYlZDLEVBQWtCLEVBQVEsT0FDMUI1UixFQUFTLEVBQVEsT0FDakIwQyxFQUFjLEVBQVEsTUFDdEJsQyxFQUFXLEVBQVEsT0FDbkI0SSxFQUE4QixFQUFRLE9BQ3RDOUIsRUFBUyxFQUFRLE9BQ2pCdUssRUFBUyxFQUFRLE1BQ2pCQyxFQUFZLEVBQVEsTUFDcEJDLEVBQWEsRUFBUSxNQUVyQkMsRUFBNkIsNkJBQzdCN1IsRUFBWUgsRUFBT0csVUFDbkI4UixFQUFValMsRUFBT2lTLFFBZ0JyQixHQUFJTCxHQUFtQkMsRUFBT0ssTUFBTyxDQUNuQyxJQUFJWixFQUFRTyxFQUFPSyxRQUFVTCxFQUFPSyxNQUFRLElBQUlELEdBQzVDRSxFQUFRelAsRUFBWTRPLEVBQU1wRyxLQUMxQmtILEVBQVExUCxFQUFZNE8sRUFBTUssS0FDMUJVLEVBQVEzUCxFQUFZNE8sRUFBTUksS0FDOUJBLEVBQU0sU0FBVXRTLEVBQUlrVCxHQUNsQixHQUFJRixFQUFNZCxFQUFPbFMsR0FBSyxNQUFNLElBQUllLEVBQVU2UixHQUcxQyxPQUZBTSxFQUFTQyxPQUFTblQsRUFDbEJpVCxFQUFNZixFQUFPbFMsRUFBSWtULEdBQ1ZBLEdBRVRwSCxFQUFNLFNBQVU5TCxHQUNkLE9BQU8rUyxFQUFNYixFQUFPbFMsSUFBTyxJQUU3QnVTLEVBQU0sU0FBVXZTLEdBQ2QsT0FBT2dULEVBQU1kLEVBQU9sUyxRQUVqQixDQUNMLElBQUlvVCxFQUFRVixFQUFVLFNBQ3RCQyxFQUFXUyxJQUFTLEVBQ3BCZCxFQUFNLFNBQVV0UyxFQUFJa1QsR0FDbEIsR0FBSWhMLEVBQU9sSSxFQUFJb1QsR0FBUSxNQUFNLElBQUlyUyxFQUFVNlIsR0FHM0MsT0FGQU0sRUFBU0MsT0FBU25ULEVBQ2xCZ0ssRUFBNEJoSyxFQUFJb1QsRUFBT0YsR0FDaENBLEdBRVRwSCxFQUFNLFNBQVU5TCxHQUNkLE9BQU9rSSxFQUFPbEksRUFBSW9ULEdBQVNwVCxFQUFHb1QsR0FBUyxJQUV6Q2IsRUFBTSxTQUFVdlMsR0FDZCxPQUFPa0ksRUFBT2xJLEVBQUlvVCxJQUl0QnZVLEVBQU9DLFFBQVUsQ0FDZndULElBQUtBLEVBQ0x4RyxJQUFLQSxFQUNMeUcsSUFBS0EsRUFDTGMsUUFuRFksU0FBVXJULEdBQ3RCLE9BQU91UyxFQUFJdlMsR0FBTThMLEVBQUk5TCxHQUFNc1MsRUFBSXRTLEVBQUksS0FtRG5Dc1QsVUFoRGMsU0FBVTVQLEdBQ3hCLE9BQU8sU0FBVTFELEdBQ2YsSUFBSThTLEVBQ0osSUFBSzFSLEVBQVNwQixLQUFROFMsRUFBUWhILEVBQUk5TCxJQUFLdVQsT0FBUzdQLEVBQzlDLE1BQU0zQyxFQUFVLDBCQUE0QjJDLEVBQU8sYUFDbkQsT0FBT29QLHNCQ3hCYixJQUFJNU4sRUFBa0IsRUFBUSxNQUMxQjZELEVBQVksRUFBUSxPQUVwQnRDLEVBQVd2QixFQUFnQixZQUMzQmhGLEVBQWlCakIsTUFBTWMsVUFHM0JsQixFQUFPQyxRQUFVLFNBQVVrQixHQUN6QixZQUFjbUMsSUFBUG5DLElBQXFCK0ksRUFBVTlKLFFBQVVlLEdBQU1FLEVBQWV1RyxLQUFjekcscUJDUnJGLElBQUlvTyxFQUFVLEVBQVEsT0FLdEJ2UCxFQUFPQyxRQUFVRyxNQUFNRSxTQUFXLFNBQWlCNkIsR0FDakQsTUFBNEIsU0FBckJvTixFQUFRcE4sZUNKakJuQyxFQUFPQyxRQUFVLFNBQVVrQyxHQUN6QixNQUEwQixtQkFBWkEsbUJDSGhCLElBQUlzQyxFQUFjLEVBQVEsTUFDdEIyQixFQUFRLEVBQVEsT0FDaEJwRSxFQUFhLEVBQVEsT0FDckJ1TixFQUFVLEVBQVEsT0FDbEJFLEVBQWEsRUFBUSxPQUNyQjhELEVBQWdCLEVBQVEsT0FFeEJvQixFQUFPLGFBQ1BDLEVBQVEsR0FDUjFDLEVBQVl6QyxFQUFXLFVBQVcsYUFDbENvRixFQUFvQiwyQkFDcEI3TSxFQUFPdkQsRUFBWW9RLEVBQWtCN00sTUFDckM4TSxHQUF1QkQsRUFBa0I3TSxLQUFLMk0sR0FFOUNJLEVBQXNCLFNBQXVCNVMsR0FDL0MsSUFBS0gsRUFBV0csR0FBVyxPQUFPLEVBQ2xDLElBRUUsT0FEQStQLEVBQVV5QyxFQUFNQyxFQUFPelMsSUFDaEIsRUFDUCxNQUFPd0YsR0FDUCxPQUFPLElBSVBxTixFQUFzQixTQUF1QjdTLEdBQy9DLElBQUtILEVBQVdHLEdBQVcsT0FBTyxFQUNsQyxPQUFRb04sRUFBUXBOLElBQ2QsSUFBSyxnQkFDTCxJQUFLLG9CQUNMLElBQUsseUJBQTBCLE9BQU8sRUFFeEMsSUFJRSxPQUFPMlMsS0FBeUI5TSxFQUFLNk0sRUFBbUJ0QixFQUFjcFIsSUFDdEUsTUFBT3dGLEdBQ1AsT0FBTyxJQUlYcU4sRUFBb0J0VCxNQUFPLEVBSTNCMUIsRUFBT0MsU0FBV2lTLEdBQWE5TCxHQUFNLFdBQ25DLElBQUkwQixFQUNKLE9BQU9pTixFQUFvQkEsRUFBb0J2UyxRQUN6Q3VTLEVBQW9CelQsVUFDcEJ5VCxHQUFvQixXQUFjak4sR0FBUyxNQUM1Q0EsS0FDRmtOLEVBQXNCRCxtQkNuRDNCLElBQUkxTCxFQUFTLEVBQVEsT0FFckJySixFQUFPQyxRQUFVLFNBQVUrUSxHQUN6QixZQUFzQjFOLElBQWYwTixJQUE2QjNILEVBQU8ySCxFQUFZLFVBQVkzSCxFQUFPMkgsRUFBWSwrQkNIeEYsSUFBSTVLLEVBQVEsRUFBUSxPQUNoQnBFLEVBQWEsRUFBUSxPQUVyQmlULEVBQWMsa0JBRWQvRSxFQUFXLFNBQVVnRixFQUFTQyxHQUNoQyxJQUFJdlIsRUFBUXdSLEVBQUtDLEVBQVVILElBQzNCLE9BQU90UixHQUFTMFIsR0FDWjFSLEdBQVMyUixJQUNUdlQsRUFBV21ULEdBQWEvTyxFQUFNK08sS0FDNUJBLElBR0pFLEVBQVluRixFQUFTbUYsVUFBWSxTQUFVRyxHQUM3QyxPQUFPblQsT0FBT21ULEdBQVEzTSxRQUFRb00sRUFBYSxLQUFLUSxlQUc5Q0wsRUFBT2xGLEVBQVNrRixLQUFPLEdBQ3ZCRyxFQUFTckYsRUFBU3FGLE9BQVMsSUFDM0JELEVBQVdwRixFQUFTb0YsU0FBVyxJQUVuQ3RWLEVBQU9DLFFBQVVpUSxtQkNyQmpCLElBQUkzTixFQUFXLEVBQVEsT0FFbkJpZSxFQUFRMVosS0FBSzBaLE1BS2pCeGdCLEVBQU9DLFFBQVU2M0IsT0FBT0MsV0FBYSxTQUFtQjUyQixHQUN0RCxPQUFRb0IsRUFBU3BCLElBQU82MkIsU0FBUzcyQixJQUFPcWYsRUFBTXJmLEtBQVFBLG9CQ1J4RCxJQUFJYSxFQUFhLEVBQVEsT0FFekJoQyxFQUFPQyxRQUFVLFNBQVVrQixHQUN6QixNQUFvQixpQkFBTkEsRUFBd0IsT0FBUEEsRUFBY2EsRUFBV2IsZUNIMURuQixFQUFPQyxTQUFVLG1CQ0FqQixJQUFJc0MsRUFBVyxFQUFRLE9BQ25CZ04sRUFBVSxFQUFRLE9BR2xCMGtCLEVBRmtCLEVBQVEsS0FFbEI1dEIsQ0FBZ0IsU0FJNUJyRyxFQUFPQyxRQUFVLFNBQVVrQixHQUN6QixJQUFJODJCLEVBQ0osT0FBTzExQixFQUFTcEIsVUFBbUNtQyxLQUExQjIwQixFQUFXOTJCLEVBQUc4eUIsTUFBMEJnRSxFQUEwQixVQUFmMW9CLEVBQVFwTyxzQkNWdEYsSUFBSVksRUFBUyxFQUFRLE9BQ2pCME4sRUFBYSxFQUFRLE9BQ3JCek4sRUFBYSxFQUFRLE9BQ3JCbEIsRUFBZ0IsRUFBUSxPQUN4QjRVLEVBQW9CLEVBQVEsT0FFNUJwVSxFQUFTUyxFQUFPVCxPQUVwQnRCLEVBQU9DLFFBQVV5VixFQUFvQixTQUFVdlUsR0FDN0MsTUFBb0IsaUJBQU5BLEdBQ1osU0FBVUEsR0FDWixJQUFJd1UsRUFBVWxHLEVBQVcsVUFDekIsT0FBT3pOLEVBQVcyVCxJQUFZN1UsRUFBYzZVLEVBQVF6VSxVQUFXSSxFQUFPSCxzQkNaeEUsSUFBSVksRUFBUyxFQUFRLE9BQ2pCcEIsRUFBTyxFQUFRLE9BQ2Y2QixFQUFPLEVBQVEsT0FDZitFLEVBQVcsRUFBUSxPQUNuQnRGLEVBQWMsRUFBUSxPQUN0QlUsRUFBd0IsRUFBUSxPQUNoQ0MsRUFBb0IsRUFBUSxPQUM1QjlCLEVBQWdCLEVBQVEsT0FDeEJELEVBQWMsRUFBUSxPQUN0QkQsRUFBb0IsRUFBUSxPQUM1QjRHLEVBQWdCLEVBQVEsT0FFeEJ0RixFQUFZSCxFQUFPRyxVQUVuQjBULEVBQVMsU0FBVUMsRUFBU3JTLEdBQzlCUCxLQUFLNFMsUUFBVUEsRUFDZjVTLEtBQUtPLE9BQVNBLEdBR1pzUyxFQUFrQkYsRUFBTzFVLFVBRTdCbEIsRUFBT0MsUUFBVSxTQUFVOFYsRUFBVUMsRUFBaUJ2RixHQUNwRCxJQUtJL00sRUFBVXVTLEVBQVFuUyxFQUFPVixFQUFRSSxFQUFRRyxFQUFNRixFQUwvQzZCLEVBQU9tTCxHQUFXQSxFQUFRbkwsS0FDMUI0USxLQUFnQnpGLElBQVdBLEVBQVF5RixZQUNuQ0MsS0FBaUIxRixJQUFXQSxFQUFRMEYsYUFDcENDLEtBQWlCM0YsSUFBV0EsRUFBUTJGLGFBQ3BDM08sRUFBSzlHLEVBQUtxVixFQUFpQjFRLEdBRzNCK1EsRUFBTyxTQUFVQyxHQUVuQixPQURJNVMsR0FBVThELEVBQWM5RCxFQUFVLFNBQVU0UyxHQUN6QyxJQUFJVixHQUFPLEVBQU1VLElBR3RCQyxFQUFTLFNBQVUzUyxHQUNyQixPQUFJc1MsR0FDRjNPLEVBQVMzRCxHQUNGd1MsRUFBYzNPLEVBQUc3RCxFQUFNLEdBQUlBLEVBQU0sR0FBSXlTLEdBQVE1TyxFQUFHN0QsRUFBTSxHQUFJQSxFQUFNLEtBQ2hFd1MsRUFBYzNPLEVBQUc3RCxFQUFPeVMsR0FBUTVPLEVBQUc3RCxJQUc5QyxHQUFJdVMsRUFDRnpTLEVBQVdxUyxNQUNOLENBRUwsS0FEQUUsRUFBU3JWLEVBQWtCbVYsSUFDZCxNQUFNN1QsRUFBVUQsRUFBWThULEdBQVksb0JBRXJELEdBQUlwVCxFQUFzQnNULEdBQVMsQ0FDakMsSUFBS25TLEVBQVEsRUFBR1YsRUFBU1IsRUFBa0JtVCxHQUFXM1MsRUFBU1UsRUFBT0EsSUFFcEUsSUFEQU4sRUFBUytTLEVBQU9SLEVBQVNqUyxNQUNYaEQsRUFBY2dWLEVBQWlCdFMsR0FBUyxPQUFPQSxFQUM3RCxPQUFPLElBQUlvUyxHQUFPLEdBRXRCbFMsRUFBVzdDLEVBQVlrVixFQUFVRSxHQUluQyxJQURBdFMsRUFBT0QsRUFBU0MsT0FDUEYsRUFBT2pCLEVBQUttQixFQUFNRCxJQUFXSyxNQUFNLENBQzFDLElBQ0VQLEVBQVMrUyxFQUFPOVMsRUFBS0csT0FDckIsTUFBTytELEdBQ1BILEVBQWM5RCxFQUFVLFFBQVNpRSxHQUVuQyxHQUFxQixpQkFBVm5FLEdBQXNCQSxHQUFVMUMsRUFBY2dWLEVBQWlCdFMsR0FBUyxPQUFPQSxFQUMxRixPQUFPLElBQUlvUyxHQUFPLHFCQ2hFdEIsSUFBSXBULEVBQU8sRUFBUSxPQUNmK0UsRUFBVyxFQUFRLE9BQ25Cb0wsRUFBWSxFQUFRLE9BRXhCM1MsRUFBT0MsUUFBVSxTQUFVeUQsRUFBVThTLEVBQU01UyxHQUN6QyxJQUFJNlMsRUFBYUMsRUFDakJuUCxFQUFTN0QsR0FDVCxJQUVFLEtBREErUyxFQUFjOUQsRUFBVWpQLEVBQVUsV0FDaEIsQ0FDaEIsR0FBYSxVQUFUOFMsRUFBa0IsTUFBTTVTLEVBQzVCLE9BQU9BLEVBRVQ2UyxFQUFjalUsRUFBS2lVLEVBQWEvUyxHQUNoQyxNQUFPaUUsR0FDUCtPLEdBQWEsRUFDYkQsRUFBYzlPLEVBRWhCLEdBQWEsVUFBVDZPLEVBQWtCLE1BQU01UyxFQUM1QixHQUFJOFMsRUFBWSxNQUFNRCxFQUV0QixPQURBbFAsRUFBU2tQLEdBQ0Y3UyxpQ0NwQlQsSUFhSW1HLEVBQW1CNE0sRUFBbUNDLEVBYnREeFEsRUFBUSxFQUFRLE9BQ2hCcEUsRUFBYSxFQUFRLE9BQ3JCMEQsRUFBUyxFQUFRLE9BQ2pCb0UsRUFBaUIsRUFBUSxPQUN6QnNCLEVBQVcsRUFBUSxPQUNuQi9FLEVBQWtCLEVBQVEsTUFDMUIwRSxFQUFVLEVBQVEsT0FFbEJuRCxFQUFXdkIsRUFBZ0IsWUFDM0JxRixHQUF5QixFQU96QixHQUFHakwsT0FHQyxTQUZObVcsRUFBZ0IsR0FBR25XLFNBSWpCa1csRUFBb0M3TSxFQUFlQSxFQUFlOE0sT0FDeEJ0VixPQUFPSixZQUFXNkksRUFBb0I0TSxHQUhsRGpMLEdBQXlCLEdBT1RwSSxNQUFyQnlHLEdBQWtDM0QsR0FBTSxXQUNuRSxJQUFJK0MsRUFBTyxHQUVYLE9BQU9ZLEVBQWtCbkMsR0FBVXBGLEtBQUsyRyxLQUFVQSxLQUd4QlksRUFBb0IsR0FDdkNnQixJQUFTaEIsRUFBb0JyRSxFQUFPcUUsSUFJeEMvSCxFQUFXK0gsRUFBa0JuQyxLQUNoQ3dELEVBQVNyQixFQUFtQm5DLEdBQVUsV0FDcEMsT0FBTzNFLFFBSVhqRCxFQUFPQyxRQUFVLENBQ2Y4SixrQkFBbUJBLEVBQ25CMkIsdUJBQXdCQSxjQzlDMUIxTCxFQUFPQyxRQUFVLG9CQ0FqQixJQUFJNFcsRUFBVyxFQUFRLE9BSXZCN1csRUFBT0MsUUFBVSxTQUFVNlcsR0FDekIsT0FBT0QsRUFBU0MsRUFBSTFULDBCQ0x0QixJQWlCSTJULEVBQU9DLEVBQU1DLEVBQU1DLEVBQVFDLEVBQVFDLEVBQU1DLEVBQVNDLEVBakJsRHZWLEVBQVMsRUFBUSxPQUNqQnBCLEVBQU8sRUFBUSxPQUNmZ0osRUFBMkIsV0FDM0I0TixFQUFZLGFBQ1pDLEVBQVMsRUFBUSxNQUNqQkMsRUFBZ0IsRUFBUSxPQUN4QkMsRUFBa0IsRUFBUSxPQUMxQkMsRUFBVSxFQUFRLE9BRWxCQyxFQUFtQjdWLEVBQU82VixrQkFBb0I3VixFQUFPOFYsdUJBQ3JEM0ssRUFBV25MLEVBQU9tTCxTQUNsQnNDLEVBQVV6TixFQUFPeU4sUUFDakI3TixFQUFVSSxFQUFPSixRQUVqQm1XLEVBQTJCbk8sRUFBeUI1SCxFQUFRLGtCQUM1RGdXLEVBQWlCRCxHQUE0QkEsRUFBeUJsVSxNQUtyRW1VLElBQ0hoQixFQUFRLFdBQ04sSUFBSTdXLEVBQVF1SCxFQUVaLElBRElrUSxJQUFZelgsRUFBU3NQLEVBQVF3SSxTQUFTOVgsRUFBTytYLE9BQzFDakIsR0FBTSxDQUNYdlAsRUFBS3VQLEVBQUt2UCxHQUNWdVAsRUFBT0EsRUFBS3JULEtBQ1osSUFDRThELElBQ0EsTUFBT0UsR0FHUCxNQUZJcVAsRUFBTUUsSUFDTEQsT0FBTzNULEVBQ05xRSxHQUVSc1AsT0FBTzNULEVBQ0xwRCxHQUFRQSxFQUFPZ1ksU0FLaEJWLEdBQVdHLEdBQVlELElBQW1CRSxJQUFvQjFLLEdBUXZEdUssR0FBaUI5VixHQUFXQSxFQUFRd1csVUFFOUNkLEVBQVUxVixFQUFRd1csYUFBUTdVLElBRWxCb0QsWUFBYy9FLEVBQ3RCMlYsRUFBTzNXLEVBQUswVyxFQUFRQyxLQUFNRCxHQUMxQkgsRUFBUyxXQUNQSSxFQUFLUCxLQUdFWSxFQUNUVCxFQUFTLFdBQ1AxSCxFQUFRNEksU0FBU3JCLEtBVW5CUSxFQUFZNVcsRUFBSzRXLEVBQVd4VixHQUM1Qm1WLEVBQVMsV0FDUEssRUFBVVIsTUEvQlpJLEdBQVMsRUFDVEMsRUFBT2xLLEVBQVNtTCxlQUFlLElBQy9CLElBQUlULEVBQWlCYixHQUFPdUIsUUFBUWxCLEVBQU0sQ0FBRW1CLGVBQWUsSUFDM0RyQixFQUFTLFdBQ1BFLEVBQUtoQyxLQUFPK0IsR0FBVUEsS0FnQzVCblgsRUFBT0MsUUFBVThYLEdBQWtCLFNBQVV0USxHQUMzQyxJQUFJK1EsRUFBTyxDQUFFL1EsR0FBSUEsRUFBSTlELFVBQU1MLEdBQ3ZCMlQsSUFBTUEsRUFBS3RULEtBQU82VSxHQUNqQnhCLElBQ0hBLEVBQU93QixFQUNQdEIsS0FDQUQsRUFBT3VCLG9CQ25GWCxJQUFJelcsRUFBUyxFQUFRLE9BRXJCL0IsRUFBT0MsUUFBVThCLEVBQU9KLHlCQ0R4QixJQUFJMkUsRUFBYSxFQUFRLE1BQ3JCRixFQUFRLEVBQVEsT0FHcEJwRyxFQUFPQyxVQUFZcUIsT0FBT21YLHdCQUEwQnJTLEdBQU0sV0FDeEQsSUFBSXNTLEVBQVM5VyxTQUdiLE9BQVFTLE9BQU9xVyxNQUFhcFgsT0FBT29YLGFBQW1COVcsVUFFbkRBLE9BQU9GLE1BQVE0RSxHQUFjQSxFQUFhLHFCQ1gvQyxJQUFJRixFQUFRLEVBQVEsT0FDaEJDLEVBQWtCLEVBQVEsTUFDMUIwRSxFQUFVLEVBQVEsT0FFbEJuRCxFQUFXdkIsRUFBZ0IsWUFFL0JyRyxFQUFPQyxTQUFXbUcsR0FBTSxXQUV0QixJQUFJOHhCLEVBQU0sSUFBSUMsSUFBSSxnQkFBaUIsWUFDL0JDLEVBQWVGLEVBQUlFLGFBQ25CNTBCLEVBQVMsR0FNYixPQUxBMDBCLEVBQUlHLFNBQVcsUUFDZkQsRUFBYXh5QixTQUFRLFNBQVVoQyxFQUFPcEMsR0FDcEM0MkIsRUFBcUIsT0FBRSxLQUN2QjUwQixHQUFVaEMsRUFBTW9DLEtBRVZtSCxJQUFZbXRCLEVBQUlJLFNBQ2xCRixFQUFhRyxNQUNELDJCQUFiTCxFQUFJTSxNQUNzQixNQUExQkosRUFBYW5yQixJQUFJLE1BQ3VCLFFBQXhDNUssT0FBTyxJQUFJbzJCLGdCQUFnQixXQUMxQkwsRUFBYXh3QixJQUVzQixNQUFwQyxJQUFJdXdCLElBQUksZUFBZU8sVUFDc0MsTUFBN0QsSUFBSUQsZ0JBQWdCLElBQUlBLGdCQUFnQixRQUFReHJCLElBQUksTUFFcEIsZUFBaEMsSUFBSWtyQixJQUFJLGVBQWV2WSxNQUVRLFlBQS9CLElBQUl1WSxJQUFJLGNBQWNRLE1BRVgsU0FBWG4xQixHQUV3QyxNQUF4QyxJQUFJMjBCLElBQUksZ0JBQVk3MEIsR0FBV3NjLHlCQ2hDdEMsSUFBSTdkLEVBQVMsRUFBUSxPQUNqQkMsRUFBYSxFQUFRLE9BQ3JCdVIsRUFBZ0IsRUFBUSxPQUV4QlMsRUFBVWpTLEVBQU9pUyxRQUVyQmhVLEVBQU9DLFFBQVUrQixFQUFXZ1MsSUFBWSxjQUFjN0ssS0FBS29LLEVBQWNTLGtDQ0x6RSxJQUFJbkMsRUFBWSxFQUFRLE9BRXBCOEcsRUFBb0IsU0FBVXRSLEdBQ2hDLElBQUk4USxFQUFTUyxFQUNiM1YsS0FBS29VLFFBQVUsSUFBSWhRLEdBQUUsU0FBVXdSLEVBQVdDLEdBQ3hDLFFBQWdCeFYsSUFBWjZVLFFBQW9DN1UsSUFBWHNWLEVBQXNCLE1BQU0xVyxVQUFVLDJCQUNuRWlXLEVBQVVVLEVBQ1ZELEVBQVNFLEtBRVg3VixLQUFLa1YsUUFBVXRHLEVBQVVzRyxHQUN6QmxWLEtBQUsyVixPQUFTL0csRUFBVStHLElBSzFCNVksRUFBT0MsUUFBUTZCLEVBQUksU0FBVXVGLEdBQzNCLE9BQU8sSUFBSXNSLEVBQWtCdFIsb0JDakIvQixJQUFJdEYsRUFBUyxFQUFRLE9BQ2pCazJCLEVBQVcsRUFBUSxPQUVuQi8xQixFQUFZSCxFQUFPRyxVQUV2QmxDLEVBQU9DLFFBQVUsU0FBVWtCLEdBQ3pCLEdBQUk4MkIsRUFBUzkyQixHQUNYLE1BQU1lLEVBQVUsaURBQ2hCLE9BQU9mLGlDQ1BYLElBQUlvSixFQUFjLEVBQVEsT0FDdEI5RixFQUFjLEVBQVEsTUFDdEJqQyxFQUFPLEVBQVEsT0FDZjRELEVBQVEsRUFBUSxPQUNoQnVVLEVBQWEsRUFBUSxPQUNyQjRCLEVBQThCLEVBQVEsT0FDdENwQixFQUE2QixFQUFRLE9BQ3JDMVksRUFBVyxFQUFRLE9BQ25CaUMsRUFBZ0IsRUFBUSxPQUd4QmswQixFQUFVdDNCLE9BQU91M0IsT0FFakJ0M0IsRUFBaUJELE9BQU9DLGVBQ3hCZixFQUFTaUUsRUFBWSxHQUFHakUsUUFJNUJSLEVBQU9DLFNBQVcyNEIsR0FBV3h5QixHQUFNLFdBRWpDLEdBQUltRSxHQVFpQixJQVJGcXVCLEVBQVEsQ0FBRXJvQixFQUFHLEdBQUtxb0IsRUFBUXIzQixFQUFlLEdBQUksSUFBSyxDQUNuRWtKLFlBQVksRUFDWndDLElBQUssV0FDSDFMLEVBQWUwQixLQUFNLElBQUssQ0FDeEJXLE1BQU8sRUFDUDZHLFlBQVksT0FHZCxDQUFFOEYsRUFBRyxLQUFNQSxFQUFTLE9BQU8sRUFFL0IsSUFBSXdTLEVBQUksR0FDSitWLEVBQUksR0FFSnBnQixFQUFTOVcsU0FDVG0zQixFQUFXLHVCQUdmLE9BRkFoVyxFQUFFckssR0FBVSxFQUNacWdCLEVBQVNocEIsTUFBTSxJQUFJbkssU0FBUSxTQUFVb3pCLEdBQU9GLEVBQUVFLEdBQU9BLEtBQ3BCLEdBQTFCSixFQUFRLEdBQUk3VixHQUFHckssSUFBZ0JpQyxFQUFXaWUsRUFBUSxHQUFJRSxJQUFJOW1CLEtBQUssS0FBTyttQixLQUMxRSxTQUFnQnB6QixFQUFROEQsR0FNM0IsSUFMQSxJQUFJd3ZCLEVBQUl4MkIsRUFBU2tELEdBQ2J6QyxFQUFrQkMsVUFBVUMsT0FDNUJVLEVBQVEsRUFDUjJVLEVBQXdCOEQsRUFBNEJ6YSxFQUNwRHNSLEVBQXVCK0gsRUFBMkJyWixFQUMvQ29CLEVBQWtCWSxHQU12QixJQUxBLElBSUl0QyxFQUpBcWMsRUFBSW5aLEVBQWN2QixVQUFVVyxNQUM1QnJELEVBQU9nWSxFQUF3QmpZLEVBQU9tYSxFQUFXa0QsR0FBSXBGLEVBQXNCb0YsSUFBTWxELEVBQVdrRCxHQUM1RnphLEVBQVMzQyxFQUFLMkMsT0FDZG1zQixFQUFJLEVBRURuc0IsRUFBU21zQixHQUNkL3RCLEVBQU1mLEVBQUs4dUIsS0FDTmhsQixJQUFlL0gsRUFBSzRRLEVBQXNCeUssRUFBR3JjLEtBQU15M0IsRUFBRXozQixHQUFPcWMsRUFBRXJjLElBRXJFLE9BQU95M0IsR0FDUEwsbUJDdkRKLElBbURJNWYsRUFuREF6UixFQUFXLEVBQVEsT0FDbkIwUixFQUF5QixFQUFRLE9BQ2pDQyxFQUFjLEVBQVEsT0FDdEJwRixFQUFhLEVBQVEsTUFDckJxRixFQUFPLEVBQVEsT0FDZkMsRUFBd0IsRUFBUSxPQU9oQ0MsRUFOWSxFQUFRLEtBTVR4RixDQUFVLFlBRXJCeUYsRUFBbUIsYUFFbkJDLEVBQVksU0FBVUMsR0FDeEIsTUFBT0MsV0FBbUJELEVBQW5CQyxjQUlMQyxFQUE0QixTQUFVVixHQUN4Q0EsRUFBZ0JXLE1BQU1KLEVBQVUsS0FDaENQLEVBQWdCWSxRQUNoQixJQUFJQyxFQUFPYixFQUFnQmMsYUFBYXhZLE9BRXhDLE9BREEwWCxFQUFrQixLQUNYYSxHQTBCTEUsRUFBa0IsV0FDcEIsSUFDRWYsRUFBa0IsSUFBSWdCLGNBQWMsWUFDcEMsTUFBT3JTLElBekJvQixJQUl6QnNTLEVBRkFDLEVBd0JKSCxFQUFxQyxvQkFBWjdNLFNBQ3JCQSxTQUFTOEssUUFBVWdCLEVBQ2pCVSxFQUEwQlYsS0ExQjVCa0IsRUFBU2QsRUFBc0IsV0FHNUJlLE1BQU1DLFFBQVUsT0FDdkJqQixFQUFLa0IsWUFBWUgsR0FFakJBLEVBQU9JLElBQU1qWSxPQUxKLGdCQU1UNFgsRUFBaUJDLEVBQU9LLGNBQWNyTixVQUN2QnNOLE9BQ2ZQLEVBQWVOLE1BQU1KLEVBQVUsc0JBQy9CVSxFQUFlTCxRQUNSSyxFQUFlcFEsR0FpQmxCNlAsRUFBMEJWLEdBRTlCLElBREEsSUFBSTVWLEVBQVM4VixFQUFZOVYsT0FDbEJBLFlBQWlCMlcsRUFBeUIsVUFBRWIsRUFBWTlWLElBQy9ELE9BQU8yVyxLQUdUakcsRUFBV3VGLElBQVksRUFJdkJyWixFQUFPQyxRQUFVcUIsT0FBT29FLFFBQVUsU0FBZ0IzQyxFQUFHMFgsR0FDbkQsSUFBSWpYLEVBUUosT0FQVSxPQUFOVCxHQUNGdVcsRUFBMEIsVUFBSS9SLEVBQVN4RSxHQUN2Q1MsRUFBUyxJQUFJOFYsRUFDYkEsRUFBMEIsVUFBSSxLQUU5QjlWLEVBQU82VixHQUFZdFcsR0FDZFMsRUFBU3VXLFNBQ016VyxJQUFmbVgsRUFBMkJqWCxFQUFTeVYsRUFBdUJuWCxFQUFFMEIsRUFBUWlYLHFCQ2hGOUUsSUFBSWxRLEVBQWMsRUFBUSxPQUN0Qm1RLEVBQTBCLEVBQVEsTUFDbENsUixFQUF1QixFQUFRLE1BQy9CakMsRUFBVyxFQUFRLE9BQ25CdkQsRUFBa0IsRUFBUSxPQUMxQjJXLEVBQWEsRUFBUSxPQUt6QjFhLEVBQVE2QixFQUFJeUksSUFBZ0JtUSxFQUEwQnBaLE9BQU9zWixpQkFBbUIsU0FBMEI3WCxFQUFHMFgsR0FDM0dsVCxFQUFTeEUsR0FNVCxJQUxBLElBSUl2QixFQUpBcVosRUFBUTdXLEVBQWdCeVcsR0FDeEJoYSxFQUFPa2EsRUFBV0YsR0FDbEJyWCxFQUFTM0MsRUFBSzJDLE9BQ2RVLEVBQVEsRUFFTFYsRUFBU1UsR0FBTzBGLEVBQXFCMUgsRUFBRWlCLEVBQUd2QixFQUFNZixFQUFLcUQsS0FBVStXLEVBQU1yWixJQUM1RSxPQUFPdUIsbUJDbEJULElBQUloQixFQUFTLEVBQVEsT0FDakJ3SSxFQUFjLEVBQVEsT0FDdEJ1USxFQUFpQixFQUFRLE9BQ3pCSixFQUEwQixFQUFRLE1BQ2xDblQsRUFBVyxFQUFRLE9BQ25CcUQsRUFBZ0IsRUFBUSxPQUV4QjFJLEVBQVlILEVBQU9HLFVBRW5CNlksRUFBa0J6WixPQUFPQyxlQUV6QnlaLEVBQTRCMVosT0FBT3FJLHlCQU92QzFKLEVBQVE2QixFQUFJeUksRUFBY21RLEVBQTBCLFNBQXdCM1gsRUFBRytQLEVBQUdtSSxHQUloRixHQUhBMVQsRUFBU3hFLEdBQ1QrUCxFQUFJbEksRUFBY2tJLEdBQ2xCdkwsRUFBUzBULEdBQ1EsbUJBQU5sWSxHQUEwQixjQUFOK1AsR0FBcUIsVUFBV21JLEdBUmxELGFBUTRFQSxJQUFlQSxFQUFtQixTQUFHLENBQzVILElBQUlDLEVBQVVGLEVBQTBCalksRUFBRytQLEdBQ3ZDb0ksR0FBV0EsRUFBZ0IsV0FDN0JuWSxFQUFFK1AsR0FBS21JLEVBQVdyWCxNQUNsQnFYLEVBQWEsQ0FDWHZRLGFBZFcsaUJBY21CdVEsRUFBYUEsRUFBdUIsYUFBSUMsRUFBb0IsYUFDMUZ6USxXQWhCUyxlQWdCaUJ3USxFQUFhQSxFQUFxQixXQUFJQyxFQUFrQixXQUNsRnZRLFVBQVUsSUFHZCxPQUFPb1EsRUFBZ0JoWSxFQUFHK1AsRUFBR21JLElBQzdCRixFQUFrQixTQUF3QmhZLEVBQUcrUCxFQUFHbUksR0FJbEQsR0FIQTFULEVBQVN4RSxHQUNUK1AsRUFBSWxJLEVBQWNrSSxHQUNsQnZMLEVBQVMwVCxHQUNMSCxFQUFnQixJQUNsQixPQUFPQyxFQUFnQmhZLEVBQUcrUCxFQUFHbUksR0FDN0IsTUFBT3RULElBQ1QsR0FBSSxRQUFTc1QsR0FBYyxRQUFTQSxFQUFZLE1BQU0vWSxFQUFVLDJCQUVoRSxNQURJLFVBQVcrWSxJQUFZbFksRUFBRStQLEdBQUttSSxFQUFXclgsT0FDdENiLG9CQzFDVCxJQUFJd0gsRUFBYyxFQUFRLE9BQ3RCL0gsRUFBTyxFQUFRLE9BQ2YyWSxFQUE2QixFQUFRLE9BQ3JDblIsRUFBMkIsRUFBUSxPQUNuQ2hHLEVBQWtCLEVBQVEsT0FDMUI0RyxFQUFnQixFQUFRLE9BQ3hCdkIsRUFBUyxFQUFRLE9BQ2pCeVIsRUFBaUIsRUFBUSxPQUd6QkUsRUFBNEIxWixPQUFPcUkseUJBSXZDMUosRUFBUTZCLEVBQUl5SSxFQUFjeVEsRUFBNEIsU0FBa0NqWSxFQUFHK1AsR0FHekYsR0FGQS9QLEVBQUlpQixFQUFnQmpCLEdBQ3BCK1AsRUFBSWxJLEVBQWNrSSxHQUNkZ0ksRUFBZ0IsSUFDbEIsT0FBT0UsRUFBMEJqWSxFQUFHK1AsR0FDcEMsTUFBT25MLElBQ1QsR0FBSTBCLEVBQU90RyxFQUFHK1AsR0FBSSxPQUFPOUksR0FBMEJ4SCxFQUFLMlksRUFBMkJyWixFQUFHaUIsRUFBRytQLEdBQUkvUCxFQUFFK1AscUJDbkJqRyxJQUFJdkQsRUFBVSxFQUFRLE9BQ2xCdkwsRUFBa0IsRUFBUSxPQUMxQm9YLEVBQXVCLFVBQ3ZCckosRUFBYSxFQUFRLE9BRXJCc0osRUFBK0IsaUJBQVZqTSxRQUFzQkEsUUFBVTlOLE9BQU9nYSxvQkFDNURoYSxPQUFPZ2Esb0JBQW9CbE0sUUFBVSxHQVd6Q3BQLEVBQU9DLFFBQVE2QixFQUFJLFNBQTZCWCxHQUM5QyxPQUFPa2EsR0FBOEIsVUFBZjlMLEVBQVFwTyxHQVZYLFNBQVVBLEdBQzdCLElBQ0UsT0FBT2lhLEVBQXFCamEsR0FDNUIsTUFBT3dHLEdBQ1AsT0FBT29LLEVBQVdzSixJQU9oQkUsQ0FBZXBhLEdBQ2ZpYSxFQUFxQnBYLEVBQWdCN0MscUJDckIzQyxJQUFJcWEsRUFBcUIsRUFBUSxPQUc3QjFILEVBRmMsRUFBUSxPQUVHdFQsT0FBTyxTQUFVLGFBSzlDUCxFQUFRNkIsRUFBSVIsT0FBT2dhLHFCQUF1QixTQUE2QnZZLEdBQ3JFLE9BQU95WSxFQUFtQnpZLEVBQUcrUSxtQkNSL0I3VCxFQUFRNkIsRUFBSVIsT0FBT21YLHVDQ0RuQixJQUFJMVcsRUFBUyxFQUFRLE9BQ2pCc0gsRUFBUyxFQUFRLE9BQ2pCckgsRUFBYSxFQUFRLE9BQ3JCUyxFQUFXLEVBQVEsT0FDbkJvUixFQUFZLEVBQVEsTUFDcEI0SCxFQUEyQixFQUFRLE9BRW5DcEMsRUFBV3hGLEVBQVUsWUFDckJ2UyxFQUFTUyxFQUFPVCxPQUNoQm9hLEVBQWtCcGEsRUFBT0osVUFJN0JsQixFQUFPQyxRQUFVd2IsRUFBMkJuYSxFQUFPd0ksZUFBaUIsU0FBVS9HLEdBQzVFLElBQUlvRixFQUFTMUYsRUFBU00sR0FDdEIsR0FBSXNHLEVBQU9sQixFQUFRa1IsR0FBVyxPQUFPbFIsRUFBT2tSLEdBQzVDLElBQUkzUyxFQUFjeUIsRUFBT3pCLFlBQ3pCLE9BQUkxRSxFQUFXMEUsSUFBZ0J5QixhQUFrQnpCLEVBQ3hDQSxFQUFZeEYsVUFDWmlILGFBQWtCN0csRUFBU29hLEVBQWtCLHVCQ25CeEQsSUFBSXRWLEVBQVEsRUFBUSxPQUNoQjdELEVBQVcsRUFBUSxPQUNuQmdOLEVBQVUsRUFBUSxPQUNsQjJwQixFQUE4QixFQUFRLE1BR3RDQyxFQUFnQjczQixPQUFPNHBCLGFBQ3ZCa08sRUFBc0JoekIsR0FBTSxXQUFjK3lCLEVBQWMsTUFJNURuNUIsRUFBT0MsUUFBV201QixHQUF1QkYsRUFBK0IsU0FBc0IvM0IsR0FDNUYsUUFBS29CLEVBQVNwQixNQUNWKzNCLEdBQThDLGVBQWYzcEIsRUFBUXBPLE9BQ3BDZzRCLEdBQWdCQSxFQUFjaDRCLEtBQ25DZzRCLG1CQ2ZKLElBQUkxMEIsRUFBYyxFQUFRLE1BRTFCekUsRUFBT0MsUUFBVXdFLEVBQVksR0FBRzNELGdDQ0ZoQyxJQUFJMkQsRUFBYyxFQUFRLE1BQ3RCNEUsRUFBUyxFQUFRLE9BQ2pCckYsRUFBa0IsRUFBUSxPQUMxQlEsRUFBVSxpQkFDVnNQLEVBQWEsRUFBUSxNQUVyQmxQLEVBQU9ILEVBQVksR0FBR0csTUFFMUI1RSxFQUFPQyxRQUFVLFNBQVVrSSxFQUFRd1QsR0FDakMsSUFHSW5hLEVBSEF1QixFQUFJaUIsRUFBZ0JtRSxHQUNwQnlCLEVBQUksRUFDSnBHLEVBQVMsR0FFYixJQUFLaEMsS0FBT3VCLEdBQUlzRyxFQUFPeUssRUFBWXRTLElBQVE2SCxFQUFPdEcsRUFBR3ZCLElBQVFvRCxFQUFLcEIsRUFBUWhDLEdBRTFFLEtBQU9tYSxFQUFNdlksT0FBU3dHLEdBQU9QLEVBQU90RyxFQUFHdkIsRUFBTW1hLEVBQU0vUixTQUNoRHBGLEVBQVFoQixFQUFRaEMsSUFBUW9ELEVBQUtwQixFQUFRaEMsSUFFeEMsT0FBT2dDLG9CQ2xCVCxJQUFJZ1ksRUFBcUIsRUFBUSxPQUM3QnRDLEVBQWMsRUFBUSxPQUsxQmxaLEVBQU9DLFFBQVVxQixPQUFPYixNQUFRLFNBQWNzQyxHQUM1QyxPQUFPeVksRUFBbUJ6WSxFQUFHbVcsZ0NDTi9CLElBQUkwQyxFQUF3QixHQUFHeEkscUJBRTNCekosRUFBMkJySSxPQUFPcUkseUJBR2xDa1MsRUFBY2xTLElBQTZCaVMsRUFBc0JwWixLQUFLLENBQUUsRUFBRyxHQUFLLEdBSXBGdkMsRUFBUTZCLEVBQUkrWixFQUFjLFNBQThCaEosR0FDdEQsSUFBSTdCLEVBQWFySCxFQUF5QjFHLEtBQU00UCxHQUNoRCxRQUFTN0IsR0FBY0EsRUFBV3ZHLFlBQ2hDbVIsbUJDWkosSUFBSW5YLEVBQWMsRUFBUSxNQUN0QjhDLEVBQVcsRUFBUSxPQUNuQnVVLEVBQXFCLEVBQVEsT0FNakM5YixFQUFPQyxRQUFVcUIsT0FBTzRKLGlCQUFtQixhQUFlLEdBQUssV0FDN0QsSUFFSTZRLEVBRkFDLEdBQWlCLEVBQ2pCN1MsRUFBTyxHQUVYLEtBRUU0UyxFQUFTdFgsRUFBWW5ELE9BQU9xSSx5QkFBeUJySSxPQUFPSixVQUFXLGFBQWF1UyxNQUM3RXRLLEVBQU0sSUFDYjZTLEVBQWlCN1MsYUFBZ0IvSSxNQUNqQyxNQUFPdUgsSUFDVCxPQUFPLFNBQXdCNUUsRUFBRytKLEdBS2hDLE9BSkF2RixFQUFTeEUsR0FDVCtZLEVBQW1CaFAsR0FDZmtQLEVBQWdCRCxFQUFPaFosRUFBRytKLEdBQ3pCL0osRUFBRWtaLFVBQVluUCxFQUNaL0osR0Fmb0QsUUFpQnpETyxvQkMxQk4sSUFBSWlILEVBQWMsRUFBUSxPQUN0QjlGLEVBQWMsRUFBUSxNQUN0QmtXLEVBQWEsRUFBUSxPQUNyQjNXLEVBQWtCLEVBQVEsT0FHMUJvUCxFQUF1QjNPLEVBRkMsWUFHeEJHLEVBQU9ILEVBQVksR0FBR0csTUFHdEJWLEVBQWUsU0FBVW0xQixHQUMzQixPQUFPLFNBQVVsNEIsR0FPZixJQU5BLElBS0lLLEVBTEF1QixFQUFJaUIsRUFBZ0I3QyxHQUNwQlYsRUFBT2thLEVBQVc1WCxHQUNsQkssRUFBUzNDLEVBQUsyQyxPQUNkd0csRUFBSSxFQUNKcEcsRUFBUyxHQUVOSixFQUFTd0csR0FDZHBJLEVBQU1mLEVBQUttSixLQUNOVyxJQUFlNkksRUFBcUJyUSxFQUFHdkIsSUFDMUNvRCxFQUFLcEIsRUFBUTYxQixFQUFhLENBQUM3M0IsRUFBS3VCLEVBQUV2QixJQUFRdUIsRUFBRXZCLElBR2hELE9BQU9nQyxJQUlYeEQsRUFBT0MsUUFBVSxDQUdmME0sUUFBU3pJLEdBQWEsR0FHdEIySSxPQUFRM0ksR0FBYSxrQ0NqQ3ZCLElBQUlvRSxFQUF3QixFQUFRLE9BQ2hDaUgsRUFBVSxFQUFRLE9BSXRCdlAsRUFBT0MsUUFBVXFJLEVBQXdCLEdBQUdGLFNBQVcsV0FDckQsTUFBTyxXQUFhbUgsRUFBUXRNLE1BQVEsc0JDUHRDLElBQUlsQixFQUFTLEVBQVEsT0FDakJTLEVBQU8sRUFBUSxPQUNmUixFQUFhLEVBQVEsT0FDckJPLEVBQVcsRUFBUSxPQUVuQkwsRUFBWUgsRUFBT0csVUFJdkJsQyxFQUFPQyxRQUFVLFNBQVVpYyxFQUFPQyxHQUNoQyxJQUFJMVUsRUFBSTJVLEVBQ1IsR0FBYSxXQUFURCxHQUFxQm5hLEVBQVd5RixFQUFLeVUsRUFBTTlULFlBQWM3RixFQUFTNlosRUFBTTVaLEVBQUtpRixFQUFJeVUsSUFBUyxPQUFPRSxFQUNyRyxHQUFJcGEsRUFBV3lGLEVBQUt5VSxFQUFNRyxXQUFhOVosRUFBUzZaLEVBQU01WixFQUFLaUYsRUFBSXlVLElBQVMsT0FBT0UsRUFDL0UsR0FBYSxXQUFURCxHQUFxQm5hLEVBQVd5RixFQUFLeVUsRUFBTTlULFlBQWM3RixFQUFTNlosRUFBTTVaLEVBQUtpRixFQUFJeVUsSUFBUyxPQUFPRSxFQUNyRyxNQUFNbGEsRUFBVSw2RENkbEIsSUFBSXVOLEVBQWEsRUFBUSxPQUNyQmhMLEVBQWMsRUFBUSxNQUN0QjZYLEVBQTRCLEVBQVEsTUFDcENDLEVBQThCLEVBQVEsT0FDdENoVixFQUFXLEVBQVEsT0FFbkIvRyxFQUFTaUUsRUFBWSxHQUFHakUsUUFHNUJSLEVBQU9DLFFBQVV3UCxFQUFXLFVBQVcsWUFBYyxTQUFpQnRPLEdBQ3BFLElBQUlWLEVBQU82YixFQUEwQnhhLEVBQUV5RixFQUFTcEcsSUFDNUNzWCxFQUF3QjhELEVBQTRCemEsRUFDeEQsT0FBTzJXLEVBQXdCalksRUFBT0MsRUFBTWdZLEVBQXNCdFgsSUFBT1Ysb0JDWjNFLElBQUlzQixFQUFTLEVBQVEsT0FFckIvQixFQUFPQyxRQUFVOEIsYUNGakIvQixFQUFPQyxRQUFVLFNBQVUrSCxHQUN6QixJQUNFLE1BQU8sQ0FBRUwsT0FBTyxFQUFPL0QsTUFBT29FLEtBQzlCLE1BQU9MLEdBQ1AsTUFBTyxDQUFFQSxPQUFPLEVBQU0vRCxNQUFPK0Qsc0JDSmpDLElBQUlKLEVBQVcsRUFBUSxPQUNuQmhGLEVBQVcsRUFBUSxPQUNuQmlhLEVBQXVCLEVBQVEsT0FFbkN4YyxFQUFPQyxRQUFVLFNBQVVvSCxFQUFHb1YsR0FFNUIsR0FEQWxWLEVBQVNGLEdBQ0w5RSxFQUFTa2EsSUFBTUEsRUFBRS9WLGNBQWdCVyxFQUFHLE9BQU9vVixFQUMvQyxJQUFJQyxFQUFvQkYsRUFBcUIxYSxFQUFFdUYsR0FHL0MsT0FEQThRLEVBRGN1RSxFQUFrQnZFLFNBQ3hCc0UsR0FDREMsRUFBa0JyRixvQkNWM0IsSUFBSXNGLEVBQVEsV0FDVjFaLEtBQUsrVCxLQUFPLEtBQ1ovVCxLQUFLMlosS0FBTyxNQUdkRCxFQUFNemIsVUFBWSxDQUNoQjJiLElBQUssU0FBVUMsR0FDYixJQUFJQyxFQUFRLENBQUVELEtBQU1BLEVBQU1uWixLQUFNLE1BQzVCVixLQUFLK1QsS0FBTS9ULEtBQUsyWixLQUFLalosS0FBT29aLEVBQzNCOVosS0FBSytULEtBQU8rRixFQUNqQjlaLEtBQUsyWixLQUFPRyxHQUVkOVAsSUFBSyxXQUNILElBQUk4UCxFQUFROVosS0FBSytULEtBQ2pCLEdBQUkrRixFQUdGLE9BRkE5WixLQUFLK1QsS0FBTytGLEVBQU1wWixLQUNkVixLQUFLMlosT0FBU0csSUFBTzlaLEtBQUsyWixLQUFPLE1BQzlCRyxFQUFNRCxPQUtuQjljLEVBQU9DLFFBQVUwYyxtQkN0QmpCLElBQUl2UixFQUFXLEVBQVEsT0FFdkJwTCxFQUFPQyxRQUFVLFNBQVUwRixFQUFRMlUsRUFBSzdKLEdBQ3RDLElBQUssSUFBSWpQLEtBQU84WSxFQUFLbFAsRUFBU3pGLEVBQVFuRSxFQUFLOFksRUFBSTlZLEdBQU1pUCxHQUNyRCxPQUFPOUssb0JDSlQsSUFBSTVELEVBQVMsRUFBUSxPQUNqQkMsRUFBYSxFQUFRLE9BQ3JCcUgsRUFBUyxFQUFRLE9BQ2pCOEIsRUFBOEIsRUFBUSxPQUN0Q21TLEVBQVksRUFBUSxPQUNwQi9KLEVBQWdCLEVBQVEsT0FDeEIyUCxFQUFzQixFQUFRLE9BQzlCMVgsRUFBNkIsc0JBRTdCOFgsRUFBbUJKLEVBQW9CalcsSUFDdkNxc0IsRUFBdUJwVyxFQUFvQjFPLFFBQzNDK2tCLEVBQVdsM0IsT0FBT0EsUUFBUTBOLE1BQU0sV0FFbkMvUCxFQUFPQyxRQUFVLFNBQVU4QyxFQUFHdkIsRUFBS29DLEVBQU82TSxHQUN6QyxJQUlJd0QsRUFKQStJLElBQVN2TSxLQUFZQSxFQUFRdU0sT0FDN0J3YyxJQUFTL29CLEtBQVlBLEVBQVFoRyxXQUM3QitHLElBQWNmLEtBQVlBLEVBQVFlLFlBQ2xDNUUsRUFBTzZELFFBQTRCbk4sSUFBakJtTixFQUFRN0QsS0FBcUI2RCxFQUFRN0QsS0FBT3BMLEVBRTlEUSxFQUFXNEIsS0FDb0IsWUFBN0J2QixPQUFPdUssR0FBTWxNLE1BQU0sRUFBRyxLQUN4QmtNLEVBQU8sSUFBTXZLLE9BQU91SyxHQUFNL0QsUUFBUSxxQkFBc0IsTUFBUSxPQUU3RFEsRUFBT3pGLEVBQU8sU0FBWTRILEdBQThCNUgsRUFBTWdKLE9BQVNBLElBQzFFekIsRUFBNEJ2SCxFQUFPLE9BQVFnSixJQUU3Q3FILEVBQVFxbEIsRUFBcUIxMUIsSUFDbEI2RixTQUNUd0ssRUFBTXhLLE9BQVM4dkIsRUFBU3ZuQixLQUFvQixpQkFBUnBGLEVBQW1CQSxFQUFPLE1BRzlEN0osSUFBTWhCLEdBSUVpYixHQUVBeEwsR0FBZXpPLEVBQUV2QixLQUMzQmc0QixHQUFTLFVBRkZ6MkIsRUFBRXZCLEdBSVBnNEIsRUFBUXoyQixFQUFFdkIsR0FBT29DLEVBQ2hCdUgsRUFBNEJwSSxFQUFHdkIsRUFBS29DLElBVG5DNDFCLEVBQVF6MkIsRUFBRXZCLEdBQU9vQyxFQUNoQjBaLEVBQVU5YixFQUFLb0MsS0FVckIzQyxTQUFTQyxVQUFXLFlBQVksV0FDakMsT0FBT2MsRUFBV2lCLE9BQVNxZ0IsRUFBaUJyZ0IsTUFBTXdHLFFBQVU4SixFQUFjdFEsMEJDNUM1RSxJQUFJbEIsRUFBUyxFQUFRLE9BQ2pCUyxFQUFPLEVBQVEsT0FDZitFLEVBQVcsRUFBUSxPQUNuQnZGLEVBQWEsRUFBUSxPQUNyQnVOLEVBQVUsRUFBUSxPQUNsQmtsQixFQUFhLEVBQVEsT0FFckJ2eUIsRUFBWUgsRUFBT0csVUFJdkJsQyxFQUFPQyxRQUFVLFNBQVV3NUIsRUFBRzViLEdBQzVCLElBQUk3VixFQUFPeXhCLEVBQUV6eEIsS0FDYixHQUFJaEcsRUFBV2dHLEdBQU8sQ0FDcEIsSUFBSXhFLEVBQVNoQixFQUFLd0YsRUFBTXl4QixFQUFHNWIsR0FFM0IsT0FEZSxPQUFYcmEsR0FBaUIrRCxFQUFTL0QsR0FDdkJBLEVBRVQsR0FBbUIsV0FBZitMLEVBQVFrcUIsR0FBaUIsT0FBT2ozQixFQUFLaXlCLEVBQVlnRixFQUFHNWIsR0FDeEQsTUFBTTNiLEVBQVUsOEVDaEJsQixJQW9CTXczQixFQUNBQyxFQXJCRm4zQixFQUFPLEVBQVEsT0FDZmlDLEVBQWMsRUFBUSxNQUN0QjJELEVBQVcsRUFBUSxPQUNuQnd4QixFQUFjLEVBQVEsT0FDdEJDLEVBQWdCLEVBQVEsT0FDeEJqbUIsRUFBUyxFQUFRLE9BQ2pCbE8sRUFBUyxFQUFRLE9BQ2pCNGQsRUFBbUIsYUFDbkJ3VyxFQUFzQixFQUFRLE1BQzlCQyxFQUFrQixFQUFRLE9BRTFCQyxFQUFnQnBtQixFQUFPLHdCQUF5QnZSLE9BQU9uQixVQUFVMkgsU0FDakVveEIsRUFBYXRGLE9BQU96ekIsVUFBVThHLEtBQzlCa3lCLEVBQWNELEVBQ2RqYyxFQUFTdlosRUFBWSxHQUFHdVosUUFDeEJ4WixFQUFVQyxFQUFZLEdBQUdELFNBQ3pCcUUsRUFBVXBFLEVBQVksR0FBR29FLFNBQ3pCUixFQUFjNUQsRUFBWSxHQUFHL0QsT0FFN0J5NUIsR0FFRVIsRUFBTSxNQUNWbjNCLEVBQUt5M0IsRUFGRFAsRUFBTSxJQUVZLEtBQ3RCbDNCLEVBQUt5M0IsRUFBWU4sRUFBSyxLQUNHLElBQWxCRCxFQUFJVSxXQUFxQyxJQUFsQlQsRUFBSVMsV0FHaENDLEVBQWdCUixFQUFjUyxhQUc5QkMsT0FBdUNqM0IsSUFBdkIsT0FBTzBFLEtBQUssSUFBSSxJQUV4Qm15QixHQUE0QkksR0FBaUJGLEdBQWlCUCxHQUF1QkMsS0FHL0ZHLEVBQWMsU0FBYzFrQixHQUMxQixJQUlJaFMsRUFBUWczQixFQUFRSixFQUFXMXFCLEVBQU85RixFQUFHekIsRUFBUXN5QixFQUo3Q3pGLEVBQUsveEIsS0FDTGdSLEVBQVFxUCxFQUFpQjBSLEdBQ3pCSSxFQUFNaHRCLEVBQVNvTixHQUNma2xCLEVBQU16bUIsRUFBTXltQixJQUdoQixHQUFJQSxFQUlGLE9BSEFBLEVBQUlOLFVBQVlwRixFQUFHb0YsVUFDbkI1MkIsRUFBU2hCLEVBQUswM0IsRUFBYVEsRUFBS3RGLEdBQ2hDSixFQUFHb0YsVUFBWU0sRUFBSU4sVUFDWjUyQixFQUdULElBQUltM0IsRUFBUzFtQixFQUFNMG1CLE9BQ2ZDLEVBQVNQLEdBQWlCckYsRUFBRzRGLE9BQzdCM0YsRUFBUXp5QixFQUFLbzNCLEVBQWE1RSxHQUMxQnZyQixFQUFTdXJCLEVBQUd2ckIsT0FDWm94QixFQUFhLEVBQ2JDLEVBQVUxRixFQStDZCxHQTdDSXdGLElBQ0YzRixFQUFRcHNCLEVBQVFvc0IsRUFBTyxJQUFLLEtBQ0MsSUFBekJ6d0IsRUFBUXl3QixFQUFPLE9BQ2pCQSxHQUFTLEtBR1g2RixFQUFVenlCLEVBQVkrc0IsRUFBS0osRUFBR29GLFdBRTFCcEYsRUFBR29GLFVBQVksS0FBT3BGLEVBQUcrRixXQUFhL0YsRUFBRytGLFdBQStDLE9BQWxDL2MsRUFBT29YLEVBQUtKLEVBQUdvRixVQUFZLE1BQ25GM3dCLEVBQVMsT0FBU0EsRUFBUyxJQUMzQnF4QixFQUFVLElBQU1BLEVBQ2hCRCxLQUlGTCxFQUFTLElBQUk3RixPQUFPLE9BQVNsckIsRUFBUyxJQUFLd3JCLElBR3pDc0YsSUFDRkMsRUFBUyxJQUFJN0YsT0FBTyxJQUFNbHJCLEVBQVMsV0FBWXdyQixJQUU3Q2tGLElBQTBCQyxFQUFZcEYsRUFBR29GLFdBRTdDMXFCLEVBQVFsTixFQUFLeTNCLEVBQVlXLEVBQVNKLEVBQVN4RixFQUFJOEYsR0FFM0NGLEVBQ0VsckIsR0FDRkEsRUFBTXdNLE1BQVE3VCxFQUFZcUgsRUFBTXdNLE1BQU8yZSxHQUN2Q25yQixFQUFNLEdBQUtySCxFQUFZcUgsRUFBTSxHQUFJbXJCLEdBQ2pDbnJCLEVBQU01TCxNQUFRa3hCLEVBQUdvRixVQUNqQnBGLEVBQUdvRixXQUFhMXFCLEVBQU0sR0FBR3RNLFFBQ3BCNHhCLEVBQUdvRixVQUFZLEVBQ2JELEdBQTRCenFCLElBQ3JDc2xCLEVBQUdvRixVQUFZcEYsRUFBR2p6QixPQUFTMk4sRUFBTTVMLE1BQVE0TCxFQUFNLEdBQUd0TSxPQUFTZzNCLEdBRXpERyxHQUFpQjdxQixHQUFTQSxFQUFNdE0sT0FBUyxHQUczQ1osRUFBS3czQixFQUFldHFCLEVBQU0sR0FBSThxQixHQUFRLFdBQ3BDLElBQUs1d0IsRUFBSSxFQUFHQSxFQUFJekcsVUFBVUMsT0FBUyxFQUFHd0csU0FDZnRHLElBQWpCSCxVQUFVeUcsS0FBa0I4RixFQUFNOUYsUUFBS3RHLE1BSzdDb00sR0FBU2lyQixFQUVYLElBREFqckIsRUFBTWlyQixPQUFTeHlCLEVBQVN6QyxFQUFPLE1BQzFCa0UsRUFBSSxFQUFHQSxFQUFJK3dCLEVBQU92M0IsT0FBUXdHLElBRTdCekIsR0FEQXN5QixFQUFRRSxFQUFPL3dCLElBQ0YsSUFBTThGLEVBQU0rcUIsRUFBTSxJQUluQyxPQUFPL3FCLElBSVgxUCxFQUFPQyxRQUFVaTZCLGdDQ25IakIsSUFBSTN5QixFQUFXLEVBQVEsT0FJdkJ2SCxFQUFPQyxRQUFVLFdBQ2YsSUFBSXFGLEVBQU9pQyxFQUFTdEUsTUFDaEJPLEVBQVMsR0FPYixPQU5JOEIsRUFBS3ZELFNBQVF5QixHQUFVLEtBQ3ZCOEIsRUFBSzAxQixhQUFZeDNCLEdBQVUsS0FDM0I4QixFQUFLeTFCLFlBQVd2M0IsR0FBVSxLQUMxQjhCLEVBQUsyMUIsU0FBUXozQixHQUFVLEtBQ3ZCOEIsRUFBS3dsQixVQUFTdG5CLEdBQVUsS0FDeEI4QixFQUFLczFCLFNBQVFwM0IsR0FBVSxLQUNwQkEsb0JDZFQsSUFBSTRDLEVBQVEsRUFBUSxPQUloQjgwQixFQUhTLEVBQVEsT0FHQXZHLE9BRWpCMEYsRUFBZ0JqMEIsR0FBTSxXQUN4QixJQUFJNHVCLEVBQUtrRyxFQUFRLElBQUssS0FFdEIsT0FEQWxHLEVBQUdvRixVQUFZLEVBQ1csTUFBbkJwRixFQUFHaHRCLEtBQUssV0FLYm16QixFQUFnQmQsR0FBaUJqMEIsR0FBTSxXQUN6QyxPQUFRODBCLEVBQVEsSUFBSyxLQUFLTixVQUd4Qk4sRUFBZUQsR0FBaUJqMEIsR0FBTSxXQUV4QyxJQUFJNHVCLEVBQUtrRyxFQUFRLEtBQU0sTUFFdkIsT0FEQWxHLEVBQUdvRixVQUFZLEVBQ1UsTUFBbEJwRixFQUFHaHRCLEtBQUssVUFHakJoSSxFQUFPQyxRQUFVLENBQ2ZxNkIsYUFBY0EsRUFDZGEsY0FBZUEsRUFDZmQsY0FBZUEsbUJDNUJqQixJQUFJajBCLEVBQVEsRUFBUSxPQUloQjgwQixFQUhTLEVBQVEsT0FHQXZHLE9BRXJCMzBCLEVBQU9DLFFBQVVtRyxHQUFNLFdBQ3JCLElBQUk0dUIsRUFBS2tHLEVBQVEsSUFBSyxLQUN0QixRQUFTbEcsRUFBR2lHLFFBQVVqRyxFQUFHaHRCLEtBQUssT0FBc0IsTUFBYmd0QixFQUFHQywyQkNSNUMsSUFBSTd1QixFQUFRLEVBQVEsT0FJaEI4MEIsRUFIUyxFQUFRLE9BR0F2RyxPQUVyQjMwQixFQUFPQyxRQUFVbUcsR0FBTSxXQUNyQixJQUFJNHVCLEVBQUtrRyxFQUFRLFVBQVcsS0FDNUIsTUFBaUMsTUFBMUJsRyxFQUFHaHRCLEtBQUssS0FBSzJ5QixPQUFPcnFCLEdBQ0ksT0FBN0IsSUFBSXpILFFBQVFtc0IsRUFBSSw2QkNUcEIsSUFFSTl5QixFQUZTLEVBQVEsT0FFRUEsVUFJdkJsQyxFQUFPQyxRQUFVLFNBQVVrQixHQUN6QixHQUFVbUMsTUFBTm5DLEVBQWlCLE1BQU1lLEVBQVUsd0JBQTBCZixHQUMvRCxPQUFPQSxvQkNSVCxJQUFJWSxFQUFTLEVBQVEsT0FHakJSLEVBQWlCRCxPQUFPQyxlQUU1QnZCLEVBQU9DLFFBQVUsU0FBVXVCLEVBQUtvQyxHQUM5QixJQUNFckMsRUFBZVEsRUFBUVAsRUFBSyxDQUFFb0MsTUFBT0EsRUFBTzhHLGNBQWMsRUFBTUMsVUFBVSxJQUMxRSxNQUFPaEQsR0FDUDVGLEVBQU9QLEdBQU9vQyxFQUNkLE9BQU9BLGlDQ1RYLElBQUk2TCxFQUFhLEVBQVEsT0FDckJqRyxFQUF1QixFQUFRLE1BQy9CbkQsRUFBa0IsRUFBUSxNQUMxQmtFLEVBQWMsRUFBUSxPQUV0QmhFLEVBQVVGLEVBQWdCLFdBRTlCckcsRUFBT0MsUUFBVSxTQUFVZ2QsR0FDekIsSUFBSUMsRUFBY3pOLEVBQVd3TixHQUN6QjFiLEVBQWlCaUksRUFBcUIxSCxFQUV0Q3lJLEdBQWUyUyxJQUFnQkEsRUFBWTNXLElBQzdDaEYsRUFBZTJiLEVBQWEzVyxFQUFTLENBQ25DbUUsY0FBYyxFQUNkdUMsSUFBSyxXQUFjLE9BQU9oSywwQkNmaEMsSUFBSTFCLEVBQWlCLFVBQ2pCOEgsRUFBUyxFQUFRLE9BR2pCYixFQUZrQixFQUFRLEtBRVZuQyxDQUFnQixlQUVwQ3JHLEVBQU9DLFFBQVUsU0FBVTBGLEVBQVF3WCxFQUFLaE0sR0FDbEN4TCxJQUFXd0wsSUFBUXhMLEVBQVNBLEVBQU96RSxXQUNuQ3lFLElBQVcwRCxFQUFPMUQsRUFBUTZDLElBQzVCakgsRUFBZW9FLEVBQVE2QyxFQUFlLENBQUVrQyxjQUFjLEVBQU05RyxNQUFPdVoscUJDVHZFLElBQUl2SixFQUFTLEVBQVEsT0FDakJ5SixFQUFNLEVBQVEsT0FFZDVjLEVBQU9tVCxFQUFPLFFBRWxCNVQsRUFBT0MsUUFBVSxTQUFVdUIsR0FDekIsT0FBT2YsRUFBS2UsS0FBU2YsRUFBS2UsR0FBTzZiLEVBQUk3YixxQkNOdkMsSUFBSU8sRUFBUyxFQUFRLE9BQ2pCdWIsRUFBWSxFQUFRLE9BRXBCQyxFQUFTLHFCQUNUbEssRUFBUXRSLEVBQU93YixJQUFXRCxFQUFVQyxFQUFRLElBRWhEdmQsRUFBT0MsUUFBVW9ULG1CQ05qQixJQUFJdEksRUFBVSxFQUFRLE9BQ2xCc0ksRUFBUSxFQUFRLE9BRW5CclQsRUFBT0MsUUFBVSxTQUFVdUIsRUFBS29DLEdBQy9CLE9BQU95UCxFQUFNN1IsS0FBUzZSLEVBQU03UixRQUFpQjhCLElBQVZNLEVBQXNCQSxFQUFRLE1BQ2hFLFdBQVksSUFBSWdCLEtBQUssQ0FDdEIrSyxRQUFTLFNBQ1Q2TixLQUFNelMsRUFBVSxPQUFTLFNBQ3pCMFMsVUFBVywwRENSYixJQUFJbFcsRUFBVyxFQUFRLE9BQ25Cb1csRUFBZSxFQUFRLE9BR3ZCcFgsRUFGa0IsRUFBUSxLQUVoQkYsQ0FBZ0IsV0FJOUJyRyxFQUFPQyxRQUFVLFNBQVU4QyxFQUFHNmEsR0FDNUIsSUFDSUMsRUFEQXhXLEVBQUlFLEVBQVN4RSxHQUFHMkQsWUFFcEIsWUFBYXBELElBQU4rRCxHQUFpRC9ELE9BQTdCdWEsRUFBSXRXLEVBQVNGLEdBQUdkLElBQXlCcVgsRUFBcUJELEVBQWFFLHFCQ1h4RyxJQUFJcFosRUFBYyxFQUFRLE1BQ3RCcVosRUFBc0IsRUFBUSxPQUM5QjFWLEVBQVcsRUFBUSxPQUNuQjJWLEVBQXlCLEVBQVEsT0FFakNDLEVBQVN2WixFQUFZLEdBQUd1WixRQUN4QkMsRUFBYXhaLEVBQVksR0FBR3daLFlBQzVCNVYsRUFBYzVELEVBQVksR0FBRy9ELE9BRTdCd0QsRUFBZSxTQUFVZ2EsR0FDM0IsT0FBTyxTQUFVOVosRUFBTytaLEdBQ3RCLElBR0lDLEVBQU9DLEVBSFBSLEVBQUl6VixFQUFTMlYsRUFBdUIzWixJQUNwQ2thLEVBQVdSLEVBQW9CSyxHQUMvQkksRUFBT1YsRUFBRXphLE9BRWIsT0FBSWtiLEVBQVcsR0FBS0EsR0FBWUMsRUFBYUwsRUFBb0IsUUFBSzVhLEdBQ3RFOGEsRUFBUUgsRUFBV0osRUFBR1MsSUFDUCxPQUFVRixFQUFRLE9BQVVFLEVBQVcsSUFBTUMsSUFDdERGLEVBQVNKLEVBQVdKLEVBQUdTLEVBQVcsSUFBTSxPQUFVRCxFQUFTLE1BQzNESCxFQUNFRixFQUFPSCxFQUFHUyxHQUNWRixFQUNGRixFQUNFN1YsRUFBWXdWLEVBQUdTLEVBQVVBLEVBQVcsR0FDVkQsRUFBUyxPQUFsQ0QsRUFBUSxPQUFVLElBQTBCLFFBSXpEcGUsRUFBT0MsUUFBVSxDQUdmdWUsT0FBUXRhLEdBQWEsR0FHckI4WixPQUFROVosR0FBYSxxQkNqQ3ZCLElBQUltTCxFQUFZLEVBQVEsT0FFeEJyUCxFQUFPQyxRQUFVLG1FQUFtRWtKLEtBQUtrRyxvQkNGekYsSUFBSTVLLEVBQWMsRUFBUSxNQUN0Qm9TLEVBQVcsRUFBUSxPQUNuQnpPLEVBQVcsRUFBUSxPQUNuQmd6QixFQUFVLEVBQVEsT0FDbEJyZCxFQUF5QixFQUFRLE9BRWpDc2QsRUFBUzUyQixFQUFZMjJCLEdBQ3JCL3lCLEVBQWM1RCxFQUFZLEdBQUcvRCxPQUM3QjZmLEVBQU96WixLQUFLeVosS0FHWnJjLEVBQWUsU0FBVW8zQixHQUMzQixPQUFPLFNBQVVsM0IsRUFBT20zQixFQUFXQyxHQUNqQyxJQUlJQyxFQUFTQyxFQUpUN2QsRUFBSXpWLEVBQVMyVixFQUF1QjNaLElBQ3BDdTNCLEVBQWU5a0IsRUFBUzBrQixHQUN4QkssRUFBZS9kLEVBQUV6YSxPQUNqQnk0QixPQUF5QnY0QixJQUFmazRCLEVBQTJCLElBQU1wekIsRUFBU296QixHQUV4RCxPQUFJRyxHQUFnQkMsR0FBMkIsSUFBWEMsRUFBc0JoZSxJQUUxRDZkLEVBQWVMLEVBQU9RLEVBQVN0YixHQUQvQmtiLEVBQVVFLEVBQWVDLEdBQ3FCQyxFQUFRejRCLFVBQ3JDQSxPQUFTcTRCLElBQVNDLEVBQWVyekIsRUFBWXF6QixFQUFjLEVBQUdELElBQ3hFSCxFQUFTemQsRUFBSTZkLEVBQWVBLEVBQWU3ZCxLQUl0RDdkLEVBQU9DLFFBQVUsQ0FHZjhHLE1BQU83QyxHQUFhLEdBR3BCOEMsSUFBSzlDLEdBQWEsa0NDL0JwQixJQUFJbkMsRUFBUyxFQUFRLE9BQ2pCMEMsRUFBYyxFQUFRLE1BRXRCcTNCLEVBQVMsV0FTVEMsRUFBZ0IsZUFDaEJDLEVBQWtCLHlCQUNsQkMsRUFBaUIsa0RBR2pCbE8sRUFBYWhzQixFQUFPZ3NCLFdBQ3BCL2xCLEVBQU92RCxFQUFZdTNCLEVBQWdCaDBCLE1BQ25Dd1ksRUFBUTFaLEtBQUswWixNQUNiMGIsRUFBZTc1QixPQUFPNjVCLGFBQ3RCamUsRUFBYXhaLEVBQVksR0FBR3daLFlBQzVCak0sRUFBT3ZOLEVBQVksR0FBR3VOLE1BQ3RCcE4sRUFBT0gsRUFBWSxHQUFHRyxNQUN0QmlFLEVBQVVwRSxFQUFZLEdBQUdvRSxTQUN6QmtILEVBQVF0TCxFQUFZLEdBQUdzTCxPQUN2QjBGLEVBQWNoUixFQUFZLEdBQUdnUixhQW9DN0IwbUIsRUFBZSxTQUFVQyxHQUczQixPQUFPQSxFQUFRLEdBQUssSUFBTUEsRUFBUSxLQU9oQ0MsRUFBUSxTQUFVQyxFQUFPQyxFQUFXQyxHQUN0QyxJQUFJdjFCLEVBQUksRUFHUixJQUZBcTFCLEVBQVFFLEVBQVloYyxFQUFNOGIsRUFsRWpCLEtBa0VpQ0EsR0FBUyxFQUNuREEsR0FBUzliLEVBQU04YixFQUFRQyxHQUNoQkQsRUFBUUcsS0FDYkgsRUFBUTliLEVBQU04YixFQTlERUksSUErRGhCejFCLEdBMUVPLEdBNEVULE9BQU91WixFQUFNdlosRUFBSSxHQUFzQnExQixHQUFTQSxFQXpFdkMsTUFnRlBLLEVBQVMsU0FBVXpnQixHQUNyQixJQUFJMGdCLEVBQVMsR0FHYjFnQixFQXhEZSxTQUFVMUcsR0FJekIsSUFIQSxJQUFJb25CLEVBQVMsR0FDVDFkLEVBQVUsRUFDVjliLEVBQVNvUyxFQUFPcFMsT0FDYjhiLEVBQVU5YixHQUFRLENBQ3ZCLElBQUlRLEVBQVFxYSxFQUFXekksRUFBUTBKLEtBQy9CLEdBQUl0YixHQUFTLE9BQVVBLEdBQVMsT0FBVXNiLEVBQVU5YixFQUFRLENBRTFELElBQUl5NUIsRUFBUTVlLEVBQVd6SSxFQUFRMEosS0FDUCxRQUFYLE1BQVIyZCxHQUNIajRCLEVBQUtnNEIsSUFBa0IsS0FBUmg1QixJQUFrQixLQUFlLEtBQVJpNUIsR0FBaUIsUUFJekRqNEIsRUFBS2c0QixFQUFRaDVCLEdBQ2JzYixVQUdGdGEsRUFBS2c0QixFQUFRaDVCLEdBR2pCLE9BQU9nNUIsRUFtQ0NFLENBQVc1Z0IsR0FHbkIsSUFNSXRTLEVBQUdtekIsRUFOSEMsRUFBYzlnQixFQUFNOVksT0FHcEIrRCxFQXZGUyxJQXdGVG0xQixFQUFRLEVBQ1JXLEVBMUZZLEdBOEZoQixJQUFLcnpCLEVBQUksRUFBR0EsRUFBSXNTLEVBQU05WSxPQUFRd0csS0FDNUJtekIsRUFBZTdnQixFQUFNdFMsSUFDRixLQUNqQmhGLEVBQUtnNEIsRUFBUVYsRUFBYWEsSUFJOUIsSUFBSUcsRUFBY04sRUFBT3g1QixPQUNyQis1QixFQUFpQkQsRUFRckIsSUFMSUEsR0FDRnQ0QixFQUFLZzRCLEVBeEdPLEtBNEdQTyxFQUFpQkgsR0FBYSxDQUVuQyxJQUFJakgsRUFBSStGLEVBQ1IsSUFBS2x5QixFQUFJLEVBQUdBLEVBQUlzUyxFQUFNOVksT0FBUXdHLEtBQzVCbXpCLEVBQWU3Z0IsRUFBTXRTLEtBQ0R6QyxHQUFLNDFCLEVBQWVoSCxJQUN0Q0EsRUFBSWdILEdBS1IsSUFBSUssRUFBd0JELEVBQWlCLEVBQzdDLEdBQUlwSCxFQUFJNXVCLEVBQUlxWixHQUFPc2IsRUFBU1EsR0FBU2MsR0FDbkMsTUFBTXJQLEVBQVdrTyxHQU1uQixJQUhBSyxJQUFVdkcsRUFBSTV1QixHQUFLaTJCLEVBQ25CajJCLEVBQUk0dUIsRUFFQ25zQixFQUFJLEVBQUdBLEVBQUlzUyxFQUFNOVksT0FBUXdHLElBQUssQ0FFakMsSUFEQW16QixFQUFlN2dCLEVBQU10UyxJQUNGekMsS0FBT20xQixFQUFRUixFQUNoQyxNQUFNL04sRUFBV2tPLEdBRW5CLEdBQUljLEdBQWdCNTFCLEVBQUcsQ0FJckIsSUFGQSxJQUFJazJCLEVBQUlmLEVBQ0pyMUIsRUE5SUQsS0ErSVUsQ0FDWCxJQUFJcTJCLEVBQUlyMkIsR0FBS2cyQixFQS9JWixFQStJMkJoMkIsR0FBS2cyQixFQTlJaEMsTUE4SXFEaDJCLEVBQUlnMkIsRUFDMUQsR0FBSUksRUFBSUMsRUFBRyxNQUNYLElBQUlDLEVBQVVGLEVBQUlDLEVBQ2RFLEVBbkpILEdBbUp1QkYsRUFDeEIxNEIsRUFBS2c0QixFQUFRVixFQUFhQyxFQUFhbUIsRUFBSUMsRUFBVUMsS0FDckRILEVBQUk3YyxFQUFNK2MsRUFBVUMsR0FDcEJ2MkIsR0F0SkMsR0F5SkhyQyxFQUFLZzRCLEVBQVFWLEVBQWFDLEVBQWFrQixLQUN2Q0osRUFBT1osRUFBTUMsRUFBT2MsRUFBdUJELEdBQWtCRCxHQUM3RFosRUFBUSxFQUNSYSxLQUlKYixJQUNBbjFCLElBRUYsT0FBTzZLLEVBQUs0cUIsRUFBUSxLQUd0QjU4QixFQUFPQyxRQUFVLFNBQVVpYyxHQUN6QixJQUVJdFMsRUFBRzZ6QixFQUZIQyxFQUFVLEdBQ1ZDLEVBQVM1dEIsRUFBTWxILEVBQVE0TSxFQUFZeUcsR0FBUThmLEVBQWlCLEtBQVcsS0FFM0UsSUFBS3B5QixFQUFJLEVBQUdBLEVBQUkrekIsRUFBT3Y2QixPQUFRd0csSUFDN0I2ekIsRUFBUUUsRUFBTy96QixHQUNmaEYsRUFBSzg0QixFQUFTMTFCLEVBQUsrekIsRUFBZTBCLEdBQVMsT0FBU2QsRUFBT2MsR0FBU0EsR0FFdEUsT0FBT3pyQixFQUFLMHJCLEVBQVMsb0NDbkx2QixJQUFJMzdCLEVBQVMsRUFBUSxPQUNqQitiLEVBQXNCLEVBQVEsT0FDOUIxVixFQUFXLEVBQVEsT0FDbkIyVixFQUF5QixFQUFRLE9BRWpDZ1EsRUFBYWhzQixFQUFPZ3NCLFdBSXhCL3RCLEVBQU9DLFFBQVUsU0FBZ0I2dUIsR0FDL0IsSUFBSXNHLEVBQU1odEIsRUFBUzJWLEVBQXVCOWEsT0FDdENPLEVBQVMsR0FDVDJELEVBQUkyVyxFQUFvQmdSLEdBQzVCLEdBQUkzbkIsRUFBSSxHQUFLQSxHQUFLNHZCLEVBQUFBLEVBQVUsTUFBTWhKLEVBQVcsK0JBQzdDLEtBQU01bUIsRUFBSSxHQUFJQSxLQUFPLEtBQU9pdUIsR0FBT0EsR0FBYyxFQUFKanVCLElBQU8zRCxHQUFVNHhCLEdBQzlELE9BQU81eEIsb0JDaEJULElBQUk4SCxFQUF1QixnQkFDdkJsRixFQUFRLEVBQVEsT0FDaEJ3M0IsRUFBYyxFQUFRLE9BTTFCNTlCLEVBQU9DLFFBQVUsU0FBVXVHLEdBQ3pCLE9BQU9KLEdBQU0sV0FDWCxRQUFTdzNCLEVBQVlwM0IsTUFOZixjQU9HQSxNQUNIOEUsR0FBd0JzeUIsRUFBWXAzQixHQUFhb0csT0FBU3BHLHVCQ1pwRSxJQUFJL0IsRUFBYyxFQUFRLE1BQ3RCc1osRUFBeUIsRUFBUSxPQUNqQzNWLEVBQVcsRUFBUSxPQUNuQncxQixFQUFjLEVBQVEsT0FFdEIvMEIsRUFBVXBFLEVBQVksR0FBR29FLFNBQ3pCZzFCLEVBQWEsSUFBTUQsRUFBYyxJQUNqQ0UsRUFBUW5KLE9BQU8sSUFBTWtKLEVBQWFBLEVBQWEsS0FDL0NFLEVBQVFwSixPQUFPa0osRUFBYUEsRUFBYSxNQUd6QzM1QixFQUFlLFNBQVVXLEdBQzNCLE9BQU8sU0FBVVQsR0FDZixJQUFJb1IsRUFBU3BOLEVBQVMyVixFQUF1QjNaLElBRzdDLE9BRlcsRUFBUFMsSUFBVTJRLEVBQVMzTSxFQUFRMk0sRUFBUXNvQixFQUFPLEtBQ25DLEVBQVBqNUIsSUFBVTJRLEVBQVMzTSxFQUFRMk0sRUFBUXVvQixFQUFPLEtBQ3ZDdm9CLElBSVh4VixFQUFPQyxRQUFVLENBR2Y4RyxNQUFPN0MsRUFBYSxHQUdwQjhDLElBQUs5QyxFQUFhLEdBR2xCODVCLEtBQU05NUIsRUFBYSxxQkM3QnJCLElBc0JJdWEsRUFBVUMsRUFBT0MsRUFBU0MsRUF0QjFCN2MsRUFBUyxFQUFRLE9BQ2pCa08sRUFBUSxFQUFRLE9BQ2hCdFAsRUFBTyxFQUFRLE9BQ2ZxQixFQUFhLEVBQVEsT0FDckJxSCxFQUFTLEVBQVEsT0FDakJqRCxFQUFRLEVBQVEsT0FDaEIrUyxFQUFPLEVBQVEsT0FDZnBILEVBQWEsRUFBUSxPQUNyQjNFLEVBQWdCLEVBQVEsT0FDeEJvSyxFQUFTLEVBQVEsTUFDakJHLEVBQVUsRUFBUSxPQUVsQmxFLEVBQU0xUixFQUFPOGMsYUFDYkMsRUFBUS9jLEVBQU9nZCxlQUNmdlAsRUFBVXpOLEVBQU95TixRQUNqQndQLEVBQVdqZCxFQUFPaWQsU0FDbEIvZCxFQUFXYyxFQUFPZCxTQUNsQmdlLEVBQWlCbGQsRUFBT2tkLGVBQ3hCNWMsRUFBU04sRUFBT00sT0FDaEI2YyxFQUFVLEVBQ1ZDLEVBQVEsR0FJWixJQUVFVixFQUFXMWMsRUFBTzBjLFNBQ2xCLE1BQU85VyxJQUVULElBQUl5WCxFQUFNLFNBQVVDLEdBQ2xCLEdBQUloVyxFQUFPOFYsRUFBT0UsR0FBSyxDQUNyQixJQUFJNVgsRUFBSzBYLEVBQU1FLFVBQ1JGLEVBQU1FLEdBQ2I1WCxNQUlBNlgsRUFBUyxTQUFVRCxHQUNyQixPQUFPLFdBQ0xELEVBQUlDLEtBSUpFLEVBQVcsU0FBVUMsR0FDdkJKLEVBQUlJLEVBQU1wSyxPQUdScUssRUFBTyxTQUFVSixHQUVuQnRkLEVBQU8yZCxZQUFZcmQsRUFBT2dkLEdBQUtaLEVBQVNrQixTQUFXLEtBQU9sQixFQUFTbUIsT0FJaEVuTSxHQUFRcUwsSUFDWHJMLEVBQU0sU0FBc0JoTSxHQUMxQixJQUFJMkssRUFBT0wsRUFBVzVPLFVBQVcsR0FLakMsT0FKQWdjLElBQVFELEdBQVcsV0FDakJqUCxFQUFNak8sRUFBV3lGLEdBQU1BLEVBQUt4RyxFQUFTd0csUUFBS25FLEVBQVc4TyxJQUV2RHNNLEVBQU1RLEdBQ0NBLEdBRVRKLEVBQVEsU0FBd0JPLFVBQ3ZCRixFQUFNRSxJQUdYMUgsRUFDRitHLEVBQVEsU0FBVVcsR0FDaEI3UCxFQUFRNEksU0FBU2tILEVBQU9ELEtBR2pCTCxHQUFZQSxFQUFTYSxJQUM5Qm5CLEVBQVEsU0FBVVcsR0FDaEJMLEVBQVNhLElBQUlQLEVBQU9ELEtBSWJKLElBQW1CekgsR0FFNUJvSCxHQURBRCxFQUFVLElBQUlNLEdBQ0NhLE1BQ2ZuQixFQUFRb0IsTUFBTUMsVUFBWVQsRUFDMUJiLEVBQVEvZCxFQUFLaWUsRUFBS2MsWUFBYWQsSUFJL0I3YyxFQUFPa2Usa0JBQ1BqZSxFQUFXRCxFQUFPMmQsZUFDakIzZCxFQUFPbWUsZUFDUnpCLEdBQWtDLFVBQXRCQSxFQUFTa0IsV0FDcEJ2WixFQUFNcVosSUFFUGYsRUFBUWUsRUFDUjFkLEVBQU9rZSxpQkFBaUIsVUFBV1YsR0FBVSxJQUc3Q2IsRUExRXFCLHVCQXlFVXRSLEVBQWMsVUFDckMsU0FBVWlTLEdBQ2hCbEcsRUFBS2tCLFlBQVlqTixFQUFjLFdBQTZCLG1CQUFJLFdBQzlEK0wsRUFBS2dILFlBQVlsZCxNQUNqQm1jLEVBQUlDLEtBS0EsU0FBVUEsR0FDaEJlLFdBQVdkLEVBQU9ELEdBQUssS0FLN0JyZixFQUFPQyxRQUFVLENBQ2Z3VCxJQUFLQSxFQUNMcUwsTUFBT0Esb0JDL0dULElBQUlyYSxFQUFjLEVBQVEsTUFJMUJ6RSxFQUFPQyxRQUFVd0UsRUFBWSxHQUFJNFgsMEJDSmpDLElBQUl5QixFQUFzQixFQUFRLE9BRTlCalgsRUFBTUMsS0FBS0QsSUFDWHdaLEVBQU12WixLQUFLdVosSUFLZnJnQixFQUFPQyxRQUFVLFNBQVU2RCxFQUFPVixHQUNoQyxJQUFJa2QsRUFBVXhDLEVBQW9CaGEsR0FDbEMsT0FBT3djLEVBQVUsRUFBSXpaLEVBQUl5WixFQUFVbGQsRUFBUSxHQUFLaWQsRUFBSUMsRUFBU2xkLHFCQ1YvRCxJQUFJckIsRUFBUyxFQUFRLE9BQ2pCK2IsRUFBc0IsRUFBUSxPQUM5QmpILEVBQVcsRUFBUSxPQUVuQmtYLEVBQWFoc0IsRUFBT2dzQixXQUl4Qi90QixFQUFPQyxRQUFVLFNBQVVrQixHQUN6QixRQUFXbUMsSUFBUG5DLEVBQWtCLE9BQU8sRUFDN0IsSUFBSXNmLEVBQVMzQyxFQUFvQjNjLEdBQzdCaUMsRUFBU3lULEVBQVM0SixHQUN0QixHQUFJQSxJQUFXcmQsRUFBUSxNQUFNMnFCLEVBQVcseUJBQ3hDLE9BQU8zcUIsb0JDWlQsSUFBSXNCLEVBQWdCLEVBQVEsT0FDeEJxWixFQUF5QixFQUFRLE9BRXJDL2QsRUFBT0MsUUFBVSxTQUFVa0IsR0FDekIsT0FBT3VELEVBQWNxWixFQUF1QjVjLGdCQ0w5QyxJQUFJb2YsRUFBT3paLEtBQUt5WixLQUNaQyxFQUFRMVosS0FBSzBaLE1BSWpCeGdCLEVBQU9DLFFBQVUsU0FBVWtDLEdBQ3pCLElBQUlzZSxHQUFVdGUsRUFFZCxPQUFPc2UsR0FBV0EsR0FBcUIsSUFBWEEsRUFBZSxHQUFLQSxFQUFTLEVBQUlELEVBQVFELEdBQU1FLHFCQ1I3RSxJQUFJM0MsRUFBc0IsRUFBUSxPQUU5QnVDLEVBQU12WixLQUFLdVosSUFJZnJnQixFQUFPQyxRQUFVLFNBQVVrQyxHQUN6QixPQUFPQSxFQUFXLEVBQUlrZSxFQUFJdkMsRUFBb0IzYixHQUFXLGtCQUFvQixvQkNQL0UsSUFBSUosRUFBUyxFQUFRLE9BQ2pCZ2MsRUFBeUIsRUFBUSxPQUVqQ3pjLEVBQVNTLEVBQU9ULE9BSXBCdEIsRUFBT0MsUUFBVSxTQUFVa0MsR0FDekIsT0FBT2IsRUFBT3ljLEVBQXVCNWIsc0JDUnZDLElBQUlKLEVBQVMsRUFBUSxPQUNqQms4QixFQUFvQixFQUFRLE9BRTVCbFEsRUFBYWhzQixFQUFPZ3NCLFdBRXhCL3RCLEVBQU9DLFFBQVUsU0FBVWtCLEVBQUkrOEIsR0FDN0IsSUFBSXBPLEVBQVNtTyxFQUFrQjk4QixHQUMvQixHQUFJMnVCLEVBQVNvTyxFQUFPLE1BQU1uUSxFQUFXLGdCQUNyQyxPQUFPK0Isb0JDUlQsSUFBSS90QixFQUFTLEVBQVEsT0FDakIrYixFQUFzQixFQUFRLE9BRTlCaVEsRUFBYWhzQixFQUFPZ3NCLFdBRXhCL3RCLEVBQU9DLFFBQVUsU0FBVWtCLEdBQ3pCLElBQUlxQyxFQUFTc2EsRUFBb0IzYyxHQUNqQyxHQUFJcUMsRUFBUyxFQUFHLE1BQU11cUIsRUFBVyxxQ0FDakMsT0FBT3ZxQixvQkNSVCxJQUFJekIsRUFBUyxFQUFRLE9BQ2pCUyxFQUFPLEVBQVEsT0FDZkQsRUFBVyxFQUFRLE9BQ25CbWUsRUFBVyxFQUFRLE9BQ25CL04sRUFBWSxFQUFRLE9BQ3BCZ08sRUFBc0IsRUFBUSxPQUM5QnRhLEVBQWtCLEVBQVEsTUFFMUJuRSxFQUFZSCxFQUFPRyxVQUNuQjBlLEVBQWV2YSxFQUFnQixlQUluQ3JHLEVBQU9DLFFBQVUsU0FBVWljLEVBQU9DLEdBQ2hDLElBQUs1WixFQUFTMlosSUFBVXdFLEVBQVN4RSxHQUFRLE9BQU9BLEVBQ2hELElBQ0kxWSxFQURBcWQsRUFBZWxPLEVBQVV1SixFQUFPMEUsR0FFcEMsR0FBSUMsRUFBYyxDQUdoQixRQUZhdmQsSUFBVDZZLElBQW9CQSxFQUFPLFdBQy9CM1ksRUFBU2hCLEVBQUtxZSxFQUFjM0UsRUFBT0MsSUFDOUI1WixFQUFTaUIsSUFBV2tkLEVBQVNsZCxHQUFTLE9BQU9BLEVBQ2xELE1BQU10QixFQUFVLDJDQUdsQixZQURhb0IsSUFBVDZZLElBQW9CQSxFQUFPLFVBQ3hCd0UsRUFBb0J6RSxFQUFPQyxxQkN4QnBDLElBQUkyRSxFQUFjLEVBQVEsT0FDdEJKLEVBQVcsRUFBUSxPQUl2QjFnQixFQUFPQyxRQUFVLFNBQVVrQyxHQUN6QixJQUFJWCxFQUFNc2YsRUFBWTNlLEVBQVUsVUFDaEMsT0FBT3VlLEVBQVNsZixHQUFPQSxFQUFNQSxFQUFNLHFCQ1ByQyxJQUdJMkgsRUFBTyxHQUVYQSxFQUxzQixFQUFRLEtBRVY5QyxDQUFnQixnQkFHZCxJQUV0QnJHLEVBQU9DLFFBQTJCLGVBQWpCb0MsT0FBTzhHLG9CQ1B4QixJQUFJcEgsRUFBUyxFQUFRLE9BQ2pCd04sRUFBVSxFQUFRLE9BRWxCbE4sRUFBU04sRUFBT00sT0FFcEJyQyxFQUFPQyxRQUFVLFNBQVVrQyxHQUN6QixHQUEwQixXQUF0Qm9OLEVBQVFwTixHQUF3QixNQUFNRCxVQUFVLDZDQUNwRCxPQUFPRyxFQUFPRixxQkNQaEIsSUFFSUUsRUFGUyxFQUFRLE9BRURBLE9BRXBCckMsRUFBT0MsUUFBVSxTQUFVa0MsR0FDekIsSUFDRSxPQUFPRSxFQUFPRixHQUNkLE1BQU93RixHQUNQLE1BQU8seUNDUFgsSUFBSW1ELEVBQUksRUFBUSxPQUNaL0ksRUFBUyxFQUFRLE9BQ2pCUyxFQUFPLEVBQVEsT0FDZitILEVBQWMsRUFBUSxPQUN0QjR6QixFQUE4QyxFQUFRLE9BQ3REQyxFQUFzQixFQUFRLE9BQzlCQyxFQUFvQixFQUFRLE9BQzVCalosRUFBYSxFQUFRLE9BQ3JCcGIsRUFBMkIsRUFBUSxPQUNuQ21CLEVBQThCLEVBQVEsT0FDdENtekIsRUFBbUIsRUFBUSxPQUMzQnpuQixFQUFXLEVBQVEsT0FDbkJ3VyxFQUFVLEVBQVEsT0FDbEJrUixFQUFXLEVBQVEsT0FDbkIzekIsRUFBZ0IsRUFBUSxPQUN4QnZCLEVBQVMsRUFBUSxPQUNqQmtHLEVBQVUsRUFBUSxPQUNsQmhOLEVBQVcsRUFBUSxPQUNuQm1lLEVBQVcsRUFBUSxPQUNuQmhiLEVBQVMsRUFBUSxPQUNqQjVFLEVBQWdCLEVBQVEsT0FDeEJvSyxFQUFpQixFQUFRLE9BQ3pCb1EsRUFBc0IsVUFDdEJrakIsRUFBaUIsRUFBUSxPQUN6QjU0QixFQUFVLGlCQUNWdWYsRUFBYSxFQUFRLE9BQ3JCM2IsRUFBdUIsRUFBUSxNQUMvQkQsRUFBaUMsRUFBUSxPQUN6QzJaLEVBQXNCLEVBQVEsT0FDOUJnUSxFQUFvQixFQUFRLE9BRTVCNVAsRUFBbUJKLEVBQW9CalcsSUFDdkNvVyxFQUFtQkgsRUFBb0J6UCxJQUN2Q3dWLEVBQXVCemYsRUFBcUIxSCxFQUM1Q2tuQixFQUFpQ3pmLEVBQStCekgsRUFDaEUyOEIsRUFBUTMzQixLQUFLMjNCLE1BQ2IxUSxFQUFhaHNCLEVBQU9nc0IsV0FDcEJoRCxFQUFjc1QsRUFBa0J0VCxZQUNoQzZDLEVBQXVCN0MsRUFBWTdwQixVQUNuQzhwQixFQUFXcVQsRUFBa0JyVCxTQUM3QlksRUFBNEJ3UyxFQUFvQnhTLDBCQUNoREQsRUFBMEJ5UyxFQUFvQnpTLHdCQUM5Q0QsRUFBa0IwUyxFQUFvQjFTLGdCQUN0Q0YsRUFBYTRTLEVBQW9CNVMsV0FDakNDLEVBQXNCMlMsRUFBb0IzUyxvQkFDMUNvQixFQUF5QnVSLEVBQW9CdlIsdUJBQzdDSCxFQUFlMFIsRUFBb0IxUixhQUNuQ2dTLEVBQW9CLG9CQUNwQkMsRUFBZSxlQUVmQyxFQUFXLFNBQVV2M0IsRUFBR2dMLEdBQzFCd2EsRUFBdUJ4bEIsR0FJdkIsSUFIQSxJQUFJdkQsRUFBUSxFQUNSVixFQUFTaVAsRUFBS2pQLE9BQ2RJLEVBQVMsSUFBSTZELEVBQUVqRSxHQUNaQSxFQUFTVSxHQUFPTixFQUFPTSxHQUFTdU8sRUFBS3ZPLEtBQzVDLE9BQU9OLEdBR0xvckIsRUFBWSxTQUFVenRCLEVBQUlLLEdBQzVCeW5CLEVBQXFCOW5CLEVBQUlLLEVBQUssQ0FBRXlMLElBQUssV0FDbkMsT0FBT3FXLEVBQWlCcmdCLE1BQU16QixPQUk5QnE5QixFQUFnQixTQUFVMTlCLEdBQzVCLElBQUl3ckIsRUFDSixPQUFPN3JCLEVBQWM4c0IsRUFBc0J6c0IsSUFBZ0MsZ0JBQXhCd3JCLEVBQVFwZCxFQUFRcE8sS0FBa0MscUJBQVR3ckIsR0FHMUZtUyxHQUFvQixTQUFVbjVCLEVBQVFuRSxHQUN4QyxPQUFPa3JCLEVBQWEvbUIsS0FDZCthLEVBQVNsZixJQUNWQSxLQUFPbUUsR0FDUDI0QixHQUFrQjk4QixJQUNsQkEsR0FBTyxHQUdWdTlCLEdBQWtDLFNBQWtDcDVCLEVBQVFuRSxHQUU5RSxPQURBQSxFQUFNb0osRUFBY3BKLEdBQ2JzOUIsR0FBa0JuNUIsRUFBUW5FLEdBQzdCd0ksRUFBeUIsRUFBR3JFLEVBQU9uRSxJQUNuQ3duQixFQUErQnJqQixFQUFRbkUsSUFHekN3OUIsR0FBd0IsU0FBd0JyNUIsRUFBUW5FLEVBQUt3UCxHQUUvRCxPQURBeFAsRUFBTW9KLEVBQWNwSixLQUNoQnM5QixHQUFrQm41QixFQUFRbkUsSUFDekJlLEVBQVN5TyxJQUNUM0gsRUFBTzJILEVBQVksV0FDbEIzSCxFQUFPMkgsRUFBWSxRQUNuQjNILEVBQU8ySCxFQUFZLFFBRW5CQSxFQUFXdEcsY0FDVnJCLEVBQU8ySCxFQUFZLGNBQWVBLEVBQVdyRyxVQUM3Q3RCLEVBQU8ySCxFQUFZLGdCQUFpQkEsRUFBV3ZHLFdBSTdDd2UsRUFBcUJ0akIsRUFBUW5FLEVBQUt3UCxJQUZ6Q3JMLEVBQU9uRSxHQUFPd1AsRUFBV3BOLE1BQ2xCK0IsSUFJUDRFLEdBQ0dxaEIsSUFDSHJpQixFQUErQnpILEVBQUlpOUIsR0FDbkN2MUIsRUFBcUIxSCxFQUFJazlCLEdBQ3pCcFEsRUFBVW5ELEVBQXFCLFVBQy9CbUQsRUFBVW5ELEVBQXFCLGNBQy9CbUQsRUFBVW5ELEVBQXFCLGNBQy9CbUQsRUFBVW5ELEVBQXFCLFdBR2pDM2dCLEVBQUUsQ0FBRW5GLE9BQVEsU0FBVXlMLE1BQU0sRUFBTXJFLFFBQVM2ZSxHQUE2QixDQUN0RWppQix5QkFBMEJvMUIsR0FDMUJ4OUIsZUFBZ0J5OUIsS0FHbEJoL0IsRUFBT0MsUUFBVSxTQUFVNEUsRUFBTWdqQixFQUFTb1gsR0FDeEMsSUFBSWYsRUFBUXI1QixFQUFLNkssTUFBTSxRQUFRLEdBQUssRUFDaEN1TixFQUFtQnBZLEdBQVFvNkIsRUFBVSxVQUFZLElBQU0sUUFDdkRDLEVBQVMsTUFBUXI2QixFQUNqQnM2QixFQUFTLE1BQVF0NkIsRUFDakJ1NkIsRUFBOEJyOUIsRUFBT2tiLEdBQ3JDZ1EsRUFBd0JtUyxFQUN4QkMsRUFBaUNwUyxHQUF5QkEsRUFBc0IvckIsVUFDaEZveUIsRUFBVyxHQWFYZ00sRUFBYSxTQUFVaDZCLEVBQU14QixHQUMvQm1sQixFQUFxQjNqQixFQUFNeEIsRUFBTyxDQUNoQ21KLElBQUssV0FDSCxPQWRPLFNBQVUzSCxFQUFNeEIsR0FDM0IsSUFBSXNSLEVBQU9rTyxFQUFpQmhlLEdBQzVCLE9BQU84UCxFQUFLeVosS0FBS3FRLEdBQVFwN0IsRUFBUW82QixFQUFROW9CLEVBQUsrWixZQUFZLEdBWS9Db1EsQ0FBT3Q4QixLQUFNYSxJQUV0QjJQLElBQUssU0FBVTdQLEdBQ2IsT0FaTyxTQUFVMEIsRUFBTXhCLEVBQU9GLEdBQ2xDLElBQUl3UixFQUFPa08sRUFBaUJoZSxHQUN4QjI1QixJQUFTcjdCLEdBQVNBLEVBQVE2NkIsRUFBTTc2QixJQUFVLEVBQUksRUFBSUEsRUFBUSxJQUFPLElBQWUsSUFBUkEsR0FDNUV3UixFQUFLeVosS0FBS3NRLEdBQVFyN0IsRUFBUW82QixFQUFROW9CLEVBQUsrWixXQUFZdnJCLEdBQU8sR0FTL0NtWSxDQUFPOVksS0FBTWEsRUFBT0YsSUFFN0I2RyxZQUFZLEtBSVhtaEIsRUF3Q011UyxJQUNUbFIsRUFBd0JwRixHQUFRLFNBQVVtTSxFQUFPNWUsRUFBTW9xQixFQUFrQkMsR0FFdkUsT0FEQXJhLEVBQVc0TyxFQUFPcUwsR0FDWG5NLEVBQ0Ezd0IsRUFBUzZTLEdBQ1Z5cEIsRUFBY3pwQixRQUEwQjlSLElBQVptOEIsRUFDNUIsSUFBSUwsRUFBNEJocUIsRUFBTW1wQixFQUFTaUIsRUFBa0J0QixHQUFRdUIsUUFDcERuOEIsSUFBckJrOEIsRUFDRSxJQUFJSixFQUE0QmhxQixFQUFNbXBCLEVBQVNpQixFQUFrQnRCLElBQ2pFLElBQUlrQixFQUE0QmhxQixHQUNsQ3NYLEVBQWF0WCxHQUFjd3BCLEVBQVMzUixFQUF1QjdYLEdBQ3hENVMsRUFBS2c4QixFQUFnQnZSLEVBQXVCN1gsR0FQdkIsSUFBSWdxQixFQUE0Qi9SLEVBQVFqWSxJQVFqRTRlLEVBQU8vRyxNQUdWL2hCLEdBQWdCQSxFQUFlK2hCLEVBQXVCekIsR0FDMUQ1bEIsRUFBUTBWLEVBQW9COGpCLElBQThCLFNBQVU1OUIsR0FDNURBLEtBQU95ckIsR0FDWDloQixFQUE0QjhoQixFQUF1QnpyQixFQUFLNDlCLEVBQTRCNTlCLE9BR3hGeXJCLEVBQXNCL3JCLFVBQVltK0IsSUE1RGxDcFMsRUFBd0JwRixHQUFRLFNBQVV2aUIsRUFBTThQLEVBQU0wYSxFQUFRMlAsR0FDNURyYSxFQUFXOWYsRUFBTSs1QixHQUNqQixJQUVJcFUsRUFBUWdFLEVBQVk3ckIsRUFGcEJVLEVBQVEsRUFDUnFyQixFQUFhLEVBRWpCLEdBQUs1c0IsRUFBUzZTLEdBSVAsS0FBSXlwQixFQUFjenBCLEdBYWxCLE9BQUlzWCxFQUFhdFgsR0FDZndwQixFQUFTM1IsRUFBdUI3WCxHQUVoQzVTLEVBQUtnOEIsRUFBZ0J2UixFQUF1QjdYLEdBZm5ENlYsRUFBUzdWLEVBQ1QrWixFQUFhb1AsRUFBU3pPLEVBQVFvTyxHQUM5QixJQUFJd0IsRUFBT3RxQixFQUFLNlosV0FDaEIsUUFBZ0IzckIsSUFBWm04QixFQUF1QixDQUN6QixHQUFJQyxFQUFPeEIsRUFBTyxNQUFNblEsRUFBVzRRLEdBRW5DLElBREExUCxFQUFheVEsRUFBT3ZRLEdBQ0gsRUFBRyxNQUFNcEIsRUFBVzRRLFFBR3JDLElBREExUCxFQUFhcFksRUFBUzRvQixHQUFXdkIsR0FDaEIvTyxFQUFhdVEsRUFBTSxNQUFNM1IsRUFBVzRRLEdBRXZEdjdCLEVBQVM2ckIsRUFBYWlQLE9BZnRCOTZCLEVBQVNpcUIsRUFBUWpZLEdBRWpCNlYsRUFBUyxJQUFJRixFQURia0UsRUFBYTdyQixFQUFTODZCLEdBMkJ4QixJQVBBN2EsRUFBaUIvZCxFQUFNLENBQ3JCMmxCLE9BQVFBLEVBQ1JrRSxXQUFZQSxFQUNaRixXQUFZQSxFQUNaN3JCLE9BQVFBLEVBQ1J5ckIsS0FBTSxJQUFJN0QsRUFBU0MsS0FFZG5uQixFQUFRVixHQUFRazhCLEVBQVdoNkIsRUFBTXhCLFFBR3RDb0gsR0FBZ0JBLEVBQWUraEIsRUFBdUJ6QixHQUMxRDZULEVBQWlDcFMsRUFBc0IvckIsVUFBWXdFLEVBQU8rbEIsSUF5QnhFNFQsRUFBK0IzNEIsY0FBZ0J1bUIsR0FDakQ5aEIsRUFBNEJrMEIsRUFBZ0MsY0FBZXBTLEdBRzdFOWhCLEVBQTRCazBCLEVBQWdDMVQsRUFBeUJzQixHQUVqRnZCLEdBQ0Z2Z0IsRUFBNEJrMEIsRUFBZ0MzVCxFQUFpQnpPLEdBRy9FcVcsRUFBU3JXLEdBQW9CZ1EsRUFFN0JuaUIsRUFBRSxDQUNBL0ksUUFBUSxFQUFNZ0wsT0FBUWtnQixHQUF5Qm1TLEVBQTZCMTlCLE1BQU9rcUIsR0FDbEYwSCxHQUVHb0wsS0FBcUJ6UixHQUN6QjloQixFQUE0QjhoQixFQUF1QnlSLEVBQW1CUixHQUdsRVEsS0FBcUJXLEdBQ3pCbDBCLEVBQTRCazBCLEVBQWdDWCxFQUFtQlIsR0FHakYvWSxFQUFXbEksS0FFUmpkLEVBQU9DLFFBQVUsOEJDaFB4QixJQUFJOEIsRUFBUyxFQUFRLE9BQ2pCcUUsRUFBUSxFQUFRLE9BQ2hCNGMsRUFBOEIsRUFBUSxPQUN0QzRJLEVBQTRCLG1DQUU1QmIsRUFBY2hwQixFQUFPZ3BCLFlBQ3JCSyxFQUFZcnBCLEVBQU9xcEIsVUFFdkJwckIsRUFBT0MsU0FBVzJyQixJQUE4QnhsQixHQUFNLFdBQ3BEZ2xCLEVBQVUsUUFDTGhsQixHQUFNLFdBQ1gsSUFBSWdsQixHQUFXLFFBQ1ZwSSxHQUE0QixTQUFVak4sR0FDM0MsSUFBSXFWLEVBQ0osSUFBSUEsRUFBVSxNQUNkLElBQUlBLEVBQVUsS0FDZCxJQUFJQSxFQUFVclYsTUFDYixJQUFTM1AsR0FBTSxXQUVoQixPQUFrRSxJQUEzRCxJQUFJZ2xCLEVBQVUsSUFBSUwsRUFBWSxHQUFJLE9BQUd6bkIsR0FBV0YsMkJDcEJ6RCxJQUFJdThCLEVBQThCLEVBQVEsT0FDdENDLEVBQStCLEVBQVEsT0FFM0M1L0IsRUFBT0MsUUFBVSxTQUFVeXpCLEVBQVVyaEIsR0FDbkMsT0FBT3N0QixFQUE0QkMsRUFBNkJsTSxHQUFXcmhCLHFCQ0o3RSxJQUFJMVIsRUFBTyxFQUFRLE9BQ2Y2QixFQUFPLEVBQVEsT0FDZm1iLEVBQWUsRUFBUSxPQUN2QmxiLEVBQVcsRUFBUSxPQUNuQkcsRUFBb0IsRUFBUSxPQUM1Qi9CLEVBQWMsRUFBUSxPQUN0QkQsRUFBb0IsRUFBUSxPQUM1QitCLEVBQXdCLEVBQVEsT0FDaENrcUIsRUFBeUIsZ0NBRTdCN3NCLEVBQU9DLFFBQVUsU0FBY3dKLEdBQzdCLElBTUlHLEVBQUd4RyxFQUFRSSxFQUFRQyxFQUFNQyxFQUFVQyxFQU5uQzBELEVBQUlzVyxFQUFhMWEsTUFDakJGLEVBQUlOLEVBQVNnSCxHQUNidkcsRUFBa0JDLFVBQVVDLE9BQzVCQyxFQUFRSCxFQUFrQixFQUFJQyxVQUFVLFFBQUtHLEVBQzdDQyxPQUFvQkQsSUFBVkQsRUFDVlEsRUFBaUJqRCxFQUFrQm1DLEdBRXZDLEdBQUljLElBQW1CbEIsRUFBc0JrQixHQUkzQyxJQUZBRixHQURBRCxFQUFXN0MsRUFBWWtDLEVBQUdjLElBQ1ZGLEtBQ2hCWixFQUFJLEtBQ0tVLEVBQU9qQixFQUFLbUIsRUFBTUQsSUFBV0ssTUFDcENoQixFQUFFNkIsS0FBS25CLEVBQUtHLE9BUWhCLElBTElMLEdBQVdMLEVBQWtCLElBQy9CRyxFQUFRMUMsRUFBSzBDLEVBQU9GLFVBQVUsS0FFaENDLEVBQVNSLEVBQWtCRyxHQUMzQlMsRUFBUyxJQUFLcXBCLEVBQXVCeGxCLEdBQTVCLENBQWdDakUsR0FDcEN3RyxFQUFJLEVBQUd4RyxFQUFTd0csRUFBR0EsSUFDdEJwRyxFQUFPb0csR0FBS3JHLEVBQVVGLEVBQU1OLEVBQUU2RyxHQUFJQSxHQUFLN0csRUFBRTZHLEdBRTNDLE9BQU9wRyxvQkNsQ1QsSUFBSTQ2QixFQUFzQixFQUFRLE9BQzlCMVosRUFBcUIsRUFBUSxPQUU3QmlILEVBQTBCeVMsRUFBb0J6Uyx3QkFDOUNrQixFQUF5QnVSLEVBQW9CdlIsdUJBSWpEN3NCLEVBQU9DLFFBQVUsU0FBVW1ILEdBQ3pCLE9BQU95bEIsRUFBdUJuSSxFQUFtQnRkLEVBQWVBLEVBQWN1a0IsdUJDVGhGLElBQUlsbkIsRUFBYyxFQUFRLE1BRXRCNGEsRUFBSyxFQUNMMEIsRUFBVWphLEtBQUtrYSxTQUNmNVksRUFBVzNELEVBQVksR0FBSTJELFVBRS9CcEksRUFBT0MsUUFBVSxTQUFVdUIsR0FDekIsTUFBTyxnQkFBcUI4QixJQUFSOUIsRUFBb0IsR0FBS0EsR0FBTyxLQUFPNEcsSUFBV2lYLEVBQUswQixFQUFTLHNCQ050RixJQUFJRSxFQUFnQixFQUFRLE9BRTVCamhCLEVBQU9DLFFBQVVnaEIsSUFDWHJmLE9BQU9GLE1BQ2tCLGlCQUFuQkUsT0FBTzhCLHlCQ0xuQixJQUFJNkcsRUFBYyxFQUFRLE9BQ3RCbkUsRUFBUSxFQUFRLE9BSXBCcEcsRUFBT0MsUUFBVXNLLEdBQWVuRSxHQUFNLFdBRXBDLE9BR2dCLElBSFQ5RSxPQUFPQyxnQkFBZSxjQUE2QixZQUFhLENBQ3JFcUMsTUFBTyxHQUNQK0csVUFBVSxJQUNUekosNkJDVkwsSUFBSW1GLEVBQWtCLEVBQVEsTUFFOUJwRyxFQUFRNkIsRUFBSXVFLGtCQ0ZaLElBQUl0RSxFQUFTLEVBQVEsT0FDakI2UixFQUFTLEVBQVEsT0FDakJ2SyxFQUFTLEVBQVEsT0FDakJnVSxFQUFNLEVBQVEsT0FDZDRELEVBQWdCLEVBQVEsT0FDeEJ2TCxFQUFvQixFQUFRLE9BRTVCd0wsRUFBd0J0TixFQUFPLE9BQy9CaFMsRUFBU0csRUFBT0gsT0FDaEJ1ZixFQUFZdmYsR0FBVUEsRUFBWSxJQUNsQ3dmLEVBQXdCMUwsRUFBb0I5VCxFQUFTQSxHQUFVQSxFQUFPeWYsZUFBaUJoRSxFQUUzRnJkLEVBQU9DLFFBQVUsU0FBVTJNLEdBQ3pCLElBQUt2RCxFQUFPNlgsRUFBdUJ0VSxLQUFXcVUsR0FBdUQsaUJBQS9CQyxFQUFzQnRVLEdBQW9CLENBQzlHLElBQUkwVSxFQUFjLFVBQVkxVSxFQUMxQnFVLEdBQWlCNVgsRUFBT3pILEVBQVFnTCxHQUNsQ3NVLEVBQXNCdFUsR0FBUWhMLEVBQU9nTCxHQUVyQ3NVLEVBQXNCdFUsR0FEYjhJLEdBQXFCeUwsRUFDQUEsRUFBVUcsR0FFVkYsRUFBc0JFLEdBRXRELE9BQU9KLEVBQXNCdFUsZUNyQmpDNU0sRUFBT0MsUUFBVSw4RUNBakIsSUFBSTZLLEVBQUksRUFBUSxPQUNackcsRUFBYyxFQUFRLE1BQ3RCMkIsRUFBUSxFQUFRLE9BQ2hCaTRCLEVBQW9CLEVBQVEsT0FDNUI5MkIsRUFBVyxFQUFRLE9BQ25CdEQsRUFBa0IsRUFBUSxPQUMxQjRTLEVBQVcsRUFBUSxPQUNuQjZOLEVBQXFCLEVBQVEsT0FFN0JxRyxFQUFjc1QsRUFBa0J0VCxZQUNoQ0MsRUFBV3FULEVBQWtCclQsU0FDN0I4QyxFQUFvQjlDLEVBQVM5cEIsVUFDN0IyK0IsRUFBc0JwN0IsRUFBWXNtQixFQUFZN3BCLFVBQVVSLE9BQ3hEcXZCLEVBQVd0ckIsRUFBWXFwQixFQUFrQmlDLFVBQ3pDSCxFQUFXbnJCLEVBQVlxcEIsRUFBa0I4QixVQVE3QzlrQixFQUFFLENBQUVuRixPQUFRLGNBQWVtSCxPQUFPLEVBQU1rUSxRQUFRLEVBQU1qUSxPQU5oQzNHLEdBQU0sV0FDMUIsT0FBUSxJQUFJMmtCLEVBQVksR0FBR3JxQixNQUFNLE9BQUc0QyxHQUFXMnJCLGVBS2dDLENBQy9FdnVCLE1BQU8sU0FBZXFHLEVBQU9DLEdBQzNCLEdBQUk2NEIsUUFBK0J2OEIsSUFBUjBELEVBQ3pCLE9BQU82NEIsRUFBb0J0NEIsRUFBU3RFLE1BQU84RCxHQVM3QyxJQVBBLElBQUkzRCxFQUFTbUUsRUFBU3RFLE1BQU1nc0IsV0FDeEI3USxFQUFRbmEsRUFBZ0I4QyxFQUFPM0QsR0FDL0I4RCxFQUFNakQsT0FBd0JYLElBQVIwRCxFQUFvQjVELEVBQVM0RCxFQUFLNUQsR0FDeERJLEVBQVMsSUFBS2toQixFQUFtQnpoQixLQUFNOG5CLEdBQTlCLENBQTRDbFUsRUFBUzNQLEVBQU1rWCxJQUNwRTBoQixFQUFhLElBQUk5VSxFQUFTL25CLE1BQzFCODhCLEVBQWEsSUFBSS9VLEVBQVN4bkIsR0FDMUJNLEVBQVEsRUFDTHNhLEVBQVFsWCxHQUNiMG9CLEVBQVNtUSxFQUFZajhCLElBQVNpc0IsRUFBUytQLEVBQVkxaEIsTUFDbkQsT0FBTzVhLG1DQ3BDYixJQUFJc0gsRUFBSSxFQUFRLE9BQ1ovSSxFQUFTLEVBQVEsT0FDakJxRSxFQUFRLEVBQVEsT0FDaEI5RixFQUFVLEVBQVEsT0FDbEJpQyxFQUFXLEVBQVEsT0FDbkJFLEVBQVcsRUFBUSxPQUNuQkcsRUFBb0IsRUFBUSxPQUM1QkMsRUFBaUIsRUFBUSxPQUN6QjhCLEVBQXFCLEVBQVEsT0FDN0J5ZCxFQUErQixFQUFRLE9BQ3ZDL2IsRUFBa0IsRUFBUSxNQUMxQkMsRUFBYSxFQUFRLE1BRXJCK2IsRUFBdUJoYyxFQUFnQixzQkFDdkNpYyxFQUFtQixpQkFDbkJDLEVBQWlDLGlDQUNqQ3JnQixFQUFZSCxFQUFPRyxVQUtuQnNnQixFQUErQmxjLEdBQWMsS0FBT0YsR0FBTSxXQUM1RCxJQUFJSyxFQUFRLEdBRVosT0FEQUEsRUFBTTRiLElBQXdCLEVBQ3ZCNWIsRUFBTWpHLFNBQVMsS0FBT2lHLEtBRzNCZ2MsRUFBa0JMLEVBQTZCLFVBRS9DTSxFQUFxQixTQUFVM2YsR0FDakMsSUFBS1IsRUFBU1EsR0FBSSxPQUFPLEVBQ3pCLElBQUk0ZixFQUFhNWYsRUFBRXNmLEdBQ25CLFlBQXNCL2UsSUFBZnFmLElBQTZCQSxFQUFhcmlCLEVBQVF5QyxJQVEzRCtILEVBQUUsQ0FBRW5GLE9BQVEsUUFBU21ILE9BQU8sRUFBTUMsUUFMcEJ5VixJQUFpQ0MsR0FLSyxDQUVsRGppQixPQUFRLFNBQWdCb2lCLEdBQ3RCLElBR0loWixFQUFHM0MsRUFBRzdELEVBQVF5ZixFQUFLQyxFQUhuQi9mLEVBQUlOLEVBQVNRLE1BQ2I4ZixFQUFJcGUsRUFBbUI1QixFQUFHLEdBQzFCb0UsRUFBSSxFQUVSLElBQUt5QyxHQUFLLEVBQUd4RyxFQUFTRCxVQUFVQyxPQUFRd0csRUFBSXhHLEVBQVF3RyxJQUVsRCxHQUFJOFksRUFESkksR0FBVyxJQUFQbFosRUFBVzdHLEVBQUlJLFVBQVV5RyxJQUNGLENBRXpCLEdBQUl6QyxHQURKMGIsRUFBTWpnQixFQUFrQmtnQixJQUNWUixFQUFrQixNQUFNcGdCLEVBQVVxZ0IsR0FDaEQsSUFBS3RiLEVBQUksRUFBR0EsRUFBSTRiLEVBQUs1YixJQUFLRSxJQUFTRixLQUFLNmIsR0FBR2pnQixFQUFla2dCLEVBQUc1YixFQUFHMmIsRUFBRTdiLFFBQzdELENBQ0wsR0FBSUUsR0FBS21iLEVBQWtCLE1BQU1wZ0IsRUFBVXFnQixHQUMzQzFmLEVBQWVrZ0IsRUFBRzViLElBQUsyYixHQUkzQixPQURBQyxFQUFFM2YsT0FBUytELEVBQ0o0YixtQ0MzRFgsSUFBSWpZLEVBQUksRUFBUSxPQUNaazFCLEVBQVUsZ0JBUWRsMUIsRUFBRSxDQUFFbkYsT0FBUSxRQUFTbUgsT0FBTyxFQUFNQyxRQVBDLEVBQVEsTUFFakJxVixDQUE2QixXQUtXLENBQ2hFdGMsT0FBUSxTQUFnQlQsR0FDdEIsT0FBTzI2QixFQUFRLzhCLEtBQU1vQyxFQUFZbEMsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLG9DQ1gzRSxJQUFJd0gsRUFBSSxFQUFRLE9BQ1ptMUIsRUFBUSxjQUNSaGQsRUFBbUIsRUFBUSxPQUUzQmlkLEVBQU8sT0FDUEMsR0FBYyxFQUdkRCxJQUFRLElBQUk5L0IsTUFBTSxHQUFPLE1BQUUsV0FBYysvQixHQUFjLEtBSTNEcjFCLEVBQUUsQ0FBRW5GLE9BQVEsUUFBU21ILE9BQU8sRUFBTUMsT0FBUW96QixHQUFlLENBQ3ZEbDZCLEtBQU0sU0FBY1osR0FDbEIsT0FBTzQ2QixFQUFNaDlCLEtBQU1vQyxFQUFZbEMsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLE1BS3pFMmYsRUFBaUJpZCxpQ0NuQmpCLElBQUlwMUIsRUFBSSxFQUFRLE9BQ1psRixFQUFVLEVBQVEsT0FLdEJrRixFQUFFLENBQUVuRixPQUFRLFFBQVNtSCxPQUFPLEVBQU1DLE9BQVEsR0FBR25ILFNBQVdBLEdBQVcsQ0FDakVBLFFBQVNBLHFCQ1JYLElBQUlrRixFQUFJLEVBQVEsT0FDWnpLLEVBQU8sRUFBUSxPQVVuQnlLLEVBQUUsQ0FBRW5GLE9BQVEsUUFBU3lMLE1BQU0sRUFBTXJFLFFBVEMsRUFBUSxNQUVmaVcsRUFBNEIsU0FBVWpOLEdBRS9EM1YsTUFBTUMsS0FBSzBWLE9BS21ELENBQzlEMVYsS0FBTUEsa0NDWFIsSUFBSXlLLEVBQUksRUFBUSxPQUNaczFCLEVBQVksa0JBQ1puZCxFQUFtQixFQUFRLE9BSS9CblksRUFBRSxDQUFFbkYsT0FBUSxRQUFTbUgsT0FBTyxHQUFRLENBQ2xDdkksU0FBVSxTQUFrQkYsR0FDMUIsT0FBTys3QixFQUFVbjlCLEtBQU1vQixFQUFJbEIsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLE1BS3JFMmYsRUFBaUIsMENDWmpCLElBQUluWSxFQUFJLEVBQVEsT0FDWnJHLEVBQWMsRUFBUSxNQUN0QjQ3QixFQUFXLGlCQUNYcFAsRUFBc0IsRUFBUSxNQUU5QnFQLEVBQWE3N0IsRUFBWSxHQUFHRCxTQUU1QjRzQixJQUFrQmtQLEdBQWMsRUFBSUEsRUFBVyxDQUFDLEdBQUksR0FBSSxHQUFLLEVBQzdEdFAsRUFBZ0JDLEVBQW9CLFdBSXhDbm1CLEVBQUUsQ0FBRW5GLE9BQVEsUUFBU21ILE9BQU8sRUFBTUMsT0FBUXFrQixJQUFrQkosR0FBaUIsQ0FDM0V4c0IsUUFBUyxTQUFpQjZzQixHQUN4QixJQUFJL3NCLEVBQVluQixVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csRUFDdEQsT0FBTzh0QixFQUVIa1AsRUFBV3I5QixLQUFNb3VCLEVBQWUvc0IsSUFBYyxFQUM5Qys3QixFQUFTcDlCLEtBQU1vdUIsRUFBZS9zQix1QkNwQjlCLEVBQVEsTUFLaEJ3RyxDQUFFLENBQUVuRixPQUFRLFFBQVN5TCxNQUFNLEdBQVEsQ0FDakM5USxRQUxZLEVBQVEsdUNDQXRCLElBQUkwRCxFQUFrQixFQUFRLE9BQzFCaWYsRUFBbUIsRUFBUSxPQUMzQi9ZLEVBQVksRUFBUSxPQUNwQmdaLEVBQXNCLEVBQVEsT0FDOUIzaEIsRUFBaUIsVUFDakI0aEIsRUFBaUIsRUFBUSxPQUN6QnBZLEVBQVUsRUFBUSxPQUNsQlIsRUFBYyxFQUFRLE9BRXRCNlksRUFBaUIsaUJBQ2pCQyxFQUFtQkgsRUFBb0J6UCxJQUN2QzZQLEVBQW1CSixFQUFvQnpPLFVBQVUyTyxHQVlyRHBqQixFQUFPQyxRQUFVa2pCLEVBQWUvaUIsTUFBTyxTQUFTLFNBQVVtakIsRUFBVS9NLEdBQ2xFNk0sRUFBaUJwZ0IsS0FBTSxDQUNyQnlSLEtBQU0wTyxFQUNOemQsT0FBUTNCLEVBQWdCdWYsR0FDeEJ6ZixNQUFPLEVBQ1AwUyxLQUFNQSxPQUlQLFdBQ0QsSUFBSXZDLEVBQVFxUCxFQUFpQnJnQixNQUN6QjBDLEVBQVNzTyxFQUFNdE8sT0FDZjZRLEVBQU92QyxFQUFNdUMsS0FDYjFTLEVBQVFtUSxFQUFNblEsUUFDbEIsT0FBSzZCLEdBQVU3QixHQUFTNkIsRUFBT3ZDLFFBQzdCNlEsRUFBTXRPLFlBQVNyQyxFQUNSLENBQUVNLFdBQU9OLEVBQVdTLE1BQU0sSUFFdkIsUUFBUnlTLEVBQXVCLENBQUU1UyxNQUFPRSxFQUFPQyxNQUFNLEdBQ3JDLFVBQVJ5UyxFQUF5QixDQUFFNVMsTUFBTytCLEVBQU83QixHQUFRQyxNQUFNLEdBQ3BELENBQUVILE1BQU8sQ0FBQ0UsRUFBTzZCLEVBQU83QixJQUFTQyxNQUFNLEtBQzdDLFVBS0gsSUFBSThJLEVBQVMzQyxFQUFVc1osVUFBWXRaLEVBQVU5SixNQVE3QyxHQUxBNmlCLEVBQWlCLFFBQ2pCQSxFQUFpQixVQUNqQkEsRUFBaUIsWUFHWmxZLEdBQVdSLEdBQStCLFdBQWhCc0MsRUFBT0QsS0FBbUIsSUFDdkRyTCxFQUFlc0wsRUFBUSxPQUFRLENBQUVqSixNQUFPLFdBQ3hDLE1BQU8rRCxtQ0MzRFQsSUFBSW1ELEVBQUksRUFBUSxPQUNackcsRUFBYyxFQUFRLE1BQ3RCQyxFQUFnQixFQUFRLE9BQ3hCVixFQUFrQixFQUFRLE9BQzFCaXRCLEVBQXNCLEVBQVEsTUFFOUJzUCxFQUFVOTdCLEVBQVksR0FBR3VOLE1BRXpCd3VCLEVBQWM5N0IsR0FBaUJwRCxPQUMvQjB2QixFQUFnQkMsRUFBb0IsT0FBUSxLQUloRG5tQixFQUFFLENBQUVuRixPQUFRLFFBQVNtSCxPQUFPLEVBQU1DLE9BQVF5ekIsSUFBZ0J4UCxHQUFpQixDQUN6RWhmLEtBQU0sU0FBY3l1QixHQUNsQixPQUFPRixFQUFRdjhCLEVBQWdCZixXQUFxQkssSUFBZG05QixFQUEwQixJQUFNQSxvQ0NmMUUsSUFBSTMxQixFQUFJLEVBQVEsT0FDWjQxQixFQUFPLGFBUVg1MUIsRUFBRSxDQUFFbkYsT0FBUSxRQUFTbUgsT0FBTyxFQUFNQyxRQVBDLEVBQVEsTUFFakJxVixDQUE2QixRQUtXLENBQ2hFdmMsSUFBSyxTQUFhUixHQUNoQixPQUFPcTdCLEVBQUt6OUIsS0FBTW9DLEVBQVlsQyxVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csb0NDWHhFLElBQUl3SCxFQUFJLEVBQVEsT0FDWjYxQixFQUFVLGNBQ1YxUCxFQUFzQixFQUFRLE1BQzlCMlAsRUFBaUIsRUFBUSxNQUN6QmpwQixFQUFVLEVBQVEsT0FTdEI3TSxFQUFFLENBQUVuRixPQUFRLFFBQVNtSCxPQUFPLEVBQU1DLFFBUGRra0IsRUFBb0IsWUFHdEJ0WixHQUFXaXBCLEVBQWlCLElBQU1BLEVBQWlCLElBSUssQ0FDeEVDLE9BQVEsU0FBZ0J4N0IsR0FDdEIsSUFBSWpDLEVBQVNELFVBQVVDLE9BQ3ZCLE9BQU91OUIsRUFBUTE5QixLQUFNb0MsRUFBWWpDLEVBQVFBLEVBQVMsRUFBSUQsVUFBVSxRQUFLRyxvQ0NoQnpFLElBQUl3SCxFQUFJLEVBQVEsT0FDWi9JLEVBQVMsRUFBUSxPQUNqQnpCLEVBQVUsRUFBUSxPQUNsQjhCLEVBQWdCLEVBQVEsTUFDeEJHLEVBQVcsRUFBUSxPQUNuQjBCLEVBQWtCLEVBQVEsT0FDMUJyQixFQUFvQixFQUFRLE9BQzVCb0IsRUFBa0IsRUFBUSxPQUMxQm5CLEVBQWlCLEVBQVEsT0FDekJ3RCxFQUFrQixFQUFRLE1BQzFCK2IsRUFBK0IsRUFBUSxPQUN2Q3FCLEVBQVcsRUFBUSxPQUVuQkMsRUFBc0J0QixFQUE2QixTQUVuRDdiLEVBQVVGLEVBQWdCLFdBQzFCakcsRUFBUTJCLEVBQU8zQixNQUNmeUcsRUFBTUMsS0FBS0QsSUFLZmlFLEVBQUUsQ0FBRW5GLE9BQVEsUUFBU21ILE9BQU8sRUFBTUMsUUFBUzJXLEdBQXVCLENBQ2hFaGpCLE1BQU8sU0FBZXFHLEVBQU9DLEdBQzNCLElBS0lrVyxFQUFhMVosRUFBUTJELEVBTHJCcEUsRUFBSWlCLEVBQWdCZixNQUNwQkcsRUFBU1IsRUFBa0JHLEdBQzNCa0UsRUFBSWhELEVBQWdCOEMsRUFBTzNELEdBQzNCOEQsRUFBTWpELE9BQXdCWCxJQUFSMEQsRUFBb0I1RCxFQUFTNEQsRUFBSzVELEdBRzVELEdBQUk5QyxFQUFReUMsS0FDVm1hLEVBQWNuYSxFQUFFMkQsYUFFWnRFLEVBQWM4YSxLQUFpQkEsSUFBZ0I5YyxHQUFTRSxFQUFRNGMsRUFBWWhjLGFBRXJFcUIsRUFBUzJhLElBRUUsUUFEcEJBLEVBQWNBLEVBQVkzVyxPQUYxQjJXLE9BQWM1WixHQUtaNFosSUFBZ0I5YyxRQUF5QmtELElBQWhCNFosR0FDM0IsT0FBT3VHLEVBQVMxZ0IsRUFBR2tFLEVBQUdDLEdBSTFCLElBREExRCxFQUFTLFNBQXFCRixJQUFoQjRaLEVBQTRCOWMsRUFBUThjLEdBQWFyVyxFQUFJSyxFQUFNRCxFQUFHLElBQ3ZFRSxFQUFJLEVBQUdGLEVBQUlDLEVBQUtELElBQUtFLElBQVNGLEtBQUtsRSxHQUFHRixFQUFlVyxFQUFRMkQsRUFBR3BFLEVBQUVrRSxJQUV2RSxPQURBekQsRUFBT0osT0FBUytELEVBQ1QzRCxrQ0M5Q1gsSUFBSXNILEVBQUksRUFBUSxPQUNaZzJCLEVBQVEsY0FPWmgyQixFQUFFLENBQUVuRixPQUFRLFFBQVNtSCxPQUFPLEVBQU1DLFFBTlIsRUFBUSxLQUVka2tCLENBQW9CLFNBSW9CLENBQzFEbHJCLEtBQU0sU0FBY1YsR0FDbEIsT0FBT3k3QixFQUFNNzlCLEtBQU1vQyxFQUFZbEMsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLG9DQ1Z6RSxJQUFJd0gsRUFBSSxFQUFRLE9BQ1ovSSxFQUFTLEVBQVEsT0FDakJrQyxFQUFrQixFQUFRLE9BQzFCNlosRUFBc0IsRUFBUSxPQUM5QmxiLEVBQW9CLEVBQVEsT0FDNUJILEVBQVcsRUFBUSxPQUNuQmtDLEVBQXFCLEVBQVEsT0FDN0I5QixFQUFpQixFQUFRLE9BR3pCNmdCLEVBRitCLEVBQVEsTUFFakJ0QixDQUE2QixVQUVuRGxnQixFQUFZSCxFQUFPRyxVQUNuQjJFLEVBQU1DLEtBQUtELElBQ1h3WixFQUFNdlosS0FBS3VaLElBQ1hpQyxFQUFtQixpQkFDbkJ5ZSxFQUFrQyxrQ0FLdENqMkIsRUFBRSxDQUFFbkYsT0FBUSxRQUFTbUgsT0FBTyxFQUFNQyxRQUFTMlcsR0FBdUIsQ0FDaEVpVSxPQUFRLFNBQWdCNXdCLEVBQU9pNkIsR0FDN0IsSUFJSUMsRUFBYUMsRUFBbUJuZSxFQUFHOWIsRUFBRzVHLEVBQU13d0IsRUFKNUM5dEIsRUFBSU4sRUFBU1EsTUFDYjRmLEVBQU1qZ0IsRUFBa0JHLEdBQ3hCbytCLEVBQWNsOUIsRUFBZ0I4QyxFQUFPOGIsR0FDckMzZixFQUFrQkMsVUFBVUMsT0FXaEMsR0FUd0IsSUFBcEJGLEVBQ0YrOUIsRUFBY0MsRUFBb0IsRUFDTCxJQUFwQmgrQixHQUNUKzlCLEVBQWMsRUFDZEMsRUFBb0JyZSxFQUFNc2UsSUFFMUJGLEVBQWMvOUIsRUFBa0IsRUFDaENnK0IsRUFBb0I3Z0IsRUFBSXhaLEVBQUlpWCxFQUFvQmtqQixHQUFjLEdBQUluZSxFQUFNc2UsSUFFdEV0ZSxFQUFNb2UsRUFBY0MsRUFBb0I1ZSxFQUMxQyxNQUFNcGdCLEVBQVU2K0IsR0FHbEIsSUFEQWhlLEVBQUlwZSxFQUFtQjVCLEVBQUdtK0IsR0FDckJqNkIsRUFBSSxFQUFHQSxFQUFJaTZCLEVBQW1CajZCLEtBQ2pDNUcsRUFBTzhnQyxFQUFjbDZCLEtBQ1RsRSxHQUFHRixFQUFla2dCLEVBQUc5YixFQUFHbEUsRUFBRTFDLElBR3hDLEdBREEwaUIsRUFBRTNmLE9BQVM4OUIsRUFDUEQsRUFBY0MsRUFBbUIsQ0FDbkMsSUFBS2o2QixFQUFJazZCLEVBQWFsNkIsRUFBSTRiLEVBQU1xZSxFQUFtQmo2QixJQUVqRDRwQixFQUFLNXBCLEVBQUlnNkIsR0FEVDVnQyxFQUFPNEcsRUFBSWk2QixLQUVDbitCLEVBQUdBLEVBQUU4dEIsR0FBTTl0QixFQUFFMUMsVUFDYjBDLEVBQUU4dEIsR0FFaEIsSUFBSzVwQixFQUFJNGIsRUFBSzViLEVBQUk0YixFQUFNcWUsRUFBb0JELEVBQWFoNkIsV0FBWWxFLEVBQUVrRSxFQUFJLFFBQ3RFLEdBQUlnNkIsRUFBY0MsRUFDdkIsSUFBS2o2QixFQUFJNGIsRUFBTXFlLEVBQW1CajZCLEVBQUlrNkIsRUFBYWw2QixJQUVqRDRwQixFQUFLNXBCLEVBQUlnNkIsRUFBYyxHQUR2QjVnQyxFQUFPNEcsRUFBSWk2QixFQUFvQixLQUVuQm4rQixFQUFHQSxFQUFFOHRCLEdBQU05dEIsRUFBRTFDLFVBQ2IwQyxFQUFFOHRCLEdBR2xCLElBQUs1cEIsRUFBSSxFQUFHQSxFQUFJZzZCLEVBQWFoNkIsSUFDM0JsRSxFQUFFa0UsRUFBSWs2QixHQUFlaCtCLFVBQVU4RCxFQUFJLEdBR3JDLE9BREFsRSxFQUFFSyxPQUFTeWYsRUFBTXFlLEVBQW9CRCxFQUM5QmxlLHNCQ25FWCxJQUFJdGUsRUFBYyxFQUFRLE1BQ3RCMkcsRUFBVyxFQUFRLE9BRW5CZzJCLEVBQWdCQyxLQUFLbmdDLFVBQ3JCb2dDLEVBQWUsZUFFZkMsRUFBa0I5OEIsRUFBWTI4QixFQUF1QixVQUNyREksRUFBVS84QixFQUFZMjhCLEVBQWNJLFNBSXBDbi9CLE9BQU8sSUFBSWcvQixLQUFLL1IsT0FBU2dTLEdBQzNCbDJCLEVBQVNnMkIsRUFQSyxZQU9xQixXQUNqQyxJQUFJeDlCLEVBQVE0OUIsRUFBUXYrQixNQUVwQixPQUFPVyxHQUFVQSxFQUFRMjlCLEVBQWdCdCtCLE1BQVFxK0Isc0JDZnJELElBQUkvMkIsRUFBYyxFQUFRLE9BQ3RCazNCLEVBQXVCLGdCQUN2Qmg5QixFQUFjLEVBQVEsTUFDdEJsRCxFQUFpQixVQUVqQlAsRUFBb0JDLFNBQVNDLFVBQzdCb1MsRUFBbUI3TyxFQUFZekQsRUFBa0JvSCxVQUNqRHM1QixFQUFTLG1FQUNUQyxFQUFhbDlCLEVBQVlpOUIsRUFBTzE1QixNQUtoQ3VDLElBQWdCazNCLEdBQ2xCbGdDLEVBQWVQLEVBTE4sT0FLK0IsQ0FDdEMwSixjQUFjLEVBQ2R1QyxJQUFLLFdBQ0gsSUFDRSxPQUFPMDBCLEVBQVdELEVBQVFwdUIsRUFBaUJyUSxPQUFPLEdBQ2xELE1BQU8wRSxHQUNQLE1BQU8sd0JDcEJmLElBQUltRCxFQUFJLEVBQVEsT0FDWi9JLEVBQVMsRUFBUSxPQUNqQjBOLEVBQWEsRUFBUSxPQUNyQlEsRUFBUSxFQUFRLE9BQ2hCeEwsRUFBYyxFQUFRLE1BQ3RCMkIsRUFBUSxFQUFRLE9BRWhCaEcsRUFBUTJCLEVBQU8zQixNQUNmMm9CLEVBQWF0WixFQUFXLE9BQVEsYUFDaEN6SCxFQUFPdkQsRUFBWSxJQUFJdUQsTUFDdkJnVyxFQUFTdlosRUFBWSxHQUFHdVosUUFDeEJDLEVBQWF4WixFQUFZLEdBQUd3WixZQUM1QnBWLEVBQVVwRSxFQUFZLEdBQUdvRSxTQUN6Qis0QixFQUFpQm45QixFQUFZLEdBQUkyRCxVQUVqQ3k1QixFQUFTLG1CQUNUQyxFQUFNLG9CQUNOQyxFQUFLLG9CQUVMQyxFQUFNLFNBQVV0eUIsRUFBT29nQixFQUFRdGEsR0FDakMsSUFBSW9kLEVBQU81VSxFQUFPeEksRUFBUXNhLEVBQVMsR0FDL0Juc0IsRUFBT3FhLEVBQU94SSxFQUFRc2EsRUFBUyxHQUNuQyxPQUFLOW5CLEVBQUs4NUIsRUFBS3B5QixLQUFXMUgsRUFBSys1QixFQUFJcCtCLElBQVdxRSxFQUFLKzVCLEVBQUlyeUIsS0FBVzFILEVBQUs4NUIsRUFBS2xQLEdBQ25FLE1BQVFnUCxFQUFlM2pCLEVBQVd2TyxFQUFPLEdBQUksSUFDN0NBLEdBR1AxRCxFQUFTNUYsR0FBTSxXQUNqQixNQUFzQyxxQkFBL0IyaUIsRUFBVyxpQkFDWSxjQUF6QkEsRUFBVyxhQUdkQSxHQUlGamUsRUFBRSxDQUFFbkYsT0FBUSxPQUFReUwsTUFBTSxFQUFNckUsT0FBUWYsR0FBVSxDQUVoRG9lLFVBQVcsU0FBbUJqcEIsRUFBSWtwQixFQUFVQyxHQUMxQyxJQUFLLElBQUkxZ0IsRUFBSSxFQUFHcTRCLEVBQUk5K0IsVUFBVUMsT0FBUWdQLEVBQU9oUyxFQUFNNmhDLEdBQUlyNEIsRUFBSXE0QixFQUFHcjRCLElBQUt3SSxFQUFLeEksR0FBS3pHLFVBQVV5RyxHQUN2RixJQUFJcEcsRUFBU3lNLEVBQU04WSxFQUFZLEtBQU0zVyxHQUNyQyxNQUF3QixpQkFBVjVPLEVBQXFCcUYsRUFBUXJGLEVBQVFxK0IsRUFBUUcsR0FBT3grQixrQ0N4Q3hFLElBQUkrRyxFQUFjLEVBQVEsT0FDdEJ4SSxFQUFTLEVBQVEsT0FDakIwQyxFQUFjLEVBQVEsTUFDdEJ5TCxFQUFXLEVBQVEsT0FDbkI5RSxFQUFXLEVBQVEsT0FDbkIvQixFQUFTLEVBQVEsT0FDakI2cEIsRUFBb0IsRUFBUSxPQUM1QnB5QixFQUFnQixFQUFRLE9BQ3hCNGYsRUFBVyxFQUFRLE9BQ25CSSxFQUFjLEVBQVEsT0FDdEIxYSxFQUFRLEVBQVEsT0FDaEJrVixFQUFzQixVQUN0QjNSLEVBQTJCLFdBQzNCcEksRUFBaUIsVUFDakIyZ0MsRUFBa0IsRUFBUSxPQUMxQmxFLEVBQU8sY0FFUG1FLEVBQVMsU0FDVEMsRUFBZXJnQyxFQUFhLE9BQzVCc2dDLEVBQWtCRCxFQUFhbGhDLFVBQy9CZ0IsRUFBWUgsRUFBT0csVUFDbkI2UCxFQUFhdE4sRUFBWSxHQUFHL0QsT0FDNUJ1ZCxFQUFheFosRUFBWSxHQUFHd1osWUFJNUJxa0IsRUFBWSxTQUFVMStCLEdBQ3hCLElBQUkyK0IsRUFBWXpoQixFQUFZbGQsRUFBTyxVQUNuQyxNQUEyQixpQkFBYjIrQixFQUF3QkEsRUFBWUMsRUFBU0QsSUFLekRDLEVBQVcsU0FBVXJnQyxHQUN2QixJQUNJaWMsRUFBT3FrQixFQUFPQyxFQUFPQyxFQUFTQyxFQUFReC9CLEVBQVFVLEVBQU8rK0IsRUFEckQxaEMsRUFBSzJmLEVBQVkzZSxFQUFVLFVBRS9CLEdBQUl1ZSxFQUFTdmYsR0FBSyxNQUFNZSxFQUFVLDZDQUNsQyxHQUFpQixpQkFBTmYsR0FBa0JBLEVBQUdpQyxPQUFTLEVBR3ZDLEdBRkFqQyxFQUFLNjhCLEVBQUs3OEIsR0FFSSxNQURkaWQsRUFBUUgsRUFBVzljLEVBQUksS0FDTyxLQUFWaWQsR0FFbEIsR0FBYyxNQURkcWtCLEVBQVF4a0IsRUFBVzljLEVBQUksS0FDTyxNQUFWc2hDLEVBQWUsT0FBT25ULFNBQ3JDLEdBQWMsS0FBVmxSLEVBQWMsQ0FDdkIsT0FBUUgsRUFBVzljLEVBQUksSUFDckIsS0FBSyxHQUFJLEtBQUssR0FBSXVoQyxFQUFRLEVBQUdDLEVBQVUsR0FBSSxNQUMzQyxLQUFLLEdBQUksS0FBSyxJQUFLRCxFQUFRLEVBQUdDLEVBQVUsR0FBSSxNQUM1QyxRQUFTLE9BQVF4aEMsRUFJbkIsSUFEQWlDLEdBREF3L0IsRUFBUzd3QixFQUFXNVEsRUFBSSxJQUNSaUMsT0FDWFUsRUFBUSxFQUFHQSxFQUFRVixFQUFRVSxJQUk5QixJQUhBKytCLEVBQU81a0IsRUFBVzJrQixFQUFROStCLElBR2YsSUFBTSsrQixFQUFPRixFQUFTLE9BQU9yVCxJQUN4QyxPQUFPd1QsU0FBU0YsRUFBUUYsR0FFNUIsT0FBUXZoQyxHQUtaLEdBQUkrTyxFQUFTaXlCLEdBQVNDLEVBQWEsVUFBWUEsRUFBYSxRQUFVQSxFQUFhLFNBQVUsQ0FRM0YsSUFQQSxJQWNxQjVnQyxFQWRqQnVoQyxFQUFnQixTQUFnQm4vQixHQUNsQyxJQUFJdUQsRUFBSWhFLFVBQVVDLE9BQVMsRUFBSSxFQUFJZy9CLEVBQWFFLEVBQVUxK0IsSUFDdERvd0IsRUFBUS93QixLQUVaLE9BQU9uQyxFQUFjdWhDLEVBQWlCck8sSUFBVTV0QixHQUFNLFdBQWM4N0IsRUFBZ0JsTyxNQUNoRmQsRUFBa0I1eEIsT0FBTzZGLEdBQUk2c0IsRUFBTytPLEdBQWlCNTdCLEdBRWxEMUcsRUFBTzhKLEVBQWMrUSxFQUFvQjhtQixHQUFnQixvTEFPaEVyeUIsTUFBTSxLQUFNd2YsRUFBSSxFQUFROXVCLEVBQUsyQyxPQUFTbXNCLEVBQUdBLElBQ3JDbG1CLEVBQU8rNEIsRUFBYzVnQyxFQUFNZixFQUFLOHVCLE1BQVFsbUIsRUFBTzA1QixFQUFldmhDLElBQ2hFRCxFQUFld2hDLEVBQWV2aEMsRUFBS21JLEVBQXlCeTRCLEVBQWM1Z0MsSUFHOUV1aEMsRUFBYzdoQyxVQUFZbWhDLEVBQzFCQSxFQUFnQjM3QixZQUFjcThCLEVBQzlCMzNCLEVBQVNySixFQUFRb2dDLEVBQVFZLHFCQ3RGM0IsSUFBSWo0QixFQUFJLEVBQVEsT0FDWit0QixFQUFTLEVBQVEsT0FLckIvdEIsRUFBRSxDQUFFbkYsT0FBUSxTQUFVeUwsTUFBTSxFQUFNckUsT0FBUXpMLE9BQU91M0IsU0FBV0EsR0FBVSxDQUNwRUEsT0FBUUEscUJDUEYsRUFBUSxNQU1oQi90QixDQUFFLENBQUVuRixPQUFRLFNBQVV5TCxNQUFNLEVBQU0xUCxNQUxoQixFQUFRLFFBSzhCLENBQ3REZ0UsT0FMVyxFQUFRLDBCQ0ZyQixJQUFJb0YsRUFBSSxFQUFRLE9BQ1pQLEVBQWMsRUFBUSxPQUN0QnFRLEVBQW1CLFdBS3ZCOVAsRUFBRSxDQUFFbkYsT0FBUSxTQUFVeUwsTUFBTSxFQUFNckUsT0FBUXpMLE9BQU9zWixtQkFBcUJBLEVBQWtCbFosTUFBTzZJLEdBQWUsQ0FDNUdxUSxpQkFBa0JBLHFCQ1JwQixJQUFJOVAsRUFBSSxFQUFRLE9BQ1pQLEVBQWMsRUFBUSxPQUN0QmhKLEVBQWlCLFVBS3JCdUosRUFBRSxDQUFFbkYsT0FBUSxTQUFVeUwsTUFBTSxFQUFNckUsT0FBUXpMLE9BQU9DLGlCQUFtQkEsRUFBZ0JHLE1BQU82SSxHQUFlLENBQ3hHaEosZUFBZ0JBLHFCQ1JsQixJQUFJdUosRUFBSSxFQUFRLE9BQ1prNEIsRUFBVyxpQkFJZmw0QixFQUFFLENBQUVuRixPQUFRLFNBQVV5TCxNQUFNLEdBQVEsQ0FDbEN6RSxRQUFTLFNBQWlCNUosR0FDeEIsT0FBT2lnQyxFQUFTamdDLHVCQ1BwQixJQUFJK0gsRUFBSSxFQUFRLE9BQ1oxRSxFQUFRLEVBQVEsT0FDaEJwQyxFQUFrQixFQUFRLE9BQzFCZ2xCLEVBQWlDLFdBQ2pDemUsRUFBYyxFQUFRLE9BRXRCNnVCLEVBQXNCaHpCLEdBQU0sV0FBYzRpQixFQUErQixNQUs3RWxlLEVBQUUsQ0FBRW5GLE9BQVEsU0FBVXlMLE1BQU0sRUFBTXJFLFFBSnBCeEMsR0FBZTZ1QixFQUlxQjEzQixNQUFPNkksR0FBZSxDQUN0RVoseUJBQTBCLFNBQWtDeEksRUFBSUssR0FDOUQsT0FBT3duQixFQUErQmhsQixFQUFnQjdDLEdBQUtLLHVCQ2IvRCxJQUFJc0osRUFBSSxFQUFRLE9BQ1pQLEVBQWMsRUFBUSxPQUN0QmpCLEVBQVUsRUFBUSxPQUNsQnRGLEVBQWtCLEVBQVEsT0FDMUJ1RixFQUFpQyxFQUFRLE9BQ3pDMUcsRUFBaUIsRUFBUSxPQUk3QmlJLEVBQUUsQ0FBRW5GLE9BQVEsU0FBVXlMLE1BQU0sRUFBTTFQLE1BQU82SSxHQUFlLENBQ3REMDRCLDBCQUEyQixTQUFtQzk2QixHQU81RCxJQU5BLElBS0kzRyxFQUFLd1AsRUFMTGpPLEVBQUlpQixFQUFnQm1FLEdBQ3BCd0IsRUFBMkJKLEVBQStCekgsRUFDMURyQixFQUFPNkksRUFBUXZHLEdBQ2ZTLEVBQVMsR0FDVE0sRUFBUSxFQUVMckQsRUFBSzJDLE9BQVNVLFFBRUFSLEtBRG5CME4sRUFBYXJILEVBQXlCNUcsRUFBR3ZCLEVBQU1mLEVBQUtxRCxRQUN0QmpCLEVBQWVXLEVBQVFoQyxFQUFLd1AsR0FFNUQsT0FBT3hOLHNCQ3JCWCxJQUFJc0gsRUFBSSxFQUFRLE9BQ1oxRSxFQUFRLEVBQVEsT0FDaEIzRCxFQUFXLEVBQVEsT0FDbkJ5Z0MsRUFBdUIsRUFBUSxPQUMvQnpuQixFQUEyQixFQUFRLE9BTXZDM1EsRUFBRSxDQUFFbkYsT0FBUSxTQUFVeUwsTUFBTSxFQUFNckUsT0FKUjNHLEdBQU0sV0FBYzg4QixFQUFxQixNQUlKeGhDLE1BQU8rWixHQUE0QixDQUNoRzNSLGVBQWdCLFNBQXdCM0ksR0FDdEMsT0FBTytoQyxFQUFxQnpnQyxFQUFTdEIsd0JDWnpDLElBQUkySixFQUFJLEVBQVEsT0FDWnJJLEVBQVcsRUFBUSxPQUNuQjBnQyxFQUFhLEVBQVEsT0FPekJyNEIsRUFBRSxDQUFFbkYsT0FBUSxTQUFVeUwsTUFBTSxFQUFNckUsT0FOdEIsRUFBUSxNQUVNM0csRUFBTSxXQUFjKzhCLEVBQVcsT0FJUSxDQUMvRDFpQyxLQUFNLFNBQWNVLEdBQ2xCLE9BQU9naUMsRUFBVzFnQyxFQUFTdEIsd0JDWHZCLEVBQVEsTUFLaEIySixDQUFFLENBQUVuRixPQUFRLFNBQVV5TCxNQUFNLEdBQVEsQ0FDbENsRyxlQUxtQixFQUFRLDBCQ0Q3QixJQUFJNUMsRUFBd0IsRUFBUSxPQUNoQzhDLEVBQVcsRUFBUSxPQUNuQmhELEVBQVcsRUFBUSxPQUlsQkUsR0FDSDhDLEVBQVM5SixPQUFPSixVQUFXLFdBQVlrSCxFQUFVLENBQUU0VSxRQUFRLGtDQ043RCxJQTJESThILEVBQVVDLEVBQXNCQyxFQUFnQkMsRUEzRGhEbmEsRUFBSSxFQUFRLE9BQ1pDLEVBQVUsRUFBUSxPQUNsQmhKLEVBQVMsRUFBUSxPQUNqQjBOLEVBQWEsRUFBUSxPQUNyQmpOLEVBQU8sRUFBUSxPQUNmaWlCLEVBQWdCLEVBQVEsT0FDeEJyWixFQUFXLEVBQVEsT0FDbkI4WixFQUFjLEVBQVEsT0FDdEJoYSxFQUFpQixFQUFRLE9BQ3pCakIsRUFBaUIsRUFBUSxPQUN6QmtiLEVBQWEsRUFBUSxPQUNyQnRULEVBQVksRUFBUSxPQUNwQjdQLEVBQWEsRUFBUSxPQUNyQk8sRUFBVyxFQUFRLE9BQ25CNmlCLEVBQWEsRUFBUSxPQUNyQjdSLEVBQWdCLEVBQVEsT0FDeEJtTyxFQUFVLEVBQVEsT0FDbEJzQixFQUE4QixFQUFRLE9BQ3RDMEIsRUFBcUIsRUFBUSxPQUM3QmxNLEVBQU8sYUFDUDZNLEVBQVksRUFBUSxPQUNwQnJCLEVBQWlCLEVBQVEsT0FDekJzQixFQUFtQixFQUFRLEtBQzNCMUIsRUFBNkIsRUFBUSxPQUNyQ0MsRUFBVSxFQUFRLE9BQ2xCbEgsRUFBUSxFQUFRLE9BQ2hCdUcsRUFBc0IsRUFBUSxPQUM5QmhULEVBQVcsRUFBUSxPQUNuQjdKLEVBQWtCLEVBQVEsTUFDMUJrZixFQUFhLEVBQVEsTUFDckI1TixFQUFVLEVBQVEsT0FDbEJyUixFQUFhLEVBQVEsTUFFckJDLEVBQVVGLEVBQWdCLFdBQzFCbWYsRUFBVSxVQUVWbEMsRUFBbUJKLEVBQW9Cek8sVUFBVStRLEdBQ2pEbkMsRUFBbUJILEVBQW9CelAsSUFDdkNnUyxFQUEwQnZDLEVBQW9Cek8sVUFBVStRLEdBQ3hERSxFQUF5QmpCLEdBQWlCQSxFQUFjdmpCLFVBQ3hEeWtCLEVBQXFCbEIsRUFDckJtQixFQUFtQkYsRUFDbkJ4akIsRUFBWUgsRUFBT0csVUFDbkJnTCxFQUFXbkwsRUFBT21MLFNBQ2xCc0MsRUFBVXpOLEVBQU95TixRQUNqQmdOLEVBQXVCb0gsRUFBMkI5aEIsRUFDbEQrakIsRUFBOEJySixFQUU5QnNKLEtBQW9CNVksR0FBWUEsRUFBUzZZLGFBQWVoa0IsRUFBT2lrQixlQUMvREMsRUFBeUJqa0IsRUFBV0QsRUFBT21rQix1QkFDM0NDLEdBQXNCLHFCQU90QkMsSUFBYyxFQUlkcGEsR0FBU2tFLEVBQVNzVixHQUFTLFdBQzdCLElBQUlhLEVBQTZCOVMsRUFBY29TLEdBQzNDVyxFQUF5QkQsSUFBK0Joa0IsT0FBT3NqQixHQUluRSxJQUFLVyxHQUF5QyxLQUFmaGdCLEVBQW1CLE9BQU8sRUFFekQsR0FBSXlFLElBQVk2YSxFQUEwQixRQUFHLE9BQU8sRUFJcEQsR0FBSXRmLEdBQWMsSUFBTSxjQUFjNkMsS0FBS2tkLEdBQTZCLE9BQU8sRUFFL0UsSUFBSWhQLEVBQVUsSUFBSXNPLEdBQW1CLFNBQVV4TixHQUFXQSxFQUFRLE1BQzlEb08sRUFBYyxTQUFVdmUsR0FDMUJBLEdBQUssZUFBNkIsZ0JBS3BDLE9BSGtCcVAsRUFBUTNRLFlBQWMsSUFDNUJILEdBQVdnZ0IsSUFDdkJILEdBQWMvTyxFQUFRQyxNQUFLLHlCQUF3Q2lQLEtBRzNERCxHQUEwQmYsSUFBZVUsS0FHL0NPLEdBQXNCeGEsS0FBV2dYLEdBQTRCLFNBQVVqTixHQUN6RTRQLEVBQW1CYyxJQUFJMVEsR0FBaUIsT0FBRSxrQkFJeEMyUSxHQUFhLFNBQVV2bEIsR0FDekIsSUFBSW1XLEVBQ0osU0FBTy9VLEVBQVNwQixLQUFPYSxFQUFXc1YsRUFBT25XLEVBQUdtVyxRQUFRQSxHQUdsRHFQLEdBQWUsU0FBVUMsRUFBVTNTLEdBQ3JDLElBTUl6USxFQUFROFQsRUFBTXVQLEVBTmRqakIsRUFBUXFRLEVBQU1yUSxNQUNka2pCLEVBOUNVLEdBOENMN1MsRUFBTUEsTUFDWDhTLEVBQVVELEVBQUtGLEVBQVNFLEdBQUtGLEVBQVNJLEtBQ3RDN08sRUFBVXlPLEVBQVN6TyxRQUNuQlMsRUFBU2dPLEVBQVNoTyxPQUNsQlosRUFBUzRPLEVBQVM1TyxPQUV0QixJQUNNK08sR0FDR0QsSUFuREssSUFvREo3UyxFQUFNZ1QsV0FBeUJDLEdBQWtCalQsR0FDckRBLEVBQU1nVCxVQXREQSxJQXdEUSxJQUFaRixFQUFrQnZqQixFQUFTSSxHQUV6Qm9VLEdBQVFBLEVBQU9FLFFBQ25CMVUsRUFBU3VqQixFQUFRbmpCLEdBQ2JvVSxJQUNGQSxFQUFPQyxPQUNQNE8sR0FBUyxJQUdUcmpCLElBQVdvakIsRUFBU3ZQLFFBQ3RCdUIsRUFBTzFXLEVBQVUseUJBQ1JvVixFQUFPb1AsR0FBV2xqQixJQUMzQmhCLEVBQUs4VSxFQUFNOVQsRUFBUTJVLEVBQVNTLEdBQ3ZCVCxFQUFRM1UsSUFDVm9WLEVBQU9oVixHQUNkLE1BQU8rRCxHQUNIcVEsSUFBVzZPLEdBQVE3TyxFQUFPQyxPQUM5QlcsRUFBT2pSLEtBSVB1UCxHQUFTLFNBQVVqRCxFQUFPa1QsR0FDeEJsVCxFQUFNbVQsV0FDVm5ULEVBQU1tVCxVQUFXLEVBQ2pCL0IsR0FBVSxXQUdSLElBRkEsSUFDSXVCLEVBREFTLEVBQVlwVCxFQUFNb1QsVUFFZlQsRUFBV1MsRUFBVXBhLE9BQzFCMFosR0FBYUMsRUFBVTNTLEdBRXpCQSxFQUFNbVQsVUFBVyxFQUNiRCxJQUFhbFQsRUFBTWdULFdBQVdLLEdBQVlyVCxRQUk5QytSLEdBQWdCLFNBQVVwWixFQUFNeUssRUFBUytNLEdBQzNDLElBQUk1RSxFQUFPdUgsRUFDUGpCLElBQ0Z0RyxFQUFRdFMsRUFBUzZZLFlBQVksVUFDdkIxTyxRQUFVQSxFQUNoQm1JLEVBQU00RSxPQUFTQSxFQUNmNUUsRUFBTStILFVBQVUzYSxHQUFNLEdBQU8sR0FDN0I3SyxFQUFPaWtCLGNBQWN4RyxJQUNoQkEsRUFBUSxDQUFFbkksUUFBU0EsRUFBUytNLE9BQVFBLElBQ3RDNkIsSUFBMkJjLEVBQVVobEIsRUFBTyxLQUFPNkssSUFBUW1hLEVBQVF2SCxHQUMvRDVTLElBQVN1WixJQUFxQmIsRUFBaUIsOEJBQStCbEIsSUFHckZrRCxHQUFjLFNBQVVyVCxHQUMxQnpSLEVBQUtnVyxFQUFNelcsR0FBUSxXQUNqQixJQUdJeUIsRUFIQTZULEVBQVVwRCxFQUFNSyxPQUNoQjFRLEVBQVFxUSxFQUFNclEsTUFHbEIsR0FGbUI0akIsR0FBWXZULEtBRzdCelEsRUFBU3FnQixHQUFRLFdBQ1hsTSxFQUNGbkksRUFBUWlZLEtBQUsscUJBQXNCN2pCLEVBQU95VCxHQUNyQzJPLEdBQWNHLEdBQXFCOU8sRUFBU3pULE1BR3JEcVEsRUFBTWdULFVBQVl0UCxHQUFXNlAsR0FBWXZULEdBcEgvQixFQURGLEVBc0hKelEsRUFBT21FLE9BQU8sTUFBTW5FLEVBQU9JLFVBS2pDNGpCLEdBQWMsU0FBVXZULEdBQzFCLE9BNUhZLElBNEhMQSxFQUFNZ1QsWUFBMEJoVCxFQUFNL1QsUUFHM0NnbkIsR0FBb0IsU0FBVWpULEdBQ2hDelIsRUFBS2dXLEVBQU16VyxHQUFRLFdBQ2pCLElBQUlzVixFQUFVcEQsRUFBTUssT0FDaEJxRCxFQUNGbkksRUFBUWlZLEtBQUssbUJBQW9CcFEsR0FDNUIyTyxHQXhJYSxtQkF3SW9CM08sRUFBU3BELEVBQU1yUSxXQUl2RGpELEdBQU8sU0FBVThHLEVBQUl3TSxFQUFPeVQsR0FDOUIsT0FBTyxTQUFVOWpCLEdBQ2Y2RCxFQUFHd00sRUFBT3JRLEVBQU84akIsS0FJakJDLEdBQWlCLFNBQVUxVCxFQUFPclEsRUFBTzhqQixHQUN2Q3pULEVBQU1sUSxPQUNWa1EsRUFBTWxRLE1BQU8sRUFDVDJqQixJQUFRelQsRUFBUXlULEdBQ3BCelQsRUFBTXJRLE1BQVFBLEVBQ2RxUSxFQUFNQSxNQXBKTyxFQXFKYmlELEdBQU9qRCxHQUFPLEtBR1oyVCxHQUFrQixTQUFVM1QsRUFBT3JRLEVBQU84akIsR0FDNUMsSUFBSXpULEVBQU1sUSxLQUFWLENBQ0FrUSxFQUFNbFEsTUFBTyxFQUNUMmpCLElBQVF6VCxFQUFReVQsR0FDcEIsSUFDRSxHQUFJelQsRUFBTUssU0FBVzFRLEVBQU8sTUFBTTFCLEVBQVUsb0NBQzVDLElBQUlvVixFQUFPb1AsR0FBVzlpQixHQUNsQjBULEVBQ0YrTixHQUFVLFdBQ1IsSUFBSXdDLEVBQVUsQ0FBRTlqQixNQUFNLEdBQ3RCLElBQ0V2QixFQUFLOFUsRUFBTTFULEVBQ1RqRCxHQUFLaW5CLEdBQWlCQyxFQUFTNVQsR0FDL0J0VCxHQUFLZ25CLEdBQWdCRSxFQUFTNVQsSUFFaEMsTUFBT3RNLEdBQ1BnZ0IsR0FBZUUsRUFBU2xnQixFQUFPc00sUUFJbkNBLEVBQU1yUSxNQUFRQSxFQUNkcVEsRUFBTUEsTUE5S0ksRUErS1ZpRCxHQUFPakQsR0FBTyxJQUVoQixNQUFPdE0sR0FDUGdnQixHQUFlLENBQUU1akIsTUFBTSxHQUFTNEQsRUFBT3NNLE1BSzNDLEdBQUlqSSxLQWFGNFosR0FYQUQsRUFBcUIsU0FBaUJtQyxHQUNwQzFDLEVBQVduaUIsS0FBTTJpQixHQUNqQi9ULEVBQVVpVyxHQUNWdGxCLEVBQUtzaUIsRUFBVTdoQixNQUNmLElBQUlnUixFQUFRcVAsRUFBaUJyZ0IsTUFDN0IsSUFDRTZrQixFQUFTbm5CLEdBQUtpbkIsR0FBaUIzVCxHQUFRdFQsR0FBS2duQixHQUFnQjFULElBQzVELE1BQU90TSxHQUNQZ2dCLEdBQWUxVCxFQUFPdE0sTUFHWXpHLFdBRXRDNGpCLEVBQVcsU0FBaUJnRCxHQUMxQnpFLEVBQWlCcGdCLEtBQU0sQ0FDckJ5UixLQUFNOFEsRUFDTnpoQixNQUFNLEVBQ05xakIsVUFBVSxFQUNWbG5CLFFBQVEsRUFDUm1uQixVQUFXLElBQUkxSyxFQUNmc0ssV0FBVyxFQUNYaFQsTUEvTVEsRUFnTlJyUSxXQUFPTixNQUdGcEMsVUFBWWdrQixFQUFZVSxFQUFrQixDQUlqRHRPLEtBQU0sU0FBY3lRLEVBQWFDLEdBQy9CLElBQUkvVCxFQUFRd1IsRUFBd0J4aUIsTUFDaEMyakIsRUFBV3BLLEVBQXFCa0ksRUFBbUJ6aEIsS0FBTTBpQixJQVM3RCxPQVJBMVIsRUFBTS9ULFFBQVMsRUFDZjBtQixFQUFTRSxJQUFLOWtCLEVBQVcrbEIsSUFBZUEsRUFDeENuQixFQUFTSSxLQUFPaGxCLEVBQVdnbUIsSUFBZUEsRUFDMUNwQixFQUFTNU8sT0FBU0wsRUFBVW5JLEVBQVF3SSxZQUFTMVUsRUE3TnJDLEdBOE5KMlEsRUFBTUEsTUFBa0JBLEVBQU1vVCxVQUFVeEssSUFBSStKLEdBQzNDdkIsR0FBVSxXQUNic0IsR0FBYUMsRUFBVTNTLE1BRWxCMlMsRUFBU3ZQLFNBSWxCLE1BQVMsU0FBVTJRLEdBQ2pCLE9BQU8va0IsS0FBS3FVLFVBQUtoVSxFQUFXMGtCLE1BR2hDakQsRUFBdUIsV0FDckIsSUFBSTFOLEVBQVUsSUFBSXlOLEVBQ2Q3USxFQUFRcVAsRUFBaUJqTSxHQUM3QnBVLEtBQUtvVSxRQUFVQSxFQUNmcFUsS0FBS2tWLFFBQVV4WCxHQUFLaW5CLEdBQWlCM1QsR0FDckNoUixLQUFLMlYsT0FBU2pZLEdBQUtnbkIsR0FBZ0IxVCxJQUVyQzJQLEVBQTJCOWhCLEVBQUkwYSxFQUF1QixTQUFVblYsR0FDOUQsT0FBT0EsSUFBTXNlLEdBQXNCdGUsSUFBTTJkLEVBQ3JDLElBQUlELEVBQXFCMWQsR0FDekJ3ZSxFQUE0QnhlLEtBRzdCMEQsR0FBVy9JLEVBQVd5aUIsSUFBa0JpQixJQUEyQnBrQixPQUFPSixXQUFXLENBQ3hGK2pCLEVBQWFTLEVBQXVCcE8sS0FFL0I4TyxLQUVIaGIsRUFBU3NhLEVBQXdCLFFBQVEsU0FBY3FDLEVBQWFDLEdBQ2xFLElBQUkxaUIsRUFBT3JDLEtBQ1gsT0FBTyxJQUFJMGlCLEdBQW1CLFNBQVV4TixFQUFTUyxHQUMvQ3BXLEVBQUt5aUIsRUFBWTNmLEVBQU02UyxFQUFTUyxNQUMvQnRCLEtBQUt5USxFQUFhQyxLQUVwQixDQUFFaEwsUUFBUSxJQUdiNVIsRUFBU3NhLEVBQXdCLFFBQVNFLEVBQXdCLE1BQUcsQ0FBRTVJLFFBQVEsS0FJakYsV0FDUzBJLEVBQXVCaGYsWUFDOUIsTUFBT2lCLElBR0x1RCxHQUNGQSxFQUFld2EsRUFBd0JFLEdBSzdDOWEsRUFBRSxDQUFFL0ksUUFBUSxFQUFNMFAsTUFBTSxFQUFNMUUsT0FBUWYsSUFBVSxDQUM5Q3JLLFFBQVNna0IsSUFHWDFiLEVBQWUwYixFQUFvQkgsR0FBUyxHQUFPLEdBQ25ETCxFQUFXSyxHQUVYUixFQUFpQnZWLEVBQVcrVixHQUc1QjFhLEVBQUUsQ0FBRW5GLE9BQVE2ZixFQUFTcFUsTUFBTSxFQUFNckUsT0FBUWYsSUFBVSxDQUdqRDRNLE9BQVEsU0FBZ0JxUCxHQUN0QixJQUFJbEUsRUFBYXZILEVBQXFCdlosTUFFdEMsT0FEQVQsRUFBS3VoQixFQUFXbkwsWUFBUXRWLEVBQVcya0IsR0FDNUJsRSxFQUFXMU0sV0FJdEJ2TSxFQUFFLENBQUVuRixPQUFRNmYsRUFBU3BVLE1BQU0sRUFBTXJFLE9BQVFoQyxHQUFXaUIsSUFBVSxDQUc1RG1NLFFBQVMsU0FBaUJzRSxHQUN4QixPQUFPdUgsRUFBZWpaLEdBQVc5SCxPQUFTK2hCLEVBQWlCVyxFQUFxQjFpQixLQUFNd1osTUFJMUYzUixFQUFFLENBQUVuRixPQUFRNmYsRUFBU3BVLE1BQU0sRUFBTXJFLE9BQVF5WixJQUF1QixDQUc5REMsSUFBSyxTQUFhMVEsR0FDaEIsSUFBSTFPLEVBQUlwRSxLQUNKOGdCLEVBQWF2SCxFQUFxQm5WLEdBQ2xDOFEsRUFBVTRMLEVBQVc1TCxRQUNyQlMsRUFBU21MLEVBQVduTCxPQUNwQnBWLEVBQVNxZ0IsR0FBUSxXQUNuQixJQUFJcUUsRUFBa0JyVyxFQUFVeEssRUFBRThRLFNBQzlCdEwsRUFBUyxHQUNUcVMsRUFBVSxFQUNWK0UsRUFBWSxFQUNoQnZDLEVBQVEzTCxHQUFVLFNBQVVzQixHQUMxQixJQUFJdlQsRUFBUW9iLElBQ1JnRixHQUFnQixFQUNwQkQsSUFDQXpoQixFQUFLMGxCLEVBQWlCN2dCLEVBQUdnUSxHQUFTQyxNQUFLLFNBQVUxVCxHQUMzQ3NnQixJQUNKQSxHQUFnQixFQUNoQnJYLEVBQU8vSSxHQUFTRixJQUNkcWdCLEdBQWE5TCxFQUFRdEwsTUFDdEIrTCxRQUVIcUwsR0FBYTlMLEVBQVF0TCxNQUd6QixPQURJckosRUFBT21FLE9BQU9pUixFQUFPcFYsRUFBT0ksT0FDekJtZ0IsRUFBVzFNLFNBSXBCOFEsS0FBTSxTQUFjcFMsR0FDbEIsSUFBSTFPLEVBQUlwRSxLQUNKOGdCLEVBQWF2SCxFQUFxQm5WLEdBQ2xDdVIsRUFBU21MLEVBQVduTCxPQUNwQnBWLEVBQVNxZ0IsR0FBUSxXQUNuQixJQUFJcUUsRUFBa0JyVyxFQUFVeEssRUFBRThRLFNBQ2xDdUosRUFBUTNMLEdBQVUsU0FBVXNCLEdBQzFCN1UsRUFBSzBsQixFQUFpQjdnQixFQUFHZ1EsR0FBU0MsS0FBS3lNLEVBQVc1TCxRQUFTUyxTQUkvRCxPQURJcFYsRUFBT21FLE9BQU9pUixFQUFPcFYsRUFBT0ksT0FDekJtZ0IsRUFBVzFNLDRCQy9ZdEIsSUFBSXZNLEVBQUksRUFBUSxPQUNaMkUsRUFBYSxFQUFRLE9BQ3JCUSxFQUFRLEVBQVEsT0FDaEJ0UCxFQUFPLEVBQVEsT0FDZmdkLEVBQWUsRUFBUSxPQUN2QnBXLEVBQVcsRUFBUSxPQUNuQmhGLEVBQVcsRUFBUSxPQUNuQm1ELEVBQVMsRUFBUSxPQUNqQlUsRUFBUSxFQUFRLE9BRWhCZzlCLEVBQWtCM3pCLEVBQVcsVUFBVyxhQUN4Q2lNLEVBQWtCcGEsT0FBT0osVUFDekIwRCxFQUFPLEdBQUdBLEtBTVZ5K0IsRUFBaUJqOUIsR0FBTSxXQUN6QixTQUFTeUQsS0FDVCxRQUFTdTVCLEdBQWdCLGNBQTZCLEdBQUl2NUIsYUFBY0EsTUFHdEV5NUIsR0FBWWw5QixHQUFNLFdBQ3BCZzlCLEdBQWdCLGtCQUdkcDNCLEVBQVNxM0IsR0FBa0JDLEVBRS9CeDRCLEVBQUUsQ0FBRW5GLE9BQVEsVUFBV3lMLE1BQU0sRUFBTXJFLE9BQVFmLEVBQVF0SyxLQUFNc0ssR0FBVSxDQUNqRWtHLFVBQVcsU0FBbUJxeEIsRUFBUW54QixHQUNwQ3VMLEVBQWE0bEIsR0FDYmg4QixFQUFTNkssR0FDVCxJQUFJb3hCLEVBQVlyZ0MsVUFBVUMsT0FBUyxFQUFJbWdDLEVBQVM1bEIsRUFBYXhhLFVBQVUsSUFDdkUsR0FBSW1nQyxJQUFhRCxFQUFnQixPQUFPRCxFQUFnQkcsRUFBUW54QixFQUFNb3hCLEdBQ3RFLEdBQUlELEdBQVVDLEVBQVcsQ0FFdkIsT0FBUXB4QixFQUFLaFAsUUFDWCxLQUFLLEVBQUcsT0FBTyxJQUFJbWdDLEVBQ25CLEtBQUssRUFBRyxPQUFPLElBQUlBLEVBQU9ueEIsRUFBSyxJQUMvQixLQUFLLEVBQUcsT0FBTyxJQUFJbXhCLEVBQU9ueEIsRUFBSyxHQUFJQSxFQUFLLElBQ3hDLEtBQUssRUFBRyxPQUFPLElBQUlteEIsRUFBT254QixFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUNqRCxLQUFLLEVBQUcsT0FBTyxJQUFJbXhCLEVBQU9ueEIsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUc1RCxJQUFJcXhCLEVBQVEsQ0FBQyxNQUViLE9BREF4ekIsRUFBTXJMLEVBQU02K0IsRUFBT3J4QixHQUNaLElBQUtuQyxFQUFNdFAsRUFBTTRpQyxFQUFRRSxJQUdsQyxJQUFJMzJCLEVBQVEwMkIsRUFBVXRpQyxVQUNsQnd5QixFQUFXaHVCLEVBQU9uRCxFQUFTdUssR0FBU0EsRUFBUTRPLEdBQzVDbFksRUFBU3lNLEVBQU1zekIsRUFBUTdQLEVBQVV0aEIsR0FDckMsT0FBTzdQLEVBQVNpQixHQUFVQSxFQUFTa3dCLHNCQ3JEdkMsSUFBSTVvQixFQUFJLEVBQVEsT0FDWnRJLEVBQU8sRUFBUSxPQUNmRCxFQUFXLEVBQVEsT0FDbkJnRixFQUFXLEVBQVEsT0FDbkJtOEIsRUFBbUIsRUFBUSxPQUMzQm42QixFQUFpQyxFQUFRLE9BQ3pDTyxFQUFpQixFQUFRLE9BZTdCZ0IsRUFBRSxDQUFFbkYsT0FBUSxVQUFXeUwsTUFBTSxHQUFRLENBQ25DbkUsSUFaRixTQUFTQSxFQUFJdEgsRUFBUWtGLEdBQ25CLElBQ0ltRyxFQUFZOVAsRUFEWnlpQyxFQUFXeGdDLFVBQVVDLE9BQVMsRUFBSXVDLEVBQVN4QyxVQUFVLEdBRXpELE9BQUlvRSxFQUFTNUIsS0FBWWcrQixFQUFpQmgrQixFQUFPa0YsSUFDakRtRyxFQUFhekgsRUFBK0J6SCxFQUFFNkQsRUFBUWtGLElBQy9CNjRCLEVBQWlCMXlCLEdBQ3BDQSxFQUFXcE4sV0FDUU4sSUFBbkIwTixFQUFXL0QsU0FBb0IzSixFQUFZZCxFQUFLd08sRUFBVy9ELElBQUswMkIsR0FDaEVwaEMsRUFBU3JCLEVBQVk0SSxFQUFlbkUsSUFBaUJzSCxFQUFJL0wsRUFBVzJKLEVBQWE4NEIsUUFBckYsc0JDbEJGLElBQUk3NEIsRUFBSSxFQUFRLE9BQ1ovSSxFQUFTLEVBQVEsT0FDakJrSSxFQUFpQixFQUFRLE9BRTdCYSxFQUFFLENBQUUvSSxRQUFRLEdBQVEsQ0FBRTZQLFFBQVMsS0FJL0IzSCxFQUFlbEksRUFBTzZQLFFBQVMsV0FBVyxvQkNSMUMsSUFBSXJILEVBQWMsRUFBUSxPQUN0QnhJLEVBQVMsRUFBUSxPQUNqQjBDLEVBQWMsRUFBUSxNQUN0QnlMLEVBQVcsRUFBUSxPQUNuQmdqQixFQUFvQixFQUFRLE9BQzVCL25CLEVBQThCLEVBQVEsT0FDdEM1SixFQUFpQixVQUNqQitaLEVBQXNCLFVBQ3RCeGEsRUFBZ0IsRUFBUSxPQUN4Qm0zQixFQUFXLEVBQVEsT0FDbkI3dkIsRUFBVyxFQUFRLE9BQ25CdzdCLEVBQWMsRUFBUSxPQUN0Qi9KLEVBQWdCLEVBQVEsT0FDeEJ6dUIsRUFBVyxFQUFRLE9BQ25CaEYsRUFBUSxFQUFRLE9BQ2hCaUQsRUFBUyxFQUFRLE9BQ2pCaXdCLEVBQXVCLGlCQUN2Qm5VLEVBQWEsRUFBUSxPQUNyQjllLEVBQWtCLEVBQVEsTUFDMUJ5ekIsRUFBc0IsRUFBUSxNQUM5QkMsRUFBa0IsRUFBUSxPQUUxQjlGLEVBQVE1dEIsRUFBZ0IsU0FDeEJ3OUIsRUFBZTloQyxFQUFPNHlCLE9BQ3RCRCxFQUFrQm1QLEVBQWEzaUMsVUFDL0I0aUMsRUFBYy9oQyxFQUFPK2hDLFlBQ3JCQyxFQUFXdC9CLEVBQVltL0IsR0FDdkI1N0IsRUFBT3ZELEVBQVlpd0IsRUFBZ0Ixc0IsTUFDbkNnVyxFQUFTdlosRUFBWSxHQUFHdVosUUFDeEJuVixFQUFVcEUsRUFBWSxHQUFHb0UsU0FDekJtN0IsRUFBZ0J2L0IsRUFBWSxHQUFHRCxTQUMvQjZELEVBQWM1RCxFQUFZLEdBQUcvRCxPQUU3QnVqQyxFQUFTLDJDQUNUdkssRUFBTSxLQUNOQyxFQUFNLEtBR051SyxFQUFjLElBQUlMLEVBQWFuSyxLQUFTQSxFQUV4Q3lCLEVBQWdCdEIsRUFBY3NCLGNBQzlCZCxFQUFnQlIsRUFBY1EsY0ErRWxDLEdBQUlucUIsRUFBUyxTQTdFSzNGLEtBQ2QyNUIsR0FBZS9JLEdBQWlCckIsR0FBdUJDLEdBQW1CM3pCLEdBQU0sV0FHaEYsT0FGQXV6QixFQUFJMUYsSUFBUyxFQUVONFAsRUFBYW5LLElBQVFBLEdBQU9tSyxFQUFhbEssSUFBUUEsR0FBaUMsUUFBMUJrSyxFQUFhbkssRUFBSyxVQXlFaEQsQ0FvRW5DLElBbkVBLElBQUl5SyxFQUFnQixTQUFnQkMsRUFBU25QLEdBQzNDLElBS0lvUCxFQUFVcEosRUFBUUwsRUFBUTBKLEVBQVM5Z0MsRUFBUXlRLEVBTDNDc3dCLEVBQWV6akMsRUFBYzR6QixFQUFpQnp4QixNQUM5Q3VoQyxFQUFrQnZNLEVBQVNtTSxHQUMzQkssT0FBOEJuaEMsSUFBVjJ4QixFQUNwQjBGLEVBQVMsR0FDVCtKLEVBQWFOLEVBR2pCLElBQUtHLEdBQWdCQyxHQUFtQkMsR0FBcUJMLEVBQVExOUIsY0FBZ0J5OUIsRUFDbkYsT0FBT0MsRUEwQ1QsSUF2Q0lJLEdBQW1CMWpDLEVBQWM0ekIsRUFBaUIwUCxNQUNwREEsRUFBVUEsRUFBUTM2QixPQUNkZzdCLElBQW1CeFAsRUFBUSxVQUFXeVAsRUFBYUEsRUFBV3pQLE1BQVE4TyxFQUFTVyxLQUdyRk4sT0FBc0I5Z0MsSUFBWjhnQyxFQUF3QixHQUFLaDhCLEVBQVNnOEIsR0FDaERuUCxPQUFrQjN4QixJQUFWMnhCLEVBQXNCLEdBQUs3c0IsRUFBUzZzQixHQUM1Q3lQLEVBQWFOLEVBRVR0SyxHQUF1QixXQUFZSixJQUNyQ3VCLElBQVdoRyxHQUFTK08sRUFBYy9PLEVBQU8sTUFBUSxLQUNyQ0EsRUFBUXBzQixFQUFRb3NCLEVBQU8sS0FBTSxLQUczQ29QLEVBQVdwUCxFQUVQa0csR0FBaUIsV0FBWXpCLElBQy9Ca0IsSUFBVzNGLEdBQVMrTyxFQUFjL08sRUFBTyxNQUFRLElBQ25Db0YsSUFBZXBGLEVBQVFwc0IsRUFBUW9zQixFQUFPLEtBQU0sS0FHeEQ4RSxJQUNGdUssRUFqRlUsU0FBVTl1QixHQVd4QixJQVZBLElBU0l3akIsRUFUQTUxQixFQUFTb1MsRUFBT3BTLE9BQ2hCVSxFQUFRLEVBQ1JOLEVBQVMsR0FDVG1oQyxFQUFRLEdBQ1JocEIsRUFBUSxHQUNSaXBCLEdBQVcsRUFDWEMsR0FBTSxFQUNOQyxFQUFVLEVBQ1ZDLEVBQVksR0FFVGpoQyxHQUFTVixFQUFRVSxJQUFTLENBRS9CLEdBQVksUUFEWmsxQixFQUFNaGIsRUFBT3hJLEVBQVExUixJQUVuQmsxQixHQUFZaGIsRUFBT3hJLElBQVUxUixRQUN4QixHQUFZLE1BQVJrMUIsRUFDVDRMLEdBQVcsT0FDTixJQUFLQSxFQUFVLFFBQVEsR0FDNUIsSUFBYSxNQUFSNUwsRUFDSDRMLEdBQVcsRUFDWCxNQUNGLElBQWEsTUFBUjVMLEVBQ0NoeEIsRUFBS2k4QixFQUFRNTdCLEVBQVltTixFQUFRMVIsRUFBUSxNQUMzQ0EsR0FBUyxFQUNUK2dDLEdBQU0sR0FFUnJoQyxHQUFVdzFCLEVBQ1Y4TCxJQUNBLFNBQ0YsSUFBYSxNQUFSOUwsR0FBZTZMLEVBQ2xCLEdBQWtCLEtBQWRFLEdBQW9CMTdCLEVBQU9zUyxFQUFPb3BCLEdBQ3BDLE1BQU0sSUFBSWpCLEVBQVksOEJBRXhCbm9CLEVBQU1vcEIsSUFBYSxFQUNuQkosRUFBTUEsRUFBTXZoQyxRQUFVLENBQUMyaEMsRUFBV0QsR0FDbENELEdBQU0sRUFDTkUsRUFBWSxHQUNaLFNBRUFGLEVBQUtFLEdBQWEvTCxFQUNqQngxQixHQUFVdzFCLEVBQ2YsTUFBTyxDQUFDeDFCLEVBQVFtaEMsR0F3Q0pLLENBQVVaLEdBQ3BCQSxFQUFVRSxFQUFRLEdBQ2xCM0osRUFBUzJKLEVBQVEsSUFHbkI5Z0MsRUFBUzB2QixFQUFrQjJRLEVBQWFPLEVBQVNuUCxHQUFRc1AsRUFBZXRoQyxLQUFPeXhCLEVBQWlCeVAsSUFFNUZsSixHQUFVTCxHQUFVRCxFQUFPdjNCLFVBQzdCNlEsRUFBUXFsQixFQUFxQjkxQixHQUN6QnkzQixJQUNGaG5CLEVBQU1nbkIsUUFBUyxFQUNmaG5CLEVBQU15bUIsSUFBTXlKLEVBcEhELFNBQVUzdUIsR0FNM0IsSUFMQSxJQUlJd2pCLEVBSkE1MUIsRUFBU29TLEVBQU9wUyxPQUNoQlUsRUFBUSxFQUNSTixFQUFTLEdBQ1RvaEMsR0FBVyxFQUVSOWdDLEdBQVNWLEVBQVFVLElBRVYsUUFEWmsxQixFQUFNaGIsRUFBT3hJLEVBQVExUixJQUtoQjhnQyxHQUFvQixNQUFSNUwsR0FHSCxNQUFSQSxFQUNGNEwsR0FBVyxFQUNNLE1BQVI1TCxJQUNUNEwsR0FBVyxHQUNYcGhDLEdBQVV3MUIsR0FOWngxQixHQUFVLFdBSlZBLEdBQVV3MUIsRUFBTWhiLEVBQU94SSxJQUFVMVIsR0FZbkMsT0FBT04sRUErRnVCeWhDLENBQWFiLEdBQVVDLElBRS9DekosSUFBUTNtQixFQUFNMm1CLFFBQVMsR0FDdkJELEVBQU92M0IsU0FBUTZRLEVBQU0wbUIsT0FBU0EsSUFHaEN5SixJQUFZTSxFQUFZLElBRTFCdjVCLEVBQTRCM0gsRUFBUSxTQUF5QixLQUFma2hDLEVBQW9CLE9BQVNBLEdBQzNFLE1BQU8vOEIsSUFFVCxPQUFPbkUsR0FHTDBoQyxFQUFRLFNBQVUxakMsR0FDcEJBLEtBQU8yaUMsR0FBaUI1aUMsRUFBZTRpQyxFQUFlM2lDLEVBQUssQ0FDekRrSixjQUFjLEVBQ2R1QyxJQUFLLFdBQWMsT0FBTzQyQixFQUFhcmlDLElBQ3ZDaVMsSUFBSyxTQUFVdFMsR0FBTTBpQyxFQUFhcmlDLEdBQU9MLE1BSXBDVixFQUFPNmEsRUFBb0J1b0IsR0FBZS8vQixFQUFRLEVBQUdyRCxFQUFLMkMsT0FBU1UsR0FDMUVvaEMsRUFBTXprQyxFQUFLcUQsTUFHYjR3QixFQUFnQmh1QixZQUFjeTlCLEVBQzlCQSxFQUFjampDLFVBQVl3ekIsRUFDMUJ0cEIsRUFBU3JKLEVBQVEsU0FBVW9pQyxHQUk3QmhmLEVBQVcsd0NDck1YLElBQUlyYSxFQUFJLEVBQVEsT0FDWjlDLEVBQU8sRUFBUSxPQUluQjhDLEVBQUUsQ0FBRW5GLE9BQVEsU0FBVW1ILE9BQU8sRUFBTUMsT0FBUSxJQUFJL0UsT0FBU0EsR0FBUSxDQUM5REEsS0FBTUEscUJDUFIsSUFBSWpHLEVBQVMsRUFBUSxPQUNqQndJLEVBQWMsRUFBUSxPQUN0QjR3QixFQUFnQix1QkFDaEI1ckIsRUFBVSxFQUFRLE9BQ2xCaE8sRUFBaUIsVUFDakIraEIsRUFBbUIsYUFFbkJvUixFQUFrQkMsT0FBT3p6QixVQUN6QmdCLEVBQVlILEVBQU9HLFVBSW5CcUksR0FBZTR3QixHQUNqQjU1QixFQUFlbXpCLEVBQWlCLFNBQVUsQ0FDeENocUIsY0FBYyxFQUNkdUMsSUFBSyxXQUNILEdBQUloSyxPQUFTeXhCLEVBQWIsQ0FHQSxHQUFzQixXQUFsQm5sQixFQUFRdE0sTUFDVixRQUFTcWdCLEVBQWlCcmdCLE1BQU0yM0IsT0FFbEMsTUFBTTE0QixFQUFVLDRFQ3BCdEIsRUFBUSxPQUNSLElBUU02eUIsRUFDQUMsRUFURmxxQixFQUFJLEVBQVEsT0FDWi9JLEVBQVMsRUFBUSxPQUNqQlMsRUFBTyxFQUFRLE9BQ2ZpQyxFQUFjLEVBQVEsTUFDdEJ6QyxFQUFhLEVBQVEsT0FDckJPLEVBQVcsRUFBUSxPQUVuQnV5QixHQUNFQyxHQUFhLEdBQ2JDLEVBQUssUUFDTmh0QixLQUFPLFdBRVIsT0FEQStzQixHQUFhLEVBQ04sSUFBSS9zQixLQUFLaUksTUFBTWhOLEtBQU1FLGFBRUosSUFBbkI2eEIsRUFBRzdyQixLQUFLLFFBQW1CNHJCLEdBR2hDaHNCLEVBQVFoSCxFQUFPZ0gsTUFDZm84QixFQUFVMWdDLEVBQVksSUFBSTBFLE1BSTlCMkIsRUFBRSxDQUFFbkYsT0FBUSxTQUFVbUgsT0FBTyxFQUFNQyxRQUFTK25CLEdBQXFCLENBQy9EM3JCLEtBQU0sU0FBVWlzQixHQUNkLElBQUlwdEIsRUFBTy9FLEtBQUsrRSxLQUNoQixJQUFLaEcsRUFBV2dHLEdBQU8sT0FBT205QixFQUFRbGlDLEtBQU1teUIsR0FDNUMsSUFBSTV4QixFQUFTaEIsRUFBS3dGLEVBQU0vRSxLQUFNbXlCLEdBQzlCLEdBQWUsT0FBWDV4QixJQUFvQmpCLEVBQVNpQixHQUMvQixNQUFNLElBQUl1RixFQUFNLHNFQUVsQixRQUFTdkYsbUNDaENiLElBQUlpQixFQUFjLEVBQVEsTUFDdEI2RyxFQUF1QixnQkFDdkJGLEVBQVcsRUFBUSxPQUNuQjdELEVBQVcsRUFBUSxPQUNuQnpHLEVBQWdCLEVBQVEsT0FDeEJ5bkIsRUFBWSxFQUFRLE9BQ3BCbmlCLEVBQVEsRUFBUSxPQUNoQnc5QixFQUFjLEVBQVEsT0FFdEJ3QixFQUFZLFdBQ1oxUSxFQUFrQkMsT0FBT3p6QixVQUN6Qm1rQyxFQUFhM1EsRUFBeUIsU0FDdENxUCxFQUFXdC9CLEVBQVltL0IsR0FFdkIwQixFQUFjbC9CLEdBQU0sV0FBYyxNQUF1RCxRQUFoRGkvQixFQUFXN2lDLEtBQUssQ0FBRWlILE9BQVEsSUFBS3dyQixNQUFPLFNBRS9Fc1EsRUFBaUJqNkIsR0FBd0IrNUIsRUFBV3o0QixNQUFRdzRCLEdBSTVERSxHQUFlQyxJQUNqQm42QixFQUFTdXBCLE9BQU96ekIsVUFBV2trQyxHQUFXLFdBQ3BDLElBQUkzTCxFQUFJbHlCLEVBQVN0RSxNQUNidWlDLEVBQUlqZCxFQUFVa1IsRUFBRWh3QixRQUNoQmc4QixFQUFLaE0sRUFBRXhFLE1BRVgsTUFBTyxJQUFNdVEsRUFBSSxJQURUamQsT0FBaUJqbEIsSUFBUG1pQyxHQUFvQjNrQyxFQUFjNHpCLEVBQWlCK0UsTUFBUSxVQUFXL0UsR0FBbUJxUCxFQUFTdEssR0FBS2dNLEtBRXhILENBQUV6b0IsUUFBUSxrQ0MzQkUsRUFBUSxNQUt6QjBvQixDQUFXLE9BQU8sU0FBVUMsR0FDMUIsT0FBTyxXQUFpQixPQUFPQSxFQUFLMWlDLEtBQU1FLFVBQVVDLE9BQVNELFVBQVUsUUFBS0csTUFMdkQsRUFBUSxzQ0NEL0IsSUFBSXdILEVBQUksRUFBUSxPQUNackcsRUFBYyxFQUFRLE1BQ3RCbWhDLEVBQWEsRUFBUSxNQUNyQjduQixFQUF5QixFQUFRLE9BQ2pDM1YsRUFBVyxFQUFRLE9BQ25CeTlCLEVBQXVCLEVBQVEsT0FFL0I3QixFQUFnQnYvQixFQUFZLEdBQUdELFNBSW5Dc0csRUFBRSxDQUFFbkYsT0FBUSxTQUFVbUgsT0FBTyxFQUFNQyxRQUFTODRCLEVBQXFCLGFBQWUsQ0FDOUV0aEMsU0FBVSxTQUFrQnVoQyxHQUMxQixTQUFVOUIsRUFDUjU3QixFQUFTMlYsRUFBdUI5YSxPQUNoQ21GLEVBQVN3OUIsRUFBV0UsSUFDcEIzaUMsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLG9DQ2hCNUMsSUFBSTBhLEVBQVMsZ0JBQ1Q1VixFQUFXLEVBQVEsT0FDbkI4YSxFQUFzQixFQUFRLE9BQzlCQyxFQUFpQixFQUFRLE9BRXpCaUYsRUFBa0Isa0JBQ2xCL0UsRUFBbUJILEVBQW9CelAsSUFDdkM2UCxFQUFtQkosRUFBb0J6TyxVQUFVMlQsR0FJckRqRixFQUFlOWdCLE9BQVEsVUFBVSxTQUFVa2hCLEdBQ3pDRixFQUFpQnBnQixLQUFNLENBQ3JCeVIsS0FBTTBULEVBQ041UyxPQUFRcE4sRUFBU21iLEdBQ2pCemYsTUFBTyxPQUlSLFdBQ0QsSUFHSXVrQixFQUhBcFUsRUFBUXFQLEVBQWlCcmdCLE1BQ3pCdVMsRUFBU3ZCLEVBQU11QixPQUNmMVIsRUFBUW1RLEVBQU1uUSxNQUVsQixPQUFJQSxHQUFTMFIsRUFBT3BTLE9BQWUsQ0FBRVEsV0FBT04sRUFBV1MsTUFBTSxJQUM3RHNrQixFQUFRckssRUFBT3hJLEVBQVExUixHQUN2Qm1RLEVBQU1uUSxPQUFTdWtCLEVBQU1qbEIsT0FDZCxDQUFFUSxNQUFPeWtCLEVBQU90a0IsTUFBTSxvQ0MzQi9CLElBQUl2QixFQUFPLEVBQVEsT0FDZnVqQyxFQUFnQyxFQUFRLE9BQ3hDeCtCLEVBQVcsRUFBUSxPQUNuQnNQLEVBQVcsRUFBUSxPQUNuQnpPLEVBQVcsRUFBUSxPQUNuQjJWLEVBQXlCLEVBQVEsT0FDakNwTCxFQUFZLEVBQVEsT0FDcEJxekIsRUFBcUIsRUFBUSxPQUM3QnJFLEVBQWEsRUFBUSxPQUd6Qm9FLEVBQThCLFNBQVMsU0FBVTlSLEVBQU9nUyxFQUFhQyxHQUNuRSxNQUFPLENBR0wsU0FBZWhTLEdBQ2IsSUFBSW54QixFQUFJZ2IsRUFBdUI5YSxNQUMzQmtqQyxFQUFvQjdpQyxNQUFWNHdCLE9BQXNCNXdCLEVBQVlxUCxFQUFVdWhCLEVBQVFELEdBQ2xFLE9BQU9rUyxFQUFVM2pDLEVBQUsyakMsRUFBU2pTLEVBQVFueEIsR0FBSyxJQUFJNHhCLE9BQU9ULEdBQVFELEdBQU83ckIsRUFBU3JGLEtBSWpGLFNBQVV5UyxHQUNSLElBQUk0d0IsRUFBSzcrQixFQUFTdEUsTUFDZDRhLEVBQUl6VixFQUFTb04sR0FDYjZ3QixFQUFNSCxFQUFnQkQsRUFBYUcsRUFBSXZvQixHQUUzQyxHQUFJd29CLEVBQUl0aUMsS0FBTSxPQUFPc2lDLEVBQUl6aUMsTUFFekIsSUFBS3dpQyxFQUFHcmtDLE9BQVEsT0FBTzQvQixFQUFXeUUsRUFBSXZvQixHQUV0QyxJQUFJeW9CLEVBQWNGLEVBQUd0YixRQUNyQnNiLEVBQUdoTSxVQUFZLEVBSWYsSUFIQSxJQUVJNTJCLEVBRkF1ZixFQUFJLEdBQ0o1YixFQUFJLEVBRWdDLFFBQWhDM0QsRUFBU20rQixFQUFXeUUsRUFBSXZvQixLQUFjLENBQzVDLElBQUkwb0IsRUFBV24rQixFQUFTNUUsRUFBTyxJQUMvQnVmLEVBQUU1YixHQUFLby9CLEVBQ1UsS0FBYkEsSUFBaUJILEVBQUdoTSxVQUFZNEwsRUFBbUJub0IsRUFBR2hILEVBQVN1dkIsRUFBR2hNLFdBQVlrTSxJQUNsRm4vQixJQUVGLE9BQWEsSUFBTkEsRUFBVSxLQUFPNGIscUNDMUM5QixJQUFJalksRUFBSSxFQUFRLE9BQ1owN0IsRUFBWSxlQUtoQjE3QixFQUFFLENBQUVuRixPQUFRLFNBQVVtSCxPQUFPLEVBQU1DLE9BSmxCLEVBQVEsUUFJZ0MsQ0FDdkQwNUIsU0FBVSxTQUFrQmxMLEdBQzFCLE9BQU9pTCxFQUFVdmpDLEtBQU1zNEIsRUFBV3A0QixVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csb0NDUjVFLElBQUl3SCxFQUFJLEVBQVEsT0FDWi9JLEVBQVMsRUFBUSxPQUNqQlMsRUFBTyxFQUFRLE9BQ2ZpQyxFQUFjLEVBQVEsTUFDdEJzWixFQUF5QixFQUFRLE9BQ2pDL2IsRUFBYSxFQUFRLE9BQ3JCaTJCLEVBQVcsRUFBUSxPQUNuQjd2QixFQUFXLEVBQVEsT0FDbkJ1SyxFQUFZLEVBQVEsT0FDcEJpeEIsRUFBYyxFQUFRLE9BQ3RCOEMsRUFBa0IsRUFBUSxPQUMxQnJnQyxFQUFrQixFQUFRLE1BQzFCMEUsRUFBVSxFQUFRLE9BRWxCNDdCLEVBQVV0Z0MsRUFBZ0IsV0FDMUJxdUIsRUFBa0JDLE9BQU96ekIsVUFDekJnQixFQUFZSCxFQUFPRyxVQUNuQjZoQyxFQUFXdC9CLEVBQVltL0IsR0FDdkJwL0IsRUFBVUMsRUFBWSxHQUFHRCxTQUN6QnFFLEVBQVVwRSxFQUFZLEdBQUdvRSxTQUN6QlIsRUFBYzVELEVBQVksR0FBRy9ELE9BQzdCbUcsRUFBTUMsS0FBS0QsSUFFWG05QixFQUFnQixTQUFVeHVCLEVBQVFveEIsRUFBYXRpQyxHQUNqRCxPQUFJQSxFQUFZa1IsRUFBT3BTLFFBQWdCLEVBQ25CLEtBQWhCd2pDLEVBQTJCdGlDLEVBQ3hCRSxFQUFRZ1IsRUFBUW94QixFQUFhdGlDLElBS3RDd0csRUFBRSxDQUFFbkYsT0FBUSxTQUFVbUgsT0FBTyxHQUFRLENBQ25DKzVCLFdBQVksU0FBb0JELEVBQWFFLEdBQzNDLElBQ0lDLEVBQVk5UixFQUFPNUssRUFBVTdVLEVBQVFzd0IsRUFBY2tCLEVBQW1CQyxFQUFjQyxFQUFXanlCLEVBRC9GbFMsRUFBSWdiLEVBQXVCOWEsTUFFM0JxYixFQUFXLEVBQ1g2b0IsRUFBaUIsRUFDakIzakMsRUFBUyxHQUNiLEdBQW1CLE1BQWZvakMsRUFBcUIsQ0FFdkIsSUFEQUcsRUFBYTlPLEVBQVMyTyxNQUVwQjNSLEVBQVE3c0IsRUFBUzJWLEVBQXVCLFVBQVcyVyxFQUMvQ2tTLEVBQVkzUixNQUNaOE8sRUFBUzZDLE9BRVBwaUMsRUFBUXl3QixFQUFPLE1BQU0sTUFBTS95QixFQUFVLG1EQUc3QyxHQURBbW9CLEVBQVcxWCxFQUFVaTBCLEVBQWFELEdBRWhDLE9BQU9ua0MsRUFBSzZuQixFQUFVdWMsRUFBYTdqQyxFQUFHK2pDLEdBQ2pDLEdBQUkvN0IsR0FBV2c4QixFQUNwQixPQUFPbCtCLEVBQVFULEVBQVNyRixHQUFJNmpDLEVBQWFFLEdBVTdDLElBUEF0eEIsRUFBU3BOLEVBQVNyRixHQUNsQitpQyxFQUFlMTlCLEVBQVN3K0IsSUFDeEJJLEVBQW9CaGxDLEVBQVc4a0MsTUFDUEEsRUFBZTErQixFQUFTMCtCLElBQ2hERyxFQUFlbkIsRUFBYTFpQyxPQUM1QjhqQyxFQUFZcmdDLEVBQUksRUFBR29nQyxHQUNuQjNvQixFQUFXMGxCLEVBQWN4dUIsRUFBUXN3QixFQUFjLElBQzFCLElBQWR4bkIsR0FDTHJKLEVBQWMreEIsRUFDVjUrQixFQUFTMCtCLEVBQWFoQixFQUFjeG5CLEVBQVU5SSxJQUM5Q2t4QixFQUFnQlosRUFBY3R3QixFQUFROEksRUFBVSxRQUFJaGIsRUFBV3dqQyxHQUNuRXRqQyxHQUFVNkUsRUFBWW1OLEVBQVEyeEIsRUFBZ0I3b0IsR0FBWXJKLEVBQzFEa3lCLEVBQWlCN29CLEVBQVcyb0IsRUFDNUIzb0IsRUFBVzBsQixFQUFjeHVCLEVBQVFzd0IsRUFBY3huQixFQUFXNG9CLEdBSzVELE9BSElDLEVBQWlCM3hCLEVBQU9wUyxTQUMxQkksR0FBVTZFLEVBQVltTixFQUFRMnhCLElBRXpCM2pDLG1DQ3hFWCxJQUFJeU0sRUFBUSxFQUFRLE9BQ2hCek4sRUFBTyxFQUFRLE9BQ2ZpQyxFQUFjLEVBQVEsTUFDdEJzaEMsRUFBZ0MsRUFBUSxPQUN4QzMvQixFQUFRLEVBQVEsT0FDaEJtQixFQUFXLEVBQVEsT0FDbkJ2RixFQUFhLEVBQVEsT0FDckI4YixFQUFzQixFQUFRLE9BQzlCakgsRUFBVyxFQUFRLE9BQ25Cek8sRUFBVyxFQUFRLE9BQ25CMlYsRUFBeUIsRUFBUSxPQUNqQ2lvQixFQUFxQixFQUFRLE9BQzdCcnpCLEVBQVksRUFBUSxPQUNwQit6QixFQUFrQixFQUFRLE9BQzFCL0UsRUFBYSxFQUFRLE9BR3JCZ0YsRUFGa0IsRUFBUSxLQUVoQnRnQyxDQUFnQixXQUMxQlEsRUFBTUMsS0FBS0QsSUFDWHdaLEVBQU12WixLQUFLdVosSUFDWDdmLEVBQVNpRSxFQUFZLEdBQUdqRSxRQUN4Qm9FLEVBQU9ILEVBQVksR0FBR0csTUFDdEJvL0IsRUFBZ0J2L0IsRUFBWSxHQUFHRCxTQUMvQjZELEVBQWM1RCxFQUFZLEdBQUcvRCxPQVE3QjBtQyxFQUVnQyxPQUEzQixJQUFJditCLFFBQVEsSUFBSyxNQUl0QncrQixJQUNFLElBQUlWLElBQzZCLEtBQTVCLElBQUlBLEdBQVMsSUFBSyxNQWlCN0JaLEVBQThCLFdBQVcsU0FBVXVCLEVBQUd0TixFQUFla00sR0FDbkUsSUFBSXFCLEVBQW9CRixFQUErQyxJQUFNLEtBRTdFLE1BQU8sQ0FHTCxTQUFpQlQsRUFBYUUsR0FDNUIsSUFBSS9qQyxFQUFJZ2IsRUFBdUI5YSxNQUMzQm9uQixFQUEwQi9tQixNQUFmc2pDLE9BQTJCdGpDLEVBQVlxUCxFQUFVaTBCLEVBQWFELEdBQzdFLE9BQU90YyxFQUNIN25CLEVBQUs2bkIsRUFBVXVjLEVBQWE3akMsRUFBRytqQyxHQUMvQnRrQyxFQUFLdzNCLEVBQWU1eEIsRUFBU3JGLEdBQUk2akMsRUFBYUUsSUFJcEQsU0FBVXR4QixFQUFRc3hCLEdBQ2hCLElBQUlWLEVBQUs3K0IsRUFBU3RFLE1BQ2Q0YSxFQUFJelYsRUFBU29OLEdBRWpCLEdBQ3lCLGlCQUFoQnN4QixJQUM2QyxJQUFwRDlDLEVBQWM4QyxFQUFjUyxLQUNXLElBQXZDdkQsRUFBYzhDLEVBQWMsTUFDNUIsQ0FDQSxJQUFJVCxFQUFNSCxFQUFnQmxNLEVBQWVvTSxFQUFJdm9CLEVBQUdpcEIsR0FDaEQsR0FBSVQsRUFBSXRpQyxLQUFNLE9BQU9zaUMsRUFBSXppQyxNQUczQixJQUFJb2pDLEVBQW9CaGxDLEVBQVc4a0MsR0FDOUJFLElBQW1CRixFQUFlMStCLEVBQVMwK0IsSUFFaEQsSUFBSS9rQyxFQUFTcWtDLEVBQUdya0MsT0FDaEIsR0FBSUEsRUFBUSxDQUNWLElBQUl1a0MsRUFBY0YsRUFBR3RiLFFBQ3JCc2IsRUFBR2hNLFVBQVksRUFHakIsSUFEQSxJQUFJb04sRUFBVSxLQUNELENBQ1gsSUFBSWhrQyxFQUFTbStCLEVBQVd5RSxFQUFJdm9CLEdBQzVCLEdBQWUsT0FBWHJhLEVBQWlCLE1BR3JCLEdBREFvQixFQUFLNGlDLEVBQVNoa0MsSUFDVHpCLEVBQVEsTUFHSSxLQURGcUcsRUFBUzVFLEVBQU8sTUFDVjRpQyxFQUFHaE0sVUFBWTRMLEVBQW1Cbm9CLEVBQUdoSCxFQUFTdXZCLEVBQUdoTSxXQUFZa00sSUFLcEYsSUFGQSxJQS9Fd0JubEMsRUErRXBCc21DLEVBQW9CLEdBQ3BCQyxFQUFxQixFQUNoQjk5QixFQUFJLEVBQUdBLEVBQUk0OUIsRUFBUXBrQyxPQUFRd0csSUFBSyxDQVd2QyxJQVJBLElBQUkrckIsRUFBVXZ0QixHQUZkNUUsRUFBU2drQyxFQUFRNTlCLElBRWEsSUFDMUIwVSxFQUFXelgsRUFBSXdaLEVBQUl2QyxFQUFvQnRhLEVBQU9NLE9BQVErWixFQUFFemEsUUFBUyxHQUNqRXd5QixFQUFXLEdBTU5yRyxFQUFJLEVBQUdBLEVBQUkvckIsRUFBT0osT0FBUW1zQixJQUFLM3FCLEVBQUtneEIsT0EzRnJDdHlCLEtBRGNuQyxFQTRGK0NxQyxFQUFPK3JCLElBM0Z4RHB1QixFQUFLa0IsT0FBT2xCLElBNEZoQyxJQUFJMDBCLEVBQWdCcnlCLEVBQU9tM0IsT0FDM0IsR0FBSXFNLEVBQW1CLENBQ3JCLElBQUlXLEVBQWVubkMsRUFBTyxDQUFDbTFCLEdBQVVDLEVBQVV0WCxFQUFVVCxRQUNuQ3ZhLElBQWxCdXlCLEdBQTZCanhCLEVBQUsraUMsRUFBYzlSLEdBQ3BELElBQUk1Z0IsRUFBYzdNLEVBQVM2SCxFQUFNNjJCLE9BQWN4akMsRUFBV3FrQyxTQUUxRDF5QixFQUFjeXhCLEVBQWdCL1EsRUFBUzlYLEVBQUdTLEVBQVVzWCxFQUFVQyxFQUFlaVIsR0FFM0V4b0IsR0FBWW9wQixJQUNkRCxHQUFxQnAvQixFQUFZd1YsRUFBRzZwQixFQUFvQnBwQixHQUFZckosRUFDcEV5eUIsRUFBcUJwcEIsRUFBV3FYLEVBQVF2eUIsUUFHNUMsT0FBT3FrQyxFQUFvQnAvQixFQUFZd1YsRUFBRzZwQixTQXZGWHRoQyxHQUFNLFdBQ3pDLElBQUk0dUIsRUFBSyxJQU9ULE9BTkFBLEVBQUdodEIsS0FBTyxXQUNSLElBQUl4RSxFQUFTLEdBRWIsT0FEQUEsRUFBT20zQixPQUFTLENBQUVycUIsRUFBRyxLQUNkOU0sR0FHeUIsTUFBM0IsR0FBR3FGLFFBQVFtc0IsRUFBSSxhQWtGY29TLEdBQW9CQyxpQ0N0STFELElBQUlwM0IsRUFBUSxFQUFRLE9BQ2hCek4sRUFBTyxFQUFRLE9BQ2ZpQyxFQUFjLEVBQVEsTUFDdEJzaEMsRUFBZ0MsRUFBUSxPQUN4QzlOLEVBQVcsRUFBUSxPQUNuQjF3QixFQUFXLEVBQVEsT0FDbkJ3VyxFQUF5QixFQUFRLE9BQ2pDMkcsRUFBcUIsRUFBUSxPQUM3QnNoQixFQUFxQixFQUFRLE9BQzdCbnZCLEVBQVcsRUFBUSxPQUNuQnpPLEVBQVcsRUFBUSxPQUNuQnVLLEVBQVksRUFBUSxPQUNwQlosRUFBYSxFQUFRLE9BQ3JCNjFCLEVBQWlCLEVBQVEsT0FDekJuVCxFQUFhLEVBQVEsT0FDckJvRixFQUFnQixFQUFRLE9BQ3hCenpCLEVBQVEsRUFBUSxPQUVoQmkwQixFQUFnQlIsRUFBY1EsY0FDOUJ3TixFQUFhLFdBQ2J4bkIsRUFBTXZaLEtBQUt1WixJQUNYeW5CLEVBQVEsR0FBR2xqQyxLQUNYb0QsRUFBT3ZELEVBQVksSUFBSXVELE1BQ3ZCcEQsRUFBT0gsRUFBWXFqQyxHQUNuQnovQixFQUFjNUQsRUFBWSxHQUFHL0QsT0FjakNxbEMsRUFBOEIsU0FBUyxTQUFVZ0MsRUFBT0MsRUFBYTlCLEdBQ25FLElBQUkrQixFQXFESixPQXpDRUEsRUFWMkIsS0FBM0IsT0FBT2w0QixNQUFNLFFBQVEsSUFFYyxHQUFuQyxPQUFPQSxNQUFNLFFBQVMsR0FBRzNNLFFBQ08sR0FBaEMsS0FBSzJNLE1BQU0sV0FBVzNNLFFBQ1UsR0FBaEMsSUFBSTJNLE1BQU0sWUFBWTNNLFFBRXRCLElBQUkyTSxNQUFNLFFBQVEzTSxPQUFTLEdBQzNCLEdBQUcyTSxNQUFNLE1BQU0zTSxPQUdDLFNBQVVxOUIsRUFBV3lILEdBQ25DLElBQUkxeUIsRUFBU3BOLEVBQVMyVixFQUF1QjlhLE9BQ3pDa2xDLE9BQWdCN2tDLElBQVY0a0MsRUFBc0JMLEVBQWFLLElBQVUsRUFDdkQsR0FBWSxJQUFSQyxFQUFXLE1BQU8sR0FDdEIsUUFBa0I3a0MsSUFBZG05QixFQUF5QixNQUFPLENBQUNqckIsR0FFckMsSUFBS3lpQixFQUFTd0ksR0FDWixPQUFPaitCLEVBQUt3bEMsRUFBYXh5QixFQUFRaXJCLEVBQVcwSCxHQVc5QyxJQVRBLElBUUl6NEIsRUFBTzBxQixFQUFXZ08sRUFSbEJ4TCxFQUFTLEdBQ1QzSCxHQUFTd0wsRUFBVXpGLFdBQWEsSUFBTSxLQUM3QnlGLEVBQVUxRixVQUFZLElBQU0sS0FDNUIwRixFQUFVM1YsUUFBVSxJQUFNLEtBQzFCMlYsRUFBVTdGLE9BQVMsSUFBTSxJQUNsQ3lOLEVBQWdCLEVBRWhCQyxFQUFnQixJQUFJM1QsT0FBTzhMLEVBQVVoM0IsT0FBUXdyQixFQUFRLE1BRWxEdmxCLEVBQVFsTixFQUFLaXlCLEVBQVk2VCxFQUFlOXlCLFFBQzdDNGtCLEVBQVlrTyxFQUFjbE8sV0FDVmlPLElBQ2R6akMsRUFBS2c0QixFQUFRdjBCLEVBQVltTixFQUFRNnlCLEVBQWUzNEIsRUFBTTVMLFFBQ2xENEwsRUFBTXRNLE9BQVMsR0FBS3NNLEVBQU01TCxNQUFRMFIsRUFBT3BTLFFBQVE2TSxFQUFNNjNCLEVBQU9sTCxFQUFRN3FCLEVBQVdyQyxFQUFPLElBQzVGMDRCLEVBQWExNEIsRUFBTSxHQUFHdE0sT0FDdEJpbEMsRUFBZ0JqTyxFQUNad0MsRUFBT3g1QixRQUFVK2tDLEtBRW5CRyxFQUFjbE8sWUFBYzFxQixFQUFNNUwsT0FBT3drQyxFQUFjbE8sWUFLN0QsT0FISWlPLElBQWtCN3lCLEVBQU9wUyxRQUN2QmdsQyxHQUFlcGdDLEVBQUtzZ0MsRUFBZSxLQUFLMWpDLEVBQUtnNEIsRUFBUSxJQUNwRGg0QixFQUFLZzRCLEVBQVF2MEIsRUFBWW1OLEVBQVE2eUIsSUFDakN6TCxFQUFPeDVCLE9BQVMra0MsRUFBTXAyQixFQUFXNnFCLEVBQVEsRUFBR3VMLEdBQU92TCxHQUduRCxJQUFJN3NCLFdBQU16TSxFQUFXLEdBQUdGLE9BQ2pCLFNBQVVxOUIsRUFBV3lILEdBQ25DLFlBQXFCNWtDLElBQWRtOUIsR0FBcUMsSUFBVnlILEVBQWMsR0FBSzFsQyxFQUFLd2xDLEVBQWEva0MsS0FBTXc5QixFQUFXeUgsSUFFckVGLEVBRWhCLENBR0wsU0FBZXZILEVBQVd5SCxHQUN4QixJQUFJbmxDLEVBQUlnYixFQUF1QjlhLE1BQzNCc2xDLEVBQXdCamxDLE1BQWJtOUIsT0FBeUJuOUIsRUFBWXFQLEVBQVU4dEIsRUFBV3NILEdBQ3pFLE9BQU9RLEVBQ0gvbEMsRUFBSytsQyxFQUFVOUgsRUFBVzE5QixFQUFHbWxDLEdBQzdCMWxDLEVBQUt5bEMsRUFBZTcvQixFQUFTckYsR0FBSTA5QixFQUFXeUgsSUFPbEQsU0FBVTF5QixFQUFRMHlCLEdBQ2hCLElBQUk5QixFQUFLNytCLEVBQVN0RSxNQUNkNGEsRUFBSXpWLEVBQVNvTixHQUNiNndCLEVBQU1ILEVBQWdCK0IsRUFBZTdCLEVBQUl2b0IsRUFBR3FxQixFQUFPRCxJQUFrQkQsR0FFekUsR0FBSTNCLEVBQUl0aUMsS0FBTSxPQUFPc2lDLEVBQUl6aUMsTUFFekIsSUFBSXlELEVBQUlxZCxFQUFtQjBoQixFQUFJelIsUUFFM0I2VCxFQUFrQnBDLEVBQUd0YixRQUNyQm1LLEdBQVNtUixFQUFHcEwsV0FBYSxJQUFNLEtBQ3RCb0wsRUFBR3JMLFVBQVksSUFBTSxLQUNyQnFMLEVBQUd0YixRQUFVLElBQU0sS0FDbkJ1UCxFQUFnQixJQUFNLEtBSS9Ca08sRUFBVyxJQUFJbGhDLEVBQUVnekIsRUFBZ0IsT0FBUytMLEVBQUczOEIsT0FBUyxJQUFNMjhCLEVBQUluUixHQUNoRWtULE9BQWdCN2tDLElBQVY0a0MsRUFBc0JMLEVBQWFLLElBQVUsRUFDdkQsR0FBWSxJQUFSQyxFQUFXLE1BQU8sR0FDdEIsR0FBaUIsSUFBYnRxQixFQUFFemEsT0FBYyxPQUF1QyxPQUFoQ3drQyxFQUFlVyxFQUFVMXFCLEdBQWMsQ0FBQ0EsR0FBSyxHQUl4RSxJQUhBLElBQUkybkIsRUFBSSxFQUNKbkksRUFBSSxFQUNKdGEsRUFBSSxHQUNEc2EsRUFBSXhmLEVBQUV6YSxRQUFRLENBQ25CbWxDLEVBQVNuTyxVQUFZQyxFQUFnQixFQUFJZ0QsRUFDekMsSUFDSXhZLEVBREE0akIsRUFBSWIsRUFBZVcsRUFBVWxPLEVBQWdCaHlCLEVBQVl3VixFQUFHd2YsR0FBS3hmLEdBRXJFLEdBQ1EsT0FBTjRxQixJQUNDNWpCLEVBQUl4RSxFQUFJeEosRUFBUzB4QixFQUFTbk8sV0FBYUMsRUFBZ0JnRCxFQUFJLElBQUt4ZixFQUFFemEsV0FBYW9pQyxFQUVoRm5JLEVBQUkySSxFQUFtQm5vQixFQUFHd2YsRUFBR21MLE9BQ3hCLENBRUwsR0FEQTVqQyxFQUFLbWUsRUFBRzFhLEVBQVl3VixFQUFHMm5CLEVBQUduSSxJQUN0QnRhLEVBQUUzZixTQUFXK2tDLEVBQUssT0FBT3BsQixFQUM3QixJQUFLLElBQUluWixFQUFJLEVBQUdBLEdBQUs2K0IsRUFBRXJsQyxPQUFTLEVBQUd3RyxJQUVqQyxHQURBaEYsRUFBS21lLEVBQUcwbEIsRUFBRTcrQixJQUNObVosRUFBRTNmLFNBQVcra0MsRUFBSyxPQUFPcGxCLEVBRS9Cc2EsRUFBSW1JLEVBQUkzZ0IsR0FJWixPQURBamdCLEVBQUttZSxFQUFHMWEsRUFBWXdWLEVBQUcybkIsSUFDaEJ6aUIsUUEzSDRCM2MsR0FBTSxXQUU3QyxJQUFJNHVCLEVBQUssT0FDTDBULEVBQWUxVCxFQUFHaHRCLEtBQ3RCZ3RCLEVBQUdodEIsS0FBTyxXQUFjLE9BQU8wZ0MsRUFBYXo0QixNQUFNaE4sS0FBTUUsWUFDeEQsSUFBSUssRUFBUyxLQUFLdU0sTUFBTWlsQixHQUN4QixPQUF5QixJQUFsQnh4QixFQUFPSixRQUE4QixNQUFkSSxFQUFPLElBQTRCLE1BQWRBLEVBQU8sTUF3SHJCNjJCLGlDQzFKdkMsSUFBSXZ2QixFQUFJLEVBQVEsT0FDWjY5QixFQUFRLGNBS1o3OUIsRUFBRSxDQUFFbkYsT0FBUSxTQUFVbUgsT0FBTyxFQUFNQyxPQUpOLEVBQVEsTUFJTTY3QixDQUF1QixTQUFXLENBQzNFNUssS0FBTSxXQUNKLE9BQU8ySyxFQUFNMWxDLHVDQ05qQixJQUFJNkgsRUFBSSxFQUFRLE9BQ1pQLEVBQWMsRUFBUSxPQUN0QnhJLEVBQVMsRUFBUSxPQUNqQjBDLEVBQWMsRUFBUSxNQUN0QjRFLEVBQVMsRUFBUSxPQUNqQnJILEVBQWEsRUFBUSxPQUNyQmxCLEVBQWdCLEVBQVEsT0FDeEJzSCxFQUFXLEVBQVEsT0FDbkI3RyxFQUFpQixVQUNqQmdnQixFQUE0QixFQUFRLE9BRXBDc25CLEVBQWU5bUMsRUFBT0gsT0FDdEJpbkIsRUFBa0JnZ0IsR0FBZ0JBLEVBQWEzbkMsVUFFbkQsR0FBSXFKLEdBQWV2SSxFQUFXNm1DLE9BQW9CLGdCQUFpQmhnQixTQUVsQ3ZsQixJQUEvQnVsQyxJQUFldm5CLGFBQ2QsQ0FDRCxJQUFJd25CLEVBQThCLEdBRTlCQyxFQUFnQixXQUNsQixJQUFJem5CLEVBQWNuZSxVQUFVQyxPQUFTLFFBQXNCRSxJQUFqQkgsVUFBVSxRQUFtQkcsRUFBWThFLEVBQVNqRixVQUFVLElBQ2xHSyxFQUFTMUMsRUFBYytuQixFQUFpQjVsQixNQUN4QyxJQUFJNGxDLEVBQWF2bkIsUUFFRGhlLElBQWhCZ2UsRUFBNEJ1bkIsSUFBaUJBLEVBQWF2bkIsR0FFOUQsTUFEb0IsS0FBaEJBLElBQW9Cd25CLEVBQTRCdGxDLElBQVUsR0FDdkRBLEdBR1QrZCxFQUEwQnduQixFQUFlRixHQUN6Q0UsRUFBYzduQyxVQUFZMm5CLEVBQzFCQSxFQUFnQm5pQixZQUFjcWlDLEVBRTlCLElBQUk5bkIsRUFBZ0QsZ0JBQWhDNWUsT0FBT3dtQyxFQUFhLFNBQ3BDRyxFQUFpQnZrQyxFQUFZb2tCLEVBQWdCemdCLFVBQzdDNmdDLEVBQWdCeGtDLEVBQVlva0IsRUFBZ0J4TSxTQUM1QzZYLEVBQVMsd0JBQ1RyckIsRUFBVXBFLEVBQVksR0FBR29FLFNBQ3pCUixFQUFjNUQsRUFBWSxHQUFHL0QsT0FFakNhLEVBQWVzbkIsRUFBaUIsY0FBZSxDQUM3Q25lLGNBQWMsRUFDZHVDLElBQUssV0FDSCxJQUFJeUwsRUFBU3V3QixFQUFjaG1DLE1BQ3ZCdVMsRUFBU3d6QixFQUFldHdCLEdBQzVCLEdBQUlyUCxFQUFPeS9CLEVBQTZCcHdCLEdBQVMsTUFBTyxHQUN4RCxJQUFJalgsRUFBT3dmLEVBQWdCNVksRUFBWW1OLEVBQVEsR0FBSSxHQUFLM00sRUFBUTJNLEVBQVEwZSxFQUFRLE1BQ2hGLE1BQWdCLEtBQVR6eUIsT0FBYzZCLEVBQVk3QixLQUlyQ3FKLEVBQUUsQ0FBRS9JLFFBQVEsRUFBTWdMLFFBQVEsR0FBUSxDQUNoQ25MLE9BQVFtbkMsc0JDeERnQixFQUFRLE1BSXBDemdCLENBQXNCLDBDQ0h0QixJQUFJeGQsRUFBSSxFQUFRLE9BQ1ovSSxFQUFTLEVBQVEsT0FDakIwTixFQUFhLEVBQVEsT0FDckJRLEVBQVEsRUFBUSxPQUNoQnpOLEVBQU8sRUFBUSxPQUNmaUMsRUFBYyxFQUFRLE1BQ3RCc0csRUFBVSxFQUFRLE9BQ2xCUixFQUFjLEVBQVEsT0FDdEIwVyxFQUFnQixFQUFRLE9BQ3hCN2EsRUFBUSxFQUFRLE9BQ2hCaUQsRUFBUyxFQUFRLE9BQ2pCL0ksRUFBVSxFQUFRLE9BQ2xCMEIsRUFBYSxFQUFRLE9BQ3JCTyxFQUFXLEVBQVEsT0FDbkJ6QixFQUFnQixFQUFRLE9BQ3hCNGYsRUFBVyxFQUFRLE9BQ25CblosRUFBVyxFQUFRLE9BQ25COUUsRUFBVyxFQUFRLE9BQ25CdUIsRUFBa0IsRUFBUSxPQUMxQjRHLEVBQWdCLEVBQVEsT0FDeEIyZCxFQUFZLEVBQVEsT0FDcEJ2ZSxFQUEyQixFQUFRLE9BQ25Dd2UsRUFBcUIsRUFBUSxPQUM3QjdOLEVBQWEsRUFBUSxPQUNyQjJCLEVBQTRCLEVBQVEsTUFDcENtTSxFQUE4QixFQUFRLE1BQ3RDbE0sRUFBOEIsRUFBUSxPQUN0Q2hULEVBQWlDLEVBQVEsT0FDekNDLEVBQXVCLEVBQVEsTUFDL0J5UCxFQUF5QixFQUFRLE9BQ2pDa0MsRUFBNkIsRUFBUSxPQUNyQ3BKLEVBQWEsRUFBUSxPQUNyQjNHLEVBQVcsRUFBUSxPQUNuQndJLEVBQVMsRUFBUSxPQUNqQkMsRUFBWSxFQUFRLE1BQ3BCQyxFQUFhLEVBQVEsTUFDckJ1SixFQUFNLEVBQVEsT0FDZGhYLEVBQWtCLEVBQVEsTUFDMUIyRyxFQUErQixFQUFRLE1BQ3ZDc2IsRUFBd0IsRUFBUSxPQUNoQ3JlLEVBQWlCLEVBQVEsT0FDekJpWixFQUFzQixFQUFRLE9BQzlCd0YsRUFBVyxpQkFFWEMsRUFBUzlVLEVBQVUsVUFDbkIrVSxFQUFTLFNBRVRoSSxFQUFldmEsRUFBZ0IsZUFFL0JnZCxFQUFtQkgsRUFBb0J6UCxJQUN2QzZQLEVBQW1CSixFQUFvQnpPLFVBQVVtVSxHQUVqRGxOLEVBQWtCcGEsT0FBZ0IsVUFDbENxVSxFQUFVNVQsRUFBT0gsT0FDakJpbkIsRUFBa0JsVCxHQUFXQSxFQUFpQixVQUM5Q3pULEdBQVlILEVBQU9HLFVBQ25CNG1CLEdBQVUvbUIsRUFBTyttQixRQUNqQkMsR0FBYXRaLEVBQVcsT0FBUSxhQUNoQ3VaLEdBQWlDemYsRUFBK0J6SCxFQUNoRW1uQixHQUF1QnpmLEVBQXFCMUgsRUFDNUNvbkIsR0FBNEJULEVBQTRCM21CLEVBQ3hEcW5CLEdBQTZCaE8sRUFBMkJyWixFQUN4RDhDLEdBQU9ILEVBQVksR0FBR0csTUFFdEJ3a0IsR0FBYXhWLEVBQU8sV0FDcEJ5VixHQUF5QnpWLEVBQU8sY0FDaEMwVixHQUF5QjFWLEVBQU8sNkJBQ2hDMlYsR0FBeUIzVixFQUFPLDZCQUNoQ3NOLEdBQXdCdE4sRUFBTyxPQUcvQjRWLElBQWNWLEtBQVlBLEdBQWlCLFlBQU1BLEdBQWlCLFVBQUVXLFVBR3BFQyxHQUFzQm5mLEdBQWVuRSxHQUFNLFdBQzdDLE9BRVMsR0FGRm9pQixFQUFtQlMsR0FBcUIsR0FBSSxJQUFLLENBQ3REaGMsSUFBSyxXQUFjLE9BQU9nYyxHQUFxQmhtQixLQUFNLElBQUssQ0FBRVcsTUFBTyxJQUFLME0sTUFDdEVBLEtBQ0QsU0FBVXZOLEVBQUcrUCxFQUFHbUksR0FDbkIsSUFBSTBPLEVBQTRCWCxHQUErQnROLEVBQWlCNUksR0FDNUU2VyxVQUFrQ2pPLEVBQWdCNUksR0FDdERtVyxHQUFxQmxtQixFQUFHK1AsRUFBR21JLEdBQ3ZCME8sR0FBNkI1bUIsSUFBTTJZLEdBQ3JDdU4sR0FBcUJ2TixFQUFpQjVJLEVBQUc2VyxJQUV6Q1YsR0FFQXhYLEdBQU8sU0FBVS9JLEVBQUs0WSxHQUN4QixJQUFJNUksRUFBUzBRLEdBQVcxZ0IsR0FBTzhmLEVBQW1CSyxHQU9sRCxPQU5BeEYsRUFBaUIzSyxFQUFRLENBQ3ZCaEUsS0FBTWtVLEVBQ05sZ0IsSUFBS0EsRUFDTDRZLFlBQWFBLElBRVYvVyxJQUFhbU8sRUFBTzRJLFlBQWNBLEdBQ2hDNUksR0FHTHFDLEdBQWtCLFNBQXdCaFksRUFBRytQLEVBQUdtSSxHQUM5Q2xZLElBQU0yWSxHQUFpQlgsR0FBZ0JzTyxHQUF3QnZXLEVBQUdtSSxHQUN0RTFULEVBQVN4RSxHQUNULElBQUl2QixFQUFNb0osRUFBY2tJLEdBRXhCLE9BREF2TCxFQUFTMFQsR0FDTDVSLEVBQU8rZixHQUFZNW5CLElBQ2hCeVosRUFBV3hRLFlBSVZwQixFQUFPdEcsRUFBRzRsQixJQUFXNWxCLEVBQUU0bEIsR0FBUW5uQixLQUFNdUIsRUFBRTRsQixHQUFRbm5CLElBQU8sR0FDMUR5WixFQUFhdU4sRUFBbUJ2TixFQUFZLENBQUV4USxXQUFZVCxFQUF5QixHQUFHLE9BSmpGWCxFQUFPdEcsRUFBRzRsQixJQUFTTSxHQUFxQmxtQixFQUFHNGxCLEVBQVEzZSxFQUF5QixFQUFHLEtBQ3BGakgsRUFBRTRsQixHQUFRbm5CLElBQU8sR0FJVmtvQixHQUFvQjNtQixFQUFHdkIsRUFBS3laLElBQzlCZ08sR0FBcUJsbUIsRUFBR3ZCLEVBQUt5WixJQUdwQzJPLEdBQW9CLFNBQTBCN21CLEVBQUcwWCxHQUNuRGxULEVBQVN4RSxHQUNULElBQUk4bUIsRUFBYTdsQixFQUFnQnlXLEdBQzdCaGEsRUFBT2thLEVBQVdrUCxHQUFZcnBCLE9BQU9zcEIsR0FBdUJELElBSWhFLE9BSEFuQixFQUFTam9CLEdBQU0sU0FBVWUsR0FDbEIrSSxJQUFlL0gsRUFBS29aLEdBQXVCaU8sRUFBWXJvQixJQUFNdVosR0FBZ0JoWSxFQUFHdkIsRUFBS3FvQixFQUFXcm9CLE9BRWhHdUIsR0FPTDZZLEdBQXdCLFNBQThCL0ksR0FDeEQsSUFBSUMsRUFBSWxJLEVBQWNpSSxHQUNsQnBJLEVBQWFqSSxFQUFLMm1CLEdBQTRCbG1CLEtBQU02UCxHQUN4RCxRQUFJN1AsT0FBU3lZLEdBQW1CclMsRUFBTytmLEdBQVl0VyxLQUFPekosRUFBT2dnQixHQUF3QnZXLFFBQ2xGckksSUFBZXBCLEVBQU9wRyxLQUFNNlAsS0FBT3pKLEVBQU8rZixHQUFZdFcsSUFBTXpKLEVBQU9wRyxLQUFNMGxCLElBQVcxbEIsS0FBSzBsQixHQUFRN1YsS0FDcEdySSxJQUdGdVEsR0FBNEIsU0FBa0NqWSxFQUFHK1AsR0FDbkUsSUFBSTNSLEVBQUs2QyxFQUFnQmpCLEdBQ3JCdkIsRUFBTW9KLEVBQWNrSSxHQUN4QixHQUFJM1IsSUFBT3VhLElBQW1CclMsRUFBTytmLEdBQVk1bkIsSUFBUzZILEVBQU9nZ0IsR0FBd0I3bkIsR0FBekYsQ0FDQSxJQUFJd1AsRUFBYWdZLEdBQStCN25CLEVBQUlLLEdBSXBELE9BSEl3UCxJQUFjM0gsRUFBTytmLEdBQVk1bkIsSUFBVTZILEVBQU9sSSxFQUFJd25CLElBQVd4bkIsRUFBR3duQixHQUFRbm5CLEtBQzlFd1AsRUFBV3ZHLFlBQWEsR0FFbkJ1RyxJQUdMb0ssR0FBdUIsU0FBNkJyWSxHQUN0RCxJQUFJNFksRUFBUXVOLEdBQTBCbGxCLEVBQWdCakIsSUFDbERTLEVBQVMsR0FJYixPQUhBa2xCLEVBQVMvTSxHQUFPLFNBQVVuYSxHQUNuQjZILEVBQU8rZixHQUFZNW5CLElBQVM2SCxFQUFPeUssRUFBWXRTLElBQU1vRCxHQUFLcEIsRUFBUWhDLE1BRWxFZ0MsR0FHTHNtQixHQUF5QixTQUErQi9tQixHQUMxRCxJQUFJZ25CLEVBQXNCaG5CLElBQU0yWSxFQUM1QkMsRUFBUXVOLEdBQTBCYSxFQUFzQlYsR0FBeUJybEIsRUFBZ0JqQixJQUNqR1MsRUFBUyxHQU1iLE9BTEFrbEIsRUFBUy9NLEdBQU8sU0FBVW5hLElBQ3BCNkgsRUFBTytmLEdBQVk1bkIsSUFBVXVvQixJQUF1QjFnQixFQUFPcVMsRUFBaUJsYSxJQUM5RW9ELEdBQUtwQixFQUFRNGxCLEdBQVc1bkIsT0FHckJnQyxHQWtKVCxHQTdJS3lkLElBZ0JIN1YsRUFGQXlkLEdBYkFsVCxFQUFVLFdBQ1IsR0FBSTdVLEVBQWMrbkIsRUFBaUI1bEIsTUFBTyxNQUFNZixHQUFVLCtCQUMxRCxJQUFJb2YsRUFBZW5lLFVBQVVDLGFBQTJCRSxJQUFqQkgsVUFBVSxHQUErQm9sQixFQUFVcGxCLFVBQVUsU0FBaENHLEVBQ2hFb0YsRUFBTTJVLEVBQUlpRSxHQUNWdkYsRUFBUyxTQUFVblksR0FDakJYLE9BQVN5WSxHQUFpQmxaLEVBQUt1WixFQUFRc04sR0FBd0J6bEIsR0FDL0R5RixFQUFPcEcsS0FBTTBsQixJQUFXdGYsRUFBT3BHLEtBQUswbEIsR0FBU2pnQixLQUFNekYsS0FBSzBsQixHQUFRamdCLElBQU8sR0FDM0VnaEIsR0FBb0J6bUIsS0FBTXlGLEVBQUtzQixFQUF5QixFQUFHcEcsS0FHN0QsT0FESTJHLEdBQWVpZixJQUFZRSxHQUFvQmhPLEVBQWlCaFQsRUFBSyxDQUFFZ0MsY0FBYyxFQUFNK0ksSUFBS3NJLElBQzdGdEssR0FBSy9JLEVBQUs0WSxLQUdnQixVQUVULFlBQVksV0FDcEMsT0FBT2dDLEVBQWlCcmdCLE1BQU15RixPQUdoQzBDLEVBQVN1SyxFQUFTLGlCQUFpQixTQUFVMkwsR0FDM0MsT0FBTzdQLEdBQUs0TCxFQUFJaUUsR0FBY0EsTUFHaENuRyxFQUEyQnJaLEVBQUk4WixHQUMvQnBTLEVBQXFCMUgsRUFBSWlaLEdBQ3pCOUIsRUFBdUJuWCxFQUFJOG5CLEdBQzNCcmdCLEVBQStCekgsRUFBSWtaLEdBQ25Dc0IsRUFBMEJ4YSxFQUFJMm1CLEVBQTRCM21CLEVBQUlzWixHQUM5RG1CLEVBQTRCemEsRUFBSWdvQixHQUVoQzljLEVBQTZCbEwsRUFBSSxTQUFVOEssR0FDekMsT0FBTzZFLEdBQUtwTCxFQUFnQnVHLEdBQU9BLElBR2pDckMsSUFFRjBlLEdBQXFCSixFQUFpQixjQUFlLENBQ25EbmUsY0FBYyxFQUNkdUMsSUFBSyxXQUNILE9BQU9xVyxFQUFpQnJnQixNQUFNcWUsZUFHN0J2VyxHQUNISyxFQUFTc1EsRUFBaUIsdUJBQXdCRSxHQUF1QixDQUFFb0IsUUFBUSxNQUt6RmxTLEVBQUUsQ0FBRS9JLFFBQVEsRUFBTTBQLE1BQU0sRUFBTTFFLFFBQVNrVSxFQUFldmYsTUFBT3VmLEdBQWlCLENBQzVFcmYsT0FBUStULElBR1YrUyxFQUFTL04sRUFBV3VHLEtBQXdCLFNBQVV0VSxHQUNwRDBiLEVBQXNCMWIsTUFHeEI5QixFQUFFLENBQUVuRixPQUFRaWpCLEVBQVF4WCxNQUFNLEVBQU1yRSxRQUFTa1UsR0FBaUIsQ0FHeEQsSUFBTyxTQUFVemYsR0FDZixJQUFJZ1UsRUFBUytTLEVBQVUvbUIsR0FDdkIsR0FBSTZILEVBQU9pZ0IsR0FBd0I5VCxHQUFTLE9BQU84VCxHQUF1QjlULEdBQzFFLElBQUlrRCxFQUFTL0MsRUFBUUgsR0FHckIsT0FGQThULEdBQXVCOVQsR0FBVWtELEVBQ2pDNlEsR0FBdUI3USxHQUFVbEQsRUFDMUJrRCxHQUlUc1IsT0FBUSxTQUFnQkMsR0FDdEIsSUFBS3ZKLEVBQVN1SixHQUFNLE1BQU0vbkIsR0FBVStuQixFQUFNLG9CQUMxQyxHQUFJNWdCLEVBQU9rZ0IsR0FBd0JVLEdBQU0sT0FBT1YsR0FBdUJVLElBRXpFQyxVQUFXLFdBQWNWLElBQWEsR0FDdENXLFVBQVcsV0FBY1gsSUFBYSxLQUd4QzFlLEVBQUUsQ0FBRW5GLE9BQVEsU0FBVXlMLE1BQU0sRUFBTXJFLFFBQVNrVSxFQUFldmYsTUFBTzZJLEdBQWUsQ0FHOUU3RSxPQS9IWSxTQUFnQjNDLEVBQUcwWCxHQUMvQixZQUFzQm5YLElBQWZtWCxFQUEyQitOLEVBQW1CemxCLEdBQUs2bUIsR0FBa0JwQixFQUFtQnpsQixHQUFJMFgsSUFpSW5HbFosZUFBZ0J3WixHQUdoQkgsaUJBQWtCZ1AsR0FHbEJqZ0IseUJBQTBCcVIsS0FHNUJsUSxFQUFFLENBQUVuRixPQUFRLFNBQVV5TCxNQUFNLEVBQU1yRSxRQUFTa1UsR0FBaUIsQ0FHMUQzRixvQkFBcUJGLEdBR3JCM0Msc0JBQXVCcVIsS0FLekJoZixFQUFFLENBQUVuRixPQUFRLFNBQVV5TCxNQUFNLEVBQU1yRSxPQUFRM0csR0FBTSxXQUFjbVcsRUFBNEJ6YSxFQUFFLE9BQVUsQ0FDcEcyVyxzQkFBdUIsU0FBK0J0WCxHQUNwRCxPQUFPb2IsRUFBNEJ6YSxFQUFFVyxFQUFTdEIsT0FNOUM0bkIsSUFXRmplLEVBQUUsQ0FBRW5GLE9BQVEsT0FBUXlMLE1BQU0sRUFBTXJFLFFBVkhrVSxHQUFpQjdhLEdBQU0sV0FDbEQsSUFBSXNTLEVBQVMvQyxJQUViLE1BQStCLFVBQXhCb1QsR0FBVyxDQUFDclEsS0FFZSxNQUE3QnFRLEdBQVcsQ0FBRXpZLEVBQUdvSSxLQUVjLE1BQTlCcVEsR0FBV3puQixPQUFPb1gsUUFHd0MsQ0FFL0QwUixVQUFXLFNBQW1CanBCLEVBQUlrcEIsRUFBVUMsR0FDMUMsSUFBSWxZLEVBQU9MLEVBQVc1TyxXQUNsQm9uQixFQUFZRixFQUNoQixJQUFLOW5CLEVBQVM4bkIsU0FBb0IvbUIsSUFBUG5DLEtBQW9CdWYsRUFBU3ZmLEdBTXhELE9BTEtiLEVBQVErcEIsS0FBV0EsRUFBVyxTQUFVN29CLEVBQUtvQyxHQUVoRCxHQURJNUIsRUFBV3VvQixLQUFZM21CLEVBQVFwQixFQUFLK25CLEVBQVd0bkIsS0FBTXpCLEVBQUtvQyxLQUN6RDhjLEVBQVM5YyxHQUFRLE9BQU9BLElBRS9Cd08sRUFBSyxHQUFLaVksRUFDSHBhLEVBQU04WSxHQUFZLEtBQU0zVyxPQU9oQ3lXLEVBQWdCakksR0FBZSxDQUNsQyxJQUFJdkUsR0FBVXdNLEVBQWdCeE0sUUFFOUJqUixFQUFTeWQsRUFBaUJqSSxHQUFjLFNBQVU0SixHQUVoRCxPQUFPaG9CLEVBQUs2WixHQUFTcFosU0FLekJnSCxFQUFlMEwsRUFBU2lULEdBRXhCOVUsRUFBVzZVLElBQVUsZ0NDblVyQixJQUFJeVYsRUFBc0IsRUFBUSxPQUM5Qng3QixFQUFvQixFQUFRLE9BQzVCa2IsRUFBc0IsRUFBUSxPQUU5QjhPLEVBQWN3UixFQUFvQnhSLGFBS3RDRSxFQUo2QnNSLEVBQW9CdFIsd0JBSTFCLE1BQU0sU0FBWWhwQixHQUN2QyxJQUFJZixFQUFJNnBCLEVBQVkzcEIsTUFDaEI0ZixFQUFNamdCLEVBQWtCRyxHQUN4Qm1tQyxFQUFnQnByQixFQUFvQmhhLEdBQ3BDbUQsRUFBSWlpQyxHQUFpQixFQUFJQSxFQUFnQnJtQixFQUFNcW1CLEVBQ25ELE9BQVFqaUMsRUFBSSxHQUFLQSxHQUFLNGIsT0FBT3ZmLEVBQVlQLEVBQUVrRSxvQ0NkN0MsSUFBSXhDLEVBQWMsRUFBUSxNQUN0QjI1QixFQUFzQixFQUFRLE9BRzlCK0ssRUFBb0Ixa0MsRUFGRCxFQUFRLE9BRzNCbW9CLEVBQWN3UixFQUFvQnhSLGFBS3RDRSxFQUo2QnNSLEVBQW9CdFIsd0JBSTFCLGNBQWMsU0FBb0JubkIsRUFBUW9CLEdBQy9ELE9BQU9vaUMsRUFBa0J2YyxFQUFZM3BCLE1BQU8wQyxFQUFRb0IsRUFBTzVELFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxvQ0NYbkcsSUFBSTg2QixFQUFzQixFQUFRLE9BQzlCZ0wsRUFBUyxlQUVUeGMsRUFBY3dSLEVBQW9CeFIsYUFLdENFLEVBSjZCc1IsRUFBb0J0Uix3QkFJMUIsU0FBUyxTQUFlem5CLEdBQzdDLE9BQU8rakMsRUFBT3hjLEVBQVkzcEIsTUFBT29DLEVBQVlsQyxVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csb0NDVHJGLElBQUk4NkIsRUFBc0IsRUFBUSxPQUM5QjU3QixFQUFPLEVBQVEsT0FDZjZtQyxFQUFRLEVBQVEsT0FFaEJ6YyxFQUFjd1IsRUFBb0J4UixhQUt0Q0UsRUFKNkJzUixFQUFvQnRSLHdCQUkxQixRQUFRLFNBQWNscEIsR0FDM0MsSUFBSVIsRUFBU0QsVUFBVUMsT0FDdkIsT0FBT1osRUFDTDZtQyxFQUNBemMsRUFBWTNwQixNQUNaVyxFQUNBUixFQUFTLEVBQUlELFVBQVUsUUFBS0csRUFDNUJGLEVBQVMsRUFBSUQsVUFBVSxRQUFLRyxvQ0NoQmhDLElBQUk4NkIsRUFBc0IsRUFBUSxPQUM5QjRCLEVBQVUsZ0JBQ1ZzSixFQUFxQixFQUFRLE9BRTdCMWMsRUFBY3dSLEVBQW9CeFIsYUFLdENFLEVBSjZCc1IsRUFBb0J0Uix3QkFJMUIsVUFBVSxTQUFnQnpuQixHQUMvQyxJQUFJZ04sRUFBTzJ0QixFQUFRcFQsRUFBWTNwQixNQUFPb0MsRUFBWWxDLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxHQUN4RixPQUFPZ21DLEVBQW1Ccm1DLEtBQU1vUCxtQ0NYbEMsSUFBSStyQixFQUFzQixFQUFRLE9BQzlCbUwsRUFBYSxtQkFFYjNjLEVBQWN3UixFQUFvQnhSLGFBS3RDRSxFQUo2QnNSLEVBQW9CdFIsd0JBSTFCLGFBQWEsU0FBbUIwYyxHQUNyRCxPQUFPRCxFQUFXM2MsRUFBWTNwQixNQUFPdW1DLEVBQVdybUMsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLG9DQ1R4RixJQUFJODZCLEVBQXNCLEVBQVEsT0FDOUI2QixFQUFRLGNBRVJyVCxFQUFjd1IsRUFBb0J4UixhQUt0Q0UsRUFKNkJzUixFQUFvQnRSLHdCQUkxQixRQUFRLFNBQWMwYyxHQUMzQyxPQUFPdkosRUFBTXJULEVBQVkzcEIsTUFBT3VtQyxFQUFXcm1DLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxvQ0NUbkYsSUFBSTg2QixFQUFzQixFQUFRLE9BQzlCMVYsRUFBVyxpQkFFWGtFLEVBQWN3UixFQUFvQnhSLGFBS3RDRSxFQUo2QnNSLEVBQW9CdFIsd0JBSTFCLFdBQVcsU0FBaUJ6bkIsR0FDakRxakIsRUFBU2tFLEVBQVkzcEIsTUFBT29DLEVBQVlsQyxVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csb0NDVGhGLElBQUk4NkIsRUFBc0IsRUFBUSxPQUM5QmdDLEVBQVksa0JBRVp4VCxFQUFjd1IsRUFBb0J4UixhQUt0Q0UsRUFKNkJzUixFQUFvQnRSLHdCQUkxQixZQUFZLFNBQWtCdUUsR0FDbkQsT0FBTytPLEVBQVV4VCxFQUFZM3BCLE1BQU9vdUIsRUFBZWx1QixVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csb0NDVDNGLElBQUk4NkIsRUFBc0IsRUFBUSxPQUM5QnFMLEVBQVcsaUJBRVg3YyxFQUFjd1IsRUFBb0J4UixhQUt0Q0UsRUFKNkJzUixFQUFvQnRSLHdCQUkxQixXQUFXLFNBQWlCdUUsR0FDakQsT0FBT29ZLEVBQVM3YyxFQUFZM3BCLE1BQU9vdUIsRUFBZWx1QixVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csb0NDVDFGLElBQUl2QixFQUFTLEVBQVEsT0FDakJxRSxFQUFRLEVBQVEsT0FDaEIzQixFQUFjLEVBQVEsTUFDdEIyNUIsRUFBc0IsRUFBUSxPQUM5QnNMLEVBQWlCLEVBQVEsT0FHekI5aEMsRUFGa0IsRUFBUSxLQUVmdkIsQ0FBZ0IsWUFDM0IybEIsRUFBYWpxQixFQUFPaXFCLFdBQ3BCMmQsRUFBY2xsQyxFQUFZaWxDLEVBQWU3OEIsUUFDekMrOEIsRUFBWW5sQyxFQUFZaWxDLEVBQWVqcEMsTUFDdkNvcEMsRUFBZXBsQyxFQUFZaWxDLEVBQWUvOEIsU0FDMUNpZ0IsRUFBY3dSLEVBQW9CeFIsWUFDbENFLEVBQXlCc1IsRUFBb0J0Uix1QkFDN0NyQixFQUFzQk8sR0FBY0EsRUFBVzlxQixVQUUvQzRvQyxHQUFXMWpDLEdBQU0sV0FDbkJxbEIsRUFBb0I3akIsR0FBVXBGLEtBQUssQ0FBQyxPQUdsQ3VuQyxJQUF1QnRlLEdBQ3RCQSxFQUFvQjVlLFFBQ3BCNGUsRUFBb0I3akIsS0FBYzZqQixFQUFvQjVlLFFBQ2xCLFdBQXBDNGUsRUFBb0I1ZSxPQUFPRCxLQUU1Qm85QixFQUFtQixXQUNyQixPQUFPTCxFQUFZL2MsRUFBWTNwQixRQUtqQzZwQixFQUF1QixXQUFXLFdBQ2hDLE9BQU8rYyxFQUFhamQsRUFBWTNwQixTQUMvQjZtQyxHQUdIaGQsRUFBdUIsUUFBUSxXQUM3QixPQUFPOGMsRUFBVWhkLEVBQVkzcEIsU0FDNUI2bUMsR0FHSGhkLEVBQXVCLFNBQVVrZCxFQUFrQkYsSUFBWUMsRUFBb0IsQ0FBRW45QixLQUFNLFdBRzNGa2dCLEVBQXVCbGxCLEVBQVVvaUMsRUFBa0JGLElBQVlDLEVBQW9CLENBQUVuOUIsS0FBTSx5Q0M1QzNGLElBQUl3eEIsRUFBc0IsRUFBUSxPQUM5QjM1QixFQUFjLEVBQVEsTUFFdEJtb0IsRUFBY3dSLEVBQW9CeFIsWUFDbENFLEVBQXlCc1IsRUFBb0J0Uix1QkFDN0NtZCxFQUFReGxDLEVBQVksR0FBR3VOLE1BSTNCOGEsRUFBdUIsUUFBUSxTQUFjMlQsR0FDM0MsT0FBT3dKLEVBQU1yZCxFQUFZM3BCLE1BQU93OUIsb0NDVmxDLElBQUlyQyxFQUFzQixFQUFRLE9BQzlCbnVCLEVBQVEsRUFBUSxPQUNoQmloQixFQUFlLEVBQVEsT0FFdkJ0RSxFQUFjd1IsRUFBb0J4UixhQUt0Q0UsRUFKNkJzUixFQUFvQnRSLHdCQUkxQixlQUFlLFNBQXFCdUUsR0FDekQsSUFBSWp1QixFQUFTRCxVQUFVQyxPQUN2QixPQUFPNk0sRUFBTWloQixFQUFjdEUsRUFBWTNwQixNQUFPRyxFQUFTLEVBQUksQ0FBQ2l1QixFQUFlbHVCLFVBQVUsSUFBTSxDQUFDa3VCLHFDQ1g5RixJQUFJK00sRUFBc0IsRUFBUSxPQUM5QnNDLEVBQU8sYUFDUGQsRUFBK0IsRUFBUSxPQUV2Q2hULEVBQWN3UixFQUFvQnhSLGFBS3RDRSxFQUo2QnNSLEVBQW9CdFIsd0JBSTFCLE9BQU8sU0FBYXpwQixHQUN6QyxPQUFPcTlCLEVBQUs5VCxFQUFZM3BCLE1BQU9JLEVBQU9GLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxHQUFXLFNBQVVQLEVBQUdLLEdBQ2xHLE9BQU8sSUFBS3c4QixFQUE2Qjc4QixHQUFsQyxDQUFzQ0ssdUNDWGpELElBQUlnN0IsRUFBc0IsRUFBUSxPQUM5QjhMLEVBQWUsZUFFZnRkLEVBQWN3UixFQUFvQnhSLGFBS3RDRSxFQUo2QnNSLEVBQW9CdFIsd0JBSTFCLGVBQWUsU0FBcUJ6bkIsR0FDekQsSUFBSWpDLEVBQVNELFVBQVVDLE9BQ3ZCLE9BQU84bUMsRUFBYXRkLEVBQVkzcEIsTUFBT29DLEVBQVlqQyxFQUFRQSxFQUFTLEVBQUlELFVBQVUsUUFBS0csb0NDVnpGLElBQUk4NkIsRUFBc0IsRUFBUSxPQUM5QnVDLEVBQVUsY0FFVi9ULEVBQWN3UixFQUFvQnhSLGFBS3RDRSxFQUo2QnNSLEVBQW9CdFIsd0JBSTFCLFVBQVUsU0FBZ0J6bkIsR0FDL0MsSUFBSWpDLEVBQVNELFVBQVVDLE9BQ3ZCLE9BQU91OUIsRUFBUS9ULEVBQVkzcEIsTUFBT29DLEVBQVlqQyxFQUFRQSxFQUFTLEVBQUlELFVBQVUsUUFBS0csb0NDVnBGLElBQUk4NkIsRUFBc0IsRUFBUSxPQUU5QnhSLEVBQWN3UixFQUFvQnhSLFlBQ2xDRSxFQUF5QnNSLEVBQW9CdFIsdUJBQzdDdE0sRUFBUTFaLEtBQUswWixNQUlqQnNNLEVBQXVCLFdBQVcsV0FNaEMsSUFMQSxJQUlJbHBCLEVBSkEwQixFQUFPckMsS0FDUEcsRUFBU3dwQixFQUFZdG5CLEdBQU1sQyxPQUMzQnd1QixFQUFTcFIsRUFBTXBkLEVBQVMsR0FDeEJVLEVBQVEsRUFFTEEsRUFBUTh0QixHQUNiaHVCLEVBQVEwQixFQUFLeEIsR0FDYndCLEVBQUt4QixLQUFXd0IsSUFBT2xDLEdBQ3ZCa0MsRUFBS2xDLEdBQVVRLEVBQ2YsT0FBTzBCLGtDQ2xCWCxJQUFJdkQsRUFBUyxFQUFRLE9BQ2pCUyxFQUFPLEVBQVEsT0FDZjQ3QixFQUFzQixFQUFRLE9BQzlCeDdCLEVBQW9CLEVBQVEsT0FDNUIyN0IsRUFBVyxFQUFRLE9BQ25CdjZCLEVBQWtCLEVBQVEsT0FDMUJvQyxFQUFRLEVBQVEsT0FFaEIybkIsRUFBYWhzQixFQUFPZ3NCLFdBQ3BCM0MsRUFBWXJwQixFQUFPcXBCLFVBQ25CQyxFQUFxQkQsR0FBYUEsRUFBVWxxQixVQUM1Q2lwQyxFQUFPOWUsR0FBc0JBLEVBQW1CNVgsSUFDaERtWixFQUFjd1IsRUFBb0J4UixZQUNsQ0UsRUFBeUJzUixFQUFvQnRSLHVCQUU3Q3NkLEdBQWlEaGtDLEdBQU0sV0FFekQsSUFBSUssRUFBUSxJQUFJNmtCLGtCQUFrQixHQUVsQyxPQURBOW9CLEVBQUsybkMsRUFBTTFqQyxFQUFPLENBQUVyRCxPQUFRLEVBQUcsRUFBRyxHQUFLLEdBQ25CLElBQWJxRCxFQUFNLE1BSVg0akMsRUFBZ0JELEdBQWlEaE0sRUFBb0J4UywyQkFBNkJ4bEIsR0FBTSxXQUMxSCxJQUFJSyxFQUFRLElBQUkya0IsRUFBVSxHQUcxQixPQUZBM2tCLEVBQU1nTixJQUFJLEdBQ1ZoTixFQUFNZ04sSUFBSSxJQUFLLEdBQ0ssSUFBYmhOLEVBQU0sSUFBeUIsSUFBYkEsRUFBTSxNQUtqQ3FtQixFQUF1QixPQUFPLFNBQWFocUIsR0FDekM4cEIsRUFBWTNwQixNQUNaLElBQUk2c0IsRUFBU3lPLEVBQVNwN0IsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLEVBQVcsR0FDbkVnWCxFQUFNdFcsRUFBZ0JsQixHQUMxQixHQUFJc25DLEVBQStDLE9BQU81bkMsRUFBSzJuQyxFQUFNbG5DLEtBQU1xWCxFQUFLd1YsR0FDaEYsSUFBSTFzQixFQUFTSCxLQUFLRyxPQUNkeWYsRUFBTWpnQixFQUFrQjBYLEdBQ3hCeFcsRUFBUSxFQUNaLEdBQUkrZSxFQUFNaU4sRUFBUzFzQixFQUFRLE1BQU0ycUIsRUFBVyxnQkFDNUMsS0FBT2pxQixFQUFRK2UsR0FBSzVmLEtBQUs2c0IsRUFBU2hzQixHQUFTd1csRUFBSXhXLFFBQzdDc21DLEdBQWlEQyxpQ0MxQ3JELElBQUlqTSxFQUFzQixFQUFRLE9BQzlCd0IsRUFBK0IsRUFBUSxPQUN2Q3g1QixFQUFRLEVBQVEsT0FDaEIyTCxFQUFhLEVBQVEsT0FFckI2YSxFQUFjd1IsRUFBb0J4UixhQVV0Q0UsRUFUNkJzUixFQUFvQnRSLHdCQVMxQixTQUFTLFNBQWUvbEIsRUFBT0MsR0FNcEQsSUFMQSxJQUFJcUwsRUFBT04sRUFBVzZhLEVBQVkzcEIsTUFBTzhELEVBQU9DLEdBQzVDSyxFQUFJdTRCLEVBQTZCMzhCLE1BQ2pDYSxFQUFRLEVBQ1JWLEVBQVNpUCxFQUFLalAsT0FDZEksRUFBUyxJQUFJNkQsRUFBRWpFLEdBQ1pBLEVBQVNVLEdBQU9OLEVBQU9NLEdBQVN1TyxFQUFLdk8sS0FDNUMsT0FBT04sSUFkSTRDLEdBQU0sV0FFakIsSUFBSWdsQixVQUFVLEdBQUcxcUIsMENDVm5CLElBQUkwOUIsRUFBc0IsRUFBUSxPQUM5QjBDLEVBQVEsY0FFUmxVLEVBQWN3UixFQUFvQnhSLGFBS3RDRSxFQUo2QnNSLEVBQW9CdFIsd0JBSTFCLFFBQVEsU0FBY3puQixHQUMzQyxPQUFPeTdCLEVBQU1sVSxFQUFZM3BCLE1BQU9vQyxFQUFZbEMsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtHLG9DQ1RwRixJQUFJdkIsRUFBUyxFQUFRLE9BQ2pCMEMsRUFBYyxFQUFRLE1BQ3RCMkIsRUFBUSxFQUFRLE9BQ2hCeUwsRUFBWSxFQUFRLE9BQ3BCeTRCLEVBQWUsRUFBUSxPQUN2QmxNLEVBQXNCLEVBQVEsT0FDOUJtTSxFQUFLLEVBQVEsT0FDYkMsRUFBYSxFQUFRLE9BQ3JCQyxFQUFLLEVBQVEsTUFDYkMsRUFBUyxFQUFRLE9BRWpCdHFDLEVBQVEyQixFQUFPM0IsTUFDZndzQixFQUFjd1IsRUFBb0J4UixZQUNsQ0UsRUFBeUJzUixFQUFvQnRSLHVCQUM3Q1osRUFBY25xQixFQUFPbXFCLFlBQ3JCeWUsRUFBVXplLEdBQWV6bkIsRUFBWXluQixFQUFZaHJCLFVBQVVxM0IsTUFHM0RxUyxLQUErQkQsR0FBYXZrQyxHQUFNLFdBQ3BEdWtDLEVBQVEsSUFBSXplLEVBQVksR0FBSSxVQUN4QjlsQixHQUFNLFdBQ1Z1a0MsRUFBUSxJQUFJemUsRUFBWSxHQUFJLFFBRzFCMmUsSUFBZ0JGLElBQVl2a0MsR0FBTSxXQUVwQyxHQUFJcWtDLEVBQUksT0FBT0EsRUFBSyxHQUNwQixHQUFJRixFQUFJLE9BQU9BLEVBQUssR0FDcEIsR0FBSUMsRUFBWSxPQUFPLEVBQ3ZCLEdBQUlFLEVBQVEsT0FBT0EsRUFBUyxJQUU1QixJQUVJNW1DLEVBQU9nbkMsRUFGUHJrQyxFQUFRLElBQUl5bEIsRUFBWSxLQUN4QjZlLEVBQVczcUMsRUFBTSxLQUdyQixJQUFLMEQsRUFBUSxFQUFHQSxFQUFRLElBQUtBLElBQzNCZ25DLEVBQU1obkMsRUFBUSxFQUNkMkMsRUFBTTNDLEdBQVMsSUFBTUEsRUFDckJpbkMsRUFBU2puQyxHQUFTQSxFQUFRLEVBQUlnbkMsRUFBTSxFQU90QyxJQUpBSCxFQUFRbGtDLEdBQU8sU0FBVTZKLEVBQUdDLEdBQzFCLE9BQVFELEVBQUksRUFBSSxJQUFNQyxFQUFJLEVBQUksTUFHM0J6TSxFQUFRLEVBQUdBLEVBQVEsSUFBS0EsSUFDM0IsR0FBSTJDLEVBQU0zQyxLQUFXaW5DLEVBQVNqbkMsR0FBUSxPQUFPLEtBa0JqRGdwQixFQUF1QixRQUFRLFNBQWM2RSxHQUUzQyxZQURrQnJ1QixJQUFkcXVCLEdBQXlCOWYsRUFBVThmLEdBQ25Da1osRUFBb0JGLEVBQVExbkMsS0FBTTB1QixHQUUvQjJZLEVBQWExZCxFQUFZM3BCLE1BbEJiLFNBQVUwdUIsR0FDN0IsT0FBTyxTQUFVbFYsRUFBR3V1QixHQUNsQixZQUFrQjFuQyxJQUFkcXVCLEdBQWlDQSxFQUFVbFYsRUFBR3V1QixJQUFNLEVBRXBEQSxHQUFNQSxHQUFXLEVBRWpCdnVCLEdBQU1BLEVBQVUsRUFDVixJQUFOQSxHQUFpQixJQUFOdXVCLEVBQWdCLEVBQUl2dUIsRUFBSSxHQUFLLEVBQUl1dUIsRUFBSSxFQUFJLEdBQUssRUFDdER2dUIsRUFBSXV1QixHQVUwQkMsQ0FBZXRaLE9BQ3BEa1osR0FBZUQsaUNDckVuQixJQUFJeE0sRUFBc0IsRUFBUSxPQUM5QnZuQixFQUFXLEVBQVEsT0FDbkI1UyxFQUFrQixFQUFRLE9BQzFCMjdCLEVBQStCLEVBQVEsT0FFdkNoVCxFQUFjd1IsRUFBb0J4UixhQUt0Q0UsRUFKNkJzUixFQUFvQnRSLHdCQUkxQixZQUFZLFNBQWtCb2UsRUFBT2xrQyxHQUMxRCxJQUFJakUsRUFBSTZwQixFQUFZM3BCLE1BQ2hCRyxFQUFTTCxFQUFFSyxPQUNYK25DLEVBQWFsbkMsRUFBZ0JpbkMsRUFBTzluQyxHQUV4QyxPQUFPLElBREN3OEIsRUFBNkI3OEIsR0FDOUIsQ0FDTEEsRUFBRWtvQixPQUNGbG9CLEVBQUVvc0IsV0FBYWdjLEVBQWFwb0MsRUFBRTI3QixrQkFDOUI3bkIsUUFBa0J2VCxJQUFSMEQsRUFBb0I1RCxFQUFTYSxFQUFnQitDLEVBQUs1RCxJQUFXK25DLHFDQ2xCM0UsSUFBSXBwQyxFQUFTLEVBQVEsT0FDakJrTyxFQUFRLEVBQVEsT0FDaEJtdUIsRUFBc0IsRUFBUSxPQUM5Qmg0QixFQUFRLEVBQVEsT0FDaEIyTCxFQUFhLEVBQVEsT0FFckJxWixFQUFZcnBCLEVBQU9xcEIsVUFDbkJ3QixFQUFjd1IsRUFBb0J4UixZQUNsQ0UsRUFBeUJzUixFQUFvQnRSLHVCQUM3Q3NlLEVBQWtCLEdBQUdDLGVBR3JCQyxJQUF5QmxnQixHQUFhaGxCLEdBQU0sV0FDOUNnbEMsRUFBZ0I1b0MsS0FBSyxJQUFJNG9CLEVBQVUsT0FXckMwQixFQUF1QixrQkFBa0IsV0FDdkMsT0FBTzdjLEVBQ0xtN0IsRUFDQUUsRUFBdUJ2NUIsRUFBVzZhLEVBQVkzcEIsT0FBUzJwQixFQUFZM3BCLE1BQ25FOE8sRUFBVzVPLGNBWkZpRCxHQUFNLFdBQ2pCLE1BQU8sQ0FBQyxFQUFHLEdBQUdpbEMsa0JBQW9CLElBQUlqZ0IsRUFBVSxDQUFDLEVBQUcsSUFBSWlnQixzQkFDbkRqbEMsR0FBTSxXQUNYZ2xCLEVBQVVscUIsVUFBVW1xQyxlQUFlN29DLEtBQUssQ0FBQyxFQUFHLHNDQ25COUMsSUFBSXNxQixFQUF5QixnQ0FDekIxbUIsRUFBUSxFQUFRLE9BQ2hCckUsRUFBUyxFQUFRLE9BQ2pCMEMsRUFBYyxFQUFRLE1BRXRCdW5CLEVBQWFqcUIsRUFBT2lxQixXQUNwQnVmLEVBQXNCdmYsR0FBY0EsRUFBVzlxQixXQUFhLEdBQzVEc3FDLEVBQWdCLEdBQUdwakMsU0FDbkI0SixFQUFPdk4sRUFBWSxHQUFHdU4sTUFFdEI1TCxHQUFNLFdBQWNvbEMsRUFBY2hwQyxLQUFLLFNBQ3pDZ3BDLEVBQWdCLFdBQ2QsT0FBT3g1QixFQUFLL08sUUFJaEIsSUFBSXdvQyxFQUFzQkYsRUFBb0JuakMsVUFBWW9qQyxFQUkxRDFlLEVBQXVCLFdBQVkwZSxFQUFlQyxvQkNyQmhCLEVBQVEsTUFJMUNDLENBQTRCLFNBQVMsU0FBVS9GLEdBQzdDLE9BQU8sU0FBb0J2d0IsRUFBTStaLEVBQVkvckIsR0FDM0MsT0FBT3VpQyxFQUFLMWlDLEtBQU1tUyxFQUFNK1osRUFBWS9yQix3QkNMeEMsRUFBUSx3QkNEUixJQUFJckIsRUFBUyxFQUFRLE9BQ2pCMG9CLEVBQWUsRUFBUSxPQUN2QjRKLEVBQXdCLEVBQVEsT0FDaEN6dUIsRUFBVSxFQUFRLE9BQ2xCdUYsRUFBOEIsRUFBUSxPQUV0Q3dnQyxFQUFrQixTQUFVL2dCLEdBRTlCLEdBQUlBLEdBQXVCQSxFQUFvQmhsQixVQUFZQSxFQUFTLElBQ2xFdUYsRUFBNEJ5ZixFQUFxQixVQUFXaGxCLEdBQzVELE1BQU8rQixHQUNQaWpCLEVBQW9CaGxCLFFBQVVBLElBSWxDLElBQUssSUFBSThrQixLQUFtQkQsRUFDdEJBLEVBQWFDLElBQ2ZpaEIsRUFBZ0I1cEMsRUFBTzJvQixJQUFvQjNvQixFQUFPMm9CLEdBQWlCeHBCLFdBSXZFeXFDLEVBQWdCdFgsb0JDckJoQixJQUFJdHlCLEVBQVMsRUFBUSxPQUNqQjBvQixFQUFlLEVBQVEsT0FDdkI0SixFQUF3QixFQUFRLE9BQ2hDdVgsRUFBdUIsRUFBUSxPQUMvQnpnQyxFQUE4QixFQUFRLE9BQ3RDOUUsRUFBa0IsRUFBUSxNQUUxQnVCLEVBQVd2QixFQUFnQixZQUMzQm1DLEVBQWdCbkMsRUFBZ0IsZUFDaEN3bEMsRUFBY0QsRUFBcUIvK0IsT0FFbkM4K0IsRUFBa0IsU0FBVS9nQixFQUFxQkYsR0FDbkQsR0FBSUUsRUFBcUIsQ0FFdkIsR0FBSUEsRUFBb0JoakIsS0FBY2lrQyxFQUFhLElBQ2pEMWdDLEVBQTRCeWYsRUFBcUJoakIsRUFBVWlrQyxHQUMzRCxNQUFPbGtDLEdBQ1BpakIsRUFBb0JoakIsR0FBWWlrQyxFQUtsQyxHQUhLamhCLEVBQW9CcGlCLElBQ3ZCMkMsRUFBNEJ5ZixFQUFxQnBpQixFQUFla2lCLEdBRTlERCxFQUFhQyxHQUFrQixJQUFLLElBQUlsa0IsS0FBZW9sQyxFQUV6RCxHQUFJaGhCLEVBQW9CcGtCLEtBQWlCb2xDLEVBQXFCcGxDLEdBQWMsSUFDMUUyRSxFQUE0QnlmLEVBQXFCcGtCLEVBQWFvbEMsRUFBcUJwbEMsSUFDbkYsTUFBT21CLEdBQ1BpakIsRUFBb0Jwa0IsR0FBZW9sQyxFQUFxQnBsQyxNQU1oRSxJQUFLLElBQUlra0IsS0FBbUJELEVBQzFCa2hCLEVBQWdCNXBDLEVBQU8yb0IsSUFBb0Izb0IsRUFBTzJvQixHQUFpQnhwQixVQUFXd3BCLEdBR2hGaWhCLEVBQWdCdFgsRUFBdUIsOENDbkN2QyxFQUFRLE9BQ1IsSUFBSXZwQixFQUFJLEVBQVEsT0FDWi9JLEVBQVMsRUFBUSxPQUNqQjBOLEVBQWEsRUFBUSxPQUNyQmpOLEVBQU8sRUFBUSxPQUNmaUMsRUFBYyxFQUFRLE1BQ3RCcW5DLEVBQWlCLEVBQVEsS0FDekIxZ0MsRUFBVyxFQUFRLE9BQ25COFosRUFBYyxFQUFRLE9BQ3RCamIsRUFBaUIsRUFBUSxPQUN6QmdCLEVBQTRCLEVBQVEsT0FDcENpWSxFQUFzQixFQUFRLE9BQzlCa0MsRUFBYSxFQUFRLE9BQ3JCcGpCLEVBQWEsRUFBUSxPQUNyQnFILEVBQVMsRUFBUSxPQUNqQjFJLEVBQU8sRUFBUSxPQUNmNE8sRUFBVSxFQUFRLE9BQ2xCaEksRUFBVyxFQUFRLE9BQ25CaEYsRUFBVyxFQUFRLE9BQ25CZ21CLEVBQVksRUFBUSxPQUNwQjdpQixFQUFTLEVBQVEsT0FDakJzRSxFQUEyQixFQUFRLE9BQ25DbkosRUFBYyxFQUFRLE9BQ3RCRCxFQUFvQixFQUFRLE9BQzVCeUYsRUFBa0IsRUFBUSxNQUMxQjBsQyxFQUFZLEVBQVEsT0FFcEJua0MsRUFBV3ZCLEVBQWdCLFlBQzNCMmxDLEVBQW9CLGtCQUNwQkMsRUFBNkJELDBCQUM3QjNvQixFQUFtQkgsRUFBb0J6UCxJQUN2Q3k0QixFQUF5QmhwQixFQUFvQnpPLFVBQVV1M0IsR0FDdkRoWixFQUEyQjlQLEVBQW9Cek8sVUFBVXczQixHQUV6REUsRUFBVTE4QixFQUFXLFNBQ3JCMjhCLEVBQVkzOEIsRUFBVyxXQUN2QjQ4QixFQUFVNThCLEVBQVcsV0FDckI2OEIsRUFBbUJGLEdBQWFBLEVBQVVsckMsVUFDMUNxckMsRUFBbUJGLEdBQVdBLEVBQVFuckMsVUFDdEN5ekIsRUFBUzV5QixFQUFPNHlCLE9BQ2hCenlCLEVBQVlILEVBQU9HLFVBQ25Cc3FDLEVBQXFCenFDLEVBQU95cUMsbUJBQzVCQyxFQUFxQjFxQyxFQUFPMHFDLG1CQUM1Qnp1QixFQUFTdlosRUFBWSxHQUFHdVosUUFDeEJoTSxFQUFPdk4sRUFBWSxHQUFHdU4sTUFDdEJwTixFQUFPSCxFQUFZLEdBQUdHLE1BQ3RCaUUsRUFBVXBFLEVBQVksR0FBR29FLFNBQ3pCNmpDLEVBQVFqb0MsRUFBWSxHQUFHaW9DLE9BQ3ZCL1UsRUFBU2x6QixFQUFZLEdBQUdrekIsUUFDeEI1bkIsRUFBUXRMLEVBQVksR0FBR3NMLE9BQ3ZCMUgsRUFBYzVELEVBQVksR0FBRy9ELE9BRTdCaXNDLEVBQU8sTUFDUEMsRUFBWXhzQyxNQUFNLEdBRWxCeXNDLEVBQWtCLFNBQVUzZCxHQUM5QixPQUFPMGQsRUFBVTFkLEVBQVEsS0FBTzBkLEVBQVUxZCxFQUFRLEdBQUt5RixFQUFPLHFCQUF1QnpGLEVBQVEsS0FBTSxRQUdqRzRkLEdBQWdCLFNBQVVDLEdBQzVCLElBQ0UsT0FBT1AsRUFBbUJPLEdBQzFCLE1BQU9wbEMsR0FDUCxPQUFPb2xDLElBSVBDLEdBQWMsU0FBVTdyQyxHQUMxQixJQUFJcUMsRUFBU3FGLEVBQVExSCxFQUFJd3JDLEVBQU0sS0FDM0J6ZCxFQUFRLEVBQ1osSUFDRSxPQUFPc2QsRUFBbUJocEMsR0FDMUIsTUFBT21FLEdBQ1AsS0FBT3VuQixHQUNMMXJCLEVBQVNxRixFQUFRckYsRUFBUXFwQyxFQUFnQjNkLEtBQVU0ZCxJQUVyRCxPQUFPdHBDLElBSVB5QyxHQUFPLGVBRVBnbkMsR0FBZSxDQUNqQixJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLE1BQU8sS0FHTDVpQixHQUFXLFNBQVUzYSxHQUN2QixPQUFPdTlCLEdBQWF2OUIsSUFHbEJ3OUIsR0FBWSxTQUFVL3JDLEdBQ3hCLE9BQU8wSCxFQUFRNGpDLEVBQW1CdHJDLEdBQUs4RSxHQUFNb2tCLEtBRzNDOGlCLEdBQTBCLFNBQVVDLEVBQVFDLEdBQzlDLEdBQUlELEVBQVNDLEVBQVUsTUFBTW5yQyxFQUFVLHlCQUdyQ29yQyxHQUEwQnJpQyxHQUEwQixTQUFrQnNpQyxFQUFRLzJCLEdBQ2hGNk0sRUFBaUJwZ0IsS0FBTSxDQUNyQnlSLEtBQU11M0IsRUFDTnZvQyxTQUFVN0MsRUFBWXFyQyxFQUF1QnFCLEdBQVE1Z0MsU0FDckQ2SixLQUFNQSxNQUVQLFlBQVksV0FDYixJQUFJdkMsRUFBUStlLEVBQXlCL3ZCLE1BQ2pDdVQsRUFBT3ZDLEVBQU11QyxLQUNiL1MsRUFBT3dRLEVBQU12USxTQUFTQyxPQUN0Qm9aLEVBQVF0WixFQUFLRyxNQUdmLE9BRkdILEVBQUtNLE9BQ1JOLEVBQUtHLE1BQWlCLFNBQVQ0UyxFQUFrQnVHLEVBQU12YixJQUFlLFdBQVRnVixFQUFvQnVHLEVBQU1uWixNQUFRLENBQUNtWixFQUFNdmIsSUFBS3ViLEVBQU1uWixRQUN4RkgsS0FDUixHQUVDK3BDLEdBQXVCLFNBQVU3SCxHQUNuQzFpQyxLQUFLMEosUUFBVSxHQUNmMUosS0FBS2kxQixJQUFNLFVBRUU1MEIsSUFBVHFpQyxJQUNFcGpDLEVBQVNvakMsR0FBTzFpQyxLQUFLd3FDLFlBQVk5SCxHQUNoQzFpQyxLQUFLeXFDLFdBQTBCLGlCQUFSL0gsRUFBdUMsTUFBcEIzbkIsRUFBTzJuQixFQUFNLEdBQWF0OUIsRUFBWXM5QixFQUFNLEdBQUtBLEVBQU9wZCxFQUFVb2QsTUFJckg2SCxHQUFxQnRzQyxVQUFZLENBQy9Cd1QsS0FBTXMzQixFQUNOMkIsUUFBUyxTQUFVelYsR0FDakJqMUIsS0FBS2kxQixJQUFNQSxFQUNYajFCLEtBQUsycUMsVUFFUEgsWUFBYSxTQUFVdGxDLEdBQ3JCLElBQ0l6RSxFQUFVQyxFQUFNRixFQUFNb3FDLEVBQWVDLEVBQVcxdkIsRUFBT0MsRUFEdkR4YSxFQUFpQmpELEVBQWtCdUgsR0FHdkMsR0FBSXRFLEVBR0YsSUFEQUYsR0FEQUQsRUFBVzdDLEVBQVlzSCxFQUFRdEUsSUFDZkYsT0FDUEYsRUFBT2pCLEVBQUttQixFQUFNRCxJQUFXSyxNQUFNLENBRzFDLEdBREErcEMsR0FEQUQsRUFBZ0JodEMsRUFBWTBHLEVBQVM5RCxFQUFLRyxTQUNoQkQsTUFFdkJ5YSxFQUFRNWIsRUFBS3NyQyxFQUFXRCxJQUFnQjlwQyxPQUN4Q3NhLEVBQVM3YixFQUFLc3JDLEVBQVdELElBQWdCOXBDLE9BQ3pDdkIsRUFBS3NyQyxFQUFXRCxHQUFlOXBDLEtBQ2hDLE1BQU03QixFQUFVLG1DQUNsQjBDLEVBQUszQixLQUFLMEosUUFBUyxDQUFFbkwsSUFBSyttQixFQUFVbkssRUFBTXhhLE9BQVFBLE1BQU8ya0IsRUFBVWxLLEVBQU96YSxjQUV2RSxJQUFLLElBQUlwQyxLQUFPMkcsRUFBWWtCLEVBQU9sQixFQUFRM0csSUFDaERvRCxFQUFLM0IsS0FBSzBKLFFBQVMsQ0FBRW5MLElBQUtBLEVBQUtvQyxNQUFPMmtCLEVBQVVwZ0IsRUFBTzNHLE9BRzNEa3NDLFdBQVksU0FBVUssR0FDcEIsR0FBSUEsRUFJRixJQUhBLElBRUlDLEVBQVdqeEIsRUFGWGt4QixFQUFhbCtCLEVBQU1nK0IsRUFBTyxLQUMxQmpxQyxFQUFRLEVBRUxBLEVBQVFtcUMsRUFBVzdxQyxTQUN4QjRxQyxFQUFZQyxFQUFXbnFDLE1BQ1RWLFNBQ1oyWixFQUFRaE4sRUFBTWkrQixFQUFXLEtBQ3pCcHBDLEVBQUszQixLQUFLMEosUUFBUyxDQUNqQm5MLElBQUt3ckMsR0FBWU4sRUFBTTN2QixJQUN2Qm5aLE1BQU9vcEMsR0FBWWg3QixFQUFLK0ssRUFBTyxVQU16Q213QixVQUFXLFdBS1QsSUFKQSxJQUdJbndCLEVBSEFwUSxFQUFVMUosS0FBSzBKLFFBQ2ZuSixFQUFTLEdBQ1RNLEVBQVEsRUFFTEEsRUFBUTZJLEVBQVF2SixRQUNyQjJaLEVBQVFwUSxFQUFRN0ksS0FDaEJjLEVBQUtwQixFQUFRMHBDLEdBQVVud0IsRUFBTXZiLEtBQU8sSUFBTTByQyxHQUFVbndCLEVBQU1uWixRQUMxRCxPQUFPb08sRUFBS3hPLEVBQVEsTUFFeEJvcUMsT0FBUSxXQUNOM3FDLEtBQUswSixRQUFRdkosT0FBUyxFQUN0QkgsS0FBS3lxQyxXQUFXenFDLEtBQUtpMUIsSUFBSTZWLFFBRTNCRyxVQUFXLFdBQ0xqckMsS0FBS2kxQixLQUFLajFCLEtBQUtpMUIsSUFBSTBWLFdBTTNCLElBQUlPLEdBQTZCLFdBQy9CL29CLEVBQVduaUIsS0FBTW1yQyxJQUNqQixJQUFJekksRUFBT3hpQyxVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS0csRUFDakQrZixFQUFpQnBnQixLQUFNLElBQUl1cUMsR0FBcUI3SCxLQUc5Q3lJLEdBQTJCRCxHQUEyQmp0QyxVQXdJMUQsR0F0SUFna0IsRUFBWWtwQixHQUEwQixDQUdwQ0MsT0FBUSxTQUFnQnpoQyxFQUFNaEosR0FDNUJ1cEMsR0FBd0JocUMsVUFBVUMsT0FBUSxHQUMxQyxJQUFJNlEsRUFBUWk0QixFQUF1QmpwQyxNQUNuQzJCLEVBQUtxUCxFQUFNdEgsUUFBUyxDQUFFbkwsSUFBSyttQixFQUFVM2IsR0FBT2hKLE1BQU8ya0IsRUFBVTNrQixLQUM3RHFRLEVBQU1pNkIsYUFJUixPQUFVLFNBQVV0aEMsR0FDbEJ1Z0MsR0FBd0JocUMsVUFBVUMsT0FBUSxHQUsxQyxJQUpBLElBQUk2USxFQUFRaTRCLEVBQXVCanBDLE1BQy9CMEosRUFBVXNILEVBQU10SCxRQUNoQm5MLEVBQU0rbUIsRUFBVTNiLEdBQ2hCOUksRUFBUSxFQUNMQSxFQUFRNkksRUFBUXZKLFFBQ2pCdUosRUFBUTdJLEdBQU90QyxNQUFRQSxFQUFLbTJCLEVBQU9ockIsRUFBUzdJLEVBQU8sR0FDbERBLElBRVBtUSxFQUFNaTZCLGFBSVJqaEMsSUFBSyxTQUFhTCxHQUNoQnVnQyxHQUF3QmhxQyxVQUFVQyxPQUFRLEdBSTFDLElBSEEsSUFBSXVKLEVBQVV1L0IsRUFBdUJqcEMsTUFBTTBKLFFBQ3ZDbkwsRUFBTSttQixFQUFVM2IsR0FDaEI5SSxFQUFRLEVBQ0xBLEVBQVE2SSxFQUFRdkosT0FBUVUsSUFDN0IsR0FBSTZJLEVBQVE3SSxHQUFPdEMsTUFBUUEsRUFBSyxPQUFPbUwsRUFBUTdJLEdBQU9GLE1BRXhELE9BQU8sTUFJVDBxQyxPQUFRLFNBQWdCMWhDLEdBQ3RCdWdDLEdBQXdCaHFDLFVBQVVDLE9BQVEsR0FLMUMsSUFKQSxJQUFJdUosRUFBVXUvQixFQUF1QmpwQyxNQUFNMEosUUFDdkNuTCxFQUFNK21CLEVBQVUzYixHQUNoQnBKLEVBQVMsR0FDVE0sRUFBUSxFQUNMQSxFQUFRNkksRUFBUXZKLE9BQVFVLElBQ3pCNkksRUFBUTdJLEdBQU90QyxNQUFRQSxHQUFLb0QsRUFBS3BCLEVBQVFtSixFQUFRN0ksR0FBT0YsT0FFOUQsT0FBT0osR0FJVGtRLElBQUssU0FBYTlHLEdBQ2hCdWdDLEdBQXdCaHFDLFVBQVVDLE9BQVEsR0FJMUMsSUFIQSxJQUFJdUosRUFBVXUvQixFQUF1QmpwQyxNQUFNMEosUUFDdkNuTCxFQUFNK21CLEVBQVUzYixHQUNoQjlJLEVBQVEsRUFDTEEsRUFBUTZJLEVBQVF2SixRQUNyQixHQUFJdUosRUFBUTdJLEtBQVN0QyxNQUFRQSxFQUFLLE9BQU8sRUFFM0MsT0FBTyxHQUlUaVMsSUFBSyxTQUFhN0csRUFBTWhKLEdBQ3RCdXBDLEdBQXdCaHFDLFVBQVVDLE9BQVEsR0FRMUMsSUFQQSxJQU1JMlosRUFOQTlJLEVBQVFpNEIsRUFBdUJqcEMsTUFDL0IwSixFQUFVc0gsRUFBTXRILFFBQ2hCNGhDLEdBQVEsRUFDUi9zQyxFQUFNK21CLEVBQVUzYixHQUNoQndQLEVBQU1tTSxFQUFVM2tCLEdBQ2hCRSxFQUFRLEVBRUxBLEVBQVE2SSxFQUFRdkosT0FBUVUsS0FDN0JpWixFQUFRcFEsRUFBUTdJLElBQ050QyxNQUFRQSxJQUNaK3NDLEVBQU81VyxFQUFPaHJCLEVBQVM3SSxJQUFTLElBRWxDeXFDLEdBQVEsRUFDUnh4QixFQUFNblosTUFBUXdZLElBSWZteUIsR0FBTzNwQyxFQUFLK0gsRUFBUyxDQUFFbkwsSUFBS0EsRUFBS29DLE1BQU93WSxJQUM3Q25JLEVBQU1pNkIsYUFJUjNWLEtBQU0sV0FDSixJQUFJdGtCLEVBQVFpNEIsRUFBdUJqcEMsTUFDbkM4b0MsRUFBVTkzQixFQUFNdEgsU0FBUyxTQUFVMkQsRUFBR0MsR0FDcEMsT0FBT0QsRUFBRTlPLElBQU0rTyxFQUFFL08sSUFBTSxHQUFLLEtBRTlCeVMsRUFBTWk2QixhQUdSdG9DLFFBQVMsU0FBaUI0b0MsR0FLeEIsSUFKQSxJQUdJenhCLEVBSEFwUSxFQUFVdS9CLEVBQXVCanBDLE1BQU0wSixRQUN2Q2xILEVBQWdCOUUsRUFBSzZ0QyxFQUFVcnJDLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxHQUNyRVEsRUFBUSxFQUVMQSxFQUFRNkksRUFBUXZKLFFBRXJCcUMsR0FEQXNYLEVBQVFwUSxFQUFRN0ksTUFDSUYsTUFBT21aLEVBQU12YixJQUFLeUIsT0FJMUN4QyxLQUFNLFdBQ0osT0FBTyxJQUFJNnNDLEdBQXdCcnFDLEtBQU0sU0FHM0M0SixPQUFRLFdBQ04sT0FBTyxJQUFJeWdDLEdBQXdCcnFDLEtBQU0sV0FHM0MwSixRQUFTLFdBQ1AsT0FBTyxJQUFJMmdDLEdBQXdCcnFDLEtBQU0sYUFFMUMsQ0FBRXdILFlBQVksSUFHakJXLEVBQVNnakMsR0FBMEJ4bUMsRUFBVXdtQyxHQUF5QnpoQyxRQUFTLENBQUVDLEtBQU0sWUFJdkZ4QixFQUFTZ2pDLEdBQTBCLFlBQVksV0FDN0MsT0FBT2xDLEVBQXVCanBDLE1BQU1pcUMsY0FDbkMsQ0FBRXppQyxZQUFZLElBRWpCUixFQUFla2tDLEdBQTRCbkMsR0FFM0NsaEMsRUFBRSxDQUFFL0ksUUFBUSxFQUFNZ0wsUUFBUysrQixHQUFrQixDQUMzQ3JULGdCQUFpQjBWLE1BSWRyQyxHQUFrQjlwQyxFQUFXcXFDLEdBQVUsQ0FDMUMsSUFBSW9DLEdBQWFocUMsRUFBWThuQyxFQUFpQjc0QixLQUMxQ2c3QixHQUFhanFDLEVBQVk4bkMsRUFBaUI5NEIsS0FFMUNrN0IsR0FBcUIsU0FBVWhKLEdBQ2pDLEdBQUlwakMsRUFBU29qQyxHQUFPLENBQ2xCLElBQ0lpSixFQURBQyxFQUFPbEosRUFBS2tKLEtBRWhCLEdBQUl0L0IsRUFBUXMvQixLQUFVN0MsRUFLcEIsT0FKQTRDLEVBQVVqSixFQUFLaUosUUFBVSxJQUFJdkMsRUFBUTFHLEVBQUtpSixTQUFXLElBQUl2QyxFQUNwRG9DLEdBQVdHLEVBQVMsaUJBQ3ZCRixHQUFXRSxFQUFTLGVBQWdCLG1EQUUvQmxwQyxFQUFPaWdDLEVBQU0sQ0FDbEJrSixLQUFNN2tDLEVBQXlCLEVBQUd1ZSxFQUFVc21CLElBQzVDRCxRQUFTNWtDLEVBQXlCLEVBQUc0a0MsS0FHekMsT0FBT2pKLEdBV1gsR0FSSTNqQyxFQUFXbXFDLElBQ2JyaEMsRUFBRSxDQUFFL0ksUUFBUSxFQUFNMEksWUFBWSxFQUFNc0MsUUFBUSxHQUFRLENBQ2xEK2hDLE1BQU8sU0FBZTV5QixHQUNwQixPQUFPaXdCLEVBQVFqd0IsRUFBTy9ZLFVBQVVDLE9BQVMsRUFBSXVyQyxHQUFtQnhyQyxVQUFVLElBQU0sT0FLbEZuQixFQUFXb3FDLEdBQVksQ0FDekIsSUFBSTJDLEdBQXFCLFNBQWlCN3lCLEdBRXhDLE9BREFrSixFQUFXbmlCLEtBQU1xcEMsR0FDVixJQUFJRixFQUFVbHdCLEVBQU8vWSxVQUFVQyxPQUFTLEVBQUl1ckMsR0FBbUJ4ckMsVUFBVSxJQUFNLEtBR3hGbXBDLEVBQWlCNWxDLFlBQWNxb0MsR0FDL0JBLEdBQW1CN3RDLFVBQVlvckMsRUFFL0J4aEMsRUFBRSxDQUFFL0ksUUFBUSxFQUFNZ0wsUUFBUSxHQUFRLENBQ2hDaWlDLFFBQVNELE1BS2YvdUMsRUFBT0MsUUFBVSxDQUNmdzRCLGdCQUFpQjBWLEdBQ2pCYyxTQUFVL0MsaUNDOVhaLEVBQVEsT0FDUixJQThESWdELEVBOURBcGtDLEVBQUksRUFBUSxPQUNaUCxFQUFjLEVBQVEsT0FDdEJ1aEMsRUFBaUIsRUFBUSxLQUN6Qi9wQyxFQUFTLEVBQVEsT0FDakJwQixFQUFPLEVBQVEsT0FDZjhELEVBQWMsRUFBUSxNQUN0Qm1XLEVBQW1CLFdBQ25CeFAsRUFBVyxFQUFRLE9BQ25CZ2EsRUFBYSxFQUFRLE9BQ3JCL2IsRUFBUyxFQUFRLE9BQ2pCd3ZCLEVBQVMsRUFBUSxPQUNqQnNXLEVBQVksRUFBUSxPQUNwQnA5QixFQUFhLEVBQVEsT0FDckJ5TSxFQUFTLGdCQUNUNHdCLEVBQVUsRUFBUSxPQUNsQjdtQixFQUFZLEVBQVEsT0FDcEJ0ZSxFQUFpQixFQUFRLE9BQ3pCb2xDLEVBQXdCLEVBQVEsT0FDaENuc0IsRUFBc0IsRUFBUSxPQUU5QkcsRUFBbUJILEVBQW9CelAsSUFDdkM2N0IsRUFBc0Jwc0IsRUFBb0J6TyxVQUFVLE9BQ3BEZ2tCLEVBQWtCNFcsRUFBc0I1VyxnQkFDeEM4VyxFQUErQkYsRUFBc0JKLFNBRXJETyxFQUFZenRDLEVBQU9vMkIsSUFDbkJqMkIsRUFBWUgsRUFBT0csVUFDbkI0Z0MsRUFBVy9nQyxFQUFPK2dDLFNBQ2xCdGlCLEVBQVExWixLQUFLMFosTUFDYjRWLEVBQU10dkIsS0FBS3N2QixJQUNYcFksRUFBU3ZaLEVBQVksR0FBR3VaLFFBQ3hCaFcsRUFBT3ZELEVBQVksSUFBSXVELE1BQ3ZCZ0ssRUFBT3ZOLEVBQVksR0FBR3VOLE1BQ3RCNHZCLEVBQWlCbjlCLEVBQVksR0FBSTJELFVBQ2pDcW5DLEVBQU1ockMsRUFBWSxHQUFHZ3JDLEtBQ3JCN3FDLEVBQU9ILEVBQVksR0FBR0csTUFDdEJpRSxFQUFVcEUsRUFBWSxHQUFHb0UsU0FDekI2akMsRUFBUWpvQyxFQUFZLEdBQUdpb0MsT0FDdkIzOEIsRUFBUXRMLEVBQVksR0FBR3NMLE9BQ3ZCMUgsRUFBYzVELEVBQVksR0FBRy9ELE9BQzdCK1UsRUFBY2hSLEVBQVksR0FBR2dSLGFBQzdCaTZCLEVBQVVqckMsRUFBWSxHQUFHaXJDLFNBR3pCQyxFQUFpQixpQkFDakJDLEVBQWUsZUFDZkMsRUFBZSxlQUVmQyxFQUFRLFNBRVJDLEVBQWUsY0FDZkMsRUFBUSxLQUNSQyxFQUFZLE9BQ1pDLEVBQU0sV0FDTkMsRUFBTSxRQUNOQyxFQUFNLGNBRU5DLEdBQTRCLDZCQUM1QkMsR0FBOEMsNEJBQzlDQyxHQUEyQyx1Q0FDM0NDLEdBQW1CLFlBb0puQkMsR0FBZ0IsU0FBVTd3QixHQUM1QixJQUFJcGMsRUFBUU0sRUFBTzRzQyxFQUFVQyxFQUU3QixHQUFtQixpQkFBUi93QixFQUFrQixDQUUzQixJQURBcGMsRUFBUyxHQUNKTSxFQUFRLEVBQUdBLEVBQVEsRUFBR0EsSUFDekI0ckMsRUFBUWxzQyxFQUFRb2MsRUFBTyxLQUN2QkEsRUFBT1ksRUFBTVosRUFBTyxLQUNwQixPQUFPNU4sRUFBS3hPLEVBQVEsS0FFakIsR0FBbUIsaUJBQVJvYyxFQUFrQixDQUdsQyxJQUZBcGMsRUFBUyxHQUNUa3RDLEVBdkMwQixTQUFVRSxHQU10QyxJQUxBLElBQUlDLEVBQVcsS0FDWHRWLEVBQVksRUFDWnVWLEVBQVksS0FDWkMsRUFBYSxFQUNianRDLEVBQVEsRUFDTEEsRUFBUSxFQUFHQSxJQUNJLElBQWhCOHNDLEVBQUs5c0MsSUFDSGl0QyxFQUFheFYsSUFDZnNWLEVBQVdDLEVBQ1h2VixFQUFZd1YsR0FFZEQsRUFBWSxLQUNaQyxFQUFhLElBRUssT0FBZEQsSUFBb0JBLEVBQVlodEMsS0FDbENpdEMsR0FPTixPQUpJQSxFQUFheFYsSUFDZnNWLEVBQVdDLEVBQ1h2VixFQUFZd1YsR0FFUEYsRUFnQk1HLENBQXdCcHhCLEdBQzlCOWIsRUFBUSxFQUFHQSxFQUFRLEVBQUdBLElBQ3JCNnNDLEdBQTJCLElBQWhCL3dCLEVBQUs5YixLQUNoQjZzQyxJQUFTQSxHQUFVLEdBQ25CRCxJQUFhNXNDLEdBQ2ZOLEdBQVVNLEVBQVEsSUFBTSxLQUN4QjZzQyxHQUFVLElBRVZudEMsR0FBVW8rQixFQUFlaGlCLEVBQUs5YixHQUFRLElBQ2xDQSxFQUFRLElBQUdOLEdBQVUsT0FHN0IsTUFBTyxJQUFNQSxFQUFTLElBQ3RCLE9BQU9vYyxHQUdQcXhCLEdBQTRCLEdBQzVCQyxHQUEyQnJZLEVBQU8sR0FBSW9ZLEdBQTJCLENBQ25FLElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxFQUFHLElBQUssRUFBRyxJQUFLLElBRW5DRSxHQUF1QnRZLEVBQU8sR0FBSXFZLEdBQTBCLENBQzlELElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxFQUFHLElBQUssSUFFM0JFLEdBQTJCdlksRUFBTyxHQUFJc1ksR0FBc0IsQ0FDOUQsSUFBSyxFQUFHLElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxFQUFHLElBQUssRUFBRyxJQUFLLEVBQUcsS0FBTSxFQUFHLElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxJQUc1RUUsR0FBZ0IsU0FBVXJZLEVBQUt2bEIsR0FDakMsSUFBSW92QixFQUFPcmtCLEVBQU93YSxFQUFLLEdBQ3ZCLE9BQU82SixFQUFPLElBQVFBLEVBQU8sTUFBU3g1QixFQUFPb0ssRUFBS3VsQixHQUFPQSxFQUFNeVQsbUJBQW1CelQsSUFJaEZzWSxHQUFpQixDQUNuQkMsSUFBSyxHQUNMQyxLQUFNLEtBQ05DLEtBQU0sR0FDTkMsTUFBTyxJQUNQQyxHQUFJLEdBQ0pDLElBQUssS0FJSEMsR0FBdUIsU0FBVXI4QixFQUFRczhCLEdBQzNDLElBQUl6ekIsRUFDSixPQUF3QixHQUFqQjdJLEVBQU9wUyxRQUFlNEUsRUFBSzhuQyxFQUFPOXhCLEVBQU94SSxFQUFRLE1BQ2xCLE1BQS9CNkksRUFBU0wsRUFBT3hJLEVBQVEsTUFBZ0JzOEIsR0FBd0IsS0FBVnp6QixJQUkzRDB6QixHQUErQixTQUFVdjhCLEdBQzNDLElBQUlpdEIsRUFDSixPQUFPanRCLEVBQU9wUyxPQUFTLEdBQUt5dUMsR0FBcUJ4cEMsRUFBWW1OLEVBQVEsRUFBRyxNQUNyRCxHQUFqQkEsRUFBT3BTLFFBQzBCLE9BQS9CcS9CLEVBQVF6a0IsRUFBT3hJLEVBQVEsS0FBeUIsT0FBVml0QixHQUE0QixNQUFWQSxHQUEyQixNQUFWQSxJQUszRXVQLEdBQWMsU0FBVUMsR0FDMUIsTUFBbUIsTUFBWkEsR0FBNEMsUUFBekJ4OEIsRUFBWXc4QixJQVVwQ0MsR0FBZSxHQUNmQyxHQUFTLEdBQ1RDLEdBQVksR0FDWkMsR0FBZ0MsR0FDaENDLEdBQW9CLEdBQ3BCQyxHQUFXLEdBQ1hDLEdBQWlCLEdBQ2pCQyxHQUE0QixHQUM1QkMsR0FBbUMsR0FDbkNDLEdBQVksR0FDWkMsR0FBTyxHQUNQQyxHQUFXLEdBQ1hDLEdBQU8sR0FDUEMsR0FBTyxHQUNQQyxHQUFhLEdBQ2JDLEdBQVksR0FDWkMsR0FBYSxHQUNiQyxHQUFPLEdBQ1BDLEdBQTRCLEdBQzVCQyxHQUFRLEdBQ1JDLEdBQVcsR0FFWEMsR0FBVyxTQUFVcmIsRUFBS3NiLEVBQVE5VyxHQUNwQyxJQUNJK1csRUFBV0MsRUFBU3RiLEVBRHBCdWIsRUFBWXByQixFQUFVMlAsR0FFMUIsR0FBSXNiLEVBQVEsQ0FFVixHQURBRSxFQUFVendDLEtBQUsyd0MsTUFBTUQsR0FDUixNQUFNenhDLEVBQVV3eEMsR0FDN0J6d0MsS0FBS20xQixhQUFlLFNBQ2YsQ0FHTCxRQUZhOTBCLElBQVRvNUIsSUFBb0IrVyxFQUFZLElBQUlGLEdBQVM3VyxHQUFNLElBQ3ZEZ1gsRUFBVXp3QyxLQUFLMndDLE1BQU1ELEVBQVcsS0FBTUYsR0FDekIsTUFBTXZ4QyxFQUFVd3hDLElBQzdCdGIsRUFBZW1YLEVBQTZCLElBQUk5VyxJQUNuQ2tWLFFBQVExcUMsTUFDckJBLEtBQUttMUIsYUFBZUEsSUFJeEJtYixHQUFTcnlDLFVBQVksQ0FDbkJ3VCxLQUFNLE1BR05rL0IsTUFBTyxTQUFVMTNCLEVBQU8yM0IsRUFBZW5YLEdBQ3JDLElBT0lvWCxFQUFZOWEsRUFBSythLEVBQWtCTCxFQXpEZnpCLEVBa0RwQi9aLEVBQU1qMUIsS0FDTmdSLEVBQVE0L0IsR0FBaUIzQixHQUN6QjhCLEVBQVUsRUFDVi9vQixFQUFTLEdBQ1RncEIsR0FBUyxFQUNUQyxHQUFjLEVBQ2RDLEdBQW9CLEVBc0J4QixJQW5CQWo0QixFQUFRcU0sRUFBVXJNLEdBRWIyM0IsSUFDSDNiLEVBQUlrYyxPQUFTLEdBQ2JsYyxFQUFJUSxTQUFXLEdBQ2ZSLEVBQUltYyxTQUFXLEdBQ2ZuYyxFQUFJdFksS0FBTyxLQUNYc1ksRUFBSXRaLEtBQU8sS0FDWHNaLEVBQUkvM0IsS0FBTyxHQUNYKzNCLEVBQUk2VixNQUFRLEtBQ1o3VixFQUFJb2MsU0FBVyxLQUNmcGMsRUFBSXFjLGtCQUFtQixFQUN2QnI0QixFQUFRclQsRUFBUXFULEVBQU9xMEIsR0FBMEMsS0FHbkVyMEIsRUFBUXJULEVBQVFxVCxFQUFPczBCLEdBQWtCLElBRXpDc0QsRUFBYTNFLEVBQVVqekIsR0FFaEI4M0IsR0FBV0YsRUFBVzF3QyxRQUFRLENBRW5DLE9BREE0MUIsRUFBTThhLEVBQVdFLEdBQ1QvL0IsR0FDTixLQUFLaStCLEdBQ0gsSUFBSWxaLElBQU9oeEIsRUFBSzhuQyxFQUFPOVcsR0FHaEIsSUFBSzZhLEVBR0wsT0FBT2xFLEVBRloxN0IsRUFBUW0rQixHQUNSLFNBSkFubkIsR0FBVXhWLEVBQVl1akIsR0FDdEIva0IsRUFBUWsrQixHQUtWLE1BRUYsS0FBS0EsR0FDSCxHQUFJblosSUFBUWh4QixFQUFLK25DLEVBQWMvVyxJQUFlLEtBQVBBLEdBQXFCLEtBQVBBLEdBQXFCLEtBQVBBLEdBQ2pFL04sR0FBVXhWLEVBQVl1akIsT0FDakIsSUFBVyxLQUFQQSxFQTBCSixJQUFLNmEsRUFLTCxPQUFPbEUsRUFKWjFrQixFQUFTLEdBQ1RoWCxFQUFRbStCLEdBQ1I0QixFQUFVLEVBQ1YsU0E3QkEsR0FBSUgsSUFDRDNiLEVBQUlzYyxhQUFlbnJDLEVBQU9pb0MsR0FBZ0JybUIsSUFDaEMsUUFBVkEsSUFBcUJpTixFQUFJdWMsdUJBQXNDLE9BQWJ2YyxFQUFJdFosT0FDeEMsUUFBZHNaLEVBQUlrYyxTQUFxQmxjLEVBQUl0WSxNQUM3QixPQUVILEdBREFzWSxFQUFJa2MsT0FBU25wQixFQUNUNG9CLEVBRUYsWUFESTNiLEVBQUlzYyxhQUFlbEQsR0FBZXBaLEVBQUlrYyxTQUFXbGMsRUFBSXRaLE9BQU1zWixFQUFJdFosS0FBTyxPQUc1RXFNLEVBQVMsR0FDUyxRQUFkaU4sRUFBSWtjLE9BQ05uZ0MsRUFBUTgrQixHQUNDN2EsRUFBSXNjLGFBQWU5WCxHQUFRQSxFQUFLMFgsUUFBVWxjLEVBQUlrYyxPQUN2RG5nQyxFQUFRbytCLEdBQ0NuYSxFQUFJc2MsWUFDYnZnQyxFQUFRdytCLEdBQzRCLEtBQTNCcUIsRUFBV0UsRUFBVSxJQUM5Qi8vQixFQUFRcStCLEdBQ1IwQixNQUVBOWIsRUFBSXFjLGtCQUFtQixFQUN2QjN2QyxFQUFLc3pCLEVBQUkvM0IsS0FBTSxJQUNmOFQsRUFBUW0vQixJQVFaLE1BRUYsS0FBS2hCLEdBQ0gsSUFBSzFWLEdBQVNBLEVBQUs2WCxrQkFBMkIsS0FBUHZiLEVBQWEsT0FBTzJXLEVBQzNELEdBQUlqVCxFQUFLNlgsa0JBQTJCLEtBQVB2YixFQUFZLENBQ3ZDZCxFQUFJa2MsT0FBUzFYLEVBQUswWCxPQUNsQmxjLEVBQUkvM0IsS0FBTzRSLEVBQVcycUIsRUFBS3Y4QixNQUMzQiszQixFQUFJNlYsTUFBUXJSLEVBQUtxUixNQUNqQjdWLEVBQUlvYyxTQUFXLEdBQ2ZwYyxFQUFJcWMsa0JBQW1CLEVBQ3ZCdGdDLEVBQVFxL0IsR0FDUixNQUVGci9CLEVBQXVCLFFBQWZ5b0IsRUFBSzBYLE9BQW1CckIsR0FBT1IsR0FDdkMsU0FFRixLQUFLRixHQUNILEdBQVcsS0FBUHJaLEdBQXlDLEtBQTNCOGEsRUFBV0UsRUFBVSxHQUdoQyxDQUNMLy9CLEVBQVFzK0IsR0FDUixTQUpBdCtCLEVBQVF5K0IsR0FDUnNCLElBSUEsTUFFSixLQUFLMUIsR0FDSCxHQUFXLEtBQVB0WixFQUFZLENBQ2Qva0IsRUFBUTArQixHQUNSLE1BRUExK0IsRUFBUWsvQixHQUNSLFNBR0osS0FBS1osR0FFSCxHQURBcmEsRUFBSWtjLE9BQVMxWCxFQUFLMFgsT0FDZHBiLEdBQU9rVyxFQUNUaFgsRUFBSVEsU0FBV2dFLEVBQUtoRSxTQUNwQlIsRUFBSW1jLFNBQVczWCxFQUFLMlgsU0FDcEJuYyxFQUFJdFksS0FBTzhjLEVBQUs5YyxLQUNoQnNZLEVBQUl0WixLQUFPOGQsRUFBSzlkLEtBQ2hCc1osRUFBSS8zQixLQUFPNFIsRUFBVzJxQixFQUFLdjhCLE1BQzNCKzNCLEVBQUk2VixNQUFRclIsRUFBS3FSLFdBQ1osR0FBVyxLQUFQL1UsR0FBc0IsTUFBUEEsR0FBZWQsRUFBSXNjLFlBQzNDdmdDLEVBQVF1K0IsUUFDSCxHQUFXLEtBQVB4WixFQUNUZCxFQUFJUSxTQUFXZ0UsRUFBS2hFLFNBQ3BCUixFQUFJbWMsU0FBVzNYLEVBQUsyWCxTQUNwQm5jLEVBQUl0WSxLQUFPOGMsRUFBSzljLEtBQ2hCc1ksRUFBSXRaLEtBQU84ZCxFQUFLOWQsS0FDaEJzWixFQUFJLzNCLEtBQU80UixFQUFXMnFCLEVBQUt2OEIsTUFDM0IrM0IsRUFBSTZWLE1BQVEsR0FDWjk1QixFQUFRby9CLE9BQ0gsSUFBVyxLQUFQcmEsRUFTSixDQUNMZCxFQUFJUSxTQUFXZ0UsRUFBS2hFLFNBQ3BCUixFQUFJbWMsU0FBVzNYLEVBQUsyWCxTQUNwQm5jLEVBQUl0WSxLQUFPOGMsRUFBSzljLEtBQ2hCc1ksRUFBSXRaLEtBQU84ZCxFQUFLOWQsS0FDaEJzWixFQUFJLzNCLEtBQU80UixFQUFXMnFCLEVBQUt2OEIsTUFDM0IrM0IsRUFBSS8zQixLQUFLaUQsU0FDVDZRLEVBQVFrL0IsR0FDUixTQWhCQWpiLEVBQUlRLFNBQVdnRSxFQUFLaEUsU0FDcEJSLEVBQUltYyxTQUFXM1gsRUFBSzJYLFNBQ3BCbmMsRUFBSXRZLEtBQU84YyxFQUFLOWMsS0FDaEJzWSxFQUFJdFosS0FBTzhkLEVBQUs5ZCxLQUNoQnNaLEVBQUkvM0IsS0FBTzRSLEVBQVcycUIsRUFBS3Y4QixNQUMzQiszQixFQUFJNlYsTUFBUXJSLEVBQUtxUixNQUNqQjdWLEVBQUlvYyxTQUFXLEdBQ2ZyZ0MsRUFBUXEvQixHQVVSLE1BRUosS0FBS2QsR0FDSCxJQUFJdGEsRUFBSXNjLGFBQXVCLEtBQVB4YixHQUFxQixNQUFQQSxFQUUvQixJQUFXLEtBQVBBLEVBRUosQ0FDTGQsRUFBSVEsU0FBV2dFLEVBQUtoRSxTQUNwQlIsRUFBSW1jLFNBQVczWCxFQUFLMlgsU0FDcEJuYyxFQUFJdFksS0FBTzhjLEVBQUs5YyxLQUNoQnNZLEVBQUl0WixLQUFPOGQsRUFBSzlkLEtBQ2hCM0ssRUFBUWsvQixHQUNSLFNBUEFsL0IsRUFBUTArQixRQUZSMStCLEVBQVF5K0IsR0FVUixNQUVKLEtBQUtELEdBRUgsR0FEQXgrQixFQUFReStCLEdBQ0csS0FBUDFaLEdBQTZDLEtBQS9CaGIsRUFBT2lOLEVBQVErb0IsRUFBVSxHQUFXLFNBQ3REQSxJQUNBLE1BRUYsS0FBS3RCLEdBQ0gsR0FBVyxLQUFQMVosR0FBcUIsTUFBUEEsRUFBYSxDQUM3Qi9rQixFQUFRMCtCLEdBQ1IsU0FDQSxNQUVKLEtBQUtBLEdBQ0gsR0FBVyxLQUFQM1osRUFBWSxDQUNWaWIsSUFBUWhwQixFQUFTLE1BQVFBLEdBQzdCZ3BCLEdBQVMsRUFDVEYsRUFBbUI1RSxFQUFVbGtCLEdBQzdCLElBQUssSUFBSXJoQixFQUFJLEVBQUdBLEVBQUltcUMsRUFBaUIzd0MsT0FBUXdHLElBQUssQ0FDaEQsSUFBSThxQyxFQUFZWCxFQUFpQm5xQyxHQUNqQyxHQUFpQixLQUFiOHFDLEdBQXFCUCxFQUF6QixDQUlBLElBQUlRLEVBQW9CdEQsR0FBY3FELEVBQVd0RCxJQUM3QytDLEVBQW1CamMsRUFBSW1jLFVBQVlNLEVBQ2xDemMsRUFBSVEsVUFBWWljLE9BTG5CUixHQUFvQixFQU94QmxwQixFQUFTLFFBQ0osR0FDTCtOLEdBQU9rVyxHQUFjLEtBQVBsVyxHQUFxQixLQUFQQSxHQUFxQixLQUFQQSxHQUNsQyxNQUFQQSxHQUFlZCxFQUFJc2MsWUFDcEIsQ0FDQSxHQUFJUCxHQUFvQixJQUFWaHBCLEVBQWMsTUF0ZWhCLG9CQXVlWitvQixHQUFXN0UsRUFBVWxrQixHQUFRN25CLE9BQVMsRUFDdEM2bkIsRUFBUyxHQUNUaFgsRUFBUTIrQixRQUNIM25CLEdBQVUrTixFQUNqQixNQUVGLEtBQUs0WixHQUNMLEtBQUtDLEdBQ0gsR0FBSWdCLEdBQStCLFFBQWQzYixFQUFJa2MsT0FBa0IsQ0FDekNuZ0MsRUFBUWcvQixHQUNSLFNBQ0ssR0FBVyxLQUFQamEsR0FBZWtiLEVBT25CLElBQ0xsYixHQUFPa1csR0FBYyxLQUFQbFcsR0FBcUIsS0FBUEEsR0FBcUIsS0FBUEEsR0FDbEMsTUFBUEEsR0FBZWQsRUFBSXNjLFlBQ3BCLENBQ0EsR0FBSXRjLEVBQUlzYyxhQUF5QixJQUFWdnBCLEVBQWMsT0FBTzJrQixFQUM1QyxHQUFJaUUsR0FBMkIsSUFBVjVvQixJQUFpQmlOLEVBQUl1Yyx1QkFBc0MsT0FBYnZjLEVBQUl0WixNQUFnQixPQUV2RixHQURBODBCLEVBQVV4YixFQUFJMGMsVUFBVTNwQixHQUNYLE9BQU95b0IsRUFHcEIsR0FGQXpvQixFQUFTLEdBQ1RoWCxFQUFRaS9CLEdBQ0pXLEVBQWUsT0FDbkIsU0FFVyxLQUFQN2EsRUFBWWtiLEdBQWMsRUFDZCxLQUFQbGIsSUFBWWtiLEdBQWMsR0FDbkNqcEIsR0FBVStOLE1BdEIyQixDQUNyQyxHQUFjLElBQVYvTixFQUFjLE9BQU8ya0IsRUFFekIsR0FEQThELEVBQVV4YixFQUFJMGMsVUFBVTNwQixHQUNYLE9BQU95b0IsRUFHcEIsR0FGQXpvQixFQUFTLEdBQ1RoWCxFQUFRNitCLEdBQ0plLEdBQWlCaEIsR0FBVSxPQWlCL0IsTUFFSixLQUFLQyxHQUNILElBQUk5cUMsRUFBS2dvQyxFQUFPaFgsR0FFVCxJQUNMQSxHQUFPa1csR0FBYyxLQUFQbFcsR0FBcUIsS0FBUEEsR0FBcUIsS0FBUEEsR0FDbEMsTUFBUEEsR0FBZWQsRUFBSXNjLGFBQ3BCWCxFQUNBLENBQ0EsR0FBYyxJQUFWNW9CLEVBQWMsQ0FDaEIsSUFBSXJNLEVBQU9ra0IsRUFBUzdYLEVBQVEsSUFDNUIsR0FBSXJNLEVBQU8sTUFBUSxPQUFPaXhCLEVBQzFCM1gsRUFBSXRaLEtBQVFzWixFQUFJc2MsYUFBZTUxQixJQUFTMHlCLEdBQWVwWixFQUFJa2MsUUFBVyxLQUFPeDFCLEVBQzdFcU0sRUFBUyxHQUVYLEdBQUk0b0IsRUFBZSxPQUNuQjUvQixFQUFRaS9CLEdBQ1IsU0FDSyxPQUFPckQsRUFmWjVrQixHQUFVK04sRUFnQlosTUFFRixLQUFLK1osR0FFSCxHQURBN2EsRUFBSWtjLE9BQVMsT0FDRixLQUFQcGIsR0FBcUIsTUFBUEEsRUFBYS9rQixFQUFRKytCLE9BQ2xDLEtBQUl0VyxHQUF1QixRQUFmQSxFQUFLMFgsT0F5QmYsQ0FDTG5nQyxFQUFRay9CLEdBQ1IsU0ExQkEsR0FBSW5hLEdBQU9rVyxFQUNUaFgsRUFBSXRZLEtBQU84YyxFQUFLOWMsS0FDaEJzWSxFQUFJLzNCLEtBQU80UixFQUFXMnFCLEVBQUt2OEIsTUFDM0IrM0IsRUFBSTZWLE1BQVFyUixFQUFLcVIsV0FDWixHQUFXLEtBQVAvVSxFQUNUZCxFQUFJdFksS0FBTzhjLEVBQUs5YyxLQUNoQnNZLEVBQUkvM0IsS0FBTzRSLEVBQVcycUIsRUFBS3Y4QixNQUMzQiszQixFQUFJNlYsTUFBUSxHQUNaOTVCLEVBQVFvL0IsT0FDSCxJQUFXLEtBQVByYSxFQU1KLENBQ0ErWSxHQUE2Qi8vQixFQUFLRCxFQUFXK2hDLEVBQVlFLEdBQVUsT0FDdEU5YixFQUFJdFksS0FBTzhjLEVBQUs5YyxLQUNoQnNZLEVBQUkvM0IsS0FBTzRSLEVBQVcycUIsRUFBS3Y4QixNQUMzQiszQixFQUFJMmMsZUFFTjVnQyxFQUFRay9CLEdBQ1IsU0FaQWpiLEVBQUl0WSxLQUFPOGMsRUFBSzljLEtBQ2hCc1ksRUFBSS8zQixLQUFPNFIsRUFBVzJxQixFQUFLdjhCLE1BQzNCKzNCLEVBQUk2VixNQUFRclIsRUFBS3FSLE1BQ2pCN1YsRUFBSW9jLFNBQVcsR0FDZnJnQyxFQUFRcS9CLElBYVYsTUFFSixLQUFLTixHQUNILEdBQVcsS0FBUGhhLEdBQXFCLE1BQVBBLEVBQWEsQ0FDN0Iva0IsRUFBUWcvQixHQUNSLE1BRUV2VyxHQUF1QixRQUFmQSxFQUFLMFgsU0FBcUJyQyxHQUE2Qi8vQixFQUFLRCxFQUFXK2hDLEVBQVlFLEdBQVUsT0FDbkduQyxHQUFxQm5WLEVBQUt2OEIsS0FBSyxJQUFJLEdBQU95RSxFQUFLc3pCLEVBQUkvM0IsS0FBTXU4QixFQUFLdjhCLEtBQUssSUFDbEUrM0IsRUFBSXRZLEtBQU84YyxFQUFLOWMsTUFFdkIzTCxFQUFRay9CLEdBQ1IsU0FFRixLQUFLRixHQUNILEdBQUlqYSxHQUFPa1csR0FBYyxLQUFQbFcsR0FBcUIsTUFBUEEsR0FBc0IsS0FBUEEsR0FBcUIsS0FBUEEsRUFBWSxDQUN2RSxJQUFLNmEsR0FBaUJoQyxHQUFxQjVtQixHQUN6Q2hYLEVBQVFrL0IsUUFDSCxHQUFjLElBQVZsb0IsRUFBYyxDQUV2QixHQURBaU4sRUFBSXRZLEtBQU8sR0FDUGkwQixFQUFlLE9BQ25CNS9CLEVBQVFpL0IsT0FDSCxDQUVMLEdBREFRLEVBQVV4YixFQUFJMGMsVUFBVTNwQixHQUNYLE9BQU95b0IsRUFFcEIsR0FEZ0IsYUFBWnhiLEVBQUl0WSxPQUFxQnNZLEVBQUl0WSxLQUFPLElBQ3BDaTBCLEVBQWUsT0FDbkI1b0IsRUFBUyxHQUNUaFgsRUFBUWkvQixHQUNSLFNBQ0dqb0IsR0FBVStOLEVBQ2pCLE1BRUYsS0FBS2thLEdBQ0gsR0FBSWhiLEVBQUlzYyxhQUVOLEdBREF2Z0MsRUFBUWsvQixHQUNHLEtBQVBuYSxHQUFxQixNQUFQQSxFQUFhLGNBQzFCLEdBQUs2YSxHQUF3QixLQUFQN2EsRUFHdEIsR0FBSzZhLEdBQXdCLEtBQVA3YSxHQUd0QixHQUFJQSxHQUFPa1csSUFDaEJqN0IsRUFBUWsvQixHQUNHLEtBQVBuYSxHQUFZLGNBSmhCZCxFQUFJb2MsU0FBVyxHQUNmcmdDLEVBQVFxL0IsUUFKUnBiLEVBQUk2VixNQUFRLEdBQ1o5NUIsRUFBUW8vQixHQU9SLE1BRUosS0FBS0YsR0FDSCxHQUNFbmEsR0FBT2tXLEdBQWMsS0FBUGxXLEdBQ04sTUFBUEEsR0FBZWQsRUFBSXNjLGNBQ2xCWCxJQUF5QixLQUFQN2EsR0FBcUIsS0FBUEEsR0FDbEMsQ0FrQkEsR0FsWlMsUUFEbkJpWixFQUFVeDhCLEVBRGdCdzhCLEVBbVlBaG5CLEtBallhLFNBQVpnbkIsR0FBa0MsU0FBWkEsR0FBa0MsV0FBWkEsR0FrWTNEL1osRUFBSTJjLGNBQ08sS0FBUDdiLEdBQXVCLE1BQVBBLEdBQWVkLEVBQUlzYyxhQUNyQzV2QyxFQUFLc3pCLEVBQUkvM0IsS0FBTSxLQUVSNnhDLEdBQVkvbUIsR0FDVixLQUFQK04sR0FBdUIsTUFBUEEsR0FBZWQsRUFBSXNjLGFBQ3JDNXZDLEVBQUtzekIsRUFBSS8zQixLQUFNLEtBR0MsUUFBZCszQixFQUFJa2MsU0FBcUJsYyxFQUFJLzNCLEtBQUtpRCxRQUFVeXVDLEdBQXFCNW1CLEtBQy9EaU4sRUFBSXRZLE9BQU1zWSxFQUFJdFksS0FBTyxJQUN6QnFMLEVBQVNqTixFQUFPaU4sRUFBUSxHQUFLLEtBRS9Ccm1CLEVBQUtzekIsRUFBSS8zQixLQUFNOHFCLElBRWpCQSxFQUFTLEdBQ1MsUUFBZGlOLEVBQUlrYyxTQUFxQnBiLEdBQU9rVyxHQUFjLEtBQVBsVyxHQUFxQixLQUFQQSxHQUN2RCxLQUFPZCxFQUFJLzNCLEtBQUtpRCxPQUFTLEdBQXFCLEtBQWhCODBCLEVBQUkvM0IsS0FBSyxJQUNyQ3VzQyxFQUFNeFUsRUFBSS8zQixNQUdILEtBQVA2NEIsR0FDRmQsRUFBSTZWLE1BQVEsR0FDWjk1QixFQUFRby9CLElBQ1EsS0FBUHJhLElBQ1RkLEVBQUlvYyxTQUFXLEdBQ2ZyZ0MsRUFBUXEvQixTQUdWcm9CLEdBQVVvbUIsR0FBY3JZLEVBQUttWSxJQUM3QixNQUVKLEtBQUtpQyxHQUNRLEtBQVBwYSxHQUNGZCxFQUFJNlYsTUFBUSxHQUNaOTVCLEVBQVFvL0IsSUFDUSxLQUFQcmEsR0FDVGQsRUFBSW9jLFNBQVcsR0FDZnJnQyxFQUFRcS9CLElBQ0N0YSxHQUFPa1csSUFDaEJoWCxFQUFJLzNCLEtBQUssSUFBTWt4QyxHQUFjclksRUFBS2lZLEtBQ2xDLE1BRUosS0FBS29DLEdBQ0VRLEdBQXdCLEtBQVA3YSxFQUdYQSxHQUFPa1csSUFDTCxLQUFQbFcsR0FBY2QsRUFBSXNjLFlBQWF0YyxFQUFJNlYsT0FBUyxNQUMzQjdWLEVBQUk2VixPQUFULEtBQVAvVSxFQUF5QixNQUNoQnFZLEdBQWNyWSxFQUFLaVksTUFMckMvWSxFQUFJb2MsU0FBVyxHQUNmcmdDLEVBQVFxL0IsSUFLUixNQUVKLEtBQUtBLEdBQ0N0YSxHQUFPa1csSUFBS2hYLEVBQUlvYyxVQUFZakQsR0FBY3JZLEVBQUtrWSxLQUl2RDhDLE1BSUpZLFVBQVcsU0FBVTE0QixHQUNuQixJQUFJMVksRUFBUXN3QyxFQUFZaHdDLEVBQ3hCLEdBQXdCLEtBQXBCa2EsRUFBTzlCLEVBQU8sR0FBVyxDQUMzQixHQUF1QyxLQUFuQzhCLEVBQU85QixFQUFPQSxFQUFNOVksT0FBUyxHQUFXLE9BQU93c0MsRUFFbkQsR0FEQXBzQyxFQXpuQlUsU0FBVTBZLEdBQ3hCLElBSUl0WSxFQUFPUixFQUFRMHhDLEVBQWFDLEVBQVd0MEIsRUFBUXUwQixFQUFPQyxFQUp0REMsRUFBVSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDaENDLEVBQWEsRUFDYnpFLEVBQVcsS0FDWHNELEVBQVUsRUFHVmhiLEVBQU0sV0FDUixPQUFPaGIsRUFBTzlCLEVBQU84M0IsSUFHdkIsR0FBYSxLQUFUaGIsSUFBYyxDQUNoQixHQUF3QixLQUFwQmhiLEVBQU85QixFQUFPLEdBQVcsT0FDN0I4M0IsR0FBVyxFQUVYdEQsSUFEQXlFLEVBR0YsS0FBT25jLEtBQU8sQ0FDWixHQUFrQixHQUFkbWMsRUFBaUIsT0FDckIsR0FBYSxLQUFUbmMsSUFBSixDQVFBLElBREFwMUIsRUFBUVIsRUFBUyxFQUNWQSxFQUFTLEdBQUs0RSxFQUFLb29DLEVBQUtwWCxNQUM3QnAxQixFQUFnQixHQUFSQSxFQUFhay9CLEVBQVM5SixJQUFPLElBQ3JDZ2IsSUFDQTV3QyxJQUVGLEdBQWEsS0FBVDQxQixJQUFjLENBQ2hCLEdBQWMsR0FBVjUxQixFQUFhLE9BRWpCLEdBREE0d0MsR0FBVzV3QyxFQUNQK3hDLEVBQWEsRUFBRyxPQUVwQixJQURBTCxFQUFjLEVBQ1A5YixLQUFPLENBRVosR0FEQStiLEVBQVksS0FDUkQsRUFBYyxFQUFHLENBQ25CLEtBQWEsS0FBVDliLEtBQWdCOGIsRUFBYyxHQUM3QixPQURnQ2QsSUFHdkMsSUFBS2hzQyxFQUFLZ29DLEVBQU9oWCxLQUFRLE9BQ3pCLEtBQU9oeEIsRUFBS2dvQyxFQUFPaFgsTUFBUSxDQUV6QixHQURBdlksRUFBU3FpQixFQUFTOUosSUFBTyxJQUNQLE9BQWQrYixFQUFvQkEsRUFBWXQwQixNQUMvQixJQUFpQixHQUFiczBCLEVBQWdCLE9BQ3BCQSxFQUF3QixHQUFaQSxFQUFpQnQwQixFQUNsQyxHQUFJczBCLEVBQVksSUFBSyxPQUNyQmYsSUFFRmtCLEVBQVFDLEdBQW9DLElBQXRCRCxFQUFRQyxHQUFvQkosRUFFL0IsS0FEbkJELEdBQ3VDLEdBQWZBLEdBQWtCSyxJQUU1QyxHQUFtQixHQUFmTCxFQUFrQixPQUN0QixNQUNLLEdBQWEsS0FBVDliLEtBRVQsR0FEQWdiLEtBQ0toYixJQUFPLFlBQ1AsR0FBSUEsSUFBTyxPQUNsQmtjLEVBQVFDLEtBQWdCdnhDLE1BM0N4QixDQUNFLEdBQWlCLE9BQWI4c0MsRUFBbUIsT0FDdkJzRCxJQUVBdEQsSUFEQXlFLEdBMENKLEdBQWlCLE9BQWJ6RSxFQUdGLElBRkFzRSxFQUFRRyxFQUFhekUsRUFDckJ5RSxFQUFhLEVBQ1EsR0FBZEEsR0FBbUJILEVBQVEsR0FDaENDLEVBQU9DLEVBQVFDLEdBQ2ZELEVBQVFDLEtBQWdCRCxFQUFReEUsRUFBV3NFLEVBQVEsR0FDbkRFLEVBQVF4RSxJQUFhc0UsR0FBU0MsT0FFM0IsR0FBa0IsR0FBZEUsRUFBaUIsT0FDNUIsT0FBT0QsRUFnakJNRSxDQUFVL3NDLEVBQVk2VCxFQUFPLEdBQUksS0FDckMxWSxFQUFRLE9BQU9vc0MsRUFDcEIzc0MsS0FBSzJjLEtBQU9wYyxPQUVQLEdBQUtQLEtBQUt1eEMsWUFRVixDQUVMLEdBREF0NEIsRUFBUWt6QixFQUFRbHpCLEdBQ1psVSxFQUFLcW9DLEdBQTJCbjBCLEdBQVEsT0FBTzB6QixFQUVuRCxHQURBcHNDLEVBaHJCVSxTQUFVMFksR0FDeEIsSUFDSW01QixFQUFhQyxFQUFTeHhDLEVBQU95eEMsRUFBTTdTLEVBQU9qaUIsRUFBUSswQixFQURsREMsRUFBUTFsQyxFQUFNbU0sRUFBTyxLQU16QixHQUpJdTVCLEVBQU1yeUMsUUFBcUMsSUFBM0JxeUMsRUFBTUEsRUFBTXJ5QyxPQUFTLElBQ3ZDcXlDLEVBQU1yeUMsVUFFUml5QyxFQUFjSSxFQUFNcnlDLFFBQ0YsRUFBRyxPQUFPOFksRUFFNUIsSUFEQW81QixFQUFVLEdBQ0x4eEMsRUFBUSxFQUFHQSxFQUFRdXhDLEVBQWF2eEMsSUFBUyxDQUU1QyxHQUFZLEtBRFp5eEMsRUFBT0UsRUFBTTN4QyxJQUNHLE9BQU9vWSxFQU12QixHQUxBd21CLEVBQVEsR0FDSjZTLEVBQUtueUMsT0FBUyxHQUF3QixLQUFuQjRhLEVBQU91M0IsRUFBTSxLQUNsQzdTLEVBQVExNkIsRUFBS2lvQyxFQUFXc0YsR0FBUSxHQUFLLEVBQ3JDQSxFQUFPbHRDLEVBQVlrdEMsRUFBZSxHQUFUN1MsRUFBYSxFQUFJLElBRS9CLEtBQVQ2UyxFQUNGOTBCLEVBQVMsTUFDSixDQUNMLElBQUt6WSxFQUFjLElBQVQwNkIsRUFBY3lOLEVBQWUsR0FBVHpOLEVBQWF3TixFQUFNRSxFQUFLbUYsR0FBTyxPQUFPcjVCLEVBQ3BFdUUsRUFBU3FpQixFQUFTeVMsRUFBTTdTLEdBRTFCOTlCLEVBQUswd0MsRUFBUzcwQixHQUVoQixJQUFLM2MsRUFBUSxFQUFHQSxFQUFRdXhDLEVBQWF2eEMsSUFFbkMsR0FEQTJjLEVBQVM2MEIsRUFBUXh4QyxHQUNiQSxHQUFTdXhDLEVBQWMsR0FDekIsR0FBSTUwQixHQUFVMlYsRUFBSSxJQUFLLEVBQUlpZixHQUFjLE9BQU8sVUFDM0MsR0FBSTUwQixFQUFTLElBQUssT0FBTyxLQUdsQyxJQURBKzBCLEVBQU8vRixFQUFJNkYsR0FDTnh4QyxFQUFRLEVBQUdBLEVBQVF3eEMsRUFBUWx5QyxPQUFRVSxJQUN0QzB4QyxHQUFRRixFQUFReHhDLEdBQVNzeUIsRUFBSSxJQUFLLEVBQUl0eUIsR0FFeEMsT0FBTzB4QyxFQTZvQk1FLENBQVV4NUIsR0FDSixPQUFYMVksRUFBaUIsT0FBT29zQyxFQUM1QjNzQyxLQUFLMmMsS0FBT3BjLE1BYmdCLENBQzVCLEdBQUl3RSxFQUFLc29DLEdBQTZDcDBCLEdBQVEsT0FBTzB6QixFQUdyRSxJQUZBcHNDLEVBQVMsR0FDVHN3QyxFQUFhM0UsRUFBVWp6QixHQUNsQnBZLEVBQVEsRUFBR0EsRUFBUWd3QyxFQUFXMXdDLE9BQVFVLElBQ3pDTixHQUFVNnRDLEdBQWN5QyxFQUFXaHdDLEdBQVFtdEMsSUFFN0NodUMsS0FBSzJjLEtBQU9wYyxJQVVoQm15QywrQkFBZ0MsV0FDOUIsT0FBUTF5QyxLQUFLMmMsTUFBUTNjLEtBQUtzeEMsa0JBQW1DLFFBQWZ0eEMsS0FBS214QyxRQUdyREssb0JBQXFCLFdBQ25CLE1BQXdCLElBQWpCeHhDLEtBQUt5MUIsVUFBbUMsSUFBakJ6MUIsS0FBS294QyxVQUdyQ0csVUFBVyxXQUNULE9BQU9uckMsRUFBT2lvQyxHQUFnQnJ1QyxLQUFLbXhDLFNBR3JDUyxZQUFhLFdBQ1gsSUFBSTEwQyxFQUFPOEMsS0FBSzlDLEtBQ1p5MUMsRUFBV3oxQyxFQUFLaUQsUUFDaEJ3eUMsR0FBNEIsUUFBZjN5QyxLQUFLbXhDLFFBQWdDLEdBQVp3QixHQUFrQi9ELEdBQXFCMXhDLEVBQUssSUFBSSxJQUN4RkEsRUFBS2lELFVBSVQ4cEMsVUFBVyxXQUNULElBQUloVixFQUFNajFCLEtBQ05teEMsRUFBU2xjLEVBQUlrYyxPQUNiMWIsRUFBV1IsRUFBSVEsU0FDZjJiLEVBQVduYyxFQUFJbWMsU0FDZnowQixFQUFPc1ksRUFBSXRZLEtBQ1hoQixFQUFPc1osRUFBSXRaLEtBQ1h6ZSxFQUFPKzNCLEVBQUkvM0IsS0FDWDR0QyxFQUFRN1YsRUFBSTZWLE1BQ1p1RyxFQUFXcGMsRUFBSW9jLFNBQ2YxWCxFQUFTd1gsRUFBUyxJQVl0QixPQVhhLE9BQVR4MEIsR0FDRmdkLEdBQVUsS0FDTjFFLEVBQUl1Yyx3QkFDTjdYLEdBQVVsRSxHQUFZMmIsRUFBVyxJQUFNQSxFQUFXLElBQU0sS0FFMUR6WCxHQUFVNlQsR0FBYzd3QixHQUNYLE9BQVRoQixJQUFlZ2UsR0FBVSxJQUFNaGUsSUFDaEIsUUFBVncxQixJQUFrQnhYLEdBQVUsTUFDdkNBLEdBQVUxRSxFQUFJcWMsaUJBQW1CcDBDLEVBQUssR0FBS0EsRUFBS2lELE9BQVMsSUFBTTRPLEVBQUs3UixFQUFNLEtBQU8sR0FDbkUsT0FBVjR0QyxJQUFnQm5SLEdBQVUsSUFBTW1SLEdBQ25CLE9BQWJ1RyxJQUFtQjFYLEdBQVUsSUFBTTBYLEdBQ2hDMVgsR0FHVGlaLFFBQVMsU0FBVXJkLEdBQ2pCLElBQUlrYixFQUFVendDLEtBQUsyd0MsTUFBTXBiLEdBQ3pCLEdBQUlrYixFQUFTLE1BQU14eEMsRUFBVXd4QyxHQUM3Qnp3QyxLQUFLbTFCLGFBQWF3VixVQUdwQmtJLFVBQVcsV0FDVCxJQUFJMUIsRUFBU254QyxLQUFLbXhDLE9BQ2R4MUIsRUFBTzNiLEtBQUsyYixLQUNoQixHQUFjLFFBQVZ3MUIsRUFBa0IsSUFDcEIsT0FBTyxJQUFJMkIsR0FBZTNCLEVBQU9qMEMsS0FBSyxJQUFJNjFDLE9BQzFDLE1BQU9ydUMsR0FDUCxNQUFPLE9BRVQsTUFBYyxRQUFWeXNDLEdBQXFCbnhDLEtBQUt1eEMsWUFDdkJKLEVBQVMsTUFBUTNELEdBQWN4dEMsS0FBSzJjLE9BQWtCLE9BQVRoQixFQUFnQixJQUFNQSxFQUFPLElBRC9CLFFBSXBEcTNCLFlBQWEsV0FDWCxPQUFPaHpDLEtBQUtteEMsT0FBUyxLQUV2QjhCLFlBQWEsU0FBVXYyQixHQUNyQjFjLEtBQUsyd0MsTUFBTXJyQixFQUFVNUksR0FBWSxJQUFLdXlCLEtBR3hDaUUsWUFBYSxXQUNYLE9BQU9sekMsS0FBS3kxQixVQUVkMGQsWUFBYSxTQUFVMWQsR0FDckIsSUFBSW9iLEVBQWEzRSxFQUFVNW1CLEVBQVVtUSxJQUNyQyxJQUFJejFCLEtBQUsweUMsaUNBQVQsQ0FDQTF5QyxLQUFLeTFCLFNBQVcsR0FDaEIsSUFBSyxJQUFJOXVCLEVBQUksRUFBR0EsRUFBSWtxQyxFQUFXMXdDLE9BQVF3RyxJQUNyQzNHLEtBQUt5MUIsVUFBWTJZLEdBQWN5QyxFQUFXbHFDLEdBQUl3bkMsTUFJbERpRixZQUFhLFdBQ1gsT0FBT3B6QyxLQUFLb3hDLFVBRWRpQyxZQUFhLFNBQVVqQyxHQUNyQixJQUFJUCxFQUFhM0UsRUFBVTVtQixFQUFVOHJCLElBQ3JDLElBQUlweEMsS0FBSzB5QyxpQ0FBVCxDQUNBMXlDLEtBQUtveEMsU0FBVyxHQUNoQixJQUFLLElBQUl6cUMsRUFBSSxFQUFHQSxFQUFJa3FDLEVBQVcxd0MsT0FBUXdHLElBQ3JDM0csS0FBS294QyxVQUFZaEQsR0FBY3lDLEVBQVdscUMsR0FBSXduQyxNQUlsRG1GLFFBQVMsV0FDUCxJQUFJMzJCLEVBQU8zYyxLQUFLMmMsS0FDWmhCLEVBQU8zYixLQUFLMmIsS0FDaEIsT0FBZ0IsT0FBVGdCLEVBQWdCLEdBQ1YsT0FBVGhCLEVBQWdCNnhCLEdBQWM3d0IsR0FDOUI2d0IsR0FBYzd3QixHQUFRLElBQU1oQixHQUVsQzQzQixRQUFTLFNBQVU1MkIsR0FDYjNjLEtBQUtzeEMsa0JBQ1R0eEMsS0FBSzJ3QyxNQUFNaDBCLEVBQU1nekIsS0FHbkI2RCxZQUFhLFdBQ1gsSUFBSTcyQixFQUFPM2MsS0FBSzJjLEtBQ2hCLE9BQWdCLE9BQVRBLEVBQWdCLEdBQUs2d0IsR0FBYzd3QixJQUU1QzgyQixZQUFhLFNBQVVDLEdBQ2pCMXpDLEtBQUtzeEMsa0JBQ1R0eEMsS0FBSzJ3QyxNQUFNK0MsRUFBVTlELEtBR3ZCK0QsUUFBUyxXQUNQLElBQUloNEIsRUFBTzNiLEtBQUsyYixLQUNoQixPQUFnQixPQUFUQSxFQUFnQixHQUFLMkosRUFBVTNKLElBRXhDaTRCLFFBQVMsU0FBVWo0QixHQUNiM2IsS0FBSzB5QyxtQ0FFRyxLQURaLzJCLEVBQU8ySixFQUFVM0osSUFDRDNiLEtBQUsyYixLQUFPLEtBQ3ZCM2IsS0FBSzJ3QyxNQUFNaDFCLEVBQU1rMEIsTUFHeEJnRSxZQUFhLFdBQ1gsSUFBSTMyQyxFQUFPOEMsS0FBSzlDLEtBQ2hCLE9BQU84QyxLQUFLc3hDLGlCQUFtQnAwQyxFQUFLLEdBQUtBLEVBQUtpRCxPQUFTLElBQU00TyxFQUFLN1IsRUFBTSxLQUFPLElBRWpGNDJDLFlBQWEsU0FBVTFlLEdBQ2pCcDFCLEtBQUtzeEMsbUJBQ1R0eEMsS0FBSzlDLEtBQU8sR0FDWjhDLEtBQUsyd0MsTUFBTXZiLEVBQVU2YSxNQUd2QjhELFVBQVcsV0FDVCxJQUFJakosRUFBUTlxQyxLQUFLOHFDLE1BQ2pCLE9BQU9BLEVBQVEsSUFBTUEsRUFBUSxJQUUvQmtKLFVBQVcsU0FBVUMsR0FFTCxLQURkQSxFQUFTM3VCLEVBQVUydUIsSUFFakJqMEMsS0FBSzhxQyxNQUFRLE1BRVQsS0FBTy92QixFQUFPazVCLEVBQVEsS0FBSUEsRUFBUzd1QyxFQUFZNnVDLEVBQVEsSUFDM0RqMEMsS0FBSzhxQyxNQUFRLEdBQ2I5cUMsS0FBSzJ3QyxNQUFNc0QsRUFBUTdELEtBRXJCcHdDLEtBQUttMUIsYUFBYXdWLFVBR3BCdUosZ0JBQWlCLFdBQ2YsT0FBT2wwQyxLQUFLbTFCLGFBQWE5akIsUUFHM0I4aUMsUUFBUyxXQUNQLElBQUk5QyxFQUFXcnhDLEtBQUtxeEMsU0FDcEIsT0FBT0EsRUFBVyxJQUFNQSxFQUFXLElBRXJDK0MsUUFBUyxTQUFVMWUsR0FFTCxLQURaQSxFQUFPcFEsRUFBVW9RLEtBS2IsS0FBTzNhLEVBQU8yYSxFQUFNLEtBQUlBLEVBQU90d0IsRUFBWXN3QixFQUFNLElBQ3JEMTFCLEtBQUtxeEMsU0FBVyxHQUNoQnJ4QyxLQUFLMndDLE1BQU1qYixFQUFNMmEsS0FMZnJ3QyxLQUFLcXhDLFNBQVcsTUFPcEIxRyxPQUFRLFdBQ04zcUMsS0FBSzhxQyxNQUFROXFDLEtBQUttMUIsYUFBYThVLGFBQWUsT0FNbEQsSUFBSTZJLEdBQWlCLFNBQWE3ZCxHQUNoQyxJQUFJNXlCLEVBQU84ZixFQUFXbmlCLEtBQU1xMEMsSUFDeEI1YSxFQUFPdjVCLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLRyxFQUM3QzJRLEVBQVFvUCxFQUFpQi9kLEVBQU0sSUFBSWl1QyxHQUFTcmIsR0FBSyxFQUFPd0UsSUFDdkRueUIsSUFDSGpGLEVBQUtrekIsS0FBT3ZrQixFQUFNaTVCLFlBQ2xCNW5DLEVBQUswd0MsT0FBUy9oQyxFQUFNNmhDLFlBQ3BCeHdDLEVBQUtxYSxTQUFXMUwsRUFBTWdpQyxjQUN0QjN3QyxFQUFLb3pCLFNBQVd6a0IsRUFBTWtpQyxjQUN0Qjd3QyxFQUFLK3VDLFNBQVdwZ0MsRUFBTW9pQyxjQUN0Qi93QyxFQUFLc2EsS0FBTzNMLEVBQU1zaUMsVUFDbEJqeEMsRUFBS3F4QyxTQUFXMWlDLEVBQU13aUMsY0FDdEJueEMsRUFBS3NaLEtBQU8zSyxFQUFNMmlDLFVBQ2xCdHhDLEVBQUsreUIsU0FBV3BrQixFQUFNNmlDLGNBQ3RCeHhDLEVBQUs0eEMsT0FBU2pqQyxFQUFNK2lDLFlBQ3BCMXhDLEVBQUs4eUIsYUFBZW5rQixFQUFNa2pDLGtCQUMxQjd4QyxFQUFLcXpCLEtBQU8xa0IsRUFBTW1qQyxZQUlsQkUsR0FBZXZCLEdBQWU3MEMsVUFFOUJxMkMsR0FBcUIsU0FBVWhZLEVBQVF4akIsR0FDekMsTUFBTyxDQUNMOU8sSUFBSyxXQUNILE9BQU9xaUMsRUFBb0Jyc0MsTUFBTXM4QixNQUVuQzlyQixJQUFLc0ksR0FBVSxTQUFVblksR0FDdkIsT0FBTzByQyxFQUFvQnJzQyxNQUFNOFksR0FBUW5ZLElBRTNDOEcsY0FBYyxFQUNkRCxZQUFZLElBeURoQixHQXJESUYsR0FDRnFRLEVBQWlCMDhCLEdBQWMsQ0FHN0I5ZSxLQUFNK2UsR0FBbUIsWUFBYSxXQUd0Q3ZCLE9BQVF1QixHQUFtQixhQUczQjUzQixTQUFVNDNCLEdBQW1CLGNBQWUsZUFHNUM3ZSxTQUFVNmUsR0FBbUIsY0FBZSxlQUc1Q2xELFNBQVVrRCxHQUFtQixjQUFlLGVBRzVDMzNCLEtBQU0yM0IsR0FBbUIsVUFBVyxXQUdwQ1osU0FBVVksR0FBbUIsY0FBZSxlQUc1QzM0QixLQUFNMjRCLEdBQW1CLFVBQVcsV0FHcENsZixTQUFVa2YsR0FBbUIsY0FBZSxlQUc1Q0wsT0FBUUssR0FBbUIsWUFBYSxhQUd4Q25mLGFBQWNtZixHQUFtQixtQkFHakM1ZSxLQUFNNGUsR0FBbUIsVUFBVyxhQU14Q25zQyxFQUFTa3NDLEdBQWMsVUFBVSxXQUMvQixPQUFPaEksRUFBb0Jyc0MsTUFBTWlxQyxjQUNoQyxDQUFFemlDLFlBQVksSUFJakJXLEVBQVNrc0MsR0FBYyxZQUFZLFdBQ2pDLE9BQU9oSSxFQUFvQnJzQyxNQUFNaXFDLGNBQ2hDLENBQUV6aUMsWUFBWSxJQUViK2tDLEVBQVcsQ0FDYixJQUFJZ0ksR0FBd0JoSSxFQUFVaUksZ0JBQ2xDQyxHQUF3QmxJLEVBQVVtSSxnQkFHbENILElBQXVCcHNDLEVBQVMycUMsR0FBZ0Isa0JBQW1CcDFDLEVBQUs2MkMsR0FBdUJoSSxJQUcvRmtJLElBQXVCdHNDLEVBQVMycUMsR0FBZ0Isa0JBQW1CcDFDLEVBQUsrMkMsR0FBdUJsSSxJQUdyR3ZsQyxFQUFlOHJDLEdBQWdCLE9BRS9CanJDLEVBQUUsQ0FBRS9JLFFBQVEsRUFBTWdMLFFBQVMrK0IsRUFBZ0JwcUMsTUFBTzZJLEdBQWUsQ0FDL0Q0dEIsSUFBSzRkLHNCQ2poQ1AsTUFBTTZCLEVBQWlCLEVBQVEsT0FFL0I1M0MsRUFBT0MsUUFBVzQzQyxJQUNoQixJQUFLLE1BQU05bEIsS0FBVzZsQixFQUNwQixHQUFJN2xCLEVBQVErbEIsTUFBTTN1QyxLQUFLMHVDLEdBQWEsT0FBTzlsQixFQUFRZ21CLFNBR3JELE9BQU8saUJDUFIvM0MsRUFBT0MsUUFBV3VaLElBQ2YsSUFBSyxJQUFJakosRUFBSSxFQUFHQSxFQUFJaUosRUFBUXBXLE9BQVFtTixJQUVoQyxHQUFtQixNQUFmaUosRUFBUWpKLEdBQ1IsT0FBTyxFQUdmLE9BQU8sb0JDUFgsTUFBTXluQyxFQUFrQixFQUFRLE9BQzFCQyxFQUEyQixFQUFRLE9BRXpDajRDLEVBQU9DLFFBQVUsQ0FBQ21WLEVBQU04aUMsS0FDdEI5aUMsRUFBSytpQyxZQUFjSCxFQUFnQjVpQyxFQUFNOGlDLEVBQVNILFVBRWxERyxFQUFTRSxTQUFXaGpDLEVBQUsraUMsWUFBWXRYLFFBQU8sQ0FBQ3dYLEVBQUtqOEIsSUFDaERpOEIsRUFBSXZwQixNQUFRMVMsRUFBSTBTLE1BQVF1cEIsRUFBTWo4QixJQUM5QnhQLEtBR0Z3SSxFQUFLK0ksSUFBTS9JLEVBQUsraUMsWUFBWWp5QyxXQUN6Qm95QyxHQUFTQSxFQUFLMXJDLE9BQVNzckMsRUFBU0UsV0FJOUJGLEVBQVNILFdBQ1pHLEVBQVNILFNBQVczaUMsRUFBSytpQyxZQUFZL2lDLEVBQUsrSSxLQUFLNDVCLFVBR2pELE1BQU1RLEVBQWVOLEVBQXlCN2lDLEVBQU04aUMsR0FlcEQsT0FiSUEsRUFBU00sV0FBV1QsV0FHdEJHLEVBQVNNLFdBQVdULFNBQVdRLEdBRi9CTCxFQUFTTSxXQUFXSixTQUFXRyxFQU81Qm5qQyxFQUFLK2lDLFlBQVkvaUMsRUFBSytJLEtBQUsyUSxRQUM5Qm9wQixFQUFTRSxTQUFXLEtBQ3BCRixFQUFTTSxXQUFXSixTQUFXLE1BRzFCRixjQ25DVGw0QyxFQUFPQyxRQUFVLENBQUNtVixFQUFNOGlDLEtBQ3RCLE1BQU1PLEVBQVksSUFBSTlqQixPQUNwQiwyREFDQSxLQUVJK2pCLEVBQWtCdGpDLEVBQUtvRSxRQUFRM1EsUUFBUTR2QyxFQUFXLElBQUlyMUMsT0FDdER1MUMsRUFBVXZqQyxFQUFLK2lDLFlBQ2ZoNkIsRUFBTS9JLEVBQUsrSSxJQUVYeTZCLEVBQWlCRCxFQUFROVgsUUFBTyxDQUFDd1gsRUFBS2o4QixJQUN0Q2k4QixFQUFJenJDLE9BQVNzckMsRUFBU0UsU0FBaUJoOEIsRUFDdkNBLEVBQUl4UCxPQUFTc3JDLEVBQVNFLFVBRW5CQyxFQUFJdnBCLE9BQVMxUyxFQUFJMFMsTUFGbUJ1cEIsRUFFTGo4QixJQUdsQ3k4QixFQUNKRixFQUFReDZCLEdBQUsyUSxPQUFTOHBCLEVBQWU5cEIsTUFBUTZwQixFQUFReDZCLEdBQUsyUSxPQUN0RGdxQixFQUFxQkgsRUFBUXg2QixHQUFLMlEsTUFBUTRwQixFQUVoRCxJQW9CSUssRUFwQkFDLEVBQWEsS0FDYkMsRUFBYSxLQXFDakIsTUFsQzBCLFVBQXRCZixFQUFTSCxVQUE4QyxhQUF0QkcsRUFBU0gsVUFDNUNpQixFQUFhTCxFQUFReDZCLEdBQUsrNkIsYUFIVCxHQUliUCxFQUFReDZCLEdBQUsrNkIsYUFBYXBYLElBQzFCLEtBQ0ptWCxFQUFhTixFQUFReDZCLEdBQUsrNkIsY0FDckJQLEVBQVF4NkIsR0FBSys2QixhQUFhcFgsSUFBTTZXLEVBQVF4NkIsR0FBSys2QixhQUFhQyxNQUFRLEVBQ25FLE9BRUpILEVBQWFMLEVBQVF4NkIsR0FBS2k3QixhQVZULEdBV2JULEVBQVF4NkIsR0FBS2k3QixhQUFhdFgsSUFDMUIsS0FDSm1YLEVBQWFOLEVBQVF4NkIsR0FBS2k3QixjQUNyQlQsRUFBUXg2QixHQUFLaTdCLGFBQWF0WCxJQUFNNlcsRUFBUXg2QixHQUFLaTdCLGFBQWFELE1BQVEsRUFDbkUsTUFRSkosRUFIR0MsR0FBZUMsRUFFVEgsR0FBc0JHLEVBQ2IsRUFNQW5oQixPQUxUZ2hCLEVBQXFCRSxHQUtKSCxHQUhWQyxFQUFxQkUsSUFEdkJDLEVBQWFELElBR0YsRUFBSUgsSUFDOEJRLFFBQVEsSUFHaEVSLEdBQWlCQyxFQUFxQkUsSUFBYUssUUFBUSxJQVg1QyxLQWViTixvQkMxRFQsTUFBTVosRUFBYyxFQUFRLE9BRTVCbjRDLEVBQU9DLFFBQVUsQ0FBQ21WLEVBQU0yaUMsS0FDdEIsTUFBTXVCLEVBQWlCLEdBR3ZCbkIsRUFBWXZ5QyxTQUFTa1IsSUFDbkIsTUFBTXlpQyxFQUFpQixHQUN2Qmo0QyxPQUFPYixLQUFLcVcsR0FBS2xSLFNBQVNwRSxJQUNaLFVBQVJBLEVBQ0YrM0MsRUFBZS8zQyxHQUFPc1YsRUFBSXRWLEdBRTFCKzNDLEVBQWV6cUIsTUFBUSxLQUczQndxQixFQUFlMTBDLEtBQUsyMEMsTUFHdEIsTUFBTXpCLEVBQVFDLEVBQVcsV0FBYSxXQVd0QyxPQVJBdUIsRUFBZTF6QyxTQUFTNHpDLElBQ3RCLEdBQUlBLEVBQUsxQixHQUFRLENBQ2YsTUFBTTJCLEVBQVVya0MsRUFBS29FLFFBQVE5SixNQUFNOHBDLEVBQUsxQixJQUVwQzJCLElBQVNELEVBQUsxcUIsTUFBUTJxQixFQUFRcjJDLFlBSS9CazJDLGNDN0JUdDVDLEVBQU9DLFFBQVUsQ0FDZixDQUNFODNDLFNBQVUsYUFDVkQsTUFBTyxJQUFJbmpCLE9BQU8sb0JBRXBCLENBQ0VvakIsU0FBVSxXQUNWRCxNQUFPLElBQUluakIsT0FBTyxrQkFFcEIsQ0FDRW9qQixTQUFVLFdBQ1ZELE1BQU8sSUFBSW5qQixPQUFPLGdCQUVwQixDQUNFb2pCLFNBQVUsV0FDVkQsTUFBTyxJQUFJbmpCLE9BQU8sZ0JBRXBCLENBQ0VvakIsU0FBVSxRQUNWRCxNQUFPLElBQUluakIsT0FBTyxnQkFFcEIsQ0FDRW9qQixTQUFVLFFBQ1ZELE1BQU8sSUFBSW5qQixPQUFPLGNBRXBCLENBQ0VvakIsU0FBVSxRQUNWRCxNQUFPLElBQUluakIsT0FBTyxlQUVwQixDQUNFb2pCLFNBQVUsT0FDVkQsTUFBTyxJQUFJbmpCLE9BQU8sZUFFcEIsQ0FDRW9qQixTQUFVLFNBQ1ZELE1BQU8sSUFBSW5qQixPQUFPLGVBRXBCLENBQ0VvakIsU0FBVSxXQUNWRCxNQUFPLElBQUluakIsT0FBTyxZQUVwQixDQUNFb2pCLFNBQVUsV0FDVkQsTUFBTyxJQUFJbmpCLE9BQU8sd0JDM0NyQixNQUFNK2tCLEVBQU8sS0FFUkMsRUFBYyxDQUNoQkMsTUFBTyxJQUFJamxCLE9BQU8sV0FBWStrQixHQUM5QkcsVUFBVyxJQUFJbGxCLE9BQU8sVUFBVytrQixHQUNqQ0ksT0FBUSxJQUFJbmxCLE9BQU8sMEJBQTJCK2tCLEdBQzlDSyxVQUFXLElBQUlwbEIsT0FBTyxxQkFBc0Ira0IsR0FDNUNNLFNBQVUsSUFBSXJsQixPQUFPLE1BQU8ra0IsR0FDNUJPLFFBQVMsSUFBSXRsQixPQUFPLFFBQVMra0IsR0FDN0JRLE9BQVEsSUFBSXZsQixPQUFPLFFBQVMra0IsR0FDNUJTLFdBQVksSUFBSXhsQixPQUFPLFFBQVMra0IsR0FDaENVLFFBQVMsSUFBSXpsQixPQUFPLCtCQUFnQytrQixHQUNwRFcsT0FBUSxJQUFJMWxCLE9BQU8sVUFBVytrQixHQUM5QlksUUFBUyxJQUFJM2xCLE9BQU8sVUFBVytrQixHQUMvQmEsT0FBUSxJQUFJNWxCLE9BQU8sYUFBYytrQixHQUNqQ2MsVUFBVyxJQUFJN2xCLE9BQU8sTUFBTytrQixHQUM3QmUsUUFBUyxJQUFJOWxCLE9BQU8sUUFBUytrQixHQUM3QmdCLE1BQU8sSUFBSS9sQixPQUFPLFFBQVMra0IsR0FDM0JpQixRQUFTLElBQUlobUIsT0FBTyxNQUFPK2tCLEdBQzNCLGlCQUFrQixJQUFJL2tCLE9BQU8sZUFBZ0Ira0IsR0FDN0NrQixTQUFVLElBQUlqbUIsT0FBTywyQkFBNEIra0IsR0FDakRtQixVQUFXLElBQUlsbUIsT0FBTyxNQUFPK2tCLEdBQzdCLG1CQUFvQixJQUFJL2tCLE9BQU8sUUFBUytrQixHQUN4Q29CLFFBQVMsSUFBSW5tQixPQUFPLFFBQVMra0IsR0FDN0JxQixXQUFZLElBQUlwbUIsT0FBTyxlQUFnQitrQixHQUN2Q3NCLFFBQVMsSUFBSXJtQixPQUFPLE1BQU8ra0IsR0FDM0J1QixNQUFPLElBQUl0bUIsT0FBTyxNQUFPK2tCLEdBQ3pCd0IsS0FBTSxJQUFJdm1CLE9BQU8sTUFBTytrQixHQUN4QnlCLFdBQVksSUFBSXhtQixPQUFPLFVBQVcra0IsSUFHaEMwQixFQUFrQixDQUNwQkMsT0FBUSxDQUFFdlosSUFBSyxRQUFVcVgsS0FBTSxTQUMvQlMsTUFBTyxDQUFFOVgsSUFBSyxRQUFVcVgsS0FBTSxTQUM5QlUsVUFBVyxDQUFFL1gsSUFBSyxRQUFVcVgsS0FBTSxTQUNsQ21DLFNBQVUsQ0FBRXhaLElBQUssUUFBVXFYLEtBQU0sUUFDakNXLE9BQVEsQ0FBRWhZLElBQUssUUFBVXFYLEtBQU0sU0FDL0JZLFVBQVcsQ0FBRWpZLElBQUssUUFBVXFYLEtBQU0sU0FDbENhLFNBQVUsQ0FBRWxZLElBQUssUUFBVXFYLEtBQU0sU0FDakNvQyxVQUFXLENBQUV6WixJQUFLLFFBQVVxWCxLQUFNLFNBQ2xDYyxRQUFTLENBQUVuWSxJQUFLLFFBQVVxWCxLQUFNLFFBQ2hDZSxPQUFRLENBQUVwWSxJQUFLLFFBQVVxWCxLQUFNLFNBQy9CZ0IsV0FBWSxDQUFFclksSUFBSyxRQUFVcVgsS0FBTSxTQUNuQ2lCLFFBQVMsQ0FBRXRZLElBQUssUUFBVXFYLEtBQU0sU0FDaENrQixPQUFRLENBQUV2WSxJQUFLLFFBQVVxWCxLQUFNLFNBQy9CbUIsUUFBUyxDQUFFeFksSUFBSyxRQUFVcVgsS0FBTSxTQUNoQ29CLE9BQVEsQ0FBRXpZLElBQUssT0FBVXFYLEtBQU0sU0FDL0JxQixVQUFXLENBQUUxWSxJQUFLLE9BQVVxWCxLQUFNLFNBQ2xDc0IsUUFBUyxDQUFFM1ksSUFBSyxRQUFVcVgsS0FBTSxTQUNoQ3VCLE1BQU8sQ0FBRTVZLElBQUssUUFBVXFYLEtBQU0sUUFDOUJ3QixRQUFTLENBQUU3WSxJQUFLLFFBQVVxWCxLQUFNLFNBQ2hDLGlCQUFrQixDQUFFclgsSUFBSyxRQUFVcVgsS0FBTSxTQUN6Q3lCLFNBQVUsQ0FBRTlZLElBQUssUUFBVXFYLEtBQU0sU0FDakMwQixVQUFXLENBQUUvWSxJQUFLLFFBQVVxWCxLQUFNLFNBQ2xDLG1CQUFvQixDQUFFclgsSUFBSyxRQUFVcVgsS0FBTSxTQUMzQ3FDLE1BQU8sQ0FBRTFaLElBQUssT0FBVXFYLEtBQU0sU0FDOUIyQixRQUFTLENBQUVoWixJQUFLLFFBQVVxWCxLQUFNLFNBQ2hDc0MsT0FBUSxDQUFFM1osSUFBSyxRQUFVcVgsS0FBTSxTQUMvQjRCLFdBQVksQ0FBRWpaLElBQUssUUFBVXFYLEtBQU0sU0FDbkM2QixRQUFTLENBQUVsWixJQUFLLFFBQVVxWCxLQUFNLFNBQ2hDOEIsTUFBTyxDQUFFblosSUFBSyxRQUFVcVgsS0FBTSxTQUM5QitCLEtBQU0sQ0FBRXBaLElBQUssUUFBVXFYLEtBQU0sU0FDN0JnQyxXQUFZLENBQUVyWixJQUFLLFFBQVVxWCxLQUFNLFVBR3ZDbjVDLEVBQU9DLFFBQVUsQ0FDYixDQUNJMk0sS0FBTSxTQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVLElBQUkvbUIsT0FBTyxNQUFPK2tCLEdBQzVCaUMsU0FBVSxJQUFJaG5CLE9BQU8sTUFBTytrQixHQUM1QjNCLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQkMsT0FDOUJqQyxhQUFjZ0MsRUFBZ0JDLFFBRWxDLENBQ0l6dUMsS0FBTSxRQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVL0IsRUFBWUMsTUFDdEIrQixTQUFVaEMsRUFBWUMsTUFDdEI3QixTQUFVLFNBQ1ZtQixhQUFja0MsRUFBZ0J4QixNQUM5QlIsYUFBY2dDLEVBQWdCeEIsT0FFbEMsQ0FDSWh0QyxLQUFNLFlBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZRSxVQUN0QjhCLFNBQVVoQyxFQUFZRSxVQUN0QjlCLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQnZCLFVBQzlCVCxhQUFjZ0MsRUFBZ0J2QixXQUVsQyxDQUNJanRDLEtBQU0sV0FDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVSxJQUFJL21CLE9BQU8sWUFBYStrQixHQUNsQ2lDLFNBQVUsSUFBSWhuQixPQUFPLFlBQWEra0IsR0FDbEMzQixTQUFVLFNBQ1ZtQixhQUFja0MsRUFBZ0JFLFNBQzlCbEMsYUFBY2dDLEVBQWdCRSxVQUVsQyxDQUNJMXVDLEtBQU0sU0FDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVS9CLEVBQVlHLE9BQ3RCNkIsU0FBVWhDLEVBQVlHLE9BQ3RCL0IsU0FBVSxTQUNWbUIsYUFBY2tDLEVBQWdCdEIsT0FDOUJWLGFBQWNnQyxFQUFnQnRCLFFBRWxDLENBQ0lsdEMsS0FBTSxZQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVL0IsRUFBWUksVUFDdEI0QixTQUFVaEMsRUFBWUksVUFDdEJoQyxTQUFVLFNBQ1ZtQixhQUFja0MsRUFBZ0JyQixVQUM5QlgsYUFBY2dDLEVBQWdCckIsV0FFbEMsQ0FDSW50QyxLQUFNLFdBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZSyxTQUN0QjJCLFNBQVVoQyxFQUFZSyxTQUN0QmpDLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQnBCLFNBQzlCWixhQUFjZ0MsRUFBZ0JwQixVQUVsQyxDQUNJcHRDLEtBQU0sVUFDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVSxJQUFJL21CLE9BQU8sTUFBTytrQixHQUM1QmlDLFNBQVUsSUFBSWhuQixPQUFPLE1BQU8ra0IsR0FDNUIzQixTQUFVLFNBQ1ZtQixhQUFjLENBQUVwWCxJQUFLLFFBQVVxWCxLQUFNLFNBQ3JDQyxhQUFjLENBQUV0WCxJQUFLLFFBQVVxWCxLQUFNLFVBRXpDLENBQ0l2c0MsS0FBTSxZQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVLElBQUkvbUIsT0FBTyxVQUFXK2tCLEdBQ2hDaUMsU0FBVSxJQUFJaG5CLE9BQU8sVUFBVytrQixHQUNoQzNCLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQkcsVUFDOUJuQyxhQUFjZ0MsRUFBZ0JHLFdBRWxDLENBQ0kzdUMsS0FBTSxZQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVLElBQUkvbUIsT0FBTyxhQUFjK2tCLEdBQ25DaUMsU0FBVSxJQUFJaG5CLE9BQU8sbUJBQW9CK2tCLEdBQ3pDM0IsU0FBVSxTQUNWbUIsYUFBYyxDQUFFcFgsSUFBSyxRQUFVcVgsS0FBTSxTQUNyQ0MsYUFBYyxDQUFFdFgsSUFBSyxRQUFVcVgsS0FBTSxVQUV6QyxDQUNJdnNDLEtBQU0sVUFDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVS9CLEVBQVlNLFFBQ3RCMEIsU0FBVWhDLEVBQVlNLFFBQ3RCbEMsU0FBVSxTQUNWbUIsYUFBY2tDLEVBQWdCbkIsUUFDOUJiLGFBQWNnQyxFQUFnQm5CLFNBRWxDLENBQ0lydEMsS0FBTSxTQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVL0IsRUFBWU8sT0FDdEJ5QixTQUFVaEMsRUFBWU8sT0FDdEJuQyxTQUFVLFNBQ1ZtQixhQUFja0MsRUFBZ0JsQixPQUM5QmQsYUFBY2dDLEVBQWdCbEIsUUFFbEMsQ0FDSXR0QyxLQUFNLGFBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZUSxXQUN0QndCLFNBQVVoQyxFQUFZUSxXQUN0QnBDLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQmpCLFdBQzlCZixhQUFjZ0MsRUFBZ0JqQixZQUVsQyxDQUNJdnRDLEtBQU0sVUFDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVS9CLEVBQVlTLFFBQ3RCdUIsU0FBVWhDLEVBQVlTLFFBQ3RCckMsU0FBVSxTQUNWbUIsYUFBY2tDLEVBQWdCaEIsUUFDOUJoQixhQUFjZ0MsRUFBZ0JoQixTQUVsQyxDQUNJeHRDLEtBQU0sU0FDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVS9CLEVBQVlVLE9BQ3RCc0IsU0FBVWhDLEVBQVlVLE9BQ3RCdEMsU0FBVSxTQUNWbUIsYUFBY2tDLEVBQWdCZixPQUM5QmpCLGFBQWNnQyxFQUFnQmYsUUFFbEMsQ0FDSXp0QyxLQUFNLFVBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZVyxRQUN0QnFCLFNBQVVoQyxFQUFZVyxRQUN0QnZDLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQmQsUUFDOUJsQixhQUFjZ0MsRUFBZ0JkLFNBRWxDLENBQ0kxdEMsS0FBTSxTQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVL0IsRUFBWVksT0FDdEJvQixTQUFVaEMsRUFBWVksT0FDdEJ4QyxTQUFVLFNBQ1ZtQixhQUFja0MsRUFBZ0JiLE9BQzlCbkIsYUFBY2dDLEVBQWdCYixRQUVsQyxDQUNJM3RDLEtBQU0sWUFDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVS9CLEVBQVlhLFVBQ3RCbUIsU0FBVWhDLEVBQVlhLFVBQ3RCekMsU0FBVSxTQUNWbUIsYUFBY2tDLEVBQWdCWixVQUM5QnBCLGFBQWNnQyxFQUFnQlosV0FFbEMsQ0FDSTV0QyxLQUFNLFVBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZYyxRQUN0QmtCLFNBQVVoQyxFQUFZYyxRQUN0QjFDLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQlgsUUFDOUJyQixhQUFjZ0MsRUFBZ0JYLFNBRWxDLENBQ0k3dEMsS0FBTSxRQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVL0IsRUFBWWUsTUFDdEJpQixTQUFVaEMsRUFBWWUsTUFDdEIzQyxTQUFVLFNBQ1ZtQixhQUFja0MsRUFBZ0JWLE1BQzlCdEIsYUFBY2dDLEVBQWdCVixPQUVsQyxDQUNJOXRDLEtBQU0sVUFDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVS9CLEVBQVlnQixRQUN0QmdCLFNBQVVoQyxFQUFZZ0IsUUFDdEI1QyxTQUFVLFNBQ1ZtQixhQUFja0MsRUFBZ0JULFFBQzlCdkIsYUFBY2dDLEVBQWdCVCxTQUVsQyxDQUNJL3RDLEtBQU0saUJBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZLGtCQUN0QmdDLFNBQVVoQyxFQUFZLGtCQUN0QjVCLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQixrQkFDOUJoQyxhQUFjZ0MsRUFBZ0IsbUJBRWxDLENBQ0l4dUMsS0FBTSxXQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVL0IsRUFBWWlCLFNBQ3RCZSxTQUFVaEMsRUFBWWlCLFNBQ3RCN0MsU0FBVSxTQUNWbUIsYUFBY2tDLEVBQWdCUixTQUM5QnhCLGFBQWNnQyxFQUFnQlIsVUFFbEMsQ0FDSWh1QyxLQUFNLFlBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZa0IsVUFDdEJjLFNBQVVoQyxFQUFZa0IsVUFDdEI5QyxTQUFVLFNBQ1ZtQixhQUFja0MsRUFBZ0JQLFVBQzlCekIsYUFBY2dDLEVBQWdCUCxXQUVsQyxDQUNJanVDLEtBQU0sbUJBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZLG9CQUN0QmdDLFNBQVVoQyxFQUFZLG9CQUN0QjVCLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQixvQkFDOUJoQyxhQUFjZ0MsRUFBZ0IscUJBRWxDLENBQ0l4dUMsS0FBTSxRQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVLElBQUkvbUIsT0FBTyxRQUFTK2tCLEdBQzlCaUMsU0FBVSxJQUFJaG5CLE9BQU8sUUFBUytrQixHQUM5QjNCLFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQkksTUFDOUJwQyxhQUFjZ0MsRUFBZ0JJLE9BRWxDLENBQ0k1dUMsS0FBTSxVQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVL0IsRUFBWW1CLFFBQ3RCYSxTQUFVaEMsRUFBWW1CLFFBQ3RCL0MsU0FBVSxTQUNWbUIsYUFBY2tDLEVBQWdCTixRQUM5QjFCLGFBQWNnQyxFQUFnQk4sU0FFbEMsQ0FDSWx1QyxLQUFNLFNBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUsSUFBSS9tQixPQUFPLE1BQU8ra0IsR0FDNUJpQyxTQUFVLElBQUlobkIsT0FBTyxNQUFPK2tCLEdBQzVCM0IsU0FBVSxTQUNWbUIsYUFBY2tDLEVBQWdCSyxPQUM5QnJDLGFBQWNnQyxFQUFnQkssUUFFbEMsQ0FDSTd1QyxLQUFNLFNBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUsSUFBSS9tQixPQUFPLE1BQU8ra0IsR0FDNUJpQyxTQUFVLElBQUlobkIsT0FBTyxNQUFPK2tCLEdBQzVCM0IsU0FBVSxTQUNWbUIsYUFBYyxDQUFFcFgsSUFBSyxRQUFVcVgsS0FBTSxTQUNyQ0MsYUFBYyxDQUFFdFgsSUFBSyxRQUFVcVgsS0FBTSxVQUV6QyxDQUNJdnNDLEtBQU0sZ0JBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUsSUFBSS9tQixPQUFPLE1BQU8ra0IsR0FDNUJpQyxTQUFVLElBQUlobkIsT0FBTyxNQUFPK2tCLEdBQzVCM0IsU0FBVSxTQUNWbUIsYUFBYyxDQUFFcFgsSUFBSyxRQUFVcVgsS0FBTSxTQUNyQ0MsYUFBYyxDQUFFdFgsSUFBSyxPQUFVcVgsS0FBTSxVQUV6QyxDQUNJdnNDLEtBQU0sYUFDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVS9CLEVBQVlvQixXQUN0QlksU0FBVWhDLEVBQVlvQixXQUN0QmhELFNBQVUsU0FDVm1CLGFBQWNrQyxFQUFnQkwsV0FDOUIzQixhQUFjZ0MsRUFBZ0JMLFlBRWxDLENBQ0ludUMsS0FBTSxxQkFDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVSxJQUFJL21CLE9BQU8sSUFBSytrQixHQUMxQmlDLFNBQVUsSUFBSWhuQixPQUFPLFdBQVkra0IsR0FDakMzQixTQUFVLFVBQ1ZtQixhQUFjLENBQUVwWCxJQUFLLFFBQVVxWCxLQUFNLFNBQ3JDQyxhQUFjLENBQUV0WCxJQUFLLFFBQVVxWCxLQUFNLFVBRXpDLENBQ0l2c0MsS0FBTSxzQkFDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVSxJQUFJL21CLE9BQU8sSUFBSytrQixHQUMxQmlDLFNBQVUsSUFBSWhuQixPQUFPLEtBQU0ra0IsR0FDM0IzQixTQUFVLE9BQ1ZtQixhQUFjLENBQUVwWCxJQUFLLFFBQVVxWCxLQUFNLFNBQ3JDQyxhQUFjLENBQUV0WCxJQUFLLFFBQVVxWCxLQUFNLFVBRXpDLENBQ0l2c0MsS0FBTSxXQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVLElBQUkvbUIsT0FBTyxJQUFLK2tCLEdBQzFCaUMsU0FBVSxJQUFJaG5CLE9BQU8sS0FBTStrQixHQUMzQjNCLFNBQVUsWUFDVm1CLGFBQWMsQ0FBRXBYLElBQUssUUFBVXFYLEtBQU0sU0FDckNDLGFBQWMsQ0FBRXRYLElBQUssUUFBVXFYLEtBQU0sVUFFekMsQ0FDSXZzQyxLQUFNLFNBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUsSUFBSS9tQixPQUFPLElBQUsra0IsR0FDMUJpQyxTQUFVLElBQUlobkIsT0FBTyxlQUFnQitrQixHQUNyQzNCLFNBQVUsU0FDVm1CLGFBQWMsQ0FBRXBYLElBQUssT0FBVXFYLEtBQU0sUUFDckNDLGFBQWMsQ0FBRXRYLElBQUssUUFBVXFYLEtBQU0sVUFFekMsQ0FDSXZzQyxLQUFNLE9BQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUsSUFBSS9tQixPQUFPLG1CQUFvQitrQixHQUN6Q2lDLFNBQVUsSUFBSWhuQixPQUFPLG9CQUFxQitrQixHQUMxQzNCLFNBQVUsVUFDVm1CLGFBQWMsQ0FBRXBYLElBQUssUUFBVXFYLEtBQU0sU0FDckNDLGFBQWMsQ0FBRXRYLElBQUssUUFBVXFYLEtBQU0sVUFFekMsQ0FDSXZzQyxLQUFNLFVBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZcUIsUUFDdEJXLFNBQVVoQyxFQUFZcUIsUUFDdEI5QixhQUFja0MsRUFBZ0JKLFFBQzlCNUIsYUFBY2dDLEVBQWdCSixTQUVsQyxDQUNJcHVDLEtBQU0sUUFDTmtpQixNQUFPLEVBQ1A0c0IsU0FBVS9CLEVBQVlzQixNQUN0QlUsU0FBVWhDLEVBQVlzQixNQUN0Qi9CLGFBQWNrQyxFQUFnQkgsTUFDOUI3QixhQUFjZ0MsRUFBZ0JILE9BRWxDLENBQ0lydUMsS0FBTSxPQUNOa2lCLE1BQU8sRUFDUDRzQixTQUFVL0IsRUFBWXVCLEtBQ3RCUyxTQUFVaEMsRUFBWXVCLEtBQ3RCaEMsYUFBY2tDLEVBQWdCRixLQUM5QjlCLGFBQWNnQyxFQUFnQkYsTUFFbEMsQ0FDSXR1QyxLQUFNLGFBQ05raUIsTUFBTyxFQUNQNHNCLFNBQVUvQixFQUFZd0IsV0FDdEJRLFNBQVVoQyxFQUFZd0IsV0FDdEJqQyxhQUFja0MsRUFBZ0JELFdBQzlCL0IsYUFBY2dDLEVBQWdCRCw4QkNwYXRDLE1BQU1TLEVBQVcsRUFBUSxPQUNuQkMsRUFBaUIsRUFBUSxPQUN6QkMsRUFBcUIsRUFBUSxPQUVuQzk3QyxFQUFPQyxRQUFXdXhDLEdBQ1QsSUFBSTd2QyxTQUFRLENBQUN3VyxFQUFTUyxLQUMzQixNQUFNcy9CLEVBQVcsQ0FDZkgsU0FBVSxLQUNWSyxTQUFVLEtBQ1ZJLFdBQVksQ0FDVlQsU0FBVSxLQUNWSyxTQUFVLE9BR1JoakMsRUFBTyxHQUdQMm1DLEVBQXNCLElBQUlDLFdBRWhDRCxFQUFvQkUsT0FBUyxLQUMzQixNQUFNQyxFQUFjLElBQUlsd0IsV0FBVyt2QixFQUFvQnY0QyxRQUNwRDlDLE1BQU0sRUFBRyxHQUNUc1IsS0FBSyxLQUNGbXFDLEVBQWdCTCxFQUFtQkksR0FFekMsR0FBSUMsRUFBZSxDQUNqQmpFLEVBQVNILFNBQVdvRSxFQUNwQmpFLEVBQVNNLFdBQVdULFNBQVcsRUFFL0IsTUFBTXFFLEVBQXNCLElBQUlKLFdBRWhDSSxFQUFvQkgsT0FBUyxLQUMzQjdtQyxFQUFLb0UsUUFBVTRpQyxFQUFvQjU0QyxPQUNuQzJVLEVBQVEwakMsRUFBZXptQyxFQUFNOGlDLEtBRy9Ca0UsRUFBb0JDLFFBQVdDLElBQzdCMWpDLEVBQU8wakMsSUFHVEYsRUFBb0JHLFdBQVcvSyxFQUFNMEcsRUFBU0gsY0FDekMsQ0FFTCxNQUFNeUUsRUFBWSxJQUFJUixXQUV0QlEsRUFBVVAsT0FBUyxLQUNqQixNQUFNUSxFQUFhRCxFQUFVaDVDLE9BRXZCazVDLEVBQU9kLEVBQVNhLEdBT3RCLEdBTElDLElBQ0Z4RSxFQUFTSCxTQUFXLFFBQ3BCRyxFQUFTTSxXQUFXVCxTQUFXLEdBRzdCMkUsRUFDRnRuQyxFQUFLb0UsUUFBVWlqQyxFQUNmdGtDLEVBQVEwakMsRUFBZXptQyxFQUFNOGlDLFFBQ3hCLENBQ0wsTUFBTXlFLEVBQVksSUFBSVgsV0FFdEJXLEVBQVVWLE9BQVMsS0FDakI3bUMsRUFBS29FLFFBQVVtakMsRUFBVW41QyxPQUN6QjJVLEVBQVEwakMsRUFBZXptQyxFQUFNOGlDLEtBRy9CeUUsRUFBVUosV0FBVy9LLEVBQU0sZ0JBSS9CZ0wsRUFBVUgsUUFBV0MsSUFDbkIxakMsRUFBTzBqQyxJQUdURSxFQUFVRCxXQUFXL0ssRUFBTSxXQUkvQnVLLEVBQW9CTSxRQUFXQyxJQUM3QjFqQyxFQUFPMGpDLElBR1RQLEVBQW9CYSxrQkFBa0JwTCwyQkNsRjFDLFFBTThELEVBQTZGLFNBQVNxTCxJQUFJLGFBQWEsSUFBSS82QyxFQUFFLG9CQUFvQjBELEtBQUtBLEtBQUssb0JBQW9CNEosT0FBT0EsWUFBTyxJQUFTdE4sRUFBRUEsRUFBRSxHQUFPcUYsR0FBR3JGLEVBQUVvTCxZQUFZcEwsRUFBRTRkLFlBQVlvOUIsRUFBRTMxQyxHQUFHLFNBQVNnQyxNQUFNckgsRUFBRTJjLFVBQVUsSUFBSWtCLFVBQVVyUCxFQUFFLEdBQUd5c0MsRUFBRSxFQUFFeHNDLEVBQUUsQ0FBQ3FqQyxNQUFNLFNBQVMvdUIsRUFBRXlZLEdBQUcsSUFBSTF6QixHQUFHMHpCLEVBQUVBLEdBQUcsSUFBSTBmLGdCQUFlLEVBQTBDLEdBQXZDQyxFQUFFcnpDLEtBQUswekIsRUFBRTRmLHNCQUFzQnR6QyxFQUFFQSxFQUFFLElBQU8wekIsRUFBRTBmLGNBQWNwekMsRUFBRTB6QixFQUFFNmYsWUFBWUYsRUFBRTNmLEVBQUU2ZixZQUFZN2YsRUFBRTZmLFVBQVU3ZixFQUFFOGYsUUFBUTdzQyxFQUFFOHNDLGtCQUFrQixDQUFDLElBQUlwMUIsRUFBRSxXQUFXLElBQUkxWCxFQUFFOHNDLGtCQUFrQixPQUFNLEVBQUcsSUFBc0t6ekMsRUFBRXFlLEVBQXBLcEQsR0FBR2piLEVBQUU5SCxFQUFFcTJCLEtBQUtyMkIsRUFBRXc3QyxXQUFXLEtBQUtyMUIsRUFBRTQwQixFQUFFejBDLFdBQVdtSSxFQUFFZ3RDLFdBQVdodEMsRUFBRWd0QyxTQUFTM3pDLEVBQUU2dEMsZ0JBQWdCLElBQUkrRixLQUFLLENBQUMsSUFBSXYxQixFQUFFLFFBQVEsQ0FBQ3ZULEtBQUssdUJBQXVCNG9CLEVBQUUsSUFBSXg3QixFQUFFMjdDLE9BQU81NEIsR0FBVyxPQUFPeVksRUFBRXRkLFVBQVVzbkIsRUFBRWhLLEVBQUVqZSxHQUFHMDlCLElBQUl6c0MsRUFBRWd0QixFQUFFamUsSUFBSWllLEVBQTVQLEdBQWlRLE9BQU9yVixFQUFFeTFCLFNBQVNwZ0IsRUFBRTc1QixLQUFLd2tCLEVBQUUwMUIsVUFBVXJnQixFQUFFc2dCLE1BQU0zMUIsRUFBRTQxQixhQUFhdmdCLEVBQUV3Z0IsU0FBUzcxQixFQUFFODFCLFVBQVV6Z0IsRUFBRTMxQixNQUFNMjFCLEVBQUU3NUIsS0FBS3c1QyxFQUFFM2YsRUFBRTc1QixNQUFNNjVCLEVBQUVzZ0IsTUFBTVgsRUFBRTNmLEVBQUVzZ0IsT0FBT3RnQixFQUFFd2dCLFNBQVNiLEVBQUUzZixFQUFFd2dCLFVBQVV4Z0IsRUFBRTMxQixNQUFNczFDLEVBQUUzZixFQUFFMzFCLGNBQWMyMUIsRUFBRThmLFlBQVluMUIsRUFBRXZJLFlBQVksQ0FBQ3hELE1BQU0ySSxFQUFFbTVCLE9BQU8xZ0IsRUFBRTJnQixTQUFTaDJCLEVBQUU1SSxLQUFLLElBQUlsWSxFQUFFLEtBQXlMLE9BQXBMb0osRUFBRTJ0QyxrQkFBa0IsaUJBQWlCcjVCLEVBQUUxZCxFQUFFbTJCLEVBQUU2Z0IsU0FBUyxJQUFJbGMsRUFBRTNFLEdBQUcsSUFBSWtJLEVBQUVsSSxJQUFHLElBQUt6WSxFQUFFdTVCLFVBQVVuQixFQUFFcDRCLEVBQUV3NUIsT0FBT3BCLEVBQUVwNEIsRUFBRXk1QixJQUFJbjNDLEVBQUUsSUFBSStMLEVBQUVvcUIsSUFBSXg3QixFQUFFeThDLE1BQU0xNUIsYUFBYTA1QixNQUFNMTVCLGFBQWF2akIsVUFBVTZGLEVBQUUsSUFBSXFKLEVBQUU4c0IsSUFBV24yQixFQUFFcTNDLE9BQU8zNUIsSUFBSTQ1QixRQUFRLFNBQVM1NUIsRUFBRXlZLEdBQUcsSUFBSW4yQixHQUFFLEVBQUdtZ0MsR0FBRSxFQUFHdlIsRUFBRSxJQUFJaVYsRUFBRSxPQUFPNlIsRUFBRSxJQUFJdnNDLEVBQUV1c0MsRUFBRUEsRUFBRWp6QyxHQUFFLEVBQUdxZSxFQUFFLEtBQUs2MEIsR0FBRSxHQUFJLFdBQVcsR0FBRyxpQkFBaUJ4ZixFQUFwQixDQUF5ZCxHQUE1YixpQkFBaUJBLEVBQUVvaEIsV0FBV251QyxFQUFFb3VDLGVBQWU3NEMsUUFBTyxTQUFTK2UsR0FBRyxPQUFPLElBQUl5WSxFQUFFb2hCLFVBQVVsNkMsUUFBUXFnQixNQUFLemhCLFNBQVMyeUIsRUFBRXVILEVBQUVvaEIsWUFBWSxrQkFBa0JwaEIsRUFBRXNoQixRQUFRLG1CQUFtQnRoQixFQUFFc2hCLFFBQVF4K0MsTUFBTUUsUUFBUWc5QixFQUFFc2hCLFdBQVd6M0MsRUFBRW0yQixFQUFFc2hCLFFBQVEsa0JBQWtCdGhCLEVBQUV1aEIsZ0JBQWdCLGlCQUFpQnZoQixFQUFFdWhCLGlCQUFpQmoxQyxFQUFFMHpCLEVBQUV1aEIsZ0JBQWdCLGlCQUFpQnZoQixFQUFFd2hCLFVBQVU5VCxFQUFFMU4sRUFBRXdoQixTQUFTLGlCQUFpQnhoQixFQUFFeWhCLFlBQVlsQyxFQUFFdmYsRUFBRXloQixXQUFXLGtCQUFrQnpoQixFQUFFMGhCLFNBQVMxWCxFQUFFaEssRUFBRTBoQixRQUFXNStDLE1BQU1FLFFBQVFnOUIsRUFBRTJoQixTQUFTLENBQUMsR0FBRyxJQUFJM2hCLEVBQUUyaEIsUUFBUTc3QyxPQUFPLE1BQU0sSUFBSTJGLE1BQU0sMkJBQTJCa2YsRUFBRXFWLEVBQUUyaEIsYUFBUSxJQUFTM2hCLEVBQUU0aEIsYUFBYTV1QyxFQUFFZ3RCLEVBQUU0aEIsV0FBV3JDLEdBQUcsa0JBQWtCdmYsRUFBRTZoQixpQkFBaUJyQyxFQUFFeGYsRUFBRTZoQixpQkFBbnFCLEdBQXNyQixJQUFJcEMsRUFBRSxJQUFJcG9CLE9BQU9wRixFQUFFc3RCLEdBQUcsS0FBMkMsR0FBdEMsaUJBQWlCaDRCLElBQUlBLEVBQUVsQixLQUFLaXdCLE1BQU0vdUIsSUFBT3prQixNQUFNRSxRQUFRdWtCLEdBQUcsQ0FBQyxJQUFJQSxFQUFFemhCLFFBQVFoRCxNQUFNRSxRQUFRdWtCLEVBQUUsSUFBSSxPQUFPdTZCLEVBQUUsS0FBS3Y2QixFQUFFamIsR0FBRyxHQUFHLGlCQUFpQmliLEVBQUUsR0FBRyxPQUFPdTZCLEVBQUVuM0IsR0FBRzNtQixPQUFPYixLQUFLb2tCLEVBQUUsSUFBSUEsRUFBRWpiLFFBQVEsR0FBRyxpQkFBaUJpYixFQUFFLE1BQU0saUJBQWlCQSxFQUFFelAsT0FBT3lQLEVBQUV6UCxLQUFLdU8sS0FBS2l3QixNQUFNL3VCLEVBQUV6UCxPQUFPaFYsTUFBTUUsUUFBUXVrQixFQUFFelAsUUFBUXlQLEVBQUV3NkIsU0FBU3g2QixFQUFFdzZCLE9BQU94NkIsRUFBRTZTLE1BQU03UyxFQUFFNlMsS0FBSzJuQixRQUFReDZCLEVBQUV3NkIsU0FBU3g2QixFQUFFdzZCLE9BQU9qL0MsTUFBTUUsUUFBUXVrQixFQUFFelAsS0FBSyxJQUFJeVAsRUFBRXc2QixPQUFPLGlCQUFpQng2QixFQUFFelAsS0FBSyxHQUFHOVQsT0FBT2IsS0FBS29rQixFQUFFelAsS0FBSyxJQUFJLElBQUloVixNQUFNRSxRQUFRdWtCLEVBQUV6UCxLQUFLLEtBQUssaUJBQWlCeVAsRUFBRXpQLEtBQUssS0FBS3lQLEVBQUV6UCxLQUFLLENBQUN5UCxFQUFFelAsUUFBUWdxQyxFQUFFdjZCLEVBQUV3NkIsUUFBUSxHQUFHeDZCLEVBQUV6UCxNQUFNLEdBQUd4TCxHQUFHLE1BQU0sSUFBSWIsTUFBTSwwQ0FBMEMsU0FBU3EyQyxFQUFFdjZCLEVBQUV5WSxFQUFFMXpCLEdBQUcsSUFBSXFlLEVBQUUsR0FBRyxpQkFBaUJwRCxJQUFJQSxFQUFFbEIsS0FBS2l3QixNQUFNL3VCLElBQUksaUJBQWlCeVksSUFBSUEsRUFBRTNaLEtBQUtpd0IsTUFBTXRXLElBQUksSUFBSW4yQixFQUFFL0csTUFBTUUsUUFBUXVrQixJQUFJLEVBQUVBLEVBQUV6aEIsT0FBT3k1QyxHQUFHejhDLE1BQU1FLFFBQVFnOUIsRUFBRSxJQUFJLEdBQUduMkIsR0FBR21nQyxFQUFFLENBQUMsSUFBSSxJQUFJaDNCLEVBQUUsRUFBRUEsRUFBRXVVLEVBQUV6aEIsT0FBT2tOLElBQUksRUFBRUEsSUFBSTJYLEdBQUc4TixHQUFHOU4sR0FBR3EzQixFQUFFejZCLEVBQUV2VSxHQUFHQSxHQUFHLEVBQUVndEIsRUFBRWw2QixTQUFTNmtCLEdBQUcraUIsR0FBRyxJQUFJLElBQUk4UixFQUFFLEVBQUVBLEVBQUV4ZixFQUFFbDZCLE9BQU8wNUMsSUFBSSxDQUFDLElBQUlDLEVBQUU1MUMsRUFBRTBkLEVBQUV6aEIsT0FBT2s2QixFQUFFd2YsR0FBRzE1QyxPQUFPZzhDLEdBQUUsRUFBR3Q5QyxFQUFFcUYsRUFBRSxJQUFJN0YsT0FBT2IsS0FBSzY4QixFQUFFd2YsSUFBSTE1QyxPQUFPLElBQUlrNkIsRUFBRXdmLEdBQUcxNUMsT0FBTyxHQUFHd0csSUFBSXpDLElBQUlpNEMsRUFBRSxXQUFXeDFDLEVBQUUsS0FBSzB6QixFQUFFd2YsR0FBRzlxQyxLQUFLLElBQUlnc0IsT0FBTyxJQUFJVixFQUFFd2YsR0FBRzE1QyxRQUFRLElBQUlrNkIsRUFBRXdmLEdBQUcsR0FBRzE1QyxRQUFRLFdBQVd3RyxHQUFHekMsRUFBRSxDQUFDLElBQUksSUFBSW80QyxFQUFFLEdBQUd0ZCxFQUFFLEVBQUVBLEVBQUU4YSxFQUFFOWEsSUFBSSxDQUFDLElBQUl6eEIsRUFBRXFzQyxFQUFFaDRCLEVBQUVvZCxHQUFHQSxFQUFFc2QsRUFBRTM2QyxLQUFLMDRCLEVBQUV3ZixHQUFHdHNDLElBQUk0dUMsRUFBRSxLQUFLRyxFQUFFdnRDLEtBQUssSUFBSWdzQixPQUFPLElBQUlvaEIsRUFBRSxDQUFDLElBQUksSUFBSTVaLEVBQUUsRUFBRUEsRUFBRXVYLEVBQUV2WCxJQUFJLENBQUMsRUFBRUEsSUFBSTFqQyxJQUFJbW1CLEdBQUc4TixHQUFHLElBQUk3aUIsRUFBRS9MLEdBQUcwMUMsRUFBRWg0QixFQUFFMmdCLEdBQUdBLEVBQUV2ZCxHQUFHcTNCLEVBQUVoaUIsRUFBRXdmLEdBQUc1cEMsR0FBR3N5QixHQUFHc1gsRUFBRXhmLEVBQUVsNkIsT0FBTyxLQUFLd0csR0FBRyxFQUFFbXpDLElBQUlqN0MsS0FBS21tQixHQUFHK2lCLElBQUksT0FBTy9pQixFQUFFLFNBQVNxM0IsRUFBRXo2QixFQUFFeVksR0FBRyxHQUFHLE1BQU16WSxFQUFFLE1BQU0sR0FBRyxHQUFHQSxFQUFFbmUsY0FBYzI2QixLQUFLLE9BQU8xZCxLQUFLeUcsVUFBVXZGLEdBQUdua0IsTUFBTSxFQUFFLEtBQUksSUFBS284QyxHQUFHLGlCQUFpQmo0QixHQUFHLE9BQU9BLEVBQUVuVixNQUFNLGlCQUFpQm1WLEVBQUUsSUFBSUEsR0FBRyxJQUFJamIsRUFBRWliLEVBQUV6YyxXQUFXUyxRQUFRazBDLEVBQUV6c0MsR0FBRzJYLEVBQUUsa0JBQWtCOWdCLEdBQUdBLEdBQUcsbUJBQW1CQSxHQUFHQSxFQUFFMGQsRUFBRXlZLElBQUlsOUIsTUFBTUUsUUFBUTZHLElBQUlBLEVBQUVtMkIsSUFBSSxTQUFTelksRUFBRXlZLEdBQUcsSUFBSSxJQUFJMXpCLEVBQUUsRUFBRUEsRUFBRTB6QixFQUFFbDZCLE9BQU93RyxJQUFJLElBQUksRUFBRWliLEVBQUVyZ0IsUUFBUTg0QixFQUFFMXpCLElBQUksT0FBTSxFQUFHLE9BQU0sRUFBOUUsQ0FBa0ZBLEVBQUUyRyxFQUFFb3VDLGtCQUFrQixFQUFFLzBDLEVBQUVwRixRQUFRdXhCLElBQUksTUFBTW5zQixFQUFFb1UsT0FBTyxJQUFJLE1BQU1wVSxFQUFFb1UsT0FBT3BVLEVBQUV4RyxPQUFPLEdBQUcsT0FBTzZrQixFQUFFNDBCLEVBQUVqekMsRUFBRWl6QyxFQUFFanpDLEtBQUssR0FBRzJHLEVBQUVpdkMsV0FBV245QyxPQUFPNjVCLGFBQWEsSUFBSTNyQixFQUFFa3ZDLFNBQVNwOUMsT0FBTzY1QixhQUFhLElBQUkzckIsRUFBRW12QyxnQkFBZ0IsU0FBU252QyxFQUFFb3VDLGVBQWUsQ0FBQyxLQUFLLEtBQUssSUFBSXB1QyxFQUFFbXZDLGlCQUFpQm52QyxFQUFFOHNDLG1CQUFtQmwyQyxLQUFLckYsRUFBRTI3QyxPQUFPbHRDLEVBQUUydEMsa0JBQWtCLEVBQUUzdEMsRUFBRW92QyxlQUFlLFNBQVNwdkMsRUFBRXF2QyxnQkFBZ0IsUUFBUXJ2QyxFQUFFc3ZDLGlCQUFpQixJQUFJdHZDLEVBQUV1dkMsT0FBT2g5QixFQUFFdlMsRUFBRXd2QyxhQUFhbjJDLEVBQUUyRyxFQUFFeXZDLGdCQUFnQi9kLEVBQUUxeEIsRUFBRTB2QyxhQUFhenZDLEVBQUVELEVBQUUydkMsZUFBZTFhLEVBQUVqMUIsRUFBRTR2Qyx1QkFBdUJqdEMsRUFBRXBSLEVBQUVzK0MsT0FBTyxDQUFDLElBQUliLEVBQUV6OUMsRUFBRXMrQyxPQUFPYixFQUFFOTNDLEdBQUdtc0MsTUFBTSxTQUFTa0osR0FBRyxJQUFJbHpDLEVBQUVrekMsRUFBRWtCLFFBQVEsR0FBR2pCLEVBQUUsR0FBRyxPQUFPOTVDLEtBQUtvOUMsTUFBSyxTQUFTeDdCLEdBQUcsR0FBSyxVQUFVMDZCLEVBQUV0OEMsTUFBTXE5QyxLQUFLLFdBQVdDLGVBQWUsU0FBU2hCLEVBQUV0OEMsTUFBTXU5QyxLQUFLLFFBQVEvcUMsZ0JBQWUzVCxFQUFFazZDLGFBQWMvNEMsS0FBS3c5QyxPQUFPLElBQUl4OUMsS0FBS3c5QyxNQUFNcjlDLE9BQU8sT0FBTSxFQUFHLElBQUksSUFBSWs2QixFQUFFLEVBQUVBLEVBQUVyNkIsS0FBS3c5QyxNQUFNcjlDLE9BQU9rNkIsSUFBSXlmLEVBQUVuNEMsS0FBSyxDQUFDNHNDLEtBQUt2dUMsS0FBS3c5QyxNQUFNbmpCLEdBQUdvakIsVUFBVXo5QyxLQUFLMDlDLGVBQWVwQixFQUFFcUIsT0FBTyxHQUFHaDNDLFFBQU9pYixJQUFJNWhCLEtBQUssU0FBUzRoQixJQUFJLEdBQUcsSUFBSWs0QixFQUFFMzVDLE9BQU8sQ0FBQyxJQUFNazZCLEVBQUUxekIsRUFBRXFlLEVBQUU5Z0IsRUFBRTQxQyxFQUFFLEdBQUcsR0FBR0UsRUFBRUgsRUFBRStELFFBQVEsQ0FBQyxJQUFJaEUsRUFBRUMsRUFBRStELE9BQU8xNUMsRUFBRXFxQyxLQUFLcnFDLEVBQUV1NUMsV0FBVyxHQUFHLGlCQUFpQjdELEVBQUUsQ0FBQyxHQUFHLFVBQVVBLEVBQUVpRSxPQUFPLE1BQVMsYUFBYXhqQixFQUFFbjJCLEVBQUVxcUMsS0FBSzVuQyxFQUFFekMsRUFBRXU1QyxVQUFVejRCLEVBQUU0MEIsRUFBRXo0QixZQUFZNjRCLEVBQUVILEVBQUVuMUMsUUFBUW0xQyxFQUFFbjFDLE1BQU0sQ0FBQ2lGLEtBQXpFLGNBQWlGMHdCLEVBQUUxekIsRUFBRXFlLElBQUksR0FBRyxTQUFTNDBCLEVBQUVpRSxPQUFPLFlBQVkxQixJQUFJLGlCQUFpQnZDLEVBQUVtQixTQUFTNzJDLEVBQUV3NUMsZUFBZXBCLEVBQUVxQixPQUFPejVDLEVBQUV3NUMsZUFBZTlELEVBQUVtQixjQUFjLEdBQUcsU0FBU25CLEVBQUUsWUFBWXVDLElBQUksSUFBSTl1QyxFQUFFbkosRUFBRXc1QyxlQUFlN0MsU0FBUzMyQyxFQUFFdzVDLGVBQWU3QyxTQUFTLFNBQVNqNUIsR0FBR280QixFQUFFM3NDLElBQUlBLEVBQUV1VSxFQUFFMWQsRUFBRXFxQyxLQUFLcnFDLEVBQUV1NUMsV0FBV3RCLEtBQUs3dUMsRUFBRXFqQyxNQUFNenNDLEVBQUVxcUMsS0FBS3JxQyxFQUFFdzVDLHFCQUFxQjFELEVBQUVILEVBQUVnQixXQUFXaEIsRUFBRWdCLFdBQVcsU0FBU3NCLElBQUlyQyxFQUFFcGxCLE9BQU8sRUFBRSxHQUFHOVMsTUFBTSxTQUFTdTZCLEVBQUV2NkIsR0FBRzVoQixLQUFLODlDLFFBQVEsS0FBSzk5QyxLQUFLKzlDLFdBQVUsRUFBRy85QyxLQUFLZytDLFlBQVcsRUFBR2grQyxLQUFLaStDLFNBQVEsRUFBR2orQyxLQUFLaytDLE9BQU8sS0FBS2wrQyxLQUFLbStDLFdBQVcsRUFBRW4rQyxLQUFLbytDLGFBQWEsR0FBR3ArQyxLQUFLcStDLFVBQVUsRUFBRXIrQyxLQUFLcytDLE9BQU8sRUFBRXQrQyxLQUFLdStDLFdBQVcsS0FBS3YrQyxLQUFLdytDLGNBQWEsRUFBR3grQyxLQUFLeStDLGlCQUFpQixDQUFDdHNDLEtBQUssR0FBRzBNLE9BQU8sR0FBRzRWLEtBQUssSUFBSSxTQUFTN1MsR0FBRyxJQUFJeVksRUFBRXFrQixFQUFFOThCLEdBQUd5WSxFQUFFc2tCLFVBQVU5ZSxTQUFTeEYsRUFBRXNrQixXQUFXLzhCLEVBQUVwaEIsTUFBTW9oQixFQUFFKzRCLFFBQVF0Z0IsRUFBRXNrQixVQUFVLE1BQU0zK0MsS0FBSzg5QyxRQUFRLElBQUluM0MsRUFBRTB6QixJQUFJcjZCLEtBQUs4OUMsUUFBUWMsU0FBUzUrQyxNQUFNNitDLFFBQVF4a0IsR0FBRzk2QixLQUFLUyxLQUFLNGhCLEdBQUc1aEIsS0FBSzgrQyxXQUFXLFNBQVNsOUIsRUFBRXlZLEdBQUcsR0FBR3I2QixLQUFLdytDLGNBQWN4RSxFQUFFaDZDLEtBQUs2K0MsUUFBUUUsa0JBQWtCLENBQUMsSUFBSXA0QyxFQUFFM0csS0FBSzYrQyxRQUFRRSxpQkFBaUJuOUIsUUFBRyxJQUFTamIsSUFBSWliLEVBQUVqYixHQUFHM0csS0FBS3crQyxjQUFhLEVBQUd4K0MsS0FBS2krQyxTQUFRLEVBQUcsSUFBSWo1QixFQUFFaGxCLEtBQUtvK0MsYUFBYXg4QixFQUFFNWhCLEtBQUtvK0MsYUFBYSxHQUFHLElBQUlsNkMsRUFBRWxFLEtBQUs4OUMsUUFBUW5OLE1BQU0zckIsRUFBRWhsQixLQUFLbStDLFlBQVluK0MsS0FBSys5QyxXQUFXLElBQUkvOUMsS0FBSzg5QyxRQUFRa0IsV0FBV2gvQyxLQUFLODlDLFFBQVFtQixVQUFVLENBQUMsSUFBSXJGLEVBQUUxMUMsRUFBRXV3QixLQUFLeXFCLE9BQU9sL0MsS0FBSys5QyxZQUFZLzlDLEtBQUtvK0MsYUFBYXA1QixFQUFFbTZCLFVBQVV2RixFQUFFNTVDLEtBQUttK0MsWUFBWW4rQyxLQUFLbStDLFdBQVd2RSxHQUFHMTFDLEdBQUdBLEVBQUVpTyxPQUFPblMsS0FBS3ErQyxXQUFXbjZDLEVBQUVpTyxLQUFLaFMsUUFBUSxJQUFJa04sRUFBRXJOLEtBQUsrOUMsV0FBVy85QyxLQUFLNitDLFFBQVFPLFNBQVNwL0MsS0FBS3ErQyxXQUFXcitDLEtBQUs2K0MsUUFBUU8sUUFBUSxHQUFHdkYsRUFBRWg3QyxFQUFFNGQsWUFBWSxDQUFDOG5CLFFBQVFyZ0MsRUFBRTgyQyxTQUFTMXRDLEVBQUUreEMsVUFBVUMsU0FBU2p5QyxTQUFTLEdBQUcyc0MsRUFBRWg2QyxLQUFLNitDLFFBQVFsRSxTQUFTdGdCLEVBQUUsQ0FBQyxHQUFHcjZCLEtBQUs2K0MsUUFBUWxFLE1BQU16MkMsRUFBRWxFLEtBQUs4OUMsU0FBUzk5QyxLQUFLODlDLFFBQVFrQixVQUFVaC9DLEtBQUs4OUMsUUFBUW1CLFVBQVUsWUFBWWovQyxLQUFLaStDLFNBQVEsR0FBSS81QyxPQUFFLEVBQU9sRSxLQUFLeStDLHNCQUFpQixFQUFPLE9BQU96K0MsS0FBSzYrQyxRQUFRcitDLE1BQU1SLEtBQUs2K0MsUUFBUWxFLFFBQVEzNkMsS0FBS3krQyxpQkFBaUJ0c0MsS0FBS25TLEtBQUt5K0MsaUJBQWlCdHNDLEtBQUs1VSxPQUFPMkcsRUFBRWlPLE1BQU1uUyxLQUFLeStDLGlCQUFpQjUvQixPQUFPN2UsS0FBS3krQyxpQkFBaUI1L0IsT0FBT3RoQixPQUFPMkcsRUFBRTJhLFFBQVE3ZSxLQUFLeStDLGlCQUFpQmhxQixLQUFLdndCLEVBQUV1d0IsTUFBTXowQixLQUFLZytDLGFBQWEzd0MsSUFBSTJzQyxFQUFFaDZDLEtBQUs2K0MsUUFBUWhFLFdBQVczMkMsR0FBR0EsRUFBRXV3QixLQUFLd3FCLFVBQVVqL0MsS0FBSzYrQyxRQUFRaEUsU0FBUzc2QyxLQUFLeStDLGlCQUFpQnorQyxLQUFLaytDLFFBQVFsK0MsS0FBS2crQyxZQUFXLEdBQUkzd0MsR0FBR25KLEdBQUdBLEVBQUV1d0IsS0FBS3VxQixRQUFRaC9DLEtBQUt1K0MsYUFBYXI2QyxFQUFFbEUsS0FBS2krQyxTQUFRLEdBQUlqK0MsS0FBS3UvQyxXQUFXLFNBQVMzOUIsR0FBR280QixFQUFFaDZDLEtBQUs2K0MsUUFBUW42QyxPQUFPMUUsS0FBSzYrQyxRQUFRbjZDLE1BQU1rZCxHQUFHaTRCLEdBQUc3NUMsS0FBSzYrQyxRQUFRbjZDLE9BQU83RixFQUFFNGQsWUFBWSxDQUFDdStCLFNBQVMxdEMsRUFBRSt4QyxVQUFVMzZDLE1BQU1rZCxFQUFFMDlCLFVBQVMsS0FBTSxTQUFTdGdCLEVBQUVwZCxHQUFHLElBQUlvRCxHQUFHcEQsRUFBRUEsR0FBRyxJQUFJKzhCLFlBQVkvOEIsRUFBRSs4QixVQUFVcnhDLEVBQUVxdkMsaUJBQWlCUixFQUFFNThDLEtBQUtTLEtBQUs0aEIsR0FBRzVoQixLQUFLdStDLFdBQVdyNkMsRUFBRSxXQUFXbEUsS0FBS3cvQyxhQUFheC9DLEtBQUt5L0MsZ0JBQWdCLFdBQVd6L0MsS0FBS3cvQyxjQUFjeC9DLEtBQUt1N0MsT0FBTyxTQUFTMzVCLEdBQUc1aEIsS0FBS2srQyxPQUFPdDhCLEVBQUU1aEIsS0FBS3UrQyxjQUFjditDLEtBQUt3L0MsV0FBVyxXQUFXLEdBQUd4L0MsS0FBSys5QyxVQUFVLzlDLEtBQUt5L0MsbUJBQW1CLENBQUMsR0FBR3o2QixFQUFFLElBQUkwNkIsZUFBZTEvQyxLQUFLNitDLFFBQVFjLGtCQUFrQjM2QixFQUFFMjZCLGdCQUFnQjMvQyxLQUFLNitDLFFBQVFjLGlCQUFpQno3QyxJQUFJOGdCLEVBQUVnMEIsT0FBT3FELEVBQUVyOEMsS0FBS3kvQyxhQUFhei9DLE1BQU1nbEIsRUFBRW8wQixRQUFRaUQsRUFBRXI4QyxLQUFLNC9DLFlBQVk1L0MsT0FBT2dsQixFQUFFek4sS0FBS3ZYLEtBQUs2K0MsUUFBUWdCLG9CQUFvQixPQUFPLE1BQU03L0MsS0FBS2srQyxRQUFRaDZDLEdBQUdsRSxLQUFLNitDLFFBQVFpQix1QkFBdUIsQ0FBQyxJQUFJbCtCLEVBQUU1aEIsS0FBSzYrQyxRQUFRaUIsdUJBQXVCLElBQUksSUFBSXpsQixLQUFLelksRUFBRW9ELEVBQUUrNkIsaUJBQWlCMWxCLEVBQUV6WSxFQUFFeVksSUFBSSxHQUFHcjZCLEtBQUs2K0MsUUFBUUYsVUFBVSxDQUFDLElBQUloNEMsRUFBRTNHLEtBQUtzK0MsT0FBT3QrQyxLQUFLNitDLFFBQVFGLFVBQVUsRUFBRTM1QixFQUFFKzZCLGlCQUFpQixRQUFRLFNBQVMvL0MsS0FBS3MrQyxPQUFPLElBQUkzM0MsR0FBRyxJQUFJcWUsRUFBRWc3QixLQUFLaGdELEtBQUs2K0MsUUFBUWdCLHFCQUFxQixNQUFNaitCLEdBQUc1aEIsS0FBSzQvQyxZQUFZaCtCLEVBQUU5QyxTQUFTNWEsR0FBRyxJQUFJOGdCLEVBQUU5RCxRQUFRbGhCLEtBQUs0L0MsZ0JBQWdCNS9DLEtBQUt5L0MsYUFBYSxXQUFXLElBQUl6NkIsRUFBRWk3QixhQUFhajdCLEVBQUU5RCxPQUFPLEtBQUssS0FBSzhELEVBQUU5RCxPQUFPbGhCLEtBQUs0L0MsZUFBZTUvQyxLQUFLcytDLFFBQVF0K0MsS0FBSzYrQyxRQUFRRixVQUFVMytDLEtBQUs2K0MsUUFBUUYsVUFBVTM1QixFQUFFazdCLGFBQWEvL0MsT0FBT0gsS0FBSys5QyxXQUFXLzlDLEtBQUs2K0MsUUFBUUYsV0FBVzMrQyxLQUFLcytDLFFBQVEsU0FBUzE4QixHQUFHLElBQUl5WSxFQUFFelksRUFBRXUrQixrQkFBa0IsaUJBQWlCLE9BQUcsT0FBTzlsQixHQUFTLEVBQVN3RixTQUFTeEYsRUFBRThrQixVQUFVOWtCLEVBQUVuTSxZQUFZLEtBQUssSUFBM0gsQ0FBZ0lsSixHQUFHaGxCLEtBQUs4K0MsV0FBVzk1QixFQUFFazdCLGlCQUFpQmxnRCxLQUFLNC9DLFlBQVksU0FBU2grQixHQUFHLElBQUl5WSxFQUFFclYsRUFBRW83QixZQUFZeCtCLEVBQUU1aEIsS0FBS3UvQyxXQUFXLElBQUl6NUMsTUFBTXUwQixLQUFLLFNBQVM5c0IsRUFBRXFVLEdBQUcsSUFBSW9ELEVBQUU5Z0IsR0FBRzBkLEVBQUVBLEdBQUcsSUFBSSs4QixZQUFZLzhCLEVBQUUrOEIsVUFBVXJ4QyxFQUFFb3ZDLGdCQUFnQlAsRUFBRTU4QyxLQUFLUyxLQUFLNGhCLEdBQUcsSUFBSWc0QixFQUFFLG9CQUFvQmIsV0FBVy80QyxLQUFLdTdDLE9BQU8sU0FBUzM1QixHQUFHNWhCLEtBQUtrK0MsT0FBT3Q4QixFQUFFMWQsRUFBRTBkLEVBQUVua0IsT0FBT21rQixFQUFFeStCLGFBQWF6K0IsRUFBRTArQixTQUFTMUcsSUFBSTUwQixFQUFFLElBQUkrekIsWUFBWUMsT0FBT3FELEVBQUVyOEMsS0FBS3kvQyxhQUFhei9DLE1BQU1nbEIsRUFBRW8wQixRQUFRaUQsRUFBRXI4QyxLQUFLNC9DLFlBQVk1L0MsT0FBT2dsQixFQUFFLElBQUl1N0IsZUFBZXZnRCxLQUFLdStDLGNBQWN2K0MsS0FBS3UrQyxXQUFXLFdBQVd2K0MsS0FBSys5QyxXQUFXLzlDLEtBQUs2K0MsUUFBUU8sV0FBV3AvQyxLQUFLcStDLFVBQVVyK0MsS0FBSzYrQyxRQUFRTyxVQUFVcC9DLEtBQUt3L0MsY0FBY3gvQyxLQUFLdy9DLFdBQVcsV0FBVyxJQUFJNTlCLEVBQUU1aEIsS0FBS2srQyxPQUFPLEdBQUdsK0MsS0FBSzYrQyxRQUFRRixVQUFVLENBQUMsSUFBSXRrQixFQUFFeDJCLEtBQUt1WixJQUFJcGQsS0FBS3MrQyxPQUFPdCtDLEtBQUs2K0MsUUFBUUYsVUFBVTMrQyxLQUFLaytDLE9BQU81aUMsTUFBTXNHLEVBQUUxZCxFQUFFM0UsS0FBS3FpQixFQUFFNWhCLEtBQUtzK0MsT0FBT2prQixHQUFHLElBQUkxekIsRUFBRXFlLEVBQUVzMEIsV0FBVzEzQixFQUFFNWhCLEtBQUs2K0MsUUFBUS9KLFVBQVU4RSxHQUFHNTVDLEtBQUt5L0MsYUFBYSxDQUFDLzhDLE9BQU8sQ0FBQ25DLE9BQU9vRyxNQUFNM0csS0FBS3kvQyxhQUFhLFNBQVM3OUIsR0FBRzVoQixLQUFLcytDLFFBQVF0K0MsS0FBSzYrQyxRQUFRRixVQUFVMytDLEtBQUsrOUMsV0FBVy85QyxLQUFLNitDLFFBQVFGLFdBQVczK0MsS0FBS3MrQyxRQUFRdCtDLEtBQUtrK0MsT0FBTzVpQyxLQUFLdGIsS0FBSzgrQyxXQUFXbDlCLEVBQUVsZixPQUFPbkMsU0FBU1AsS0FBSzQvQyxZQUFZLFdBQVc1L0MsS0FBS3UvQyxXQUFXdjZCLEVBQUV0Z0IsUUFBUSxTQUFTNjlCLEVBQUUzZ0IsR0FBRyxJQUFJamIsRUFBRXcxQyxFQUFFNThDLEtBQUtTLEtBQUs0aEIsRUFBRUEsR0FBRyxJQUFJNWhCLEtBQUt1N0MsT0FBTyxTQUFTMzVCLEdBQUcsT0FBT2piLEVBQUVpYixFQUFFNWhCLEtBQUt1K0MsY0FBY3YrQyxLQUFLdStDLFdBQVcsV0FBVyxJQUFJditDLEtBQUsrOUMsVUFBVSxDQUFDLElBQUluOEIsRUFBRXlZLEVBQUVyNkIsS0FBSzYrQyxRQUFRRixVQUFVLE9BQU90a0IsR0FBR3pZLEVBQUVqYixFQUFFdzRDLFVBQVUsRUFBRTlrQixHQUFHMXpCLEVBQUVBLEVBQUV3NEMsVUFBVTlrQixLQUFLelksRUFBRWpiLEVBQUVBLEVBQUUsSUFBSTNHLEtBQUsrOUMsV0FBV3AzQyxFQUFFM0csS0FBSzgrQyxXQUFXbDlCLEtBQUssU0FBUzNSLEVBQUUyUixHQUFHdTZCLEVBQUU1OEMsS0FBS1MsS0FBSzRoQixFQUFFQSxHQUFHLElBQUksSUFBSXlZLEVBQUUsR0FBRzF6QixHQUFFLEVBQUdxZSxHQUFFLEVBQUdobEIsS0FBS3dnRCxNQUFNLFdBQVdyRSxFQUFFbCtDLFVBQVV1aUQsTUFBTXh6QyxNQUFNaE4sS0FBS0UsV0FBV0YsS0FBS2srQyxPQUFPc0MsU0FBU3hnRCxLQUFLeWdELE9BQU8sV0FBV3RFLEVBQUVsK0MsVUFBVXdpRCxPQUFPenpDLE1BQU1oTixLQUFLRSxXQUFXRixLQUFLaytDLE9BQU91QyxVQUFVemdELEtBQUt1N0MsT0FBTyxTQUFTMzVCLEdBQUc1aEIsS0FBS2srQyxPQUFPdDhCLEVBQUU1aEIsS0FBS2srQyxPQUFPN0MsR0FBRyxPQUFPcjdDLEtBQUswZ0QsYUFBYTFnRCxLQUFLaytDLE9BQU83QyxHQUFHLE1BQU1yN0MsS0FBSzJnRCxZQUFZM2dELEtBQUtrK0MsT0FBTzdDLEdBQUcsUUFBUXI3QyxLQUFLNGdELGVBQWU1Z0QsS0FBSzZnRCxpQkFBaUIsV0FBVzc3QixHQUFHLElBQUlxVixFQUFFbDZCLFNBQVNILEtBQUsrOUMsV0FBVSxJQUFLLzlDLEtBQUt1K0MsV0FBVyxXQUFXditDLEtBQUs2Z0QsbUJBQW1CeG1CLEVBQUVsNkIsT0FBT0gsS0FBSzgrQyxXQUFXemtCLEVBQUVvUCxTQUFTOWlDLEdBQUUsR0FBSTNHLEtBQUswZ0QsWUFBWXJFLEdBQUUsU0FBU3o2QixHQUFHLElBQUl5WSxFQUFFMTRCLEtBQUssaUJBQWlCaWdCLEVBQUVBLEVBQUVBLEVBQUV6YyxTQUFTbkYsS0FBSzYrQyxRQUFRL0osV0FBV251QyxJQUFJQSxHQUFFLEVBQUczRyxLQUFLNmdELG1CQUFtQjdnRCxLQUFLOCtDLFdBQVd6a0IsRUFBRW9QLFVBQVUsTUFBTTduQixHQUFHNWhCLEtBQUs0Z0QsYUFBYWgvQixNQUFLNWhCLE1BQU1BLEtBQUs0Z0QsYUFBYXZFLEdBQUUsU0FBU3o2QixHQUFHNWhCLEtBQUs4Z0QsaUJBQWlCOWdELEtBQUt1L0MsV0FBVzM5QixLQUFJNWhCLE1BQU1BLEtBQUsyZ0QsV0FBV3RFLEdBQUUsV0FBV3I4QyxLQUFLOGdELGlCQUFpQjk3QixHQUFFLEVBQUdobEIsS0FBSzBnRCxZQUFZLE1BQUsxZ0QsTUFBTUEsS0FBSzhnRCxlQUFlekUsR0FBRSxXQUFXcjhDLEtBQUtrK0MsT0FBTzZDLGVBQWUsT0FBTy9nRCxLQUFLMGdELGFBQWExZ0QsS0FBS2srQyxPQUFPNkMsZUFBZSxNQUFNL2dELEtBQUsyZ0QsWUFBWTNnRCxLQUFLaytDLE9BQU82QyxlQUFlLFFBQVEvZ0QsS0FBSzRnRCxnQkFBZTVnRCxNQUFNLFNBQVMyRyxFQUFFbXNCLEdBQUcsSUFBSXpsQixFQUFFd3NDLEVBQUVDLEVBQUU5MEIsRUFBRW5oQixLQUFLc3ZCLElBQUksRUFBRSxJQUFJanZCLEdBQUc4Z0IsRUFBRTQwQixFQUFFLG1EQUFtRHVDLEVBQUUsbU5BQW1OOWhCLEVBQUVyNkIsS0FBSzJHLEVBQUUsRUFBRTlILEVBQUUsRUFBRXk5QyxHQUFFLEVBQUcxNkIsR0FBRSxFQUFHb2QsRUFBRSxHQUFHenhCLEVBQUUsQ0FBQzRFLEtBQUssR0FBRzBNLE9BQU8sR0FBRzRWLEtBQUssSUFBSSxHQUFHdWxCLEVBQUVsbkIsRUFBRXR5QixNQUFNLENBQUMsSUFBSStoQyxFQUFFelAsRUFBRXR5QixLQUFLc3lCLEVBQUV0eUIsS0FBSyxTQUFTb2hCLEdBQUcsR0FBR3JVLEVBQUVxVSxFQUFFeWlCLElBQUlwMEIsUUFBUSxDQUFDLEdBQUdBLElBQUksSUFBSTFDLEVBQUU0RSxLQUFLaFMsT0FBTyxPQUFPd0csR0FBR2liLEVBQUV6UCxLQUFLaFMsT0FBTzJ5QixFQUFFc3NCLFNBQVN6NEMsRUFBRW1zQixFQUFFc3NCLFFBQVF2RixFQUFFbUgsU0FBU3p6QyxFQUFFNEUsS0FBSzVFLEVBQUU0RSxLQUFLLEdBQUdvd0IsRUFBRWgxQixFQUFFOHNCLE1BQU0sU0FBUzBOLEVBQUVubUIsR0FBRyxNQUFNLFdBQVdrUixFQUFFOG9CLGVBQWUsS0FBS2g2QixFQUFFN1MsS0FBSyxJQUFJZ3NCLE9BQU8sSUFBSW5aLEVBQUV6aEIsUUFBUSxJQUFJeWhCLEVBQUUsR0FBR3poQixPQUFPLFNBQVM4UCxJQUFJLEdBQUcxQyxHQUFHdXNDLElBQUk5MUMsRUFBRSxZQUFZLHdCQUF3Qiw2REFBNkRzSixFQUFFc3ZDLGlCQUFpQixLQUFLOUMsR0FBRSxHQUFJaG5CLEVBQUU4b0IsZUFBZSxJQUFJLElBQUloNkIsRUFBRSxFQUFFQSxFQUFFclUsRUFBRTRFLEtBQUtoUyxPQUFPeWhCLElBQUltbUIsRUFBRXg2QixFQUFFNEUsS0FBS3lQLEtBQUtyVSxFQUFFNEUsS0FBS3VpQixPQUFPOVMsSUFBSSxHQUFHLE9BQU95aUIsS0FBSyxXQUFXLEdBQUk5MkIsRUFBb0YsR0FBR3BRLE1BQU1FLFFBQVFrUSxFQUFFNEUsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJa29CLEVBQUUsRUFBRWdLLEtBQUtoSyxFQUFFOXNCLEVBQUU0RSxLQUFLaFMsT0FBT2s2QixJQUFJOXNCLEVBQUU0RSxLQUFLa29CLEdBQUcxM0IsUUFBUWlmLEdBQUdyVSxFQUFFNEUsS0FBS3VpQixPQUFPLEVBQUUsUUFBUW5uQixFQUFFNEUsS0FBS3hQLFFBQVFpZixHQUF6TSxTQUFTQSxFQUFFQSxFQUFFeVksR0FBRzJmLEVBQUVsbkIsRUFBRW11QixtQkFBbUJyL0IsRUFBRWtSLEVBQUVtdUIsZ0JBQWdCci9CLEVBQUV5WSxJQUFJMkUsRUFBRXI5QixLQUFLaWdCLElBQWhHLEdBQXVPLFdBQVcsSUFBSXJVLElBQUl1bEIsRUFBRWlwQixTQUFTanBCLEVBQUVpbkIsZ0JBQWdCam5CLEVBQUVvbkIsVUFBVSxPQUFPM3NDLEVBQUUsU0FBU3FVLEVBQUVBLEVBQUV5WSxHQUFHLElBQUkxekIsRUFBRXFlLEVBQUU4TixFQUFFaXBCLE9BQU8sR0FBRyxHQUFHLElBQUlwMUMsRUFBRSxFQUFFQSxFQUFFaWIsRUFBRXpoQixPQUFPd0csSUFBSSxDQUFDLElBQUl6QyxFQUFFeUMsRUFBRWl6QyxFQUFFaDRCLEVBQUVqYixHQUFHbXNCLEVBQUVpcEIsU0FBUzczQyxFQUFFeUMsR0FBR3E0QixFQUFFNytCLE9BQU8saUJBQWlCNitCLEVBQUVyNEIsSUFBSW1zQixFQUFFb25CLFlBQVlOLEVBQUU5bUIsRUFBRW9uQixVQUFVTixFQUFFMTFDLElBQUkwMUMsRUFBRXlDLEVBQUVuNEMsRUFBRTAxQyxHQUFHLG1CQUFtQjExQyxHQUFHOGdCLEVBQUU5Z0IsR0FBRzhnQixFQUFFOWdCLElBQUksR0FBRzhnQixFQUFFOWdCLEdBQUd2QyxLQUFLaTRDLElBQUk1MEIsRUFBRTlnQixHQUFHMDFDLEVBQUUsT0FBTzltQixFQUFFaXBCLFNBQVNwMUMsRUFBRXE0QixFQUFFNytCLE9BQU82RCxFQUFFLGdCQUFnQixnQkFBZ0IsNkJBQTZCZzdCLEVBQUU3K0IsT0FBTyxzQkFBc0J3RyxFQUFFOUgsRUFBRXc3QixHQUFHMXpCLEVBQUVxNEIsRUFBRTcrQixRQUFRNkQsRUFBRSxnQkFBZ0IsZUFBZSw0QkFBNEJnN0IsRUFBRTcrQixPQUFPLHNCQUFzQndHLEVBQUU5SCxFQUFFdzdCLElBQUlyVixFQUFFLElBQUlxVixFQUFFLEVBQXlJLE9BQXRJOXNCLEVBQUU0RSxLQUFLaFMsUUFBUWhELE1BQU1FLFFBQVFrUSxFQUFFNEUsS0FBSyxLQUFLNUUsRUFBRTRFLEtBQUs1RSxFQUFFNEUsS0FBS3ZQLElBQUlnZixHQUFHeVksRUFBRTlzQixFQUFFNEUsS0FBS2hTLFFBQVFvTixFQUFFNEUsS0FBS3lQLEVBQUVyVSxFQUFFNEUsS0FBSyxHQUFHMmdCLEVBQUVpcEIsUUFBUXh1QyxFQUFFa25CLE9BQU9sbkIsRUFBRWtuQixLQUFLMm5CLE9BQU9wZCxHQUFVbmdDLEdBQUd3N0IsRUFBRTlzQixFQUF0ckIsR0FBMnJCLFNBQVM4MkIsSUFBSSxPQUFPdlIsRUFBRWlwQixRQUFRLElBQUkvYyxFQUFFNytCLE9BQU8sU0FBU2s4QyxFQUFFejZCLEVBQUV5WSxHQUFHLE9BQU8xekIsRUFBRWliLEVBQUVrUixFQUFFbW5CLDRCQUF1QixJQUFTbm5CLEVBQUVpbkIsY0FBY3B6QyxLQUFLbXNCLEVBQUVpbkIsY0FBY3B6QyxHQUFHbXNCLEVBQUVtbkIsc0JBQXNCdHpDLEtBQUksS0FBTW1zQixFQUFFaW5CLGNBQWNwekMsSUFBSW1zQixFQUFFaW5CLGVBQWUsU0FBUzFmLEdBQUcsU0FBU0EsR0FBRyxVQUFVQSxHQUFHLFVBQVVBLElBQUksU0FBU3pZLEdBQUcsR0FBR2c0QixFQUFFMXpDLEtBQUswYixHQUFHLENBQUMsSUFBSXlZLEVBQUU2bUIsV0FBV3QvQixHQUFHLEdBQUcxZCxFQUFFbTJCLEdBQUdBLEVBQUVyVixFQUFFLE9BQU0sRUFBRyxPQUFNLEVBQXpFLENBQTZFcVYsR0FBRzZtQixXQUFXN21CLEdBQUc4aEIsRUFBRWoyQyxLQUFLbTBCLEdBQUcsSUFBSStELEtBQUsvRCxHQUFHLEtBQUtBLEVBQUUsS0FBS0EsR0FBR0EsRUFBRSxJQUFJMXpCLEVBQUUsU0FBUzNDLEVBQUU0ZCxFQUFFeVksRUFBRTF6QixFQUFFcWUsR0FBRyxJQUFJOWdCLEVBQUUsQ0FBQ3VOLEtBQUttUSxFQUFFZ2UsS0FBS3ZGLEVBQUV2YixRQUFRblksUUFBRyxJQUFTcWUsSUFBSTlnQixFQUFFaTlDLElBQUluOEIsR0FBR3pYLEVBQUVzUixPQUFPbGQsS0FBS3VDLEdBQUdsRSxLQUFLMndDLE1BQU0sU0FBUy91QixFQUFFeVksRUFBRTF6QixHQUFHLElBQUlxZSxFQUFFOE4sRUFBRWdwQixXQUFXLElBQUksR0FBR2hwQixFQUFFK29CLFVBQVUvb0IsRUFBRStvQixRQUFRLFNBQVNqNkIsRUFBRXlZLEdBQUd6WSxFQUFFQSxFQUFFdTlCLFVBQVUsRUFBRSxTQUFTLElBQUl4NEMsRUFBRSxJQUFJK3FCLE9BQU9wRixFQUFFK04sR0FBRyxVQUFVL04sRUFBRStOLEdBQUcsTUFBTXJWLEdBQUdwRCxFQUFFQSxFQUFFaGMsUUFBUWUsRUFBRSxLQUFLbUcsTUFBTSxNQUFNNUksRUFBRTBkLEVBQUU5VSxNQUFNLE1BQU04c0MsRUFBRSxFQUFFMTFDLEVBQUUvRCxRQUFRK0QsRUFBRSxHQUFHL0QsT0FBTzZrQixFQUFFLEdBQUc3a0IsT0FBTyxHQUFHLElBQUk2a0IsRUFBRTdrQixRQUFReTVDLEVBQUUsTUFBTSxLQUFLLElBQUksSUFBSXZzQyxFQUFFLEVBQUV3c0MsRUFBRSxFQUFFQSxFQUFFNzBCLEVBQUU3a0IsT0FBTzA1QyxJQUFJLE9BQU83MEIsRUFBRTYwQixHQUFHLElBQUl4c0MsSUFBSSxPQUFPQSxHQUFHMlgsRUFBRTdrQixPQUFPLEVBQUUsT0FBTyxLQUF2UixDQUE2UnloQixFQUFFb0QsSUFBSTgwQixHQUFFLEVBQUdobkIsRUFBRTJvQixVQUFVekIsRUFBRWxuQixFQUFFMm9CLGFBQWEzb0IsRUFBRTJvQixVQUFVM29CLEVBQUUyb0IsVUFBVTc1QixHQUFHclUsRUFBRWtuQixLQUFLZ25CLFVBQVUzb0IsRUFBRTJvQixlQUFlLENBQUMsSUFBSXYzQyxFQUFFLFNBQVMwZCxFQUFFeVksRUFBRTF6QixFQUFFcWUsRUFBRTlnQixHQUFHLElBQUkwMUMsRUFBRXZzQyxFQUFFd3NDLEVBQUVDLEVBQUU1MUMsRUFBRUEsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLElBQUlvSixFQUFFaXZDLFdBQVdqdkMsRUFBRWt2QyxVQUFVLElBQUksSUFBSUwsRUFBRSxFQUFFQSxFQUFFajRDLEVBQUUvRCxPQUFPZzhDLElBQUksQ0FBQyxJQUFJdDlDLEVBQUVxRixFQUFFaTRDLEdBQUdHLEVBQUUsRUFBRXRkLEVBQUUsRUFBRXp4QixFQUFFLEVBQUVzc0MsT0FBRSxFQUFPLElBQUksSUFBSXRYLEVBQUUsSUFBSTFpQixFQUFFLENBQUN1aEMsU0FBU3A4QixFQUFFeTJCLFVBQVU1OEMsRUFBRWc5QyxRQUFReGhCLEVBQUUra0IsUUFBUSxLQUFLek8sTUFBTS91QixHQUFHM1IsRUFBRSxFQUFFQSxFQUFFc3lCLEVBQUVwd0IsS0FBS2hTLE9BQU84UCxJQUFJLEdBQUd0SixHQUFHb2hDLEVBQUV4RixFQUFFcHdCLEtBQUtsQyxJQUFJMUMsUUFBUSxDQUFDLElBQUk4MkIsRUFBRTlCLEVBQUVwd0IsS0FBS2xDLEdBQUc5UCxPQUFPNitCLEdBQUdxRixPQUFFLElBQVN3VixFQUFFLEVBQUV4VixJQUFJaVksR0FBR3o0QyxLQUFLcXZCLElBQUltUixFQUFFd1YsR0FBR0EsRUFBRXhWLEdBQUd3VixFQUFFeFYsRUFBRSxFQUFFOUIsRUFBRXB3QixLQUFLaFMsU0FBUzYrQixHQUFHdUQsRUFBRXB3QixLQUFLaFMsT0FBT29OLFNBQUksSUFBU0YsR0FBR2l2QyxHQUFHanZDLFVBQUssSUFBU3lzQyxHQUFHQSxFQUFFOWEsSUFBSSxLQUFLQSxJQUFJM3hCLEVBQUVpdkMsRUFBRTFDLEVBQUUvNkMsRUFBRWk3QyxFQUFFOWEsR0FBRyxNQUFNLENBQUNxaUIsY0FBY3Z1QixFQUFFMm9CLFVBQVU3QixHQUFHMEgsY0FBYzFILEdBQXBlLENBQXdlaDRCLEVBQUVrUixFQUFFK29CLFFBQVEvb0IsRUFBRThvQixlQUFlOW9CLEVBQUVzdUIsU0FBU3R1QixFQUFFeXVCLG1CQUFtQnI5QyxFQUFFbTlDLFdBQVd2dUIsRUFBRTJvQixVQUFVdjNDLEVBQUVvOUMsZUFBZXhILEdBQUUsRUFBR2huQixFQUFFMm9CLFVBQVVudUMsRUFBRXN2QyxrQkFBa0JydkMsRUFBRWtuQixLQUFLZ25CLFVBQVUzb0IsRUFBRTJvQixVQUFVLElBQUk3QixFQUFFOEUsRUFBRTVyQixHQUFHLE9BQU9BLEVBQUVzc0IsU0FBU3RzQixFQUFFaXBCLFFBQVFuQyxFQUFFd0YsVUFBVS94QyxFQUFFdVUsRUFBRWk0QixFQUFFLElBQUloNkIsRUFBRSs1QixHQUFHcnNDLEVBQUVzc0MsRUFBRWxKLE1BQU10akMsRUFBRWd0QixFQUFFMXpCLEdBQUdzSixJQUFJcXNDLEVBQUUsQ0FBQzduQixLQUFLLENBQUN1cUIsUUFBTyxJQUFLenhDLEdBQUcsQ0FBQ2tuQixLQUFLLENBQUN1cUIsUUFBTyxLQUFNaC9DLEtBQUtnL0MsT0FBTyxXQUFXLE9BQU8xQyxHQUFHdDhDLEtBQUt3Z0QsTUFBTSxXQUFXbEUsR0FBRSxFQUFHekMsRUFBRW1ILFFBQVEzekMsRUFBRTJzQyxFQUFFbG5CLEVBQUU2bkIsT0FBTyxHQUFHdHRDLEVBQUU4eEMsVUFBVXRGLEVBQUUySCxpQkFBaUJ4aEQsS0FBS3lnRCxPQUFPLFdBQVdwbUIsRUFBRXVrQixTQUFTWCxTQUFTM0IsR0FBRSxFQUFHamlCLEVBQUV1a0IsU0FBU0UsV0FBV3p4QyxHQUFFLElBQUs4UCxXQUFXa2QsRUFBRW9tQixPQUFPLElBQUl6Z0QsS0FBS2kvQyxRQUFRLFdBQVcsT0FBT3I5QixHQUFHNWhCLEtBQUtnaEQsTUFBTSxXQUFXcC9CLEdBQUUsRUFBR2k0QixFQUFFbUgsUUFBUXp6QyxFQUFFa25CLEtBQUt3cUIsU0FBUSxFQUFHakYsRUFBRWxuQixFQUFFK25CLFdBQVcvbkIsRUFBRStuQixTQUFTdHRDLEdBQUdGLEVBQUUsSUFBSSxTQUFTaWYsRUFBRTFLLEdBQUcsT0FBT0EsRUFBRWhjLFFBQVEsc0JBQXNCLFFBQVEsU0FBU2lhLEVBQUUrQixHQUFHLElBQUloSCxFQUFFOWEsR0FBRzhoQixFQUFFQSxHQUFHLElBQUk2NUIsVUFBVWppQyxFQUFFb0ksRUFBRWk2QixRQUFRNEYsRUFBRTcvQixFQUFFdy9CLFNBQVNwckIsRUFBRXBVLEVBQUVwaEIsS0FBS2toRCxFQUFFOS9CLEVBQUV3OUIsUUFBUXQvQixFQUFFOEIsRUFBRSsvQixTQUFTQyxFQUFFaG5DLE9BQUUsSUFBU2dILEVBQUVrNkIsVUFBVSxJQUFJbDZCLEVBQUVrNkIsVUFBVSxRQUFHLElBQVNsNkIsRUFBRXE2QixhQUFhMkYsRUFBRWhnQyxFQUFFcTZCLGFBQWEsaUJBQWlCbjhDLElBQUksRUFBRXdOLEVBQUVvdUMsZUFBZW42QyxRQUFRekIsTUFBTUEsRUFBRSxLQUFLMmhELElBQUkzaEQsRUFBRSxNQUFNLElBQUlnRyxNQUFNLHdDQUF1QyxJQUFLMjdDLEVBQUVBLEVBQUUsS0FBSyxpQkFBaUJBLElBQUksRUFBRW4wQyxFQUFFb3VDLGVBQWVuNkMsUUFBUWtnRCxNQUFNQSxHQUFFLEdBQUksT0FBT2pvQyxHQUFHLE9BQU9BLEdBQUcsU0FBU0EsSUFBSUEsRUFBRSxNQUFNLElBQUk1UyxFQUFFLEVBQUU0K0IsR0FBRSxFQUFHeGxDLEtBQUsyd0MsTUFBTSxTQUFTM3JCLEVBQUVxVixFQUFFMXpCLEdBQUcsR0FBRyxpQkFBaUJxZSxFQUFFLE1BQU0sSUFBSWxmLE1BQU0sMEJBQTBCLElBQUk1QixFQUFFOGdCLEVBQUU3a0IsT0FBT3loQixFQUFFOWhCLEVBQUVLLE9BQU95NUMsRUFBRXBnQyxFQUFFclosT0FBT2tOLEVBQUVvMEMsRUFBRXRoRCxPQUFPMDVDLEVBQUVHLEVBQUVoa0IsR0FBRzhqQixFQUFFLEdBQUdxQyxFQUFFLEdBQUd0OUMsRUFBRSxHQUFHeTlDLEVBQUUxMUMsRUFBRSxFQUFFLElBQUlvZSxFQUFFLE9BQU81Z0IsSUFBSSxHQUFHMGIsSUFBRyxJQUFLQSxJQUFJLElBQUlrRixFQUFFempCLFFBQVFxWixHQUFHLENBQUMsSUFBSSxJQUFJb2tCLEVBQUVoYSxFQUFFbFksTUFBTTBNLEdBQUdqTSxFQUFFLEVBQUVBLEVBQUV5eEIsRUFBRTcrQixPQUFPb04sSUFBSSxDQUFDLEdBQUcxTyxFQUFFbWdDLEVBQUV6eEIsR0FBRzNHLEdBQUcvSCxFQUFFc0IsT0FBT29OLElBQUl5eEIsRUFBRTcrQixPQUFPLEVBQUV5RyxHQUFHNFMsRUFBRXJaLFlBQVksR0FBR3dHLEVBQUUsT0FBT3ZDLElBQUksSUFBSXE5QyxHQUFHNWlELEVBQUVzZ0QsVUFBVSxFQUFFOXhDLEtBQUtvMEMsRUFBRSxDQUFDLEdBQUc1SCxHQUFHLEdBQUdDLEVBQUUsR0FBRzkxQyxFQUFFbkYsRUFBRWlPLE1BQU1oTixJQUFJMDJCLElBQUlnUCxFQUFFLE9BQU9waEMsU0FBU0osRUFBRW5GLEVBQUVpTyxNQUFNaE4sSUFBSSxHQUFHNGhELEdBQUdBLEdBQUduMEMsRUFBRSxPQUFPdXNDLEVBQUVBLEVBQUVyOEMsTUFBTSxFQUFFaWtELEdBQUd0OUMsR0FBRSxJQUFLLE9BQU9BLElBQUksSUFBSSxJQUFJbStCLEVBQUV2ZCxFQUFFempCLFFBQVF6QixFQUFFOEcsR0FBR3FKLEVBQUUrVSxFQUFFempCLFFBQVFpWSxFQUFFNVMsR0FBR3k5QixFQUFFLElBQUkzUyxPQUFPcEYsRUFBRXMxQixHQUFHdDFCLEVBQUUxUixHQUFHLEtBQUtrWSxFQUFFOU4sRUFBRXpqQixRQUFRcVosRUFBRWhVLEtBQUssR0FBR29lLEVBQUVwZSxLQUFLZ1UsRUFBRSxHQUFHNm1DLEdBQUcsSUFBSTVpRCxFQUFFc0IsUUFBUTZrQixFQUFFbTZCLFVBQVV2NEMsRUFBRUEsRUFBRXlHLEtBQUtvMEMsRUFBRSxDQUFDLElBQUksSUFBSXh4QyxFQUFFLE9BQU83TCxJQUFJd0MsRUFBRXFKLEVBQUUycEMsRUFBRTNwQyxFQUFFK1UsRUFBRXpqQixRQUFRaVksRUFBRTVTLEdBQUcyN0IsRUFBRXZkLEVBQUV6akIsUUFBUXpCLEVBQUU4RyxRQUFRLElBQUksSUFBSTI3QixJQUFJQSxFQUFFdHlCLElBQUksSUFBSUEsR0FBR3BSLEVBQUU4QyxLQUFLcWpCLEVBQUVtNkIsVUFBVXY0QyxFQUFFMjdCLElBQUkzN0IsRUFBRTI3QixFQUFFM2dCLEVBQUUyZ0IsRUFBRXZkLEVBQUV6akIsUUFBUXpCLEVBQUU4RyxPQUFPLENBQUMsSUFBSSxJQUFJcUosRUFBRSxNQUFNLEdBQUdwUixFQUFFOEMsS0FBS3FqQixFQUFFbTZCLFVBQVV2NEMsRUFBRXFKLElBQUl5dUMsRUFBRXp1QyxFQUFFMnBDLEdBQUdDLElBQUlyakIsSUFBSWdQLEdBQUcsT0FBT3BoQyxJQUFJLEdBQUdzOUMsR0FBRzVILEVBQUUzNUMsUUFBUXVoRCxFQUFFLE9BQU90OUMsR0FBRSxRQUFTLElBQUkwdUIsRUFBRWxzQixFQUFFQSxNQUFNLENBQUMsSUFBSSxLQUFLa3NCLEVBQUU5TixFQUFFempCLFFBQVFxWixFQUFFa1ksRUFBRSxJQUFJLE9BQU9uc0IsR0FBR3cxQyxFQUFFeDZDLEtBQUssQ0FBQzhQLEtBQUssU0FBU211QixLQUFLLGdCQUFnQjlnQixRQUFRLDRCQUE0QnFpQyxJQUFJckgsRUFBRTM1QyxPQUFPVSxNQUFNK0YsSUFBSWlaLElBQUksR0FBR2lULElBQUk1dUIsRUFBRSxFQUFFLE9BQU8yYixFQUFFbUYsRUFBRW02QixVQUFVdjRDLEVBQUVrc0IsR0FBR2x0QixRQUFReStCLEVBQUV6cEIsSUFBSSxHQUFHQSxJQUFJZ25DLEdBQUc1OEIsRUFBRThOLEVBQUUsS0FBSzh1QixHQUFHLEdBQUdobkMsSUFBSWduQyxHQUFHLElBQUk5dUIsR0FBRzlOLEVBQUU4TixFQUFFLEtBQUs4dUIsRUFBRSxFQUFFLElBQUlyZixHQUFHQSxFQUFFelAsRUFBRSxJQUFJeVAsRUFBRXZkLEVBQUV6akIsUUFBUXpCLEVBQUVnekIsRUFBRSxLQUFLLElBQUk3aUIsR0FBR0EsRUFBRTZpQixFQUFFLElBQUk3aUIsRUFBRStVLEVBQUV6akIsUUFBUWlZLEVBQUVzWixFQUFFLElBQUksSUFBSWlWLEVBQUV6NkIsR0FBRyxJQUFJMkMsRUFBRXN5QixFQUFFMStCLEtBQUt1WixJQUFJbWxCLEVBQUV0eUIsSUFBSSxHQUFHK1UsRUFBRThOLEVBQUUsRUFBRWlWLEtBQUtqb0MsRUFBRSxDQUFDakIsRUFBRThDLEtBQUtxakIsRUFBRW02QixVQUFVdjRDLEVBQUVrc0IsR0FBR2x0QixRQUFReStCLEVBQUV6cEIsSUFBSW9LLEVBQUVwZSxFQUFFa3NCLEVBQUUsRUFBRWlWLEVBQUVubUIsS0FBS2hILElBQUlrWSxFQUFFOU4sRUFBRXpqQixRQUFRcVosRUFBRWhVLElBQUkyN0IsRUFBRXZkLEVBQUV6akIsUUFBUXpCLEVBQUU4RyxHQUFHcUosRUFBRStVLEVBQUV6akIsUUFBUWlZLEVBQUU1UyxHQUFHLE1BQU0sSUFBSXkxQyxFQUFFL3VDLEVBQUUyQyxHQUFHLEdBQUcrVSxFQUFFbTZCLFVBQVVyc0IsRUFBRSxFQUFFdXBCLEVBQUV2cEIsRUFBRSxFQUFFdXBCLEVBQUV6QyxLQUFLcGdDLEVBQUUsQ0FBQyxHQUFHM2EsRUFBRThDLEtBQUtxakIsRUFBRW02QixVQUFVdjRDLEVBQUVrc0IsR0FBR2x0QixRQUFReStCLEVBQUV6cEIsSUFBSThqQyxFQUFFNXJCLEVBQUUsRUFBRXVwQixFQUFFekMsR0FBR3JYLEVBQUV2ZCxFQUFFempCLFFBQVF6QixFQUFFOEcsR0FBR2tzQixFQUFFOU4sRUFBRXpqQixRQUFRcVosRUFBRWhVLEdBQUdpekMsSUFBSXJqQixJQUFJZ1AsR0FBRyxPQUFPcGhDLElBQUksR0FBR3M5QyxHQUFHNUgsRUFBRTM1QyxRQUFRdWhELEVBQUUsT0FBT3Q5QyxHQUFFLEdBQUksTUFBTSszQyxFQUFFeDZDLEtBQUssQ0FBQzhQLEtBQUssU0FBU211QixLQUFLLGdCQUFnQjlnQixRQUFRLDhDQUE4Q3FpQyxJQUFJckgsRUFBRTM1QyxPQUFPVSxNQUFNK0YsSUFBSWtzQixVQUFVQSxJQUFJLE9BQU9qVCxJQUFJLFNBQVM3YixFQUFFNGQsR0FBR2s0QixFQUFFbjRDLEtBQUtpZ0IsR0FBRzA2QixFQUFFMTFDLEVBQUUsU0FBUzBHLEVBQUVzVSxHQUFHLElBQUl5WSxFQUFFLEVBQUUsSUFBSSxJQUFJelksRUFBRSxDQUFDLElBQUlqYixFQUFFcWUsRUFBRW02QixVQUFVcnNCLEVBQUUsRUFBRWxSLEdBQUdqYixHQUFHLEtBQUtBLEVBQUVvMEIsU0FBU1YsRUFBRTF6QixFQUFFeEcsUUFBUSxPQUFPazZCLEVBQUUsU0FBU3hhLEVBQUUrQixHQUFHLE9BQU9qYixTQUFJLElBQVNpYixJQUFJQSxFQUFFb0QsRUFBRW02QixVQUFVdjRDLElBQUkvSCxFQUFFOEMsS0FBS2lnQixHQUFHaGIsRUFBRTFDLEVBQUVGLEVBQUVuRixHQUFHZzdDLEdBQUdyakIsS0FBS3B5QixJQUFJLFNBQVNzNkMsRUFBRTk4QixHQUFHaGIsRUFBRWdiLEVBQUU1ZCxFQUFFbkYsR0FBR0EsRUFBRSxHQUFHb1IsRUFBRStVLEVBQUV6akIsUUFBUWlZLEVBQUU1UyxHQUFHLFNBQVN4QyxFQUFFd2QsR0FBRyxNQUFNLENBQUN6UCxLQUFLMm5DLEVBQUVqN0IsT0FBT3M5QixFQUFFMW5CLEtBQUssQ0FBQ2duQixVQUFVMzdDLEVBQUUraEQsVUFBVXJvQyxFQUFFeWxDLFFBQVF6WixFQUFFc2MsWUFBWWxnQyxFQUFFczlCLE9BQU81QyxHQUFHamlCLEdBQUcsS0FBSyxTQUFTN0QsSUFBSVIsRUFBRTV4QixLQUFLMDFDLEVBQUUsR0FBR3FDLEVBQUUsS0FBS244QyxLQUFLZ2hELE1BQU0sV0FBV3hiLEdBQUUsR0FBSXhsQyxLQUFLd2hELGFBQWEsV0FBVyxPQUFPNTZDLEdBQUcsU0FBU3k5QixFQUFFemlCLEdBQUcsSUFBSXlZLEVBQUV6WSxFQUFFelAsS0FBS3hMLEVBQUUwRyxFQUFFZ3RCLEVBQUUyZ0IsVUFBVWgyQixHQUFFLEVBQUcsR0FBR3FWLEVBQUUzMUIsTUFBTWlDLEVBQUVtMEMsVUFBVXpnQixFQUFFMzFCLE1BQU0yMUIsRUFBRWtVLFdBQVcsR0FBR2xVLEVBQUVrSyxTQUFTbEssRUFBRWtLLFFBQVFweUIsS0FBSyxDQUFDLElBQUlqTyxFQUFFLENBQUM4OEMsTUFBTSxXQUFXaDhCLEdBQUUsRUFBRzhOLEVBQUV1SCxFQUFFMmdCLFNBQVMsQ0FBQzdvQyxLQUFLLEdBQUcwTSxPQUFPLEdBQUc0VixLQUFLLENBQUN3cUIsU0FBUSxNQUFPdUIsTUFBTXpZLEVBQUUwWSxPQUFPMVksR0FBRyxHQUFHaVMsRUFBRXJ6QyxFQUFFOHpDLFVBQVUsQ0FBQyxJQUFJLElBQUliLEVBQUUsRUFBRUEsRUFBRXZmLEVBQUVrSyxRQUFRcHlCLEtBQUtoUyxTQUFTd0csRUFBRTh6QyxTQUFTLENBQUN0b0MsS0FBS2tvQixFQUFFa0ssUUFBUXB5QixLQUFLeW5DLEdBQUcvNkIsT0FBT3diLEVBQUVrSyxRQUFRMWxCLE9BQU80VixLQUFLNEYsRUFBRWtLLFFBQVE5UCxNQUFNdndCLElBQUk4Z0IsR0FBRzQwQixZQUFZdmYsRUFBRWtLLGFBQWF5VixFQUFFcnpDLEVBQUUrekMsYUFBYS96QyxFQUFFK3pDLFVBQVVyZ0IsRUFBRWtLLFFBQVFyZ0MsRUFBRW0yQixFQUFFa1UsYUFBYWxVLEVBQUVrSyxTQUFTbEssRUFBRWlsQixXQUFXdDZCLEdBQUc4TixFQUFFdUgsRUFBRTJnQixTQUFTM2dCLEVBQUVrSyxTQUFTLFNBQVN6UixFQUFFbFIsRUFBRXlZLEdBQUcsSUFBSTF6QixFQUFFMEcsRUFBRXVVLEdBQUdvNEIsRUFBRXJ6QyxFQUFFaTBDLGVBQWVqMEMsRUFBRWkwQyxhQUFhdmdCLEdBQUcxekIsRUFBRW83QyxtQkFBbUIxMEMsRUFBRXVVLEdBQUcsU0FBU21tQixJQUFJLE1BQU0sSUFBSWppQyxNQUFNLG9CQUFvQixTQUFTNDRDLEVBQUU5OEIsR0FBRyxHQUFHLGlCQUFpQkEsR0FBRyxPQUFPQSxFQUFFLE9BQU9BLEVBQUUsSUFBSXlZLEVBQUVsOUIsTUFBTUUsUUFBUXVrQixHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUlqYixLQUFLaWIsRUFBRXlZLEVBQUUxekIsR0FBRyszQyxFQUFFOThCLEVBQUVqYixJQUFJLE9BQU8wekIsRUFBRSxTQUFTZ2lCLEVBQUV6NkIsRUFBRXlZLEdBQUcsT0FBTyxXQUFXelksRUFBRTVVLE1BQU1xdEIsRUFBRW42QixZQUFZLFNBQVM4NUMsRUFBRXA0QixHQUFHLE1BQU0sbUJBQW1CQSxFQUFFLE9BQU9pNEIsSUFBSWg3QyxFQUFFa2UsVUFBVSxTQUFTNkUsR0FBRyxJQUFJeVksRUFBRXpZLEVBQUV6UCxLQUF1RCxRQUFsRCxJQUFTN0UsRUFBRSt4QyxXQUFXaGxCLElBQUkvc0IsRUFBRSt4QyxVQUFVaGxCLEVBQUUyZ0IsVUFBYSxpQkFBaUIzZ0IsRUFBRXBoQixNQUFNcGEsRUFBRTRkLFlBQVksQ0FBQ3UrQixTQUFTMXRDLEVBQUUreEMsVUFBVTlhLFFBQVFqM0IsRUFBRXFqQyxNQUFNdFcsRUFBRXBoQixNQUFNb2hCLEVBQUUwZ0IsUUFBUXVFLFVBQVMsU0FBVSxHQUFHemdELEVBQUV5OEMsTUFBTWpoQixFQUFFcGhCLGlCQUFpQnFpQyxNQUFNamhCLEVBQUVwaEIsaUJBQWlCNWEsT0FBTyxDQUFDLElBQUlzSSxFQUFFMkcsRUFBRXFqQyxNQUFNdFcsRUFBRXBoQixNQUFNb2hCLEVBQUUwZ0IsUUFBUXAwQyxHQUFHOUgsRUFBRTRkLFlBQVksQ0FBQ3UrQixTQUFTMXRDLEVBQUUreEMsVUFBVTlhLFFBQVE1OUIsRUFBRTI0QyxVQUFTLFFBQVN0Z0IsRUFBRS9nQyxVQUFVSSxPQUFPb0UsT0FBTzA1QyxFQUFFbCtDLFlBQVl3RixZQUFZdTdCLEdBQUd6eEIsRUFBRXRQLFVBQVVJLE9BQU9vRSxPQUFPMDVDLEVBQUVsK0MsWUFBWXdGLFlBQVk4SixHQUFHZzFCLEVBQUV0a0MsVUFBVUksT0FBT29FLE9BQU84L0IsRUFBRXRrQyxZQUFZd0YsWUFBWTgrQixHQUFHdHlCLEVBQUVoUyxVQUFVSSxPQUFPb0UsT0FBTzA1QyxFQUFFbCtDLFlBQVl3RixZQUFZd00sRUFBRTNDLFFBQXh2a0IsaUJBQUosT0FBSSx3QkNDaEUsSUFBSTAwQyxFQUFXLFNBQVVobEQsR0FDdkIsYUFFQSxJQUVJcUQsRUFGQTRoRCxFQUFLNWpELE9BQU9KLFVBQ1ptSSxFQUFTNjdDLEVBQUdwekMsZUFFWjZELEVBQTRCLG1CQUFYL1QsT0FBd0JBLE9BQVMsR0FDbER1akQsRUFBaUJ4dkMsRUFBUWpTLFVBQVksYUFDckMwaEQsRUFBc0J6dkMsRUFBUTB2QyxlQUFpQixrQkFDL0NDLEVBQW9CM3ZDLEVBQVE0dkMsYUFBZSxnQkFFL0MsU0FBUy95QixFQUFPMWIsRUFBS3RWLEVBQUtvQyxHQU94QixPQU5BdEMsT0FBT0MsZUFBZXVWLEVBQUt0VixFQUFLLENBQzlCb0MsTUFBT0EsRUFDUDZHLFlBQVksRUFDWkMsY0FBYyxFQUNkQyxVQUFVLElBRUxtTSxFQUFJdFYsR0FFYixJQUVFZ3hCLEVBQU8sR0FBSSxJQUNYLE1BQU84cEIsR0FDUDlwQixFQUFTLFNBQVMxYixFQUFLdFYsRUFBS29DLEdBQzFCLE9BQU9rVCxFQUFJdFYsR0FBT29DLEdBSXRCLFNBQVM2TixFQUFLK3pDLEVBQVNDLEVBQVNqZ0QsRUFBTWtnRCxHQUVwQyxJQUFJQyxFQUFpQkYsR0FBV0EsRUFBUXZrRCxxQkFBcUIwa0QsRUFBWUgsRUFBVUcsRUFDL0VDLEVBQVl2a0QsT0FBT29FLE9BQU9pZ0QsRUFBZXprRCxXQUN6QzRrRCxFQUFVLElBQUlDLEVBQVFMLEdBQWUsSUFNekMsT0FGQUcsRUFBVUcsUUF1TVosU0FBMEJSLEVBQVNoZ0QsRUFBTXNnRCxHQUN2QyxJQUFJN3hDLEVBQVFneUMsRUFFWixPQUFPLFNBQWdCbGxELEVBQVE2aEIsR0FDN0IsR0FBSTNPLElBQVVpeUMsRUFDWixNQUFNLElBQUluOUMsTUFBTSxnQ0FHbEIsR0FBSWtMLElBQVVreUMsRUFBbUIsQ0FDL0IsR0FBZSxVQUFYcGxELEVBQ0YsTUFBTTZoQixFQUtSLE9BQU93akMsSUFNVCxJQUhBTixFQUFRL2tELE9BQVNBLEVBQ2pCK2tELEVBQVFsakMsSUFBTUEsSUFFRCxDQUNYLElBQUl5akMsRUFBV1AsRUFBUU8sU0FDdkIsR0FBSUEsRUFBVSxDQUNaLElBQUlDLEVBQWlCQyxFQUFvQkYsRUFBVVAsR0FDbkQsR0FBSVEsRUFBZ0IsQ0FDbEIsR0FBSUEsSUFBbUJFLEVBQWtCLFNBQ3pDLE9BQU9GLEdBSVgsR0FBdUIsU0FBbkJSLEVBQVEva0QsT0FHVitrRCxFQUFRVyxLQUFPWCxFQUFRWSxNQUFRWixFQUFRbGpDLFNBRWxDLEdBQXVCLFVBQW5Ca2pDLEVBQVEva0QsT0FBb0IsQ0FDckMsR0FBSWtULElBQVVneUMsRUFFWixNQURBaHlDLEVBQVFreUMsRUFDRkwsRUFBUWxqQyxJQUdoQmtqQyxFQUFRYSxrQkFBa0JiLEVBQVFsakMsU0FFTixXQUFuQmtqQyxFQUFRL2tELFFBQ2pCK2tELEVBQVFjLE9BQU8sU0FBVWQsRUFBUWxqQyxLQUduQzNPLEVBQVFpeUMsRUFFUixJQUFJVyxFQUFTQyxFQUFTdEIsRUFBU2hnRCxFQUFNc2dELEdBQ3JDLEdBQW9CLFdBQWhCZSxFQUFPbnlDLEtBQW1CLENBTzVCLEdBSkFULEVBQVE2eEMsRUFBUS9oRCxLQUNab2lELEVBQ0FZLEVBRUFGLEVBQU9qa0MsTUFBUTRqQyxFQUNqQixTQUdGLE1BQU8sQ0FDTDVpRCxNQUFPaWpELEVBQU9qa0MsSUFDZDdlLEtBQU0raEQsRUFBUS9oRCxNQUdTLFVBQWhCOGlELEVBQU9ueUMsT0FDaEJULEVBQVFreUMsRUFHUkwsRUFBUS9rRCxPQUFTLFFBQ2pCK2tELEVBQVFsakMsSUFBTWlrQyxFQUFPamtDLE9BL1FQb2tDLENBQWlCeEIsRUFBU2hnRCxFQUFNc2dELEdBRTdDRCxFQWNULFNBQVNpQixFQUFTci9DLEVBQUlxUCxFQUFLOEwsR0FDekIsSUFDRSxNQUFPLENBQUVsTyxLQUFNLFNBQVVrTyxJQUFLbmIsRUFBR2pGLEtBQUtzVSxFQUFLOEwsSUFDM0MsTUFBTzA1QixHQUNQLE1BQU8sQ0FBRTVuQyxLQUFNLFFBQVNrTyxJQUFLMDVCLElBaEJqQ3I4QyxFQUFRd1IsS0FBT0EsRUFvQmYsSUFBSXcwQyxFQUF5QixpQkFDekJjLEVBQXlCLGlCQUN6QmIsRUFBb0IsWUFDcEJDLEVBQW9CLFlBSXBCSyxFQUFtQixHQU12QixTQUFTWixLQUNULFNBQVNxQixLQUNULFNBQVNDLEtBSVQsSUFBSW45QyxFQUFvQixHQUN4QnlvQixFQUFPem9CLEVBQW1CbzdDLEdBQWdCLFdBQ3hDLE9BQU9saUQsUUFHVCxJQUFJa2tELEVBQVc3bEQsT0FBT3dJLGVBQ2xCczlDLEVBQTBCRCxHQUFZQSxFQUFTQSxFQUFTdDZDLEVBQU8sTUFDL0R1NkMsR0FDQUEsSUFBNEJsQyxHQUM1Qjc3QyxFQUFPN0csS0FBSzRrRCxFQUF5QmpDLEtBR3ZDcDdDLEVBQW9CcTlDLEdBR3RCLElBQUlDLEVBQUtILEVBQTJCaG1ELFVBQ2xDMGtELEVBQVUxa0QsVUFBWUksT0FBT29FLE9BQU9xRSxHQVl0QyxTQUFTdTlDLEVBQXNCcG1ELEdBQzdCLENBQUMsT0FBUSxRQUFTLFVBQVUwRSxTQUFRLFNBQVM3RSxHQUMzQ3l4QixFQUFPdHhCLEVBQVdILEdBQVEsU0FBUzZoQixHQUNqQyxPQUFPM2YsS0FBSytpRCxRQUFRamxELEVBQVE2aEIsU0FrQ2xDLFNBQVMya0MsRUFBYzFCLEVBQVcyQixHQUNoQyxTQUFTQyxFQUFPMW1ELEVBQVE2aEIsRUFBS3pLLEVBQVNTLEdBQ3BDLElBQUlpdUMsRUFBU0MsRUFBU2pCLEVBQVU5a0QsR0FBUzhrRCxFQUFXampDLEdBQ3BELEdBQW9CLFVBQWhCaWtDLEVBQU9ueUMsS0FFSixDQUNMLElBQUlsUixFQUFTcWpELEVBQU9qa0MsSUFDaEJoZixFQUFRSixFQUFPSSxNQUNuQixPQUFJQSxHQUNpQixpQkFBVkEsR0FDUHlGLEVBQU83RyxLQUFLb0IsRUFBTyxXQUNkNGpELEVBQVlydkMsUUFBUXZVLEVBQU04akQsU0FBU3B3QyxNQUFLLFNBQVMxVCxHQUN0RDZqRCxFQUFPLE9BQVE3akQsRUFBT3VVLEVBQVNTLE1BQzlCLFNBQVMwakMsR0FDVm1MLEVBQU8sUUFBU25MLEVBQUtua0MsRUFBU1MsTUFJM0I0dUMsRUFBWXJ2QyxRQUFRdlUsR0FBTzBULE1BQUssU0FBU3F3QyxHQUk5Q25rRCxFQUFPSSxNQUFRK2pELEVBQ2Z4dkMsRUFBUTNVLE1BQ1AsU0FBU21FLEdBR1YsT0FBTzgvQyxFQUFPLFFBQVM5L0MsRUFBT3dRLEVBQVNTLE1BdkJ6Q0EsRUFBT2l1QyxFQUFPamtDLEtBNEJsQixJQUFJZ2xDLEVBZ0NKM2tELEtBQUsraUQsUUE5QkwsU0FBaUJqbEQsRUFBUTZoQixHQUN2QixTQUFTaWxDLElBQ1AsT0FBTyxJQUFJTCxHQUFZLFNBQVNydkMsRUFBU1MsR0FDdkM2dUMsRUFBTzFtRCxFQUFRNmhCLEVBQUt6SyxFQUFTUyxNQUlqQyxPQUFPZ3ZDLEVBYUxBLEVBQWtCQSxFQUFnQnR3QyxLQUNoQ3V3QyxFQUdBQSxHQUNFQSxLQWtIVixTQUFTdEIsRUFBb0JGLEVBQVVQLEdBQ3JDLElBQUkva0QsRUFBU3NsRCxFQUFTM2lELFNBQVNvaUQsRUFBUS9rRCxRQUN2QyxHQUFJQSxJQUFXdUMsRUFBVyxDQUt4QixHQUZBd2lELEVBQVFPLFNBQVcsS0FFSSxVQUFuQlAsRUFBUS9rRCxPQUFvQixDQUU5QixHQUFJc2xELEVBQVMzaUQsU0FBaUIsU0FHNUJvaUQsRUFBUS9rRCxPQUFTLFNBQ2pCK2tELEVBQVFsakMsSUFBTXRmLEVBQ2RpakQsRUFBb0JGLEVBQVVQLEdBRVAsVUFBbkJBLEVBQVEva0QsUUFHVixPQUFPeWxELEVBSVhWLEVBQVEva0QsT0FBUyxRQUNqQitrRCxFQUFRbGpDLElBQU0sSUFBSTFnQixVQUNoQixrREFHSixPQUFPc2tELEVBR1QsSUFBSUssRUFBU0MsRUFBUy9sRCxFQUFRc2xELEVBQVMzaUQsU0FBVW9pRCxFQUFRbGpDLEtBRXpELEdBQW9CLFVBQWhCaWtDLEVBQU9ueUMsS0FJVCxPQUhBb3hDLEVBQVEva0QsT0FBUyxRQUNqQitrRCxFQUFRbGpDLElBQU1pa0MsRUFBT2prQyxJQUNyQmtqQyxFQUFRTyxTQUFXLEtBQ1pHLEVBR1QsSUFBSXNCLEVBQU9qQixFQUFPamtDLElBRWxCLE9BQU1rbEMsRUFPRkEsRUFBSy9qRCxNQUdQK2hELEVBQVFPLEVBQVMwQixZQUFjRCxFQUFLbGtELE1BR3BDa2lELEVBQVFuaUQsS0FBTzBpRCxFQUFTMkIsUUFRRCxXQUFuQmxDLEVBQVEva0QsU0FDVitrRCxFQUFRL2tELE9BQVMsT0FDakIra0QsRUFBUWxqQyxJQUFNdGYsR0FVbEJ3aUQsRUFBUU8sU0FBVyxLQUNaRyxHQU5Fc0IsR0EzQlBoQyxFQUFRL2tELE9BQVMsUUFDakIra0QsRUFBUWxqQyxJQUFNLElBQUkxZ0IsVUFBVSxvQ0FDNUI0akQsRUFBUU8sU0FBVyxLQUNaRyxHQW9EWCxTQUFTeUIsRUFBYUMsR0FDcEIsSUFBSW5yQyxFQUFRLENBQUVvckMsT0FBUUQsRUFBSyxJQUV2QixLQUFLQSxJQUNQbnJDLEVBQU1xckMsU0FBV0YsRUFBSyxJQUdwQixLQUFLQSxJQUNQbnJDLEVBQU1zckMsV0FBYUgsRUFBSyxHQUN4Qm5yQyxFQUFNdXJDLFNBQVdKLEVBQUssSUFHeEJqbEQsS0FBS3NsRCxXQUFXM2pELEtBQUttWSxHQUd2QixTQUFTeXJDLEVBQWN6ckMsR0FDckIsSUFBSThwQyxFQUFTOXBDLEVBQU0wckMsWUFBYyxHQUNqQzVCLEVBQU9ueUMsS0FBTyxnQkFDUG15QyxFQUFPamtDLElBQ2Q3RixFQUFNMHJDLFdBQWE1QixFQUdyQixTQUFTZCxFQUFRTCxHQUlmemlELEtBQUtzbEQsV0FBYSxDQUFDLENBQUVKLE9BQVEsU0FDN0J6QyxFQUFZOS9DLFFBQVFxaUQsRUFBY2hsRCxNQUNsQ0EsS0FBS3lsRCxPQUFNLEdBOEJiLFNBQVM3N0MsRUFBT2tKLEdBQ2QsR0FBSUEsRUFBVSxDQUNaLElBQUlsUyxFQUFpQmtTLEVBQVNvdkMsR0FDOUIsR0FBSXRoRCxFQUNGLE9BQU9BLEVBQWVyQixLQUFLdVQsR0FHN0IsR0FBNkIsbUJBQWxCQSxFQUFTcFMsS0FDbEIsT0FBT29TLEVBR1QsSUFBSzR5QyxNQUFNNXlDLEVBQVMzUyxRQUFTLENBQzNCLElBQUl3RyxHQUFLLEVBQUdqRyxFQUFPLFNBQVNBLElBQzFCLE9BQVNpRyxFQUFJbU0sRUFBUzNTLFFBQ3BCLEdBQUlpRyxFQUFPN0csS0FBS3VULEVBQVVuTSxHQUd4QixPQUZBakcsRUFBS0MsTUFBUW1TLEVBQVNuTSxHQUN0QmpHLEVBQUtJLE1BQU8sRUFDTEosRUFPWCxPQUhBQSxFQUFLQyxNQUFRTixFQUNiSyxFQUFLSSxNQUFPLEVBRUxKLEdBR1QsT0FBT0EsRUFBS0EsS0FBT0EsR0FLdkIsTUFBTyxDQUFFQSxLQUFNeWlELEdBSWpCLFNBQVNBLElBQ1AsTUFBTyxDQUFFeGlELE1BQU9OLEVBQVdTLE1BQU0sR0ErTW5DLE9BN21CQWtqRCxFQUFrQi9sRCxVQUFZZ21ELEVBQzlCMTBCLEVBQU82MEIsRUFBSSxjQUFlSCxHQUMxQjEwQixFQUFPMDBCLEVBQTRCLGNBQWVELEdBQ2xEQSxFQUFrQjJCLFlBQWNwMkIsRUFDOUIwMEIsRUFDQTVCLEVBQ0EscUJBYUZybEQsRUFBUTRvRCxvQkFBc0IsU0FBU0MsR0FDckMsSUFBSUMsRUFBeUIsbUJBQVhELEdBQXlCQSxFQUFPcGlELFlBQ2xELFFBQU9xaUQsSUFDSEEsSUFBUzlCLEdBRzJCLHVCQUFuQzhCLEVBQUtILGFBQWVHLEVBQUtuOEMsUUFJaEMzTSxFQUFRK29ELEtBQU8sU0FBU0YsR0FRdEIsT0FQSXhuRCxPQUFPNEosZUFDVDVKLE9BQU80SixlQUFlNDlDLEVBQVE1QixJQUU5QjRCLEVBQU83c0MsVUFBWWlyQyxFQUNuQjEwQixFQUFPczJCLEVBQVF4RCxFQUFtQixzQkFFcEN3RCxFQUFPNW5ELFVBQVlJLE9BQU9vRSxPQUFPMmhELEdBQzFCeUIsR0FPVDdvRCxFQUFRZ3BELE1BQVEsU0FBU3JtQyxHQUN2QixNQUFPLENBQUU4a0MsUUFBUzlrQyxJQXNFcEIwa0MsRUFBc0JDLEVBQWNybUQsV0FDcENzeEIsRUFBTyswQixFQUFjcm1ELFVBQVdra0QsR0FBcUIsV0FDbkQsT0FBT25pRCxRQUVUaEQsRUFBUXNuRCxjQUFnQkEsRUFLeEJ0bkQsRUFBUWlwRCxNQUFRLFNBQVMxRCxFQUFTQyxFQUFTamdELEVBQU1rZ0QsRUFBYThCLFFBQ3hDLElBQWhCQSxJQUF3QkEsRUFBYzdsRCxTQUUxQyxJQUFJd25ELEVBQU8sSUFBSTVCLEVBQ2I5MUMsRUFBSyt6QyxFQUFTQyxFQUFTamdELEVBQU1rZ0QsR0FDN0I4QixHQUdGLE9BQU92bkQsRUFBUTRvRCxvQkFBb0JwRCxHQUMvQjBELEVBQ0FBLEVBQUt4bEQsT0FBTzJULE1BQUssU0FBUzlULEdBQ3hCLE9BQU9BLEVBQU9PLEtBQU9QLEVBQU9JLE1BQVF1bEQsRUFBS3hsRCxXQXVLakQyakQsRUFBc0JELEdBRXRCNzBCLEVBQU82MEIsRUFBSS9CLEVBQW1CLGFBTzlCOXlCLEVBQU82MEIsRUFBSWxDLEdBQWdCLFdBQ3pCLE9BQU9saUQsUUFHVHV2QixFQUFPNjBCLEVBQUksWUFBWSxXQUNyQixNQUFPLHdCQWtDVHBuRCxFQUFRUSxLQUFPLFNBQVMwSCxHQUN0QixJQUFJMUgsRUFBTyxHQUNYLElBQUssSUFBSWUsS0FBTzJHLEVBQ2QxSCxFQUFLbUUsS0FBS3BELEdBTVosT0FKQWYsRUFBS3d0QixVQUlFLFNBQVN0cUIsSUFDZCxLQUFPbEQsRUFBSzJDLFFBQVEsQ0FDbEIsSUFBSTVCLEVBQU1mLEVBQUtndkMsTUFDZixHQUFJanVDLEtBQU8yRyxFQUdULE9BRkF4RSxFQUFLQyxNQUFRcEMsRUFDYm1DLEVBQUtJLE1BQU8sRUFDTEosRUFRWCxPQURBQSxFQUFLSSxNQUFPLEVBQ0xKLElBc0NYMUQsRUFBUTRNLE9BQVNBLEVBTWpCazVDLEVBQVE3a0QsVUFBWSxDQUNsQndGLFlBQWFxL0MsRUFFYjJDLE1BQU8sU0FBU1UsR0FjZCxHQWJBbm1ELEtBQUsydkIsS0FBTyxFQUNaM3ZCLEtBQUtVLEtBQU8sRUFHWlYsS0FBS3dqRCxLQUFPeGpELEtBQUt5akQsTUFBUXBqRCxFQUN6QkwsS0FBS2MsTUFBTyxFQUNaZCxLQUFLb2pELFNBQVcsS0FFaEJwakQsS0FBS2xDLE9BQVMsT0FDZGtDLEtBQUsyZixJQUFNdGYsRUFFWEwsS0FBS3NsRCxXQUFXM2lELFFBQVE0aUQsSUFFbkJZLEVBQ0gsSUFBSyxJQUFJeDhDLEtBQVEzSixLQUVRLE1BQW5CMkosRUFBS29SLE9BQU8sSUFDWjNVLEVBQU83RyxLQUFLUyxLQUFNMkosS0FDakIrN0MsT0FBTy83QyxFQUFLbE0sTUFBTSxNQUNyQnVDLEtBQUsySixHQUFRdEosSUFNckIrUyxLQUFNLFdBQ0pwVCxLQUFLYyxNQUFPLEVBRVosSUFDSXNsRCxFQURZcG1ELEtBQUtzbEQsV0FBVyxHQUNMRSxXQUMzQixHQUF3QixVQUFwQlksRUFBVzMwQyxLQUNiLE1BQU0yMEMsRUFBV3ptQyxJQUduQixPQUFPM2YsS0FBS3FtRCxNQUdkM0Msa0JBQW1CLFNBQVM0QyxHQUMxQixHQUFJdG1ELEtBQUtjLEtBQ1AsTUFBTXdsRCxFQUdSLElBQUl6RCxFQUFVN2lELEtBQ2QsU0FBU3VtRCxFQUFPQyxFQUFLQyxHQVluQixPQVhBN0MsRUFBT255QyxLQUFPLFFBQ2RteUMsRUFBT2prQyxJQUFNMm1DLEVBQ2J6RCxFQUFRbmlELEtBQU84bEQsRUFFWEMsSUFHRjVELEVBQVEva0QsT0FBUyxPQUNqQitrRCxFQUFRbGpDLElBQU10ZixLQUdOb21ELEVBR1osSUFBSyxJQUFJOS9DLEVBQUkzRyxLQUFLc2xELFdBQVdubEQsT0FBUyxFQUFHd0csR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUltVCxFQUFROVosS0FBS3NsRCxXQUFXMytDLEdBQ3hCaTlDLEVBQVM5cEMsRUFBTTByQyxXQUVuQixHQUFxQixTQUFqQjFyQyxFQUFNb3JDLE9BSVIsT0FBT3FCLEVBQU8sT0FHaEIsR0FBSXpzQyxFQUFNb3JDLFFBQVVsbEQsS0FBSzJ2QixLQUFNLENBQzdCLElBQUkrMkIsRUFBV3RnRCxFQUFPN0csS0FBS3VhLEVBQU8sWUFDOUI2c0MsRUFBYXZnRCxFQUFPN0csS0FBS3VhLEVBQU8sY0FFcEMsR0FBSTRzQyxHQUFZQyxFQUFZLENBQzFCLEdBQUkzbUQsS0FBSzJ2QixLQUFPN1YsRUFBTXFyQyxTQUNwQixPQUFPb0IsRUFBT3pzQyxFQUFNcXJDLFVBQVUsR0FDekIsR0FBSW5sRCxLQUFLMnZCLEtBQU83VixFQUFNc3JDLFdBQzNCLE9BQU9tQixFQUFPenNDLEVBQU1zckMsaUJBR2pCLEdBQUlzQixHQUNULEdBQUkxbUQsS0FBSzJ2QixLQUFPN1YsRUFBTXFyQyxTQUNwQixPQUFPb0IsRUFBT3pzQyxFQUFNcXJDLFVBQVUsT0FHM0IsS0FBSXdCLEVBTVQsTUFBTSxJQUFJN2dELE1BQU0sMENBTGhCLEdBQUk5RixLQUFLMnZCLEtBQU83VixFQUFNc3JDLFdBQ3BCLE9BQU9tQixFQUFPenNDLEVBQU1zckMsZ0JBVTlCekIsT0FBUSxTQUFTbHlDLEVBQU1rTyxHQUNyQixJQUFLLElBQUloWixFQUFJM0csS0FBS3NsRCxXQUFXbmxELE9BQVMsRUFBR3dHLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJbVQsRUFBUTlaLEtBQUtzbEQsV0FBVzMrQyxHQUM1QixHQUFJbVQsRUFBTW9yQyxRQUFVbGxELEtBQUsydkIsTUFDckJ2cEIsRUFBTzdHLEtBQUt1YSxFQUFPLGVBQ25COVosS0FBSzJ2QixLQUFPN1YsRUFBTXNyQyxXQUFZLENBQ2hDLElBQUl3QixFQUFlOXNDLEVBQ25CLE9BSUE4c0MsSUFDVSxVQUFUbjFDLEdBQ1MsYUFBVEEsSUFDRG0xQyxFQUFhMUIsUUFBVXZsQyxHQUN2QkEsR0FBT2luQyxFQUFheEIsYUFHdEJ3QixFQUFlLE1BR2pCLElBQUloRCxFQUFTZ0QsRUFBZUEsRUFBYXBCLFdBQWEsR0FJdEQsT0FIQTVCLEVBQU9ueUMsS0FBT0EsRUFDZG15QyxFQUFPamtDLElBQU1BLEVBRVRpbkMsR0FDRjVtRCxLQUFLbEMsT0FBUyxPQUNka0MsS0FBS1UsS0FBT2ttRCxFQUFheEIsV0FDbEI3QixHQUdGdmpELEtBQUs2NkMsU0FBUytJLElBR3ZCL0ksU0FBVSxTQUFTK0ksRUFBUXlCLEdBQ3pCLEdBQW9CLFVBQWhCekIsRUFBT255QyxLQUNULE1BQU1teUMsRUFBT2prQyxJQWNmLE1BWG9CLFVBQWhCaWtDLEVBQU9ueUMsTUFDUyxhQUFoQm15QyxFQUFPbnlDLEtBQ1R6UixLQUFLVSxLQUFPa2pELEVBQU9qa0MsSUFDTSxXQUFoQmlrQyxFQUFPbnlDLE1BQ2hCelIsS0FBS3FtRCxLQUFPcm1ELEtBQUsyZixJQUFNaWtDLEVBQU9qa0MsSUFDOUIzZixLQUFLbEMsT0FBUyxTQUNka0MsS0FBS1UsS0FBTyxPQUNhLFdBQWhCa2pELEVBQU9ueUMsTUFBcUI0ekMsSUFDckNybEQsS0FBS1UsS0FBTzJrRCxHQUdQOUIsR0FHVHNELE9BQVEsU0FBU3pCLEdBQ2YsSUFBSyxJQUFJeitDLEVBQUkzRyxLQUFLc2xELFdBQVdubEQsT0FBUyxFQUFHd0csR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUltVCxFQUFROVosS0FBS3NsRCxXQUFXMytDLEdBQzVCLEdBQUltVCxFQUFNc3JDLGFBQWVBLEVBR3ZCLE9BRkFwbEQsS0FBSzY2QyxTQUFTL2dDLEVBQU0wckMsV0FBWTFyQyxFQUFNdXJDLFVBQ3RDRSxFQUFjenJDLEdBQ1B5cEMsSUFLYixNQUFTLFNBQVMyQixHQUNoQixJQUFLLElBQUl2K0MsRUFBSTNHLEtBQUtzbEQsV0FBV25sRCxPQUFTLEVBQUd3RyxHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSW1ULEVBQVE5WixLQUFLc2xELFdBQVczK0MsR0FDNUIsR0FBSW1ULEVBQU1vckMsU0FBV0EsRUFBUSxDQUMzQixJQUFJdEIsRUFBUzlwQyxFQUFNMHJDLFdBQ25CLEdBQW9CLFVBQWhCNUIsRUFBT255QyxLQUFrQixDQUMzQixJQUFJcTFDLEVBQVNsRCxFQUFPamtDLElBQ3BCNGxDLEVBQWN6ckMsR0FFaEIsT0FBT2d0QyxHQU1YLE1BQU0sSUFBSWhoRCxNQUFNLDBCQUdsQmloRCxjQUFlLFNBQVNqMEMsRUFBVWd5QyxFQUFZQyxHQWE1QyxPQVpBL2tELEtBQUtvakQsU0FBVyxDQUNkM2lELFNBQVVtSixFQUFPa0osR0FDakJneUMsV0FBWUEsRUFDWkMsUUFBU0EsR0FHUyxTQUFoQi9rRCxLQUFLbEMsU0FHUGtDLEtBQUsyZixJQUFNdGYsR0FHTmtqRCxJQVFKdm1ELEVBOXNCSyxDQXF0QmlCRCxFQUFPQyxTQUd0QyxJQUNFZ3FELG1CQUFxQmhGLEVBQ3JCLE1BQU9pRixHQVdtQixpQkFBZmozQyxXQUNUQSxXQUFXZzNDLG1CQUFxQmhGLEVBRWhDaGtELFNBQVMsSUFBSyx5QkFBZEEsQ0FBd0Nna0Qsa0NDN3VCNUMsU0FBU2tGLEVBQVFyekMsR0FBbVYsT0FBdE9xekMsRUFBckQsbUJBQVh2b0QsUUFBb0QsaUJBQXBCQSxPQUFPOEIsU0FBbUMsU0FBaUJvVCxHQUFPLGNBQWNBLEdBQTJCLFNBQWlCQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYbFYsUUFBeUJrVixFQUFJcFEsY0FBZ0I5RSxRQUFVa1YsSUFBUWxWLE9BQU9WLFVBQVksZ0JBQWtCNFYsR0FBaUJxekMsRUFBUXJ6QyxHQUVuWHhWLE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLGFBQWtCLEVBRWxCLElBQUltcUQsRUFBVUMsR0FBdUIsRUFBUSxPQUV6Q0MsRUFBV0QsR0FBdUIsRUFBUSxRQUUxQ0UsRUFBU0YsR0FBdUIsRUFBUSxRQUV4Q0csRUFBYUgsR0FBdUIsRUFBUSxNQUU1Q0ksRUFBVUosR0FBdUIsRUFBUSxPQUV6Q0ssRUFBWUwsR0FBdUIsRUFBUSxRQUUzQ00sRUFBV04sR0FBdUIsRUFBUSxRQUUxQ08sRUFBV1AsR0FBdUIsRUFBUSxRQUUxQ1EsRUFBU1IsR0FBdUIsRUFBUSxPQUV4Q1MsRUFBZ0JULEdBQXVCLEVBQVEsUUFFL0NVLEVBQVFWLEdBQXVCLEVBQVEsUUFFdkNXLEVBQWFYLEdBQXVCLEVBQVEsUUFFNUNZLEVBQVVaLEdBQXVCLEVBQVEsUUFFekNhLEVBQVViLEdBQXVCLEVBQVEsUUFFekNjLEVBQWFkLEdBQXVCLEVBQVEsUUFFNUNlLEVBQVlmLEdBQXVCLEVBQVEsUUFFM0NnQixFQUFXQyxHQUF3QixFQUFRLFFBRTNDQyxFQUFrQkQsR0FBd0IsRUFBUSxRQUVsREUsRUFBYW5CLEdBQXVCLEVBQVEsUUFFNUNvQixFQUFvQnBCLEdBQXVCLEVBQVEsUUFFbkRxQixFQUFVckIsR0FBdUIsRUFBUSxRQUV6Q3NCLEVBQWV0QixHQUF1QixFQUFRLFFBRTlDdUIsRUFBZXZCLEdBQXVCLEVBQVEsUUFFOUN3QixFQUFVeEIsR0FBdUIsRUFBUSxRQUV6Q3lCLEVBQVd6QixHQUF1QixFQUFRLFFBRTFDMEIsRUFBZTFCLEdBQXVCLEVBQVEsUUFFOUMyQixFQUFlM0IsR0FBdUIsRUFBUSxRQUU5QzRCLEVBQW1CNUIsR0FBdUIsRUFBUSxRQUVsRDZCLEVBQWU3QixHQUF1QixFQUFRLFFBRTlDOEIsRUFBWTlCLEdBQXVCLEVBQVEsUUFFM0MrQixFQUFtQi9CLEdBQXVCLEVBQVEsUUFFbERnQyxFQUFTaEMsR0FBdUIsRUFBUSxRQUV4Q2lDLEVBQVdoQixHQUF3QixFQUFRLFFBRTNDaUIsRUFBYWxDLEdBQXVCLEVBQVEsUUFFNUNtQyxFQUFpQm5DLEdBQXVCLEVBQVEsUUFFaERvQyxFQUFXcEMsR0FBdUIsRUFBUSxRQUUxQ3FDLEVBQWlCckMsR0FBdUIsRUFBUSxRQUVoRHNDLEVBQWN0QyxHQUF1QixFQUFRLFFBRTdDdUMsRUFBY3ZDLEdBQXVCLEVBQVEsT0FFN0N3QyxFQUFTeEMsR0FBdUIsRUFBUSxRQUV4Q3lDLEVBQVV6QyxHQUF1QixFQUFRLFFBRXpDMEMsRUFBVXpCLEdBQXdCLEVBQVEsUUFFMUMwQixFQUFTM0MsR0FBdUIsRUFBUSxRQUV4QzRDLEVBQVE1QyxHQUF1QixFQUFRLFFBRXZDNkMsRUFBVTdDLEdBQXVCLEVBQVEsUUFFekM4QyxFQUFTOUMsR0FBdUIsRUFBUSxRQUV4QytDLEVBQVUvQyxHQUF1QixFQUFRLFFBRXpDZ0QsRUFBV2hELEdBQXVCLEVBQVEsUUFFMUNpRCxFQUFZakQsR0FBdUIsRUFBUSxRQUUzQ2tELEVBQWdCbEQsR0FBdUIsRUFBUSxRQUUvQ21ELEdBQVVuRCxHQUF1QixFQUFRLFFBRXpDb0QsR0FBYXBELEdBQXVCLEVBQVEsUUFFNUNxRCxHQUFXckQsR0FBdUIsRUFBUSxRQUUxQ3NELEdBQVl0RCxHQUF1QixFQUFRLFFBRTNDdUQsR0FBUXZELEdBQXVCLEVBQVEsUUFFdkN3RCxHQUFnQnhELEdBQXVCLEVBQVEsTUFFL0N5RCxHQUFrQnpELEdBQXVCLEVBQVEsUUFFakQwRCxHQUFTMUQsR0FBdUIsRUFBUSxRQUV4QzJELEdBQVUzRCxHQUF1QixFQUFRLFFBRXpDNEQsR0FBVTVELEdBQXVCLEVBQVEsUUFFekM2RCxHQUFVN0QsR0FBdUIsRUFBUSxRQUV6QzhELEdBQVc5RCxHQUF1QixFQUFRLFFBRTFDK0QsR0FBaUI5QyxHQUF3QixFQUFRLFFBRWpEK0MsR0FBcUJoRSxHQUF1QixFQUFRLFFBRXBEaUUsR0FBY2pFLEdBQXVCLEVBQVEsUUFFN0NrRSxHQUFnQmxFLEdBQXVCLEVBQVEsUUFFL0NtRSxHQUFTbkUsR0FBdUIsRUFBUSxRQUV4Q29FLEdBQVNwRSxHQUF1QixFQUFRLFFBRXhDcUUsR0FBbUJyRSxHQUF1QixFQUFRLFFBRWxEc0UsR0FBb0J0RSxHQUF1QixFQUFRLFFBRW5EdUUsR0FBVXZFLEdBQXVCLEVBQVEsUUFFekN3RSxHQUFVeEUsR0FBdUIsRUFBUSxPQUV6Q3lFLEdBQVd6RSxHQUF1QixFQUFRLFFBRTFDMEUsR0FBVzFFLEdBQXVCLEVBQVEsT0FFMUMyRSxHQUFhM0UsR0FBdUIsRUFBUSxRQUU1QzRFLEdBQWU1RSxHQUF1QixFQUFRLFFBRTlDNkUsR0FBYzdFLEdBQXVCLEVBQVEsUUFFN0M4RSxHQUFhOUUsR0FBdUIsRUFBUSxRQUU1QytFLEdBQWdCOUQsR0FBd0IsRUFBUSxRQUVoRCtELEdBQVNoRixHQUF1QixFQUFRLFFBRXhDaUYsR0FBU2pGLEdBQXVCLEVBQVEsUUFFeENrRixHQUFRbEYsR0FBdUIsRUFBUSxRQUV2Q21GLEdBQVVuRixHQUF1QixFQUFRLE9BRXpDb0YsR0FBWXBGLEdBQXVCLEVBQVEsUUFFM0NxRixHQUFZckYsR0FBdUIsRUFBUSxPQUUzQ3NGLEdBQWF0RixHQUF1QixFQUFRLFFBRTVDdUYsR0FBYXZGLEdBQXVCLEVBQVEsUUFFNUN3RixHQUFpQnhGLEdBQXVCLEVBQVEsUUFFaER5RixHQUFrQnpGLEdBQXVCLEVBQVEsT0FFakQwRixHQUFVMUYsR0FBdUIsRUFBUSxRQUV6QzJGLEdBQWtCM0YsR0FBdUIsRUFBUSxRQUVqRDRGLEdBQW9CNUYsR0FBdUIsRUFBUSxRQUVuRDZGLEdBQVM3RixHQUF1QixFQUFRLFFBRTVDLFNBQVM4RixLQUE2QixHQUF1QixtQkFBWm44QyxRQUF3QixPQUFPLEtBQU0sSUFBSW84QyxFQUFRLElBQUlwOEMsUUFBNkYsT0FBbEZtOEMsR0FBMkIsV0FBc0MsT0FBT0MsR0FBaUJBLEVBRTFNLFNBQVM5RSxHQUF3QngwQyxHQUFPLEdBQUlBLEdBQU9BLEVBQUl1NUMsV0FBYyxPQUFPdjVDLEVBQU8sR0FBWSxPQUFSQSxHQUFpQyxXQUFqQnF6QyxFQUFRcnpDLElBQW9DLG1CQUFSQSxFQUFzQixNQUFPLENBQUV3NUMsUUFBU3g1QyxHQUFTLElBQUlzNUMsRUFBUUQsS0FBNEIsR0FBSUMsR0FBU0EsRUFBTTE4QyxJQUFJb0QsR0FBUSxPQUFPczVDLEVBQU1uakQsSUFBSTZKLEdBQVEsSUFBSXk1QyxFQUFTLEdBQVFDLEVBQXdCbHZELE9BQU9DLGdCQUFrQkQsT0FBT3FJLHlCQUEwQixJQUFLLElBQUluSSxLQUFPc1YsRUFBTyxHQUFJeFYsT0FBT0osVUFBVTRRLGVBQWV0UCxLQUFLc1UsRUFBS3RWLEdBQU0sQ0FBRSxJQUFJQyxFQUFPK3VELEVBQXdCbHZELE9BQU9xSSx5QkFBeUJtTixFQUFLdFYsR0FBTyxLQUFVQyxJQUFTQSxFQUFLd0wsS0FBT3hMLEVBQUtnUyxLQUFRblMsT0FBT0MsZUFBZWd2RCxFQUFRL3VELEVBQUtDLEdBQWdCOHVELEVBQU8vdUQsR0FBT3NWLEVBQUl0VixHQUF5RSxPQUE3RCt1RCxFQUFPRCxRQUFVeDVDLEVBQVNzNUMsR0FBU0EsRUFBTTM4QyxJQUFJcUQsRUFBS3k1QyxHQUFrQkEsRUFFaHVCLFNBQVNsRyxHQUF1QnZ6QyxHQUFPLE9BQU9BLEdBQU9BLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUV2RixJQXdHSTI1QyxHQXZHWSxDQUNkOWdELFFBRlksU0FHWitnRCxPQUFRdEcsRUFBUWtHLFFBQ2hCSyxRQUFTckcsRUFBU2dHLFFBQ2xCTSxNQUFPckcsRUFBTytGLFFBQ2RPLFVBQVdyRyxFQUFXOEYsUUFDdEJRLE9BQVFyRyxFQUFRNkYsUUFDaEJTLFNBQVVyRyxFQUFVNEYsUUFDcEI3VyxRQUFTa1IsRUFBUzJGLFFBQ2xCVSxRQUFTcEcsRUFBUzBGLFFBQ2xCVyxNQUFPcEcsRUFBT3lGLFFBQ2RZLGFBQWNwRyxFQUFjd0YsUUFDNUJhLEtBQU1wRyxFQUFNdUYsUUFDWmMsVUFBV3BHLEVBQVdzRixRQUN0QmUsT0FBUXBHLEVBQVFxRixRQUNoQmdCLFVBQVduRyxFQUFXbUYsUUFDdEJpQixPQUFReEUsRUFBUXVELFFBQ2hCa0IsTUFBT3hFLEVBQU9zRCxRQUNkbUIsUUFBU3BHLEVBQVNpRixRQUNsQm9CLGVBQWdCckcsRUFBU3NHLFFBQ3pCQyxlQUFnQnJHLEVBQWdCK0UsUUFDaEN1QixzQkFBdUJ0RyxFQUFnQm9HLFFBQ3ZDRyxVQUFXdEcsRUFBVzhFLFFBQ3RCeUIsaUJBQWtCdEcsRUFBa0I2RSxRQUNwQzBCLE9BQVF0RyxFQUFRNEUsUUFDaEIyQixZQUFhdEcsRUFBYTJFLFFBQzFCNEIsWUFBYXRHLEVBQWEwRSxRQUMxQjZCLFFBQVNyRyxFQUFTd0UsUUFDbEI4QixZQUFhckcsRUFBYXVFLFFBQzFCK0IsWUFBYXJHLEVBQWFzRSxRQUMxQmdDLGdCQUFpQnJHLEVBQWlCcUUsUUFDbENpQyxZQUFhckcsRUFBYW9FLFFBQzFCa0MsU0FBVXJHLEVBQVVtRSxRQUNwQm1DLGdCQUFpQnJHLEVBQWlCa0UsUUFDbENvQyxNQUFPckcsRUFBT2lFLFFBQ2RxQyxPQUFROUcsRUFBUXlFLFFBQ2hCc0MsUUFBU3RHLEVBQVNnRSxRQUNsQnVDLGVBQWdCdkcsRUFBU3FGLFFBQ3pCbUIsVUFBV3ZHLEVBQVcrRCxRQUN0QnlDLGNBQWV2RyxFQUFlOEQsUUFDOUIwQyxRQUFTdkcsRUFBUzZELFFBQ2xCMkMsY0FBZXZHLEVBQWU0RCxRQUM5QjRDLFdBQVl2RyxFQUFZMkQsUUFDeEI2QyxXQUFZdkcsRUFBWTBELFFBQ3hCOEMsTUFBT3ZHLEVBQU95RCxRQUNkK0MsT0FBUXZHLEVBQVF3RCxRQUNoQmdELE1BQU9yRyxFQUFNcUQsUUFDYmlELE9BQVFyRyxFQUFRb0QsUUFDaEJrRCxNQUFPckcsRUFBT21ELFFBQ2RtRCxPQUFRckcsRUFBUWtELFFBQ2hCb0QsUUFBU3JHLEVBQVNpRCxRQUNsQnFELFNBQVVyRyxFQUFVZ0QsUUFDcEJzRCxTQUFVeEksRUFBVWtGLFFBQ3BCdUQsYUFBY3RHLEVBQWMrQyxRQUM1QndELE9BQVF0RyxHQUFROEMsUUFDaEJ5RCxVQUFXdEcsR0FBVzZDLFFBQ3RCMEQsUUFBU3RHLEdBQVM0QyxRQUNsQjJELFNBQVV0RyxHQUFVMkMsUUFDcEI0RCxLQUFNdEcsR0FBTTBDLFFBQ1o2RCxhQUFjdEcsR0FBY3lDLFFBQzVCOEQsZUFBZ0J0RyxHQUFnQndDLFFBQ2hDK0QsTUFBT3RHLEdBQU91QyxRQUNkZ0UsT0FBUXRHLEdBQVFzQyxRQUNoQmlFLE9BQVF0RyxHQUFRcUMsUUFDaEJrRSxPQUFRdEcsR0FBUW9DLFFBQ2hCbUUsY0FBZXJHLEdBQWVrQyxRQUM5Qm9FLHFCQUFzQnRHLEdBQWV1RCxRQUNyQ2dELGFBQWN2RixHQUFja0IsUUFDNUJzRSxvQkFBcUJ4RixHQUFjdUMsUUFDbkNrRCxrQkFBbUJ4RyxHQUFtQmlDLFFBQ3RDd0UsV0FBWXhHLEdBQVlnQyxRQUN4QnlFLGFBQWN4RyxHQUFjK0IsUUFDNUIwRSxVQUFXeEcsR0FBTzhCLFFBQ2xCMkUsVUFBV3hHLEdBQU82QixRQUNsQjRFLGlCQUFrQnhHLEdBQWlCNEIsUUFDbkM2RSxpQkFBa0J4RyxHQUFrQjJCLFFBQ3BDOEUsVUFBV3hHLEdBQVEwQixRQUNuQitFLFNBQVV4RyxHQUFReUIsUUFDbEJnRixTQUFVeEcsR0FBU3dCLFFBQ25CaUYsU0FBVXhHLEdBQVN1QixRQUNuQmtGLFVBQVd4RyxHQUFXc0IsUUFDdEJtRixZQUFheEcsR0FBYXFCLFFBQzFCb0YsV0FBWXhHLEdBQVlvQixRQUN4QnFGLFVBQVd4RyxHQUFXbUIsUUFDdEJ4eUIsTUFBT3V4QixHQUFPaUIsUUFDZHZ5QixNQUFPdXhCLEdBQU9nQixRQUNkdHlCLEtBQU11eEIsR0FBTWUsUUFDWnNGLE9BQVFwRyxHQUFRYyxRQUNoQnVGLFNBQVVwRyxHQUFVYSxRQUNwQndGLFNBQVVwRyxHQUFVWSxRQUNwQnlGLFVBQVdwRyxHQUFXVyxRQUN0QjBGLFVBQVdwRyxHQUFXVSxRQUN0QjJGLGNBQWVwRyxHQUFlUyxRQUM5QjRGLGVBQWdCcEcsR0FBZ0JRLFFBQ2hDbG9ELFNBQ0ErdEQsT0FBUXBHLEdBQVFPLFFBQ2hCOEYsaUJBQWtCbkcsR0FBa0JLLFFBQ3BDK0YsUUFBU2xJLEdBQVNtQyxRQUNsQmdHLE9BQVFwTCxFQUFRb0YsUUFDaEJpRyxlQUFnQnZHLEdBQWdCTSxRQUNoQ2tHLE1BQU90RyxHQUFPSSxRQUNkbUcsWUFBYTFKLEVBQVE0RSxTQUd2QjF4RCxFQUFBLFFBQWtCd3dELEdBQ2xCendELEVBQU9DLFFBQVVBLEVBQVFxd0QsUUFDekJ0d0QsRUFBT0MsUUFBUCxRQUF5QkEsRUFBUXF3RCxvQ0NsVGpDaHZELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFReTJELGFBQWV6MkQsRUFBUTAyRCxXQUFhMTJELEVBQVEyMkQsYUFBZTMyRCxFQUFRNDJELGNBQWdCNTJELEVBQVE2MkQsZUFBaUI3MkQsRUFBUTgyRCxRQUFVOTJELEVBQVErMkQsYUFBZS8yRCxFQUFRZzNELFdBQVEsRUFDN0ssSUFBSUEsRUFBUSxDQUNWLFFBQVMsWUFDVCxRQUFTLHVCQUNULFFBQVMsWUFDVCxRQUFTLDJCQUNULFFBQVMsZUFDVCxRQUFTLGdCQUNULFFBQVMsWUFDVCxRQUFTLG1CQUNULFFBQVMseUNBQ1QsUUFBUyxlQUNULFFBQVMsNEJBQ1QsUUFBUyxvQkFDVCxRQUFTLGVBQ1QsUUFBUyxvQkFDVCxRQUFTLGVBQ1QsUUFBUyxxQkFDVCxRQUFTLHFCQUNULFFBQVMsNkJBQ1QsUUFBUyxhQUNULFFBQVMsaUJBQ1QsUUFBUyw2QkFDVCxjQUFlLGlCQUNmLFFBQVMsa0JBQ1QsUUFBUyxlQUNULFFBQVMsY0FDVCxRQUFTLG1CQUNULFFBQVMsb0JBQ1QsUUFBUywrRUFDVCxRQUFTLHVEQUNUQyxHQUFJLHFEQUNKQyxHQUFJLFdBQ0pDLEdBQUksaURBQ0osUUFBUyx1Q0FFWG4zRCxFQUFRZzNELE1BQVFBLEVBQ2hCLElBQUlELEVBQWUsQ0FDakIsUUFBUyxlQUNULFFBQVMsMEJBQ1QsUUFBUyxlQUNULFFBQVMsOEJBQ1QsUUFBUyxrQkFDVCxRQUFTLG1CQUNULFFBQVMsZUFDVCxRQUFTLHNCQUNULFFBQVMsa0JBQ1QsUUFBUywrQkFDVCxRQUFTLHVCQUNULFFBQVMsd0JBQ1QsUUFBUyxrQkFDVCxRQUFTLHVCQUNULFFBQVMsa0JBQ1QsUUFBUyx3QkFDVCxRQUFTLGdDQUNULFFBQVMsZ0JBQ1QsUUFBUyxvQkFDVCxRQUFTLGdDQUNULGNBQWUsb0JBQ2YsUUFBUyxxQkFDVCxRQUFTLGtCQUNULFFBQVMsY0FDVCxRQUFTLHNCQUNULFFBQVMsdUJBQ1QsUUFBUyxvRUFDVCxRQUFTLGtGQUNURSxHQUFJLGtFQUNKQyxHQUFJLGNBQ0pDLEdBQUksOERBQ0osUUFBUyx1Q0FFWG4zRCxFQUFRKzJELGFBQWVBLEVBQ3ZCLElBQUlELEVBQVUsQ0FDWixRQUFTLElBQ1RHLEdBQUksS0FFTmozRCxFQUFRODJELFFBQVVBLEVBQ2xCLElBQUlELEVBQWlCLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDMUQ3MkQsRUFBUTYyRCxlQUFpQkEsRUFFekIsSUFBSyxJQUFJTyxFQUFRenRELEVBQUksRUFBR0EsRUFBSWt0RCxFQUFlMXpELE9BQVF3RyxJQUVqRHF0RCxFQURBSSxFQUFTLE1BQU03MkQsT0FBT3MyRCxFQUFlbHRELEtBQ3JCcXRELEVBQU0sU0FDdEJELEVBQWFLLEdBQVVMLEVBQWEsU0FDcENELEVBQVFNLEdBQVVOLEVBQVEsU0FJNUIsSUFBSUYsRUFBZ0IsQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ3JINTJELEVBQVE0MkQsY0FBZ0JBLEVBRXhCLElBQUssSUFBSVMsRUFBU0MsRUFBSyxFQUFHQSxFQUFLVixFQUFjenpELE9BQVFtMEQsSUFFbkROLEVBREFLLEVBQVUsTUFBTTkyRCxPQUFPcTJELEVBQWNVLEtBQ3BCTixFQUFNQyxHQUN2QkYsRUFBYU0sR0FBV04sRUFBYUUsR0FDckNILEVBQVFPLEdBQVdQLEVBQVFHLEdBRzdCLElBQUlOLEVBQWUsQ0FBQyxLQUFNLE1BQzFCMzJELEVBQVEyMkQsYUFBZUEsRUFFdkIsSUFBSyxJQUFJWSxFQUFVQyxFQUFNLEVBQUdBLEVBQU1iLEVBQWF4ekQsT0FBUXEwRCxJQUVyRFQsRUFEQVEsRUFBVyxNQUFNaDNELE9BQU9vMkQsRUFBYWEsS0FDWlQsRUFBYUksR0FDdENMLEVBQVFTLEdBQVlULEVBQVFHLEdBSTlCLElBQUlQLEVBQWEsQ0FBQyxRQUFTLFFBQVMsU0FDcEMxMkQsRUFBUTAyRCxXQUFhQSxFQUNyQixJQUFJRCxFQUFlLENBQUMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsY0FBZSxRQUFTLFFBQVMsUUFBUyxRQUFTLFNBQ3BRejJELEVBQVF5MkQsYUFBZUEsRUFFdkIsSUFBSyxJQUFJZ0IsRUFBTSxFQUFHQSxFQUFNZixFQUFXdnpELE9BQVFzMEQsSUFDekNYLEVBQVFKLEVBQVdlLElBQVFYLEVBQVEsU0FHckMsSUFBSyxJQUFJWSxFQUFNLEVBQUdBLEVBQU1qQixFQUFhdHpELE9BQVF1MEQsSUFDM0NaLEVBQVFMLEVBQWFpQixJQUFRLElBRy9CVixFQUFNLFNBQVdBLEVBQU0sU0FDdkJELEVBQWEsU0FBV0EsRUFBYSxTQUNyQ0MsRUFBTSxTQUFXQSxFQUFNLFNBQ3ZCRCxFQUFhLFNBQVdBLEVBQWEsU0FDckNELEVBQVEsU0FBV0EsRUFBUSxTQUUzQkUsRUFBTSxTQUFXQSxFQUFNLFNBQ3ZCRCxFQUFhLFNBQVdBLEVBQWEsU0FDckNELEVBQVEsU0FBV0EsRUFBUSxTQUUzQkUsRUFBTSxTQUFXQSxFQUFNRyxpQ0N0SXZCOTFELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLFFBTUEsU0FBbUJtMUIsRUFBS3dpQyxHQUV0QixPQURBLEVBQUlDLEVBQWN2SCxTQUFTbDdCLEdBQ3BCQSxFQUFJdnNCLFFBQVEsSUFBSThyQixPQUFPLElBQUluMEIsT0FBT28zRCxFQUFPLE1BQU8sS0FBTSxLQU4vRCxJQUVnQzlnRCxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBT3ZGOVcsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ2ZqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQWVBLFNBQWtCbTFCLEVBQUtrakIsRUFBTTduQyxHQUkzQixPQUhBLEVBQUlvbkQsRUFBY3ZILFNBQVNsN0IsSUFDM0Iza0IsR0FBVSxFQUFJcW5ELEVBQU94SCxTQUFTNy9DLEVBQVNzbkQsSUFFM0IvOEIsV0FDSDVGLEVBQUkzZixjQUFjMUYsT0FBTSxFQUFJaW9ELEVBQVUxSCxTQUFTaFksR0FBTTdpQyxlQUFlclMsT0FBU3FOLEVBQVF3bkQsZUFHdkY3aUMsRUFBSXJsQixPQUFNLEVBQUlpb0QsRUFBVTFILFNBQVNoWSxJQUFPbDFDLE9BQVNxTixFQUFRd25ELGdCQXJCbEUsSUFBSUosRUFBZ0J4TixFQUF1QixFQUFRLFFBRS9DMk4sRUFBWTNOLEVBQXVCLEVBQVEsUUFFM0N5TixFQUFTek4sRUFBdUIsRUFBUSxRQUU1QyxTQUFTQSxFQUF1QnZ6QyxHQUFPLE9BQU9BLEdBQU9BLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUV2RixJQUFJaWhELEVBQXdCLENBQzFCLzhCLFlBQVksRUFDWmk5QixlQUFnQixHQWNsQmo0RCxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0QscUNDOUJqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQU1BLFNBQWdCbTFCLEVBQUs4aUMsR0FFbkIsT0FEQSxFQUFJTCxFQUFjdkgsU0FBU2w3QixHQUNwQkEsSUFBUThpQyxHQU5qQixJQUVnQ3BoRCxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBT3ZGOVcsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHFDQ2ZqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQU1BLFNBQWdCbTFCLEdBRWQsT0FEQSxFQUFJeWlDLEVBQWN2SCxTQUFTbDdCLEdBQ3BCQSxFQUFJdnNCLFFBQVEsS0FBTSxTQUFTQSxRQUFRLEtBQU0sVUFBVUEsUUFBUSxLQUFNLFVBQVVBLFFBQVEsS0FBTSxRQUFRQSxRQUFRLEtBQU0sUUFBUUEsUUFBUSxNQUFPLFVBQVVBLFFBQVEsTUFBTyxVQUFVQSxRQUFRLEtBQU0sVUFOaE0sSUFFZ0NpTyxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBT3ZGOVcsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ2ZqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVFBLFNBQWlCbTFCLEdBQ2YsSUFBSStpQyxFQUFPaDFELFVBQVVDLE9BQVMsUUFBc0JFLElBQWpCSCxVQUFVLEdBQW1CQSxVQUFVLEdBQUtkLE9BQU8sSUFBSWcvQixPQUMxRixFQUFJdzJCLEVBQWN2SCxTQUFTbDdCLEdBQzNCLElBQUk4aUMsR0FBYSxFQUFJOU4sRUFBUWtHLFNBQVM2SCxHQUNsQ0MsR0FBVyxFQUFJaE8sRUFBUWtHLFNBQVNsN0IsR0FDcEMsU0FBVWdqQyxHQUFZRixHQUFjRSxFQUFXRixJQVhqRCxJQUFJTCxFQUFnQnhOLEVBQXVCLEVBQVEsUUFFL0NELEVBQVVDLEVBQXVCLEVBQVEsT0FFN0MsU0FBU0EsRUFBdUJ2ekMsR0FBTyxPQUFPQSxHQUFPQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FVdkY5VyxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDcEJqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVNBLFNBQWlCbzRELEdBQ2YsSUFBSWhCLEVBQVNsMEQsVUFBVUMsT0FBUyxRQUFzQkUsSUFBakJILFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxRQUM3RXNOLEVBQVV0TixVQUFVQyxPQUFTLFFBQXNCRSxJQUFqQkgsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLElBQ2xGLEVBQUkwMEQsRUFBY3ZILFNBQVMrSCxHQUMzQixJQUFJampDLEVBQU1pakMsRUFDTkMsRUFBUzduRCxFQUFRNm5ELE9BRXJCLEdBQUlBLEVBQ0YsR0FBSUEsYUFBa0IzakMsT0FDcEJTLEVBQU1BLEVBQUl2c0IsUUFBUXl2RCxFQUFRLFFBQ3JCLElBQXNCLGlCQUFYQSxFQUdoQixNQUFNLElBQUl2dkQsTUFBTSxtREFGaEJxc0IsRUFBTUEsRUFBSXZzQixRQUFRLElBQUk4ckIsT0FBTyxJQUFJbjBCLE9BQU84M0QsRUFBT3p2RCxRQUFRLDRCQUE2QixRQUFTLEtBQU0sS0FBTSxJQU03RyxHQUFJd3VELEtBQVVrQixFQUFPdEIsTUFDbkIsT0FBT3NCLEVBQU90QixNQUFNSSxHQUFRbHVELEtBQUtpc0IsR0FHbkMsTUFBTSxJQUFJcnNCLE1BQU0sbUJBQW1CdkksT0FBTzYyRCxFQUFRLE9BN0JwRHAzRCxFQUFRMHhELGFBQVUsRUFFbEIsSUFJZ0M3NkMsRUFKNUIrZ0QsR0FJNEIvZ0QsRUFKVyxFQUFRLFNBSUVBLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUZuRnloRCxFQUFTLEVBQVEsT0E0QmpCNUcsRUFBVXJ3RCxPQUFPYixLQUFLODNELEVBQU90QixPQUNqQ2gzRCxFQUFRMHhELFFBQVVBLGdDQ3JDbEJyd0QsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFTQSxTQUF3Qm80RCxHQUN0QixJQUFJaEIsRUFBU2wwRCxVQUFVQyxPQUFTLFFBQXNCRSxJQUFqQkgsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLFFBQzdFc04sRUFBVXROLFVBQVVDLE9BQVMsUUFBc0JFLElBQWpCSCxVQUFVLEdBQW1CQSxVQUFVLEdBQUssSUFDbEYsRUFBSTAwRCxFQUFjdkgsU0FBUytILEdBQzNCLElBQUlqakMsRUFBTWlqQyxFQUNOQyxFQUFTN25ELEVBQVE2bkQsT0FFckIsR0FBSUEsRUFDRixHQUFJQSxhQUFrQjNqQyxPQUNwQlMsRUFBTUEsRUFBSXZzQixRQUFReXZELEVBQVEsUUFDckIsSUFBc0IsaUJBQVhBLEVBR2hCLE1BQU0sSUFBSXZ2RCxNQUFNLG1EQUZoQnFzQixFQUFNQSxFQUFJdnNCLFFBQVEsSUFBSThyQixPQUFPLElBQUluMEIsT0FBTzgzRCxFQUFPenZELFFBQVEsNEJBQTZCLFFBQVMsS0FBTSxLQUFNLElBTTdHLEdBQUl3dUQsS0FBVWtCLEVBQU92QixhQUNuQixPQUFPdUIsRUFBT3ZCLGFBQWFLLEdBQVFsdUQsS0FBS2lzQixHQUcxQyxNQUFNLElBQUlyc0IsTUFBTSxtQkFBbUJ2SSxPQUFPNjJELEVBQVEsT0E3QnBEcDNELEVBQVEweEQsYUFBVSxFQUVsQixJQUlnQzc2QyxFQUo1QitnRCxHQUk0Qi9nRCxFQUpXLEVBQVEsU0FJRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRm5GeWhELEVBQVMsRUFBUSxPQTRCakI1RyxFQUFVcndELE9BQU9iLEtBQUs4M0QsRUFBT3ZCLGNBQ2pDLzJELEVBQVEweEQsUUFBVUEsZ0NDckNsQnJ3RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVVBLFNBQWlCbTFCLEdBRWYsT0FEQSxFQUFJeWlDLEVBQWN2SCxTQUFTbDdCLEdBQ3BCb2pDLEVBQU1ydkQsS0FBS2lzQixJQVZwQixJQUVnQ3RlLEVBRjVCK2dELEdBRTRCL2dELEVBRlcsRUFBUSxTQUVFQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FHbkYwaEQsRUFBUSxpQkFRWng0RCxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDbkJqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVdBLFNBQWVtMUIsR0FJYixPQUhBLEVBQUl5aUMsRUFBY3ZILFNBQVNsN0IsS0FHdEJzNUIsRUFBaUIrSixhQUFhL2tELElBQUkwaEIsRUFBSTEwQixNQUFNLEVBQUcsR0FBRzYvQyxnQkFJaERtWSxFQUFTdnZELEtBQUtpc0IsSUFqQnZCLElBSWdDdGUsRUFKNUIrZ0QsR0FJNEIvZ0QsRUFKVyxFQUFRLFNBSUVBLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUZuRjQzQyxFQUFtQixFQUFRLE9BSzNCZ0ssRUFBVywrQ0FhZjE0RCxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0QscUNDMUJqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVFBLFNBQWtCbTFCLEdBSWhCLE9BSEEsRUFBSXlpQyxFQUFjdkgsU0FBU2w3QixLQUNqQkEsRUFBSWh5QixPQUVKLEdBQU0sSUFBS3UxRCxFQUFPeHZELEtBQUtpc0IsS0FWbkMsSUFFZ0N0ZSxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRW5GNmhELEVBQVMsZ0JBYWIzNEQsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ3ZCakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFTQSxTQUFrQm0xQixHQUdoQixPQUZBLEVBQUl5aUMsRUFBY3ZILFNBQVNsN0IsS0FFdkJ3akMsRUFBVXp2RCxLQUFLaXNCLElBVnJCLElBRWdDdGUsRUFGNUIrZ0QsR0FFNEIvZ0QsRUFGVyxFQUFRLFNBRUVBLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUduRjhoRCxFQUFZLDBCQVloQjU0RCxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0QscUNDdkJqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQWNBLFNBQWtCbTFCLEVBQUsza0IsSUFDckIsRUFBSW9uRCxFQUFjdkgsU0FBU2w3QixHQUMzQjNrQixHQUFVLEVBQUlxbkQsRUFBT3hILFNBQVM3L0MsRUFBU29vRCxHQUN2QyxJQUFJaDJDLEVBQU11UyxFQUFJaHlCLE9BRWQsR0FBSXFOLEVBQVFxb0QsUUFDVixPQUFPQyxFQUFjNXZELEtBQUtpc0IsR0FHNUIsR0FBSXZTLEVBQU0sR0FBTSxHQUFLbTJDLEVBQVU3dkQsS0FBS2lzQixHQUNsQyxPQUFPLEVBR1QsSUFBSTZqQyxFQUFtQjdqQyxFQUFJNXdCLFFBQVEsS0FDbkMsT0FBNkIsSUFBdEJ5MEQsR0FBMkJBLElBQXFCcDJDLEVBQU0sR0FBS28yQyxJQUFxQnAyQyxFQUFNLEdBQXNCLE1BQWpCdVMsRUFBSXZTLEVBQU0sSUExQjlHLElBQUlnMUMsRUFBZ0J4TixFQUF1QixFQUFRLFFBRS9DeU4sRUFBU3pOLEVBQXVCLEVBQVEsUUFFNUMsU0FBU0EsRUFBdUJ2ekMsR0FBTyxPQUFPQSxHQUFPQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FFdkYsSUFBSWtpRCxFQUFZLGlCQUNaRCxFQUFnQixrQkFDaEJGLEVBQXVCLENBQ3pCQyxTQUFTLEdBb0JYOTRELEVBQU9DLFFBQVVBLEVBQVFxd0QsUUFDekJ0d0QsRUFBT0MsUUFBUCxRQUF5QkEsRUFBUXF3RCxzQ0NuQ2pDaHZELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLFFBUUEsU0FBa0JtMUIsR0FDaEIsSUFBSStpQyxFQUFPaDFELFVBQVVDLE9BQVMsUUFBc0JFLElBQWpCSCxVQUFVLEdBQW1CQSxVQUFVLEdBQUtkLE9BQU8sSUFBSWcvQixPQUMxRixFQUFJdzJCLEVBQWN2SCxTQUFTbDdCLEdBQzNCLElBQUk4aUMsR0FBYSxFQUFJOU4sRUFBUWtHLFNBQVM2SCxHQUNsQ0MsR0FBVyxFQUFJaE8sRUFBUWtHLFNBQVNsN0IsR0FDcEMsU0FBVWdqQyxHQUFZRixHQUFjRSxFQUFXRixJQVhqRCxJQUFJTCxFQUFnQnhOLEVBQXVCLEVBQVEsUUFFL0NELEVBQVVDLEVBQXVCLEVBQVEsT0FFN0MsU0FBU0EsRUFBdUJ2ekMsR0FBTyxPQUFPQSxHQUFPQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FVdkY5VyxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDcEJqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVlBLFNBQW1CbTFCLEdBQ2pCLElBQUkza0IsRUFBVXROLFVBQVVDLE9BQVMsUUFBc0JFLElBQWpCSCxVQUFVLEdBQW1CQSxVQUFVLEdBQUsrMUQsRUFHbEYsT0FGQSxFQUFJckIsRUFBY3ZILFNBQVNsN0IsR0FFdkIza0IsRUFBUTBvRCxNQUNIQyxFQUFjNzBELFNBQVM2d0IsRUFBSTNmLGVBRzdCNGpELEVBQWU5MEQsU0FBUzZ3QixJQWxCakMsSUFFZ0N0ZSxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRW5Gb2lELEVBQWlCLENBQ25CQyxPQUFPLEdBRUxFLEVBQWlCLENBQUMsT0FBUSxRQUFTLElBQUssS0FDeENELEVBQWdCLEdBQUc1NEQsT0FBTzY0RCxFQUFnQixDQUFDLE1BQU8sT0FhdERyNUQsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQzNCakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFVQSxTQUFzQm0xQixHQUdwQixPQUZBLEVBQUl5aUMsRUFBY3ZILFNBQVNsN0IsR0FFdkJBLEVBQUlra0MsV0FBVyxPQUNWQyxFQUFPcHdELEtBQUtpc0IsR0FHZG9rQyxFQUFPcndELEtBQUtpc0IsSUFmckIsSUFFZ0N0ZSxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBR25GeWlELEVBQVMseUJBQ1RDLEVBQVMscUNBWWJ4NUQsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ3hCakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFTQSxTQUFzQm0xQixFQUFLM2tCLEdBRXpCLElBQUk0UCxFQUNBeFosR0FGSixFQUFJZ3hELEVBQWN2SCxTQUFTbDdCLEdBSUYsV0FBckIrMEIsRUFBUTE1QyxJQUNWNFAsRUFBTTVQLEVBQVE0UCxLQUFPLEVBQ3JCeFosRUFBTTRKLEVBQVE1SixNQUdkd1osRUFBTWxkLFVBQVUsR0FDaEIwRCxFQUFNMUQsVUFBVSxJQUdsQixJQUFJMGYsRUFBTTQyQyxVQUFVcmtDLEdBQUtybEIsTUFBTSxTQUFTM00sT0FBUyxFQUNqRCxPQUFPeWYsR0FBT3hDLFNBQXVCLElBQVJ4WixHQUF1QmdjLEdBQU9oYyxJQXRCN0QsSUFFZ0NpUSxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRXZGLFNBQVNxekMsRUFBUXJ6QyxHQUFtVixPQUF0T3F6QyxFQUFyRCxtQkFBWHZvRCxRQUFvRCxpQkFBcEJBLE9BQU84QixTQUFtQyxTQUFpQm9ULEdBQU8sY0FBY0EsR0FBMkIsU0FBaUJBLEdBQU8sT0FBT0EsR0FBeUIsbUJBQVhsVixRQUF5QmtWLEVBQUlwUSxjQUFnQjlFLFFBQVVrVixJQUFRbFYsT0FBT1YsVUFBWSxnQkFBa0I0VixHQUFpQnF6QyxFQUFRcnpDLEdBcUJuWDlXLEVBQU9DLFFBQVVBLEVBQVFxd0QsUUFDekJ0d0QsRUFBT0MsUUFBUCxRQUF5QkEsRUFBUXF3RCxvQ0MvQmpDaHZELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLFFBVUEsU0FBc0JtMUIsSUFDcEIsRUFBSXlpQyxFQUFjdkgsU0FBU2w3QixHQUMzQixJQUFJc2tDLEVBQVl0a0MsRUFBSXZzQixRQUFRLFNBQVUsSUFFdEMsSUFBSzh3RCxFQUFXeHdELEtBQUt1d0QsR0FDbkIsT0FBTyxFQVFULElBTEEsSUFDSXQ5QixFQUNBdzlCLEVBQ0FDLEVBSEFDLEVBQU0sRUFLRGx3RCxFQUFJOHZELEVBQVV0MkQsT0FBUyxFQUFHd0csR0FBSyxFQUFHQSxJQUN6Q3d5QixFQUFRczlCLEVBQVV0WCxVQUFVeDRDLEVBQUdBLEVBQUksR0FDbkNnd0QsRUFBUzkyQixTQUFTMUcsRUFBTyxJQU1yQjA5QixHQUpBRCxJQUNGRCxHQUFVLElBRUksR0FDTEEsRUFBUyxHQUFLLEVBS2hCQSxFQUdUQyxHQUFnQkEsRUFHbEIsUUFBVUMsRUFBTSxJQUFPLElBQUlKLElBeEM3QixJQUVnQzVpRCxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBR25GNmlELEVBQWEsK1BBc0NqQjM1RCxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDakRqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQThFQSxTQUFvQm0xQixFQUFLM2tCLEdBR3ZCLE9BRkEsRUFBSW9uRCxFQUFjdkgsU0FBU2w3QixHQXZFN0IsU0FBdUIza0IsR0FDckIsSUFBSXNwRCxFQUFpQixPQUFPdjVELE9BQU9pUSxFQUFRdXBELHFCQUFxQixHQUFJLEtBQ3BFdnBELEVBQVF1cEQscUJBQXFCcDBELFNBQVEsU0FBVXcyQixFQUFPdDRCLEdBQ3RDLElBQVZBLElBQWFpMkQsRUFBaUIsR0FBR3Y1RCxPQUFPdTVELEVBQWdCLFNBQVN2NUQsT0FBTzQ3QixFQUFPLFNBRXJGLElBQUkxakIsRUFBUyxJQUFJbFksT0FBT2lRLEVBQVFpSSxPQUFPN1AsUUFBUSxNQUFNLFNBQVVrdEIsR0FDN0QsTUFBTyxLQUFLdjFCLE9BQU91MUIsTUFDakIsS0FBS3YxQixPQUFPaVEsRUFBUXdwRCxlQUFpQixHQUFLLEtBQzFDQyxFQUFXLEtBRVhDLEVBQStCLG1CQUFtQjM1RCxPQUFPaVEsRUFBUTJwRCxvQkFBcUIsWUFFdEZDLEVBQXNCLElBQUk3NUQsT0FERyxDQUFDLElBRkksWUFFa0MyNUQsR0FDUm5vRCxLQUFLLEtBQU0sTUFDdkVzb0QsRUFBaUIsTUFBTTk1RCxPQUFPaVEsRUFBUThwRCxrQkFBbUIsS0FBSy81RCxPQUFPdTVELEVBQWdCLE1BQU12NUQsT0FBT2lRLEVBQVErcEQsZ0JBQWtCLEdBQUssS0FDaklwMkIsRUFBVWkyQixHQUF1QjVwRCxFQUFRZ3FELGVBQWlCaHFELEVBQVErcEQsZ0JBQWtCRixFQUFpQixJQW1DekcsT0FqQ0k3cEQsRUFBUWlxRCxrQkFBb0JqcUQsRUFBUWtxRCx1QkFDbENscUQsRUFBUW1xRCwyQkFDVngyQixHQUFXODFCLEVBQ0Z6cEQsRUFBUW9xRCw4QkFDakJ6MkIsRUFBVTgxQixFQUFXOTFCLElBS3JCM3pCLEVBQVFxcUQsZ0NBQ1YxMkIsRUFBVSxjQUFjNWpDLE9BQU80akMsR0FDdEIzekIsRUFBUXNxRCx5QkFDakIzMkIsRUFBVSxLQUFLNWpDLE9BQU80akMsR0FDYjN6QixFQUFRdXFELDJCQUNqQjUyQixHQUFXLGFBR1QzekIsRUFBUXdxRCxvQkFDVjcyQixHQUFXMXJCLEVBRVgwckIsRUFBVTFyQixFQUFTMHJCLEVBR2pCM3pCLEVBQVFpcUQsa0JBQ05qcUQsRUFBUWtxRCxxQkFDVnYyQixFQUFVLE9BQU81akMsT0FBTzRqQyxFQUFTLFFBQVE1akMsT0FBTzRqQyxFQUFTLEtBQzlDM3pCLEVBQVFvcUQsNkJBQStCcHFELEVBQVFtcUQsNkJBQzFEeDJCLEVBQVU4MUIsRUFBVzkxQixJQU1sQixJQUFJelAsT0FBTyxvQkFBb0JuMEIsT0FBTzRqQyxFQUFTLE1Bd0IvQzgyQixDQURQenFELEdBQVUsRUFBSXFuRCxFQUFPeEgsU0FBUzcvQyxFQUFTMHFELElBQ1RoeUQsS0FBS2lzQixJQS9FckMsSUFBSTBpQyxFQUFTek4sRUFBdUIsRUFBUSxRQUV4Q3dOLEVBQWdCeE4sRUFBdUIsRUFBUSxRQUVuRCxTQUFTQSxFQUF1QnZ6QyxHQUFPLE9BQU9BLEdBQU9BLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQXNEdkYsSUFBSXFrRCxFQUEyQixDQUM3QnppRCxPQUFRLElBQ1J1aEQsZ0JBQWdCLEVBQ2hCYywwQkFBMEIsRUFDMUJFLHFCQUFxQixFQUNyQlAsaUJBQWlCLEVBQ2pCQyxzQkFBc0IsRUFDdEJFLDZCQUE2QixFQUM3QkQsNEJBQTRCLEVBQzVCRSxpQ0FBaUMsRUFDakNWLG9CQUFxQixJQUNyQkcsa0JBQW1CLElBQ25CRSxlQUFlLEVBQ2ZELGlCQUFpQixFQUNqQlIscUJBQXNCLENBQUMsR0FDdkJnQiwwQkFBMEIsR0FTNUJoN0QsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ3hGakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFVQSxTQUFtQm0xQixJQUNqQixFQUFJeWlDLEVBQWN2SCxTQUFTbDdCLEdBQzNCLElBQUloZ0IsRUFBT2dnQixFQUFJcmxCLE1BQU0sS0FFckIsR0FBSXFGLEVBQUtoUyxPQUFTLEVBQ2hCLE9BQU8sRUFHVCxJQUFJNnFDLEVBQWE3NEIsRUFBS3MzQixRQUFRMU8sT0FBT2p1QixNQUFNLEtBQ3ZDcXJELEVBQXFCbnRCLEVBQVd2QixRQUVwQyxHQUF3QyxVQUFwQzB1QixFQUFtQkMsT0FBTyxFQUFHLEdBQy9CLE9BQU8sRUFHVCxJQUFJQyxFQUFZRixFQUFtQkMsT0FBTyxHQUUxQyxHQUFrQixLQUFkQyxJQUFxQkMsRUFBZXB5RCxLQUFLbXlELEdBQzNDLE9BQU8sRUFHVCxJQUFLLElBQUkxeEQsRUFBSSxFQUFHQSxFQUFJcWtDLEVBQVc3cUMsT0FBUXdHLElBQ3JDLElBQU1BLElBQU1xa0MsRUFBVzdxQyxPQUFTLEdBQXFDLFdBQWhDNnFDLEVBQVdya0MsR0FBRzZMLGlCQUFnQytsRCxFQUFlcnlELEtBQUs4a0MsRUFBV3JrQyxJQUNoSCxPQUFPLEVBSVgsSUFBSyxJQUFJMnRELEVBQUssRUFBR0EsRUFBS25pRCxFQUFLaFMsT0FBUW0wRCxJQUNqQyxJQUFLa0UsRUFBVXR5RCxLQUFLaU0sRUFBS21pRCxJQUN2QixPQUFPLEVBSVgsT0FBTyxHQXpDVCxJQUVnQ3pnRCxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRW5GeWtELEVBQWlCLDJCQUNqQkMsRUFBaUIsMEJBQ2pCQyxFQUFZLDhDQXNDaEJ6N0QsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ2xEakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUF5Q0EsU0FBZ0JpYyxFQUFPekwsR0FVckIsR0FQRUEsRUFGcUIsaUJBQVpBLEdBRUMsRUFBSXFuRCxFQUFPeEgsU0FBUyxDQUM1Qm9MLE9BQVFqckQsR0FDUGtyRCxJQUVPLEVBQUk3RCxFQUFPeEgsU0FBUzcvQyxFQUFTa3JELEdBR3BCLGlCQUFWei9DLElBekJVdy9DLEVBeUIwQmpyRCxFQUFRaXJELE9BeEJoRCw0SUFBNEl2eUQsS0FBS3V5RCxJQXdCeEYsQ0FDOUQsSUFVSUUsRUFWQUMsRUFBa0JwckQsRUFBUXFyRCxXQUFXNzFELE1BQUssU0FBVXk0QyxHQUN0RCxPQUE4QyxJQUF2Q2p1QyxFQUFRaXJELE9BQU9sM0QsUUFBUWs2QyxNQUU1QnFkLEVBQWdCdHJELEVBQVF1ckQsV0FBYUgsRUFBa0JwckQsRUFBUXFyRCxXQUFXNzFELE1BQUssU0FBVXk0QyxHQUMzRixPQUFxQyxJQUE5QnhpQyxFQUFNMVgsUUFBUWs2QyxNQUVuQnVkLEVBNUJSLFNBQWE5RCxFQUFNdUQsR0FJakIsSUFIQSxJQUFJUSxFQUFZLEdBQ1pyNUMsRUFBTS9iLEtBQUt1WixJQUFJODNDLEVBQUsvMEQsT0FBUXM0RCxFQUFPdDRELFFBRTlCd0csRUFBSSxFQUFHQSxFQUFJaVosRUFBS2paLElBQ3ZCc3lELEVBQVV0M0QsS0FBSyxDQUFDdXpELEVBQUt2dUQsR0FBSTh4RCxFQUFPOXhELEtBR2xDLE9BQU9zeUQsRUFvQmVDLENBQUlqZ0QsRUFBTW5NLE1BQU1nc0QsR0FBZ0J0ckQsRUFBUWlyRCxPQUFPam1ELGNBQWMxRixNQUFNOHJELElBQ25GTyxFQUFVLEdBRVZDLEVBL0NSLFNBQW9DdmYsRUFBR3dmLEdBQWtCLElBQUluN0QsRUFBSSxHQUFzQixvQkFBWFMsUUFBZ0QsTUFBdEJrN0MsRUFBRWw3QyxPQUFPOEIsVUFBbUIsQ0FBRSxHQUFJdEQsTUFBTUUsUUFBUXc4QyxLQUFPMzdDLEVBQUtvN0QsRUFBNEJ6ZixJQUE0RCxDQUFNMzdDLElBQUkyN0MsRUFBSTM3QyxHQUFJLElBQUl5SSxFQUFJLEVBQU9DLEVBQUksYUFBaUIsTUFBTyxDQUFFZ3pDLEVBQUdoekMsRUFBRzFDLEVBQUcsV0FBZSxPQUFJeUMsR0FBS2t6QyxFQUFFMTVDLE9BQWUsQ0FBRVcsTUFBTSxHQUFlLENBQUVBLE1BQU0sRUFBT0gsTUFBT2s1QyxFQUFFbHpDLE9BQVdpYixFQUFHLFNBQVcyM0MsR0FBTyxNQUFNQSxHQUFRMTZELEVBQUcrSCxHQUFPLE1BQU0sSUFBSTNILFVBQVUseUlBQTRJLElBQTZDbzZDLEVBQXpDbWdCLEdBQW1CLEVBQU1DLEdBQVMsRUFBWSxNQUFPLENBQUU3ZixFQUFHLFdBQWUxN0MsRUFBSzI3QyxFQUFFbDdDLE9BQU84QixhQUFnQnlELEVBQUcsV0FBZSxJQUFJMUQsRUFBT3RDLEVBQUd3QyxPQUFzQyxPQUE5Qjg0RCxFQUFtQmg1RCxFQUFLTSxLQUFhTixHQUFTb2hCLEVBQUcsU0FBVzgzQyxHQUFPRCxHQUFTLEVBQU1wZ0IsRUFBTXFnQixHQUFRNzZELEVBQUcsV0FBZSxJQUFXMjZELEdBQWlDLE1BQWJ0N0QsRUFBR3k3RCxRQUFnQno3RCxFQUFHeTdELFNBQVksUUFBVSxHQUFJRixFQUFRLE1BQU1wZ0IsS0ErQ2g4QnVnQixDQUEyQlosR0FHM0MsSUFDRSxJQUFLSSxFQUFVeGYsTUFBTytlLEVBQVFTLEVBQVVsMUQsS0FBS3BELE1BQU8sQ0FDbEQsSUFBSSs0RCxHQTVEWUMsRUE0RGlCbkIsRUFBTWg0RCxNQUFPLEVBdER0RCxTQUF5Qm01RCxHQUFPLEdBQUkzOEQsTUFBTUUsUUFBUXk4RCxHQUFNLE9BQU9BLEVBTnRCQyxDQUFnQkQsSUFJekQsU0FBK0JBLEVBQUtuekQsR0FBSyxHQUFzQixvQkFBWGhJLFFBQTRCQSxPQUFPOEIsWUFBWXBDLE9BQU95N0QsR0FBakUsQ0FBZ0YsSUFBSUUsRUFBTyxHQUFRQyxHQUFLLEVBQVVDLEdBQUssRUFBV0MsT0FBSzk1RCxFQUFXLElBQU0sSUFBSyxJQUFpQys1RCxFQUE3QjlGLEVBQUt3RixFQUFJbjdELE9BQU84QixjQUFtQnc1RCxHQUFNRyxFQUFLOUYsRUFBRzV6RCxRQUFRSSxRQUFvQms1RCxFQUFLcjRELEtBQUt5NEQsRUFBR3o1RCxPQUp4TWdHLElBSXlOcXpELEVBQUs3NUQsUUFBaEQ4NUQsR0FBSyxJQUFvRSxNQUFPNWdCLEdBQU82Z0IsR0FBSyxFQUFNQyxFQUFLOWdCLEVBQU8sUUFBVSxJQUFXNGdCLEdBQXNCLE1BQWhCM0YsRUFBVyxRQUFXQSxFQUFXLFNBQU8sUUFBVSxHQUFJNEYsRUFBSSxNQUFNQyxHQUFRLE9BQU9ILEdBSmphSyxDQUFzQlAsSUFBV1IsRUFBNEJRLEVBNER4RSxJQTFEdEQsV0FBOEIsTUFBTSxJQUFJNzZELFVBQVUsNklBRnVGcTdELElBNkQ3SEMsRUFBV1YsRUFBWSxHQUN2QlcsRUFBYVgsRUFBWSxHQUU3QixHQUFJVSxFQUFTcDZELFNBQVdxNkQsRUFBV3I2RCxPQUNqQyxPQUFPLEVBR1RnNUQsRUFBUXFCLEVBQVd6L0MsT0FBTyxJQUFNdy9DLEdBRWxDLE1BQU9saEIsR0FDUCtmLEVBQVV4M0MsRUFBRXkzQixHQUNaLFFBQ0ErZixFQUFVdjZELElBR1osT0FBTyxJQUFJdS9CLEtBQUssR0FBRzdnQyxPQUFPNDdELEVBQVFybUMsRUFBRyxLQUFLdjFCLE9BQU80N0QsRUFBUTdjLEVBQUcsS0FBSy8rQyxPQUFPNDdELEVBQVFweEIsSUFBSTB5QixhQUFldEIsRUFBUTdjLEVBNUUvRyxJQUF3QndkLEVBb0JEckIsRUEyRHJCLE9BQUtqckQsRUFBUXVyRCxhQUNzQyxrQkFBMUMxNkQsT0FBT0osVUFBVWtILFNBQVM1RixLQUFLMFosSUFBOEI4YixTQUFTOWIsS0FwRmpGLElBRWdDcEYsRUFGNUJnaEQsR0FFNEJoaEQsRUFGSSxFQUFRLFNBRVNBLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQVl2RixTQUFTeWxELEVBQTRCemYsRUFBRzZnQixHQUFVLEdBQUs3Z0IsRUFBTCxDQUFnQixHQUFpQixpQkFBTkEsRUFBZ0IsT0FBTzhnQixFQUFrQjlnQixFQUFHNmdCLEdBQVMsSUFBSXgyRCxFQUFJN0YsT0FBT0osVUFBVWtILFNBQVM1RixLQUFLczZDLEdBQUdwOEMsTUFBTSxHQUFJLEdBQWlFLE1BQW5ELFdBQU55RyxHQUFrQjIxQyxFQUFFcDJDLGNBQWFTLEVBQUkyMUMsRUFBRXAyQyxZQUFZa0csTUFBZ0IsUUFBTnpGLEdBQXFCLFFBQU5BLEVBQW9CL0csTUFBTUMsS0FBS3k4QyxHQUFjLGNBQU4zMUMsR0FBcUIsMkNBQTJDZ0MsS0FBS2hDLEdBQVd5MkQsRUFBa0I5Z0IsRUFBRzZnQixRQUF6RyxHQUU3UyxTQUFTQyxFQUFrQmIsRUFBS2w2QyxJQUFrQixNQUFQQSxHQUFlQSxFQUFNazZDLEVBQUkzNUQsVUFBUXlmLEVBQU1rNkMsRUFBSTM1RCxRQUFRLElBQUssSUFBSXdHLEVBQUksRUFBR2kwRCxFQUFPLElBQUl6OUQsTUFBTXlpQixHQUFNalosRUFBSWlaLEVBQUtqWixJQUFPaTBELEVBQUtqMEQsR0FBS216RCxFQUFJbnpELEdBQU0sT0FBT2kwRCxFQUVoTCxJQUFJbEMsRUFBdUIsQ0FDekJELE9BQVEsYUFDUkksV0FBWSxDQUFDLElBQUssS0FDbEJFLFlBQVksR0FxRWRoOEQsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ2hHakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUF3QkEsU0FBbUJtMUIsRUFBSzNrQixHQUl0QixJQUhBLEVBQUlvbkQsRUFBY3ZILFNBQVNsN0IsSUFDM0Iza0IsR0FBVSxFQUFJcW5ELEVBQU94SCxTQUFTNy9DLEVBQVNxdEQsSUFFM0J6RyxVQUFVa0IsRUFBT3hCLFFBQzNCLFFBQVEsRUFBSWdILEVBQVV6TixTQUFTMEYsRUFBVzVnQyxFQUFJdnNCLFFBQVEsS0FBTSxNQWpCaEUsU0FBdUI0SCxHQUVyQixPQURhLElBQUlra0IsT0FBTyxxQkFBcUJuMEIsT0FBTyszRCxFQUFPeEIsUUFBUXRtRCxFQUFRNG1ELFFBQVMsVUFBVTcyRCxPQUFPaVEsRUFBUXNwRCxlQUFnQixNQUFNdjVELE9BQU9pUSxFQUFRdXRELGNBQWdCLEdBQUssSUFBSyxNQWdCdEdDLENBQWN4dEQsR0FBU3RILEtBQUtpc0IsR0FHbEcsTUFBTSxJQUFJcnNCLE1BQU0sbUJBQW1CdkksT0FBT2lRLEVBQVE0bUQsT0FBUSxPQTlCNUQsSUFBSVMsRUFBU3pOLEVBQXVCLEVBQVEsUUFFeEN3TixFQUFnQnhOLEVBQXVCLEVBQVEsUUFFL0MwVCxFQUFZMVQsRUFBdUIsRUFBUSxRQUUzQ2tPLEVBQVMsRUFBUSxPQUVyQixTQUFTbE8sRUFBdUJ2ekMsR0FBTyxPQUFPQSxHQUFPQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FPdkYsSUFBSWduRCxFQUEwQixDQUM1QkUsZUFBZSxFQUNmakUsZUFBZ0IsS0FDaEIxQyxPQUFRLFNBRU5yQixFQUFZLENBQUMsR0FBSSxJQUFLLEtBYTFCaDJELEVBQU9DLFFBQVVBLEVBQVFxd0QsUUFDekJ0d0QsRUFBT0MsUUFBUCxRQUF5QkEsRUFBUXF3RCxzQ0N2Q2pDaHZELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLFFBUUEsU0FBdUJtMUIsRUFBSzhvQyxHQUUxQixPQURBLEVBQUlyRyxFQUFjdkgsU0FBU2w3QixJQUNwQixFQUFJazFCLEVBQVNnRyxTQUFTbDdCLEdBQU8wTixTQUFTbzdCLEVBQUssS0FBUSxHQVI1RCxJQUFJckcsRUFBZ0J4TixFQUF1QixFQUFRLFFBRS9DQyxFQUFXRCxFQUF1QixFQUFRLFFBRTlDLFNBQVNBLEVBQXVCdnpDLEdBQU8sT0FBT0EsR0FBT0EsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBT3ZGOVcsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ2pCakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUF3RUEsU0FBZW0xQixJQUNiLEVBQUl5aUMsRUFBY3ZILFNBQVNsN0IsR0FDM0IsSUFyQjJCK29DLEVBTXZCQyxFQWVBQyxFQUFtQnZtQyxPQUFPMUMsRUFBSTEwQixPQUFPLElBQ3pDLE9BQU80OUQsRUFBY24xRCxLQUFLaXNCLElBQVFpcEMsTUFoQjlCRCxFQUFZLElBTldELEVBc0JnRC9vQyxHQXJCeEQxMEIsTUFBTSxHQUFJLEdBQUdxUCxNQUFNLElBQUlsSyxLQUFJLFNBQVUwNEQsRUFBTXo2RCxHQUM1RCxPQUFPZzBCLE9BQU95bUMsR0FsQmxCLFNBQWdEbjdELEVBQVFVLEdBQ3RELE9BYmlCLElBYWJWLEdBWmMsS0FZYUEsRUFDdEJVLEVBQVEsR0FBTSxFQUFJLEVBQUksRUFHeEJBLEVBQVEsR0FBTSxFQUFJLEVBQUksRUFhTDA2RCxDQUF1Q0wsRUFBSS82RCxPQUFRVSxNQUN4RSs4QixRQUFPLFNBQVV3WCxFQUFLb21CLEdBQ3ZCLE9BQU9wbUIsRUFBTW9tQixJQUNaLEdBQzZCLElBQ2IsR0FBS0wsRUFBWSxJQTFEdEMsSUFFZ0N0bkQsRUFGNUIrZ0QsR0FFNEIvZ0QsRUFGVyxFQUFRLFNBRUVBLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQXVCbkZ3bkQsRUFBZ0IsMEJBbURwQnQrRCxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDbEZqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQXVFQSxTQUFpQm0xQixFQUFLM2tCLEdBSXBCLElBSEEsRUFBSW9uRCxFQUFjdkgsU0FBU2w3QixJQUMzQjNrQixHQUFVLEVBQUlxbkQsRUFBT3hILFNBQVM3L0MsRUFBU2l1RCxJQUUzQkMsc0JBQXdCbHVELEVBQVFtdUQsbUJBQW9CLENBQzlELElBQUlDLEVBQWdCenBDLEVBQUkxbEIsTUFBTW92RCxHQUU5QixHQUFJRCxFQUFlLENBQ2pCLElBQUlFLEVBQWVGLEVBQWMsR0FZakMsR0FUQXpwQyxFQUFNQSxFQUFJdnNCLFFBQVFrMkQsRUFBYyxJQUFJbDJELFFBQVEsV0FBWSxJQUtwRGsyRCxFQUFhQyxTQUFTLE9BQ3hCRCxFQUFlQSxFQUFhMUQsT0FBTyxFQUFHMEQsRUFBYTM3RCxPQUFTLEtBN0NwRSxTQUE2QjI3RCxHQUMzQixJQUFJRSxFQUE4QkYsRUFBYWwyRCxRQUFRLFdBQVksTUFFbkUsSUFBS28yRCxFQUE0QmpoQyxPQUMvQixPQUFPLEVBTVQsR0FGdUIsV0FBVzcwQixLQUFLODFELEdBRWpCLENBR3BCLEdBQUlBLElBQWdDRixFQUNsQyxPQUFPLEVBTVQsR0FGZ0NFLEVBQTRCbHZELE1BQU0sS0FBSzNNLFNBQVc2N0QsRUFBNEJsdkQsTUFBTSxPQUFPM00sT0FHekgsT0FBTyxFQUlYLE9BQU8sRUF1QkU4N0QsQ0FBb0JILEdBQ3ZCLE9BQU8sT0FFSixHQUFJdHVELEVBQVFrdUQscUJBQ2pCLE9BQU8sRUFJWCxJQUFLbHVELEVBQVEwdUQsbUJBQXFCL3BDLEVBQUloeUIsT0FsRVosSUFtRXhCLE9BQU8sRUFHVCxJQUFJcXlDLEVBQVFyZ0IsRUFBSXJsQixNQUFNLEtBQ2xCaUksRUFBU3k5QixFQUFNaEcsTUFDZjJ2QixFQUFlcG5ELEVBQU92QyxjQUUxQixHQUFJaEYsRUFBUTR1RCxlQUFlOTZELFNBQVM2NkQsR0FDbEMsT0FBTyxFQUdULElBQUlFLEVBQU83cEIsRUFBTXpqQyxLQUFLLEtBRXRCLEdBQUl2QixFQUFROHVELDZCQUFnRCxjQUFqQkgsR0FBaUQsbUJBQWpCQSxHQUFvQyxDQVU3RyxJQUFJMW1DLEdBRko0bUMsRUFBT0EsRUFBSzdwRCxlQUVRMUYsTUFBTSxLQUFLLEdBRS9CLEtBQUssRUFBSXc5QyxFQUFjK0MsU0FBUzUzQixFQUFTN3ZCLFFBQVEsTUFBTyxJQUFLLENBQzNEd1gsSUFBSyxFQUNMeFosSUFBSyxLQUVMLE9BQU8sRUFLVCxJQUZBLElBQUkyNEQsRUFBYzltQyxFQUFTM29CLE1BQU0sS0FFeEJuRyxFQUFJLEVBQUdBLEVBQUk0MUQsRUFBWXA4RCxPQUFRd0csSUFDdEMsSUFBSzYxRCxFQUFjdDJELEtBQUtxMkQsRUFBWTUxRCxJQUNsQyxPQUFPLEVBS2IsTUFBa0MsSUFBOUI2RyxFQUFRMHVELG9CQUFpQyxFQUFJNVIsRUFBYytDLFNBQVNnUCxFQUFNLENBQzVFejRELElBQUssT0FDQSxFQUFJMG1ELEVBQWMrQyxTQUFTdDRDLEVBQVEsQ0FDeENuUixJQUFLLE9BRUwsT0FBTyxFQUdULEtBQUssRUFBSW9rRCxFQUFRcUYsU0FBU3Q0QyxFQUFRLENBQ2hDMG5ELFlBQWFqdkQsRUFBUWl2RCxjQUNuQixDQUNGLElBQUtqdkQsRUFBUWt2RCxnQkFDWCxPQUFPLEVBR1QsS0FBSyxFQUFJNVUsRUFBTXVGLFNBQVN0NEMsR0FBUyxDQUMvQixJQUFLQSxFQUFPc2hELFdBQVcsT0FBU3RoRCxFQUFPZ25ELFNBQVMsS0FDOUMsT0FBTyxFQUdULElBQUlZLEVBQWtCNW5ELEVBQU9xakQsT0FBTyxFQUFHcmpELEVBQU81VSxPQUFTLEdBRXZELEdBQStCLElBQTNCdzhELEVBQWdCeDhELFVBQWlCLEVBQUkybkQsRUFBTXVGLFNBQVNzUCxHQUN0RCxPQUFPLEdBS2IsR0FBZ0IsTUFBWk4sRUFBSyxHQUVQLE9BREFBLEVBQU9BLEVBQUs1K0QsTUFBTSxFQUFHNCtELEVBQUtsOEQsT0FBUyxHQUM1QnFOLEVBQVFvdkQsc0JBQXdCQyxFQUFvQjMyRCxLQUFLbTJELEdBQVFTLEVBQWdCNTJELEtBQUttMkQsR0FNL0YsSUFIQSxJQUFJbDdCLEVBQVUzekIsRUFBUW92RCxzQkFBd0JHLEVBQW9CQyxFQUM5REMsRUFBYVosRUFBS3Z2RCxNQUFNLEtBRW5Cd25ELEVBQUssRUFBR0EsRUFBSzJJLEVBQVc5OEQsT0FBUW0wRCxJQUN2QyxJQUFLbnpCLEVBQVFqN0IsS0FBSysyRCxFQUFXM0ksSUFDM0IsT0FBTyxFQUlYLE9BQUk5bUQsRUFBUTB2RCxvQkFDeUUsSUFBL0ViLEVBQUtwb0IsT0FBTyxJQUFJdmlCLE9BQU8sSUFBSW4wQixPQUFPaVEsRUFBUTB2RCxrQkFBbUIsTUFBTyxPQXRMNUUsSUFBSXRJLEVBQWdCeE4sRUFBdUIsRUFBUSxRQUUvQ3lOLEVBQVN6TixFQUF1QixFQUFRLFFBRXhDa0QsRUFBZ0JsRCxFQUF1QixFQUFRLFFBRS9DWSxFQUFVWixFQUF1QixFQUFRLFFBRXpDVSxFQUFRVixFQUF1QixFQUFRLFFBRTNDLFNBQVNBLEVBQXVCdnpDLEdBQU8sT0FBT0EsR0FBT0EsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRXZGLElBQUk0bkQsRUFBd0IsQ0FDMUJFLG9CQUFvQixFQUNwQkQsc0JBQXNCLEVBQ3RCa0IsdUJBQXVCLEVBQ3ZCSCxhQUFhLEVBQ2JTLGtCQUFtQixHQUNuQmhCLG1CQUFtQixFQUNuQkUsZUFBZ0IsSUFNZFAsRUFBbUIsaUNBQ25CbUIsRUFBZ0IseUNBQ2hCUixFQUFnQixhQUNoQk0sRUFBa0Isa0dBQ2xCQyxFQUFvQixnRkFDcEJGLEVBQXNCLGdMQThKMUI5L0QsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ2xNakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFZQSxTQUFpQm0xQixFQUFLM2tCLEdBR3BCLE9BRkEsRUFBSW9uRCxFQUFjdkgsU0FBU2w3QixHQUU2QyxNQUR4RTNrQixHQUFVLEVBQUlxbkQsRUFBT3hILFNBQVM3L0MsRUFBUzJ2RCxJQUN2QkMsa0JBQW9CanJDLEVBQUk0SSxPQUFPNTZCLE9BQVNneUIsRUFBSWh5QixTQWI5RCxJQUFJeTBELEVBQWdCeE4sRUFBdUIsRUFBUSxRQUUvQ3lOLEVBQVN6TixFQUF1QixFQUFRLFFBRTVDLFNBQVNBLEVBQXVCdnpDLEdBQU8sT0FBT0EsR0FBT0EsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRXZGLElBQUlzcEQsRUFBMkIsQ0FDN0JDLG1CQUFtQixHQVNyQnJnRSxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDdEJqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVFBLFNBQTJCbTFCLEdBRXpCLE9BREEsRUFBSXlpQyxFQUFjdkgsU0FBU2w3QixHQUNwQmtyQyxFQUFJbjNELEtBQUtpc0IsSUFSbEIsSUFFZ0N0ZSxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRW5Gd3BELEVBQU0sc0JBT1Z0Z0UsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQ2pCakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFnQkEsU0FBZ0JtMUIsRUFBSzNrQixJQUNuQixFQUFJb25ELEVBQWN2SCxTQUFTbDdCLElBQzNCM2tCLEdBQVUsRUFBSXFuRCxFQUFPeEgsU0FBUzcvQyxFQUFTOHZELElBRzNCQyxvQkFBOEMsTUFBeEJwckMsRUFBSUEsRUFBSWh5QixPQUFTLEtBQ2pEZ3lCLEVBQU1BLEVBQUlndEIsVUFBVSxFQUFHaHRCLEVBQUloeUIsT0FBUyxLQUtQLElBQTNCcU4sRUFBUWd3RCxnQkFBaUQsSUFBdEJyckMsRUFBSTV3QixRQUFRLFFBQ2pENHdCLEVBQU1BLEVBQUlndEIsVUFBVSxJQUd0QixJQUFJM00sRUFBUXJnQixFQUFJcmxCLE1BQU0sS0FDbEIyd0QsRUFBTWpyQixFQUFNQSxFQUFNcnlDLE9BQVMsR0FFL0IsR0FBSXFOLEVBQVFpdkQsWUFBYSxDQUV2QixHQUFJanFCLEVBQU1yeUMsT0FBUyxFQUNqQixPQUFPLEVBR1QsSUFBSyxxRkFBcUYrRixLQUFLdTNELEdBQzdGLE9BQU8sRUFJVCxHQUFJLEtBQUt2M0QsS0FBS3UzRCxHQUNaLE9BQU8sRUFLWCxTQUFLandELEVBQVFrd0QsbUJBQXFCLFFBQVF4M0QsS0FBS3UzRCxLQUl4Q2pyQixFQUFNenZDLE9BQU0sU0FBVXV2QyxHQUMzQixRQUFJQSxFQUFLbnlDLE9BQVMsS0FJYiw4QkFBOEIrRixLQUFLb3NDLElBS3BDLGtCQUFrQnBzQyxLQUFLb3NDLElBS3ZCLFFBQVFwc0MsS0FBS29zQyxLQUlaOWtDLEVBQVFtd0QsbUJBQXFCLElBQUl6M0QsS0FBS29zQyxRQXhFL0MsSUFBSXNpQixFQUFnQnhOLEVBQXVCLEVBQVEsUUFFL0N5TixFQUFTek4sRUFBdUIsRUFBUSxRQUU1QyxTQUFTQSxFQUF1QnZ6QyxHQUFPLE9BQU9BLEdBQU9BLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUV2RixJQUFJeXBELEVBQXVCLENBQ3pCYixhQUFhLEVBQ2JrQixtQkFBbUIsRUFDbkJKLG9CQUFvQixFQUNwQkcsbUJBQW1CLEVBQ25CRixnQkFBZ0IsR0FxRWxCemdFLEVBQU9DLFFBQVVBLEVBQVFxd0QsUUFDekJ0d0QsRUFBT0MsUUFBUCxRQUF5QkEsRUFBUXF3RCxzQ0N0RmpDaHZELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLFFBU0EsU0FBaUJtMUIsRUFBSzNrQixJQUNwQixFQUFJb25ELEVBQWN2SCxTQUFTbDdCLEdBQzNCM2tCLEVBQVVBLEdBQVcsR0FDckIsSUFBSW93RCxFQUFRLElBQUlsc0MsT0FBTyw2QkFBNkJuMEIsT0FBT2lRLEVBQVE0bUQsT0FBU2tCLEVBQU94QixRQUFRdG1ELEVBQVE0bUQsUUFBVSxJQUFLLDBDQUVsSCxHQUFZLEtBQVJqaUMsR0FBc0IsTUFBUkEsR0FBdUIsTUFBUkEsR0FBdUIsTUFBUkEsRUFDOUMsT0FBTyxFQUdULElBQUl4eEIsRUFBUXVnRCxXQUFXL3VCLEVBQUl2c0IsUUFBUSxJQUFLLE1BQ3hDLE9BQU9nNEQsRUFBTTEzRCxLQUFLaXNCLE1BQVUza0IsRUFBUXFCLGVBQWUsUUFBVWxPLEdBQVM2TSxFQUFRNFAsUUFBVTVQLEVBQVFxQixlQUFlLFFBQVVsTyxHQUFTNk0sRUFBUTVKLFFBQVU0SixFQUFRcUIsZUFBZSxPQUFTbE8sRUFBUTZNLEVBQVFxd0QsT0FBU3J3RCxFQUFRcUIsZUFBZSxPQUFTbE8sRUFBUTZNLEVBQVFzd0QsS0FsQi9QOWdFLEVBQVEweEQsYUFBVSxFQUVsQixJQUlnQzc2QyxFQUo1QitnRCxHQUk0Qi9nRCxFQUpXLEVBQVEsU0FJRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRm5GeWhELEVBQVMsRUFBUSxPQWlCakI1RyxFQUFVcndELE9BQU9iLEtBQUs4M0QsRUFBT3hCLFNBQ2pDOTJELEVBQVEweEQsUUFBVUEsZ0NDMUJsQnJ3RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVVBLFNBQXFCbTFCLEdBRW5CLE9BREEsRUFBSXlpQyxFQUFjdkgsU0FBU2w3QixHQUNwQjRyQyxFQUFVNzNELEtBQUtpc0IsSUFYeEJuMUIsRUFBUStnRSxlQUFZLEVBRXBCLElBRWdDbHFELEVBRjVCK2dELEdBRTRCL2dELEVBRlcsRUFBUSxTQUVFQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FFbkZrcUQsRUFBWSxtRUFDaEIvZ0UsRUFBUStnRSxVQUFZQSxnQ0NYcEIxL0QsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFTQSxTQUFlbTFCLElBQ2IsRUFBSXlpQyxFQUFjdkgsU0FBU2w3QixHQUUzQixJQUFJNnJDLEVBQWM3ckMsRUFBSXZzQixRQUFRLE9BQVEsS0FBS0EsUUFBUSx5QkFBMEIsTUFFN0UsT0FBa0MsSUFBOUJvNEQsRUFBWXo4RCxRQUFRLEtBQ2YwOEQsRUFBUy8zRCxLQUFLODNELEdBR2hCRSxFQUFTaDRELEtBQUs4M0QsSUFoQnZCLElBRWdDbnFELEVBRjVCK2dELEdBRTRCL2dELEVBRlcsRUFBUSxTQUVFQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FFbkZvcUQsRUFBVyw0UUFDWEMsRUFBVyxzUkFjZm5oRSxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDekJqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVVBLFNBQXFCbTFCLEdBRW5CLE9BREEsRUFBSXlpQyxFQUFjdkgsU0FBU2w3QixHQUNwQmdzQyxFQUFVajRELEtBQUtpc0IsSUFYeEJuMUIsRUFBUW1oRSxlQUFZLEVBRXBCLElBRWdDdHFELEVBRjVCK2dELEdBRTRCL2dELEVBRlcsRUFBUSxTQUVFQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FFbkZzcUQsRUFBWSxrRUFDaEJuaEUsRUFBUW1oRSxVQUFZQSxnQ0NYcEI5L0QsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFzQkEsU0FBZ0JtMUIsRUFBS2lzQyxHQUduQixPQUZBLEVBQUl4SixFQUFjdkgsU0FBU2w3QixHQUNoQixJQUFJVCxPQUFPLGdCQUFnQm4wQixPQUFPOGdFLEVBQVFELEdBQVksT0FDckRsNEQsS0FBS2lzQixJQXZCbkIsSUFFZ0N0ZSxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRW5Gd3FELEVBQVUsQ0FDWkMsSUFBSyxHQUNMQyxJQUFLLEdBQ0xDLEtBQU0sR0FDTkMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JDLE9BQVEsSUFDUkMsVUFBVyxHQUNYQyxVQUFXLEdBQ1hDLFNBQVUsR0FDVkMsU0FBVSxHQUNWQyxTQUFVLEdBQ1ZDLE1BQU8sRUFDUEMsT0FBUSxHQVNWbmlFLEVBQU9DLFFBQVVBLEVBQVFxd0QsUUFDekJ0d0QsRUFBT0MsUUFBUCxRQUF5QkEsRUFBUXF3RCxzQ0NoQ2pDaHZELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLFFBUUEsU0FBb0JtMUIsR0FFbEIsT0FEQSxFQUFJeWlDLEVBQWN2SCxTQUFTbDdCLEdBQ3BCZ3RDLEVBQVNqNUQsS0FBS2lzQixJQVJ2QixJQUVnQ3RlLEVBRjVCK2dELEdBRTRCL2dELEVBRlcsRUFBUSxTQUVFQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FFbkZzckQsRUFBVyx5REFPZnBpRSxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDakJqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVFBLFNBQXVCbTFCLEdBRXJCLE9BREEsRUFBSXlpQyxFQUFjdkgsU0FBU2w3QixHQUNwQml0QyxFQUFZbDVELEtBQUtpc0IsSUFSMUIsSUFFZ0N0ZSxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBRW5GdXJELEVBQWMsdUJBT2xCcmlFLEVBQU9DLFFBQVVBLEVBQVFxd0QsUUFDekJ0d0QsRUFBT0MsUUFBUCxRQUF5QkEsRUFBUXF3RCxzQ0NqQmpDaHZELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLFFBMElBLFNBQWdCbTFCLEdBRWQsT0FEQSxFQUFJeWlDLEVBQWN2SCxTQUFTbDdCLEdBbkM3QixTQUE0QkEsR0FFMUIsSUFBSTZyQyxFQUFjN3JDLEVBQUl2c0IsUUFBUSxZQUFhLElBQUkwM0MsY0FDM0MraEIsRUFBaUJyQixFQUFZdmdFLE1BQU0sRUFBRyxHQUFHNi9DLGNBQzdDLE9BQU8raEIsS0FBa0JDLEdBQStCQSxFQUE0QkQsR0FBZ0JuNUQsS0FBSzgzRCxHQWdDbEd1QixDQUFtQnB0QyxJQWY1QixTQUE4QkEsR0FDNUIsSUFBSTZyQyxFQUFjN3JDLEVBQUl2c0IsUUFBUSxlQUFnQixJQUFJMDNDLGNBU2xELE9BQXFCLEtBUEowZ0IsRUFBWXZnRSxNQUFNLEdBQUt1Z0UsRUFBWXZnRSxNQUFNLEVBQUcsSUFDaEJtSSxRQUFRLFVBQVUsU0FBVTAxRCxHQUN2RSxPQUFPQSxFQUFLdGdELFdBQVcsR0FBSyxNQUVjdk8sTUFBTSxZQUFZbXhCLFFBQU8sU0FBVXdYLEVBQUt6MEMsR0FDbEYsT0FBT2swQixPQUFPdWdCLEVBQU16MEMsR0FBUyxLQUM1QixJQU0rQjYrRCxDQUFxQnJ0QyxJQTNJekRuMUIsRUFBUTB4RCxhQUFVLEVBRWxCLElBRWdDNzZDLEVBRjVCK2dELEdBRTRCL2dELEVBRlcsRUFBUSxTQUVFQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FPbkZ5ckQsRUFBOEIsQ0FDaENHLEdBQUksa0NBQ0pDLEdBQUksNEJBQ0pDLEdBQUksa0NBQ0pDLEdBQUksdUJBQ0pDLEdBQUksa0NBQ0pDLEdBQUksdUJBQ0pDLEdBQUksdUJBQ0pDLEdBQUkseUNBQ0pDLEdBQUkscUNBQ0pDLEdBQUksMENBQ0pDLEdBQUksa0NBQ0pDLEdBQUksa0NBQ0pDLEdBQUksdUJBQ0pDLEdBQUksa0NBQ0pDLEdBQUksdUJBQ0pDLEdBQUksdUJBQ0pDLEdBQUksdUJBQ0pDLEdBQUksK0JBQ0pDLEdBQUksdUJBQ0pDLEdBQUksdUJBQ0pDLEdBQUksdUJBQ0pDLEdBQUksdUJBQ0pDLEdBQUksdUJBQ0pDLEdBQUksd0NBQ0pDLEdBQUksK0JBQ0pDLEdBQUksa0NBQ0pDLEdBQUkscUNBQ0pDLEdBQUksdUJBQ0pDLEdBQUksa0NBQ0pDLEdBQUksd0NBQ0pDLEdBQUksdUJBQ0pDLEdBQUksdUJBQ0pDLEdBQUksa0NBQ0pDLEdBQUksdUJBQ0pDLEdBQUksK0JBQ0pDLEdBQUksOEJBQ0pDLEdBQUksdUJBQ0pDLEdBQUksMkNBQ0pDLEdBQUksK0JBQ0pDLEdBQUkscUNBQ0pDLEdBQUksa0NBQ0pDLEdBQUksa0NBQ0pDLEdBQUkscUNBQ0pDLEdBQUksa0NBQ0o1ckQsR0FBSSx1QkFDSjZyRCxHQUFJLGtDQUNKQyxHQUFJLHFDQUNKQyxHQUFJLHdDQUNKQyxHQUFJLDZCQUNKQyxHQUFJLHVCQUNKQyxHQUFJLHVDQUNKQyxHQUFJLHVCQUNKQyxHQUFJLDBDQUNKQyxHQUFJLHVDQUNKQyxHQUFJLHVCQUNKQyxHQUFJLCtCQUNKQyxHQUFJLHVCQUNKQyxHQUFJLGtDQUNKQyxHQUFJLHVCQUNKQyxHQUFJLGtDQUNKQyxHQUFJLHVCQUNKQyxHQUFJLHFDQUNKQyxHQUFJLHFDQUNKQyxHQUFJLHVCQUNKQyxHQUFJLGtDQUNKQyxHQUFJLHVDQUNKQyxHQUFJLHVCQUNKQyxHQUFJLHVCQUNKQyxHQUFJLHVCQUNKQyxHQUFJLDJDQUNKQyxHQUFJLGtDQUNKQyxHQUFJLHVCQUNKQyxHQUFJLHVCQUNKQyxHQUFJLGtDQUNKM3lDLEdBQUksa0NBQ0o0eUMsR0FBSSx1QkFDSkMsR0FBSSxrQ0FDSkMsR0FBSSx3QkFxREYxVixFQUFVcndELE9BQU9iLEtBQUs4aEUsR0FDMUJ0aUUsRUFBUTB4RCxRQUFVQSxnQ0NuSmxCcndELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLFFBU0EsU0FBZ0JtMUIsRUFBSzNrQixJQUNuQixFQUFJb25ELEVBQWN2SCxTQUFTbDdCLEdBRzNCLElBQUlreUMsRUFBWUMsRUFNaEIsSUFSQTkyRCxFQUFVQSxHQUFXLElBSVQrMkQsZ0JBQ1ZGLEVBQVlHLElBR1RILEVBQVVuK0QsS0FBS2lzQixHQUNsQixPQUFPLEVBR1RBLEVBQU1BLEVBQUl2c0IsUUFBUSxLQUFNLElBS3hCLElBSkEsSUFBSWl4RCxFQUFNLEVBQ040TixFQUFNLEVBR0Q5OUQsRUFBSSxFQUFHQSxFQUZSLEdBRWVBLElBQUssQ0FDMUIsSUFBSXd5QixFQUFRaEgsRUFBSWd0QixVQUhWLEdBR3dCeDRDLEVBQUksRUFINUIsR0FHbUNBLEdBQ3JDKzlELEVBQUs3a0MsU0FBUzFHLEVBQU8sSUFBTXNyQyxFQUc3QjVOLEdBREU2TixHQUFNLEdBQ0RBLEVBQUssR0FBSyxFQUVWQSxFQUdHLElBQVJELEVBQ0ZBLEdBQU8sRUFFUEEsR0FBTyxFQU1YLE9BRlcsR0FBSzVOLEVBQU0sSUFBTSxLQUVoQmgzQixTQUFTMU4sRUFBSWd0QixVQUFVLEdBQUksSUFBSyxLQTdDOUMsSUFFZ0N0ckMsRUFGNUIrZ0QsR0FFNEIvZ0QsRUFGVyxFQUFRLFNBRUVBLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUVuRnl3RCxFQUF5QixjQUN6QkUsRUFBc0IsNEJBK0MxQnpuRSxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDMURqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQXlDQSxTQUFTa3hELEVBQUsvN0IsR0FDWixJQUFJemxCLEVBQVV4TSxVQUFVQyxPQUFTLFFBQXNCRSxJQUFqQkgsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBSWxGLElBSEEsRUFBSTAwRCxFQUFjdkgsU0FBU2w3QixLQUMzQnpsQixFQUFVdE4sT0FBT3NOLElBR2YsT0FBT3doRCxFQUFLLzdCLEVBQUssSUFBTSs3QixFQUFLLzdCLEVBQUssR0FHbkMsR0FBZ0IsTUFBWnpsQixFQUFpQixDQUNuQixJQUFLaTRELEVBQWtCeitELEtBQUtpc0IsR0FDMUIsT0FBTyxFQUdULElBQUlxZ0IsRUFBUXJnQixFQUFJcmxCLE1BQU0sS0FBS3dvQixNQUFLLFNBQVVqb0IsRUFBR0MsR0FDM0MsT0FBT0QsRUFBSUMsS0FFYixPQUFPa2xDLEVBQU0sSUFBTSxJQUdyQixNQUFnQixNQUFaOWxDLEtBQ09rNEQsRUFBa0IxK0QsS0FBS2lzQixJQTVEcEMsSUFFZ0N0ZSxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBK0JuRmd4RCxFQUFvQix1REFDcEJDLEVBQW9CLElBQUl2bkUsT0FBT3NuRSxFQUFtQixXQUFXdG5FLE9BQU9zbkUsR0FDcEVGLEVBQW9CLElBQUlqekMsT0FBTyxJQUFJbjBCLE9BQU91bkUsRUFBbUIsTUFDN0RDLEVBQW9CLHVCQUNwQkgsRUFBb0IsSUFBSWx6QyxPQUFPLEtBQU8sTUFBTW4wQixPQUFPd25FLEVBQW1CLFlBQVl4bkUsT0FBT3duRSxFQUFtQixRQUFVLE1BQU14bkUsT0FBT3duRSxFQUFtQixZQUFZeG5FLE9BQU91bkUsRUFBbUIsTUFBTXZuRSxPQUFPd25FLEVBQW1CLFFBQVUsTUFBTXhuRSxPQUFPd25FLEVBQW1CLGFBQWF4bkUsT0FBT3VuRSxFQUFtQixPQUFPdm5FLE9BQU93bkUsRUFBbUIsY0FBZ0IsTUFBTXhuRSxPQUFPd25FLEVBQW1CLGNBQWN4bkUsT0FBT3duRSxFQUFtQixXQUFXeG5FLE9BQU91bkUsRUFBbUIsT0FBT3ZuRSxPQUFPd25FLEVBQW1CLGNBQWdCLE1BQU14bkUsT0FBT3duRSxFQUFtQixjQUFjeG5FLE9BQU93bkUsRUFBbUIsV0FBV3huRSxPQUFPdW5FLEVBQW1CLE9BQU92bkUsT0FBT3duRSxFQUFtQixjQUFnQixNQUFNeG5FLE9BQU93bkUsRUFBbUIsY0FBY3huRSxPQUFPd25FLEVBQW1CLFdBQVd4bkUsT0FBT3VuRSxFQUFtQixPQUFPdm5FLE9BQU93bkUsRUFBbUIsY0FBZ0IsTUFBTXhuRSxPQUFPd25FLEVBQW1CLGNBQWN4bkUsT0FBT3duRSxFQUFtQixXQUFXeG5FLE9BQU91bkUsRUFBbUIsT0FBT3ZuRSxPQUFPd25FLEVBQW1CLGNBQWdCLFlBQVl4bkUsT0FBT3duRSxFQUFtQixXQUFXeG5FLE9BQU91bkUsRUFBbUIsU0FBU3ZuRSxPQUFPd25FLEVBQW1CLGNBQWdCLDRCQTZCeGxDaG9FLEVBQU9DLFFBQVVBLEVBQVFxd0QsUUFDekJ0d0QsRUFBT0MsUUFBUCxRQUF5QkEsRUFBUXF3RCxzQ0N4RWpDaHZELE9BQU9DLGVBQWV0QixFQUFTLGFBQWMsQ0FDM0MyRCxPQUFPLElBRVQzRCxFQUFBLFFBWUEsU0FBbUJtMUIsR0FDakIsSUFBSXpsQixFQUFVeE0sVUFBVUMsT0FBUyxRQUFzQkUsSUFBakJILFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxJQUNsRixFQUFJMDBELEVBQWN2SCxTQUFTbDdCLEdBQzNCLElBQUlxZ0IsRUFBUXJnQixFQUFJcmxCLE1BQU0sS0FFdEIsR0FBcUIsSUFBakIwbEMsRUFBTXJ5QyxPQUNSLE9BQU8sRUFHVCxJQUFLNmtFLEVBQVk5K0QsS0FBS3NzQyxFQUFNLElBQzFCLE9BQU8sRUFJVCxHQUFJQSxFQUFNLEdBQUdyeUMsT0FBUyxHQUFLcXlDLEVBQU0sR0FBRzZqQixXQUFXLEtBQzdDLE9BQU8sRUFHVCxJQUFJNE8sR0FBWSxFQUFJbmQsRUFBTXVGLFNBQVM3YSxFQUFNLEdBQUk5bEMsR0FFN0MsSUFBS3U0RCxFQUNILE9BQU8sRUFJVCxJQUFJQyxFQUFpQixLQUVyQixPQUFROWxFLE9BQU9zTixJQUNiLElBQUssSUFDSHc0RCxFQWhDUyxHQWlDVCxNQUVGLElBQUssSUFDSEEsRUFBaUJDLEVBQ2pCLE1BRUYsUUFDRUQsR0FBaUIsRUFBSXBkLEVBQU11RixTQUFTN2EsRUFBTSxHQUFJLEtBQU8yeUIsRUF4QzVDLEdBMkNiLE9BQU8zeUIsRUFBTSxJQUFNMHlCLEdBQWtCMXlCLEVBQU0sSUFBTSxHQWxEbkQsSUFBSW9pQixFQUFnQnhOLEVBQXVCLEVBQVEsUUFFL0NVLEVBQVFWLEVBQXVCLEVBQVEsUUFFM0MsU0FBU0EsRUFBdUJ2ekMsR0FBTyxPQUFPQSxHQUFPQSxFQUFJdTVDLFdBQWF2NUMsRUFBTSxDQUFFdzVDLFFBQVN4NUMsR0FFdkYsSUFBSW14RCxFQUFjLFlBRWRHLEVBQVcsSUE2Q2Zwb0UsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQzNEakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFVQSxTQUFTczBELEVBQU9uL0IsR0FDZCxJQUFJemxCLEVBQVV4TSxVQUFVQyxPQUFTLFFBQXNCRSxJQUFqQkgsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBSWxGLElBSEEsRUFBSTAwRCxFQUFjdkgsU0FBU2w3QixLQUMzQnpsQixFQUFVdE4sT0FBT3NOLElBR2YsT0FBTzRrRCxFQUFPbi9CLEVBQUssS0FBT20vQixFQUFPbi9CLEVBQUssSUFHeEMsSUFFSXhyQixFQUZBOHZELEVBQVl0a0MsRUFBSXZzQixRQUFRLFVBQVcsSUFDbkN3L0QsRUFBVyxFQUdmLEdBQWdCLE9BQVoxNEQsRUFBa0IsQ0FDcEIsSUFBSzI0RCxFQUFZbi9ELEtBQUt1d0QsR0FDcEIsT0FBTyxFQUdULElBQUs5dkQsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ2pCeStELElBQWF6K0QsRUFBSSxHQUFLOHZELEVBQVUxN0MsT0FBT3BVLEdBU3pDLEdBTjRCLE1BQXhCOHZELEVBQVUxN0MsT0FBTyxHQUNuQnFxRCxHQUFZLElBRVpBLEdBQVksR0FBSzNPLEVBQVUxN0MsT0FBTyxHQUdoQ3FxRCxFQUFXLElBQU8sRUFDcEIsUUFBUzNPLE9BRU4sR0FBZ0IsT0FBWi9wRCxFQUFrQixDQUMzQixJQUFLNDRELEVBQVlwL0QsS0FBS3V3RCxHQUNwQixPQUFPLEVBR1QsSUFBSzl2RCxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDbEJ5K0QsR0FBWUcsRUFBTzUrRCxFQUFJLEdBQUs4dkQsRUFBVTE3QyxPQUFPcFUsR0FHL0MsR0FBSTh2RCxFQUFVMTdDLE9BQU8sS0FBTyxHQUFLcXFELEVBQVcsSUFBTSxJQUFPLEVBQ3ZELFFBQVMzTyxFQUliLE9BQU8sR0FyRFQsSUFFZ0M1aUQsRUFGNUIrZ0QsR0FFNEIvZ0QsRUFGVyxFQUFRLFNBRUVBLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUVuRnd4RCxFQUFjLDRCQUNkQyxFQUFjLGtCQUNkQyxFQUFTLENBQUMsRUFBRyxHQWtEakJ4b0UsRUFBT0MsUUFBVUEsRUFBUXF3RCxRQUN6QnR3RCxFQUFPQyxRQUFQLFFBQXlCQSxFQUFRcXdELHNDQzlEakNodkQsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFhQSxTQUFnQm0xQixHQUdkLElBRkEsRUFBSXlpQyxFQUFjdkgsU0FBU2w3QixJQUV0QnF6QyxFQUFLdC9ELEtBQUtpc0IsR0FDYixPQUFPLEVBTVQsSUFIQSxJQUFJc3pDLEdBQVMsRUFDVDVPLEVBQU0sRUFFRGx3RCxFQUFJd3JCLEVBQUloeUIsT0FBUyxFQUFHd0csR0FBSyxFQUFHQSxJQUNuQyxHQUFJd3JCLEVBQUl4ckIsSUFBTSxLQUFPd3JCLEVBQUl4ckIsSUFBTSxJQU03QixJQUxBLElBQUloRyxFQUFRd3hCLEVBQUl4ckIsR0FBR3FVLFdBQVcsR0FBSyxHQUsxQnM1QyxFQUFLLEVBQUcwRixFQUFPLENBSmZyNUQsRUFBUSxHQUNSa0QsS0FBSzZoRSxNQUFNL2tFLEVBQVEsS0FHTTJ6RCxFQUFLMEYsRUFBSzc1RCxPQUFRbTBELElBQU0sQ0FDeEQsSUFBSW43QixFQUFRNmdDLEVBQUsxRixHQUlidUMsR0FGQTRPLEVBQ0V0c0MsR0FBUyxFQUNKLEVBQWtCLEdBQWJBLEVBQVEsR0FFTCxFQUFSQSxFQUdGQSxFQUdUc3NDLEdBQVVBLE1BRVAsQ0FDTCxJQUFJRSxFQUFTeHpDLEVBQUl4ckIsR0FBR3FVLFdBQVcsR0FBSyxJQUFJQSxXQUFXLEdBSS9DNjdDLEdBRkE0TyxFQUNFRSxHQUFVLEVBQ0wsRUFBbUIsR0FBZEEsRUFBUyxHQUVMLEVBQVRBLEVBR0ZBLEVBR1RGLEdBQVVBLEVBSWQsSUFBSTExRCxFQUFxQyxHQUE3QmxNLEtBQUs2aEUsT0FBTzdPLEVBQU0sR0FBSyxJQUFXQSxFQUM5QyxPQUFRMWtDLEVBQUlBLEVBQUloeUIsT0FBUyxLQUFPNFAsR0E3RGxDLElBRWdDOEQsRUFGNUIrZ0QsR0FFNEIvZ0QsRUFGVyxFQUFRLFNBRUVBLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUVuRjJ4RCxFQUFPLDZCQTREWHpvRSxFQUFPQyxRQUFVQSxFQUFRcXdELFFBQ3pCdHdELEVBQU9DLFFBQVAsUUFBeUJBLEVBQVFxd0Qsc0NDdEVqQ2h2RCxPQUFPQyxlQUFldEIsRUFBUyxhQUFjLENBQzNDMkQsT0FBTyxJQUVUM0QsRUFBQSxRQVVBLFNBQTBCbTFCLEdBRXhCLE9BREEsRUFBSXlpQyxFQUFjdkgsU0FBU2w3QixHQUNwQnl6QyxFQUFrQ24xRCxJQUFJMGhCLEVBQUltckIsZ0JBWG5EdGdELEVBQVF3NEQsa0JBQWUsRUFFdkIsSUFFZ0MzaEQsRUFGNUIrZ0QsR0FFNEIvZ0QsRUFGVyxFQUFRLFNBRUVBLEVBQUl1NUMsV0FBYXY1QyxFQUFNLENBQUV3NUMsUUFBU3g1QyxHQUduRit4RCxFQUFvQyxJQUFJQyxJQUFJLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE9BTzcvQ3JRLEVBQWVvUSxFQUNuQjVvRSxFQUFRdzRELGFBQWVBLGdDQ25CdkJuM0QsT0FBT0MsZUFBZXRCLEVBQVMsYUFBYyxDQUMzQzJELE9BQU8sSUFFVDNELEVBQUEsUUFTQSxTQUEwQm0xQixHQUV4QixPQURBLEVBQUl5aUMsRUFBY3ZILFNBQVNsN0IsR0FDcEIyekMsRUFBa0NyMUQsSUFBSTBoQixFQUFJbXJCLGdCQVRuRCxJQUVnQ3pwQyxFQUY1QitnRCxHQUU0Qi9nRCxFQUZXLEVBQVEsU0FFRUEsRUFBSXU1QyxXQUFhdjVDLEVBQU0sQ0FBRXc1QyxRQUFTeDVDLEdBR25GaXlELEVBQW9DLElBQUlELElBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1B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LEVBQUcsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBRWpVL1osRUFBSSxDQUFDLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBRWpRazBCLEVBQVl0a0MsRUFBSTRJLE9BRXBCLElBUlUsK0JBUUQ3MEIsS0FBS3V3RCxHQUNa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dkJsRSxTQUFVLzZFLEtBQUtnUixNQUFNK3BFLFdBRXZCLzZFLEtBQUs0K0UsU0FBU0ssU0FBUyxDQUNyQmxFLFNBQVUvNkUsS0FBS2dSLE1BQU0rcEUsV0FFdkIvNkUsS0FBS3U5RixXQUFXdGUsU0FBUyxDQUN2QmxFLFNBQVUvNkUsS0FBS2dSLE1BQU0rcEUsV0FFdkIvNkUsS0FBS2s4RSxVQUFVK0MsU0FBUyxDQUN0QmxFLFNBQVUvNkUsS0FBS2dSLE1BQU0rcEUsU0FDckJtQixVQUFXbDhFLEtBQUtnUixNQUFNa3JFLFVBQ3RCQyxZQUFhbjhFLEtBQUtnUixNQUFNbXJFLGNBRTFCbjhFLEtBQUsreEYsU0FBUzlTLFNBQVMsQ0FDckJsRSxTQUFVLzZFLEtBQUtnUixNQUFNK3BFLFdBRXZCLzZFLEtBQUt3M0YsZUFBZXZZLFNBQVMsQ0FDM0JsRSxTQUFVLzZFLEtBQUtnUixNQUFNK3BFLFdBRXZCLzZFLEtBQUt3N0UsV0FBV3lELFNBQVMsQ0FDdkJsRSxTQUFVLzZFLEtBQUtnUixNQUFNK3BFLFdBRXZCLzZFLEtBQUt3OUYsWUFBWXZlLFNBQVMsQ0FDeEJsRSxTQUFVLzZFLEtBQUtnUixNQUFNK3BFLG1DQUl6QixXQUNFLDBqREFqTGlCcWlCLENBQVluakIsR0M1QmpDcHlFLEdBQUUsV0FDQSxJQUFJdTFGLEdBQUksQ0FBRS9qQixRQUFTTCxFQUFXLFlBTWhDbnhFLEdBQUUsV0FDQUEsRUFBRSwyQkFBMkIrMUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9hcnJheS9mcm9tLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2FycmF5L2lzLWFycmF5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL2JpbmQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2UvY29uY2F0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL2tleXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2Uvc2xpY2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvc3ltYm9sL2Zvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9hcnJheS9mcm9tLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvYXJyYXkvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvaW5zdGFuY2Uvc2xpY2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvc3ltYm9sLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvYWN0dWFsL2FycmF5L2Zyb20uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9hY3R1YWwvYXJyYXkvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9hY3R1YWwvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2FjdHVhbC9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9hY3R1YWwvaW5zdGFuY2Uvc2xpY2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9hY3R1YWwvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2FjdHVhbC9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9hY3R1YWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2FycmF5L2lzLWFycmF5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvYXJyYXkvdmlydHVhbC9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9hcnJheS92aXJ0dWFsL2tleXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9hcnJheS92aXJ0dWFsL3NsaWNlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvZnVuY3Rpb24vdmlydHVhbC9iaW5kLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2luc3RhbmNlL2JpbmQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9pbnN0YW5jZS9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9pbnN0YW5jZS9zbGljZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9wcm9taXNlL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvc3ltYm9sL2Zvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ZlYXR1cmVzL2FycmF5L2Zyb20uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9hcnJheS9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ZlYXR1cmVzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9pbnN0YW5jZS9zbGljZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ZlYXR1cmVzL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FycmF5LXNsaWNlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY2xlYXItZXJyb3Itc3RhY2suanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy1wZWJibGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2VudHJ5LXZpcnR1YWwuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9lcnJvci1zdGFjay1pbnN0YWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZ2V0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbnN0YWxsLWVycm9yLWNhdXNlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtc3ltYm9sLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3F1ZXVlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90cnktdG8tc3RyaW5nLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5wcm9taXNlLmFsbC1zZXR0bGVkLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5wcm9taXNlLmFueS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLmlzLWNvbmNhdC1zcHJlYWRhYmxlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5hc3luYy1kaXNwb3NlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lc25leHQuc3ltYm9sLmRpc3Bvc2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzbmV4dC5zeW1ib2wubWF0Y2hlci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lc25leHQuc3ltYm9sLnBhdHRlcm4tbWF0Y2guanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzbmV4dC5zeW1ib2wucmVwbGFjZS1hbGwuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9hcnJheS9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9hcnJheS92aXJ0dWFsL2tleXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2UvYmluZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2Uva2V5cy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9zbGljZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvc3RhYmxlL3Byb21pc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvc3ltYm9sL2Zvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNhbGxhYmxlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1maWxsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zbGljZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc29ydC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mcmVlemluZy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWVlZTc1NC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNhbGxhYmxlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtdXJsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9xdWV1ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC13ZWJraXQtYnVnLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcGFkLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcHVueWNvZGUtdG8tYXNjaWkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2Zmc2V0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wb3NpdGl2ZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbS1zcGVjaWVzLWFuZC1saXN0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3doaXRlc3BhY2VzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLnNsaWNlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5zdGlja3kuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudGVzdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UtYWxsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmF0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2V0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWFycmF5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LmF0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kZXRlY3QtZmlsZS1lbmNvZGluZy1hbmQtbGFuZ3VhZ2Uvc3JjL2NvbXBvbmVudHMvY2hlY2tCeXRlT3JkZXJNYXJrLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kZXRlY3QtZmlsZS1lbmNvZGluZy1hbmQtbGFuZ3VhZ2Uvc3JjL2NvbXBvbmVudHMvY2hlY2tVVEYuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RldGVjdC1maWxlLWVuY29kaW5nLWFuZC1sYW5ndWFnZS9zcmMvY29tcG9uZW50cy9wcm9jZXNzQ29udGVudC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGV0ZWN0LWZpbGUtZW5jb2RpbmctYW5kLWxhbmd1YWdlL3NyYy9jb21wb25lbnRzL3Byb2Nlc3NpbmctY29udGVudC9jYWxjdWxhdGVDb25maWRlbmNlU2NvcmUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RldGVjdC1maWxlLWVuY29kaW5nLWFuZC1sYW5ndWFnZS9zcmMvY29tcG9uZW50cy9wcm9jZXNzaW5nLWNvbnRlbnQvY291bnRBbGxNYXRjaGVzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kZXRlY3QtZmlsZS1lbmNvZGluZy1hbmQtbGFuZ3VhZ2Uvc3JjL2NvbmZpZy9ieXRlT3JkZXJNYXJrT2JqZWN0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kZXRlY3QtZmlsZS1lbmNvZGluZy1hbmQtbGFuZ3VhZ2Uvc3JjL2NvbmZpZy9sYW5ndWFnZU9iamVjdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGV0ZWN0LWZpbGUtZW5jb2RpbmctYW5kLWxhbmd1YWdlL3NyYy9pbmRleC1icm93c2VyLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9wYXBhcGFyc2UvcGFwYXBhcnNlLm1pbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvYWxwaGEuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvYmxhY2tsaXN0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2NvbnRhaW5zLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2VxdWFscy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNBZnRlci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0FscGhhLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzQWxwaGFudW1lcmljLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzQXNjaWkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNCSUMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNCYXNlMzIuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNCYXNlNTguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNCYXNlNjQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNCZWZvcmUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNCb29sZWFuLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzQnRjQWRkcmVzcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0J5dGVMZW5ndGguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNDcmVkaXRDYXJkLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzQ3VycmVuY3kuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNEYXRhVVJJLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzRGF0ZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0RlY2ltYWwuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNEaXZpc2libGVCeS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0VBTi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0VtYWlsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNFdGhlcmV1bUFkZHJlc3MuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNGUUROLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzRmxvYXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNGdWxsV2lkdGguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNIU0wuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNIYWxmV2lkdGguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNIYXNoLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSGV4Q29sb3IuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNIZXhhZGVjaW1hbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0lCQU4uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNJTUVJLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVAuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNJUFJhbmdlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVNCTi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0lTSU4uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNJU08zMTY2MUFscGhhMi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0lTTzMxNjYxQWxwaGEzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVNPNDIxNy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0lTTzg2MDEuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNJU1JDLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVNTTi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0lkZW50aXR5Q2FyZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0luLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSW50LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSlNPTi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0pXVC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0xhdExvbmcuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNMaWNlbnNlUGxhdGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNMb3dlcmNhc2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNNQUNBZGRyZXNzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzTUQ1LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzTWFnbmV0VVJJLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzTWltZVR5cGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNNb2JpbGVQaG9uZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc01vbmdvSWQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNNdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNOdW1lcmljLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzT2N0YWwuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNQYXNzcG9ydE51bWJlci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1BvcnQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNQb3N0YWxDb2RlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzUkZDMzMzOS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1JnYkNvbG9yLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzU2VtVmVyLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzU2x1Zy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1N0cm9uZ1Bhc3N3b3JkLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzU3Vycm9nYXRlUGFpci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1RheElELmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzVVJMLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzVVVJRC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1VwcGVyY2FzZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1ZBVC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1ZhcmlhYmxlV2lkdGguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNXaGl0ZWxpc3RlZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9sdHJpbS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9tYXRjaGVzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL25vcm1hbGl6ZUVtYWlsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3J0cmltLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3N0cmlwTG93LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3RvQm9vbGVhbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi90b0RhdGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvdG9GbG9hdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi90b0ludC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi90cmltLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3VuZXNjYXBlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3V0aWwvYWxnb3JpdGhtcy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi91dGlsL2Fzc2VydFN0cmluZy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi91dGlsL2luY2x1ZGVzLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3V0aWwvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvdXRpbC9tdWx0aWxpbmVSZWdleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi91dGlsL3RvU3RyaW5nLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3doaXRlbGlzdC5qcyIsIndlYnBhY2s6Ly9vZHEvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb2RxL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL29kcS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vb2RxL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vb2RxL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vb2RxL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL29kcS8uL3NyYy91dGlscy9zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvY29uc3RhbnRzL3Byb2dyZXNzLmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb3JlL29ic2VydmVyLmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb3JlL0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvY29tcG9uZW50cy9TZWxlY3RGaWxlL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb21wb25lbnRzL1N0YXJ0Um93L2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb21wb25lbnRzL0NvbnRyb2xCb3gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL2NvbXBvbmVudHMvRGF0YUNvdW50L2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9MYXp5L2VtcHR5TC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L3RvSXRlci5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L2dvMS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L25vcC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvX2ludGVybmFsL2dvMi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9TdHJpY3QvY3VycnkuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC90YWtlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9TdHJpY3QvaGVhZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L3JlZHVjZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvX2ludGVybmFsL2dvMVN5bmMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC9nby5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvTGF6eS9tYXBMLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9TdHJpY3QvdGFrZUFsbC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L21hcC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvdXRpbHMvbG9jYWxTdG9yYWdlLmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9HcmlkLmpzIiwid2VicGFjazovL29kcS8uL3NyYy91dGlscy9ydWxlc2V0L2NhbGN1bGF0aW9uUnVsZXNldC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvdXRpbHMvcnVsZXNldC9jaGFyZ2VSdWxlc2V0LmpzIiwid2VicGFjazovL29kcS8uL3NyYy91dGlscy9ydWxlc2V0L2NvbnNpc3RlbmN5UnVsZXNldC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvdXRpbHMvcnVsZXNldC9jb3VudFJ1bGVzZXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3NldFVUQ0RheS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc2V0VVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc2V0VVRDSVNPRGF5L2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC9ncm91cEJ5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9MYXp5L2VudHJpZXNMLmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb25zdGFudHMvcnVsZXNldC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL3V0aWxzL3J1bGVzZXQvZGF0ZVJ1bGVzZXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc01hdGNoL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL3NyYy91dGlscy9ydWxlc2V0L2lzRXNzZW50aWFsLmpzIiwid2VicGFjazovL29kcS8uL3NyYy91dGlscy9ydWxlc2V0L251bWJlclJ1bGVzZXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL3V0aWxzL3J1bGVzZXQvcGVyY2VudFJ1bGVzZXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL3V0aWxzL3J1bGVzZXQvd2hldGhlclJ1bGVzZXQuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL3V0aWxzL2dyaWQtZm9ybWF0dGVyLmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb21wb25lbnRzL0RpYWdSZXN1bHRHcmlkL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb21wb25lbnRzL0RhdGFHcmlkL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9MYXp5L21hcEVudHJpZXNMLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9MYXp5L2ZpbHRlckwuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC9jdXJyeTIuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC9ub3QuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L2lmRWxzZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L2N1cnJ5My5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L3doZW4uanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC9laXRoZXIuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC9pc0FycmF5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9TdHJpY3QvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9TdHJpY3QvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC9pc1N0cmluZy5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvX2ludGVybmFsL2Nsb25lZEl0ZXJhYmxlU3ltYm9sLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9faW50ZXJuYWwvZW50cmllc0RlZXBMLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9TdHJpY3QvY29uZC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvX2ludGVybmFsL29iamVjdERlZXAuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vbm9kZV9tb2R1bGVzL2Z4anMvbWpzL1N0cmljdC9jbG9uZS5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvTGF6eS92YWx1ZXNMLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9TdHJpY3QvdmFsdWVzLmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb21wb25lbnRzL1JlcGFpckdyaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL2NvbXBvbmVudHMvRGlzY3JpcHRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL01vZGFsLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9TdHJpY3QvbGFzdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvTGF6eS9mbGF0TC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvY29uc3RhbnRzL2RpYWd0eXBlLmpzIiwid2VicGFjazovL29kcS8uL25vZGVfbW9kdWxlcy9meGpzL21qcy9TdHJpY3QvZmxhdC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9ub2RlX21vZHVsZXMvZnhqcy9tanMvU3RyaWN0L2VhY2guanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL2NvbXBvbmVudHMvbW9kYWwvRGF0ZU1vZGFsL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL3NyYy9jb21wb25lbnRzL21vZGFsL1doZXRoZXJNb2RhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvY29tcG9uZW50cy9tb2RhbC9QYXR0ZXJuTW9kYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL2NvbXBvbmVudHMvbW9kYWwvVGltZU9yZGVyTW9kYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL2NvbXBvbmVudHMvbW9kYWwvTG9naWNSZWxhdGlvbnNoaXBNb2RhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvY29tcG9uZW50cy9tb2RhbC9Gb3JtdWxhTW9kYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL2NvbXBvbmVudHMvbW9kYWwvU3VtTW9kYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL2NvbXBvbmVudHMvbW9kYWwvU2V0dGluZ01vZGFsL2luZGV4LmpzIiwid2VicGFjazovL29kcS8uL3NyYy9hc3NldHMvaW1hZ2VzL255YW4tY2F0LmdpZiIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvY29tcG9uZW50cy9Mb2FkaW5nU3Bpbm5lci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvY29uc3RhbnRzL2ZpbGUuanMiLCJ3ZWJwYWNrOi8vb2RxLy4vc3JjL3V0aWxzL2Nzdi5qcyIsIndlYnBhY2s6Ly9vZHEvLi9zcmMvQXBwLmpzIiwid2VicGFjazovL29kcS8uL3NyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvYXJyYXkvZnJvbVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvc3RhYmxlL2FycmF5L2lzLWFycmF5XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2UvYmluZFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvc3RhYmxlL2luc3RhbmNlL2NvbmNhdFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvc3RhYmxlL2luc3RhbmNlL2tleXNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9zbGljZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvc3RhYmxlL3Byb21pc2VcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9zeW1ib2xcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9zeW1ib2wvZm9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvc3ltYm9sL2l0ZXJhdG9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9mZWF0dXJlcy9hcnJheS9mcm9tXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9mZWF0dXJlcy9hcnJheS9pcy1hcnJheVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvZmVhdHVyZXMvZ2V0LWl0ZXJhdG9yLW1ldGhvZFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvZmVhdHVyZXMvZ2V0LWl0ZXJhdG9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9mZWF0dXJlcy9pbnN0YW5jZS9zbGljZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvZmVhdHVyZXMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvZmVhdHVyZXMvc3ltYm9sXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9mZWF0dXJlcy9zeW1ib2wvaXRlcmF0b3JcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9zdGFibGUvYXJyYXkvZnJvbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9zdGFibGUvYXJyYXkvaXMtYXJyYXknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vc3RhYmxlL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vc3RhYmxlL2dldC1pdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9zdGFibGUvaW5zdGFuY2Uvc2xpY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vc3RhYmxlL29iamVjdC9kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vc3RhYmxlL3N5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9zdGFibGUvc3ltYm9sL2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuZnJvbScpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguQXJyYXkuZnJvbTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXknKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoLkFycmF5LmlzQXJyYXk7XG4iLCJyZXF1aXJlKCcuLi8uLi8uLi9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdCcpO1xudmFyIGVudHJ5VmlydHVhbCA9IHJlcXVpcmUoJy4uLy4uLy4uL2ludGVybmFscy9lbnRyeS12aXJ0dWFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW50cnlWaXJ0dWFsKCdBcnJheScpLmNvbmNhdDtcbiIsInJlcXVpcmUoJy4uLy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uLy4uL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZycpO1xudmFyIGVudHJ5VmlydHVhbCA9IHJlcXVpcmUoJy4uLy4uLy4uL2ludGVybmFscy9lbnRyeS12aXJ0dWFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW50cnlWaXJ0dWFsKCdBcnJheScpLmtleXM7XG4iLCJyZXF1aXJlKCcuLi8uLi8uLi9tb2R1bGVzL2VzLmFycmF5LnNsaWNlJyk7XG52YXIgZW50cnlWaXJ0dWFsID0gcmVxdWlyZSgnLi4vLi4vLi4vaW50ZXJuYWxzL2VudHJ5LXZpcnR1YWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbnRyeVZpcnR1YWwoJ0FycmF5Jykuc2xpY2U7XG4iLCJyZXF1aXJlKCcuLi8uLi8uLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQnKTtcbnZhciBlbnRyeVZpcnR1YWwgPSByZXF1aXJlKCcuLi8uLi8uLi9pbnRlcm5hbHMvZW50cnktdmlydHVhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVudHJ5VmlydHVhbCgnRnVuY3Rpb24nKS5iaW5kO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JNZXRob2Q7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEl0ZXJhdG9yO1xuIiwidmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIG1ldGhvZCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9uL3ZpcnR1YWwvYmluZCcpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBvd24gPSBpdC5iaW5kO1xuICByZXR1cm4gaXQgPT09IEZ1bmN0aW9uUHJvdG90eXBlIHx8IChpc1Byb3RvdHlwZU9mKEZ1bmN0aW9uUHJvdG90eXBlLCBpdCkgJiYgb3duID09PSBGdW5jdGlvblByb3RvdHlwZS5iaW5kKSA/IG1ldGhvZCA6IG93bjtcbn07XG4iLCJ2YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgbWV0aG9kID0gcmVxdWlyZSgnLi4vYXJyYXkvdmlydHVhbC9jb25jYXQnKTtcblxudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgb3duID0gaXQuY29uY2F0O1xuICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlIHx8IChpc1Byb3RvdHlwZU9mKEFycmF5UHJvdG90eXBlLCBpdCkgJiYgb3duID09PSBBcnJheVByb3RvdHlwZS5jb25jYXQpID8gbWV0aG9kIDogb3duO1xufTtcbiIsInZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBtZXRob2QgPSByZXF1aXJlKCcuLi9hcnJheS92aXJ0dWFsL3NsaWNlJyk7XG5cbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIG93biA9IGl0LnNsaWNlO1xuICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlIHx8IChpc1Byb3RvdHlwZU9mKEFycmF5UHJvdG90eXBlLCBpdCkgJiYgb3duID09PSBBcnJheVByb3RvdHlwZS5zbGljZSkgPyBtZXRob2QgOiBvd247XG59O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9wYXRoJyk7XG5cbnZhciBPYmplY3QgPSBwYXRoLk9iamVjdDtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59O1xuXG5pZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5LnNoYW0pIGRlZmluZVByb3BlcnR5LnNoYW0gPSB0cnVlO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnByb21pc2UuYWxsLXNldHRsZWQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMucHJvbWlzZS5hbnknKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguUHJvbWlzZTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9wYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0aC5TeW1ib2xbJ2ZvciddO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5hcnJheS5jb25jYXQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BsaXQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wudW5zY29wYWJsZXMnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLm1hdGgudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5yZWZsZWN0LnRvLXN0cmluZy10YWcnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoLlN5bWJvbDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yJyk7XG52YXIgV3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKCdpdGVyYXRvcicpO1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2FjdHVhbC9hcnJheS9mcm9tJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2FjdHVhbC9hcnJheS9pcy1hcnJheScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi9hY3R1YWwvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi9hY3R1YWwvZ2V0LWl0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2FjdHVhbC9pbnN0YW5jZS9zbGljZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9hY3R1YWwvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9hY3R1YWwvc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuYXN5bmMtZGlzcG9zZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLmRpc3Bvc2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5tYXRjaGVyJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLnBhdHRlcm4tbWF0Y2gnKTtcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wucmVwbGFjZS1hbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vYWN0dWFsL3N5bWJvbC9pdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ29uc3RydWN0b3IoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCcgfHwgaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUHJvdG90eXBlKSB7XG4gIGlmIChpc1Byb3RvdHlwZU9mKFByb3RvdHlwZSwgaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcihTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIElTX0NPTlNUUlVDVE9SID0gaXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICEodGhpcyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMoKSA6IFtdO1xuICAgIGZvciAoOyEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICByZXN1bHQgPSBJU19DT05TVFJVQ1RPUiA/IG5ldyB0aGlzKGxlbmd0aCkgOiBBcnJheShsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgdmFyIHJlc3VsdCA9IEFycmF5KG1heChmaW4gLSBrLCAwKSk7XG4gIGZvciAodmFyIG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKFtdLnNsaWNlKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcblxuLy8gYSBwYXJ0IG9mIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAoaXNDb25zdHJ1Y3RvcihDKSAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsInZhciBhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChhcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbEFycmF5KSkobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKHt9LnRvU3RyaW5nKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHN0cmluZ1NsaWNlKHRvU3RyaW5nKGl0KSwgOCwgLTEpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcblxudmFyIFRFU1QgPSAoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gU3RyaW5nKEVycm9yKGFyZykuc3RhY2spOyB9KSgnenhjYXNkJyk7XG52YXIgVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZID0gL1xcblxccyphdCBbXjpdKjpbXlxcbl0qLztcbnZhciBJU19WOF9PUl9DSEFLUkFfU1RBQ0sgPSBWOF9PUl9DSEFLUkFfU1RBQ0tfRU5UUlkudGVzdChURVNUKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RhY2ssIGRyb3BFbnRyaWVzKSB7XG4gIGlmIChJU19WOF9PUl9DSEFLUkFfU1RBQ0sgJiYgdHlwZW9mIHN0YWNrID09ICdzdHJpbmcnKSB7XG4gICAgd2hpbGUgKGRyb3BFbnRyaWVzLS0pIHN0YWNrID0gcmVwbGFjZShzdGFjaywgVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZLCAnJyk7XG4gIH0gcmV0dXJuIHN0YWNrO1xufTtcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UsIGV4Y2VwdGlvbnMpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpICYmICEoZXhjZXB0aW9ucyAmJiBoYXNPd24oZXhjZXB0aW9ucywga2V5KSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0LCBFTlVNRVJBQkxFX05FWFQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigrIUVOVU1FUkFCTEVfTkVYVCwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEZ1bmN0aW9uTmFtZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcbnZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXG4gIHZhciBnZXRJdGVyYXRpb25NZXRob2QgPSBmdW5jdGlvbiAoS0lORCkge1xuICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjtcbiAgICBpZiAoIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTsgfTtcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXVxuICAgIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ11cbiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuICB2YXIgYW55TmF0aXZlSXRlcmF0b3IgPSBOQU1FID09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcblxuICAvLyBmaXggbmF0aXZlXG4gIGlmIChhbnlOYXRpdmVJdGVyYXRvcikge1xuICAgIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgICBpZiAoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzQ2FsbGFibGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHtcbiAgICAgICAgICByZWRlZmluZShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheS5wcm90b3R5cGUueyB2YWx1ZXMsIEBAaXRlcmF0b3IgfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIGlmICghSVNfUFVSRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbmFtZScsIFZBTFVFUyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBjYWxsKG5hdGl2ZUl0ZXJhdG9yLCB0aGlzKTsgfTtcbiAgICB9XG4gIH1cblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IsIHsgbmFtZTogREVGQVVMVCB9KTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXNPd24oU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvaXBhZHxpcGhvbmV8aXBvZC9pLnRlc3QodXNlckFnZW50KSAmJiBnbG9iYWwuUGViYmxlICE9PSB1bmRlZmluZWQ7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyg/OmlwYWR8aXBob25lfGlwb2QpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzb2YoZ2xvYmFsLnByb2Nlc3MpID09ICdwcm9jZXNzJztcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvd2ViMHMoPyEuKmNocm9tZSkvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERlbm8gPSBnbG9iYWwuRGVubztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucyB8fCBEZW5vICYmIERlbm8udmVyc2lvbjtcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICAvLyBpbiBvbGQgQ2hyb21lLCB2ZXJzaW9ucyBvZiBWOCBpc24ndCBWOCA9IENocm9tZSAvIDEwXG4gIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG4gIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG59XG5cbi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuLy8gc28gY2hlY2sgYHVzZXJBZ2VudGAgZXZlbiBpZiBgLnY4YCBleGlzdHMsIGJ1dCAwXG5pZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbjtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1IpIHtcbiAgcmV0dXJuIHBhdGhbQ09OU1RSVUNUT1IgKyAnUHJvdG90eXBlJ107XG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgZXJyb3IgPSBFcnJvcignYScpO1xuICBpZiAoISgnc3RhY2snIGluIGVycm9yKSkgcmV0dXJuIHRydWU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsICdzdGFjaycsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCA3KSk7XG4gIHJldHVybiBlcnJvci5zdGFjayAhPT0gNztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxudmFyIHdyYXBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChOYXRpdmVDb25zdHJ1Y3Rvcikge1xuICB2YXIgV3JhcHBlciA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBXcmFwcGVyKSB7XG4gICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihhKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGEsIGIpO1xuICAgICAgfSByZXR1cm4gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGEsIGIsIGMpO1xuICAgIH0gcmV0dXJuIGFwcGx5KE5hdGl2ZUNvbnN0cnVjdG9yLCB0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICBXcmFwcGVyLnByb3RvdHlwZSA9IE5hdGl2ZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgcmV0dXJuIFdyYXBwZXI7XG59O1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuICBvcHRpb25zLm5hbWUgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgUFJPVE8gPSBvcHRpb25zLnByb3RvO1xuXG4gIHZhciBuYXRpdmVTb3VyY2UgPSBHTE9CQUwgPyBnbG9iYWwgOiBTVEFUSUMgPyBnbG9iYWxbVEFSR0VUXSA6IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuXG4gIHZhciB0YXJnZXQgPSBHTE9CQUwgPyBwYXRoIDogcGF0aFtUQVJHRVRdIHx8IGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShwYXRoLCBUQVJHRVQsIHt9KVtUQVJHRVRdO1xuICB2YXIgdGFyZ2V0UHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcblxuICB2YXIgRk9SQ0VELCBVU0VfTkFUSVZFLCBWSVJUVUFMX1BST1RPVFlQRTtcbiAgdmFyIGtleSwgc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5LCBuYXRpdmVQcm9wZXJ0eSwgcmVzdWx0UHJvcGVydHksIGRlc2NyaXB0b3I7XG5cbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBVU0VfTkFUSVZFID0gIUZPUkNFRCAmJiBuYXRpdmVTb3VyY2UgJiYgaGFzT3duKG5hdGl2ZVNvdXJjZSwga2V5KTtcblxuICAgIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG5cbiAgICBpZiAoVVNFX05BVElWRSkgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmF0aXZlU291cmNlLCBrZXkpO1xuICAgICAgbmF0aXZlUHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIG5hdGl2ZVByb3BlcnR5ID0gbmF0aXZlU291cmNlW2tleV07XG5cbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIGltcGxlbWVudGF0aW9uXG4gICAgc291cmNlUHJvcGVydHkgPSAoVVNFX05BVElWRSAmJiBuYXRpdmVQcm9wZXJ0eSkgPyBuYXRpdmVQcm9wZXJ0eSA6IHNvdXJjZVtrZXldO1xuXG4gICAgaWYgKFVTRV9OQVRJVkUgJiYgdHlwZW9mIHRhcmdldFByb3BlcnR5ID09IHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSkgY29udGludWU7XG5cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGlmIChvcHRpb25zLmJpbmQgJiYgVVNFX05BVElWRSkgcmVzdWx0UHJvcGVydHkgPSBiaW5kKHNvdXJjZVByb3BlcnR5LCBnbG9iYWwpO1xuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ3MgaW4gdGhpcyB2ZXJzaW9uXG4gICAgZWxzZSBpZiAob3B0aW9ucy53cmFwICYmIFVTRV9OQVRJVkUpIHJlc3VsdFByb3BlcnR5ID0gd3JhcENvbnN0cnVjdG9yKHNvdXJjZVByb3BlcnR5KTtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICBlbHNlIGlmIChQUk9UTyAmJiBpc0NhbGxhYmxlKHNvdXJjZVByb3BlcnR5KSkgcmVzdWx0UHJvcGVydHkgPSB1bmN1cnJ5VGhpcyhzb3VyY2VQcm9wZXJ0eSk7XG4gICAgLy8gZGVmYXVsdCBjYXNlXG4gICAgZWxzZSByZXN1bHRQcm9wZXJ0eSA9IHNvdXJjZVByb3BlcnR5O1xuXG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHNvdXJjZVByb3BlcnR5ICYmIHNvdXJjZVByb3BlcnR5LnNoYW0pIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHJlc3VsdFByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cblxuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgcmVzdWx0UHJvcGVydHkpO1xuXG4gICAgaWYgKFBST1RPKSB7XG4gICAgICBWSVJUVUFMX1BST1RPVFlQRSA9IFRBUkdFVCArICdQcm90b3R5cGUnO1xuICAgICAgaWYgKCFoYXNPd24ocGF0aCwgVklSVFVBTF9QUk9UT1RZUEUpKSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShwYXRoLCBWSVJUVUFMX1BST1RPVFlQRSwge30pO1xuICAgICAgfVxuICAgICAgLy8gZXhwb3J0IHZpcnR1YWwgcHJvdG90eXBlIG1ldGhvZHNcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShwYXRoW1ZJUlRVQUxfUFJPVE9UWVBFXSwga2V5LCBzb3VyY2VQcm9wZXJ0eSk7XG4gICAgICAvLyBleHBvcnQgcmVhbCBwcm90b3R5cGUgbWV0aG9kc1xuICAgICAgaWYgKG9wdGlvbnMucmVhbCAmJiB0YXJnZXRQcm90b3R5cGUgJiYgIXRhcmdldFByb3RvdHlwZVtrZXldKSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0YXJnZXRQcm90b3R5cGUsIGtleSwgc291cmNlUHJvcGVydHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGFwcGx5ID0gRnVuY3Rpb25Qcm90b3R5cGUuYXBwbHk7XG52YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWZsZWN0IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFJlZmxlY3QgPT0gJ29iamVjdCcgJiYgUmVmbGVjdC5hcHBseSB8fCAoTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoYXBwbHkpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShhcHBseSwgYXJndW1lbnRzKTtcbn0pO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGJpbmQgPSB1bmN1cnJ5VGhpcyh1bmN1cnJ5VGhpcy5iaW5kKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCkge1xuICBhQ2FsbGFibGUoZm4pO1xuICByZXR1cm4gdGhhdCA9PT0gdW5kZWZpbmVkID8gZm4gOiBOQVRJVkVfQklORCA/IGJpbmQoZm4sIHRoYXQpIDogZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pLmJpbmQoKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiB0eXBlb2YgdGVzdCAhPSAnZnVuY3Rpb24nIHx8IHRlc3QuaGFzT3duUHJvcGVydHkoJ3Byb3RvdHlwZScpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIEZ1bmN0aW9uID0gZ2xvYmFsLkZ1bmN0aW9uO1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEMsIGFyZ3NMZW5ndGgsIGFyZ3MpIHtcbiAgaWYgKCFoYXNPd24oZmFjdG9yaWVzLCBhcmdzTGVuZ3RoKSkge1xuICAgIGZvciAodmFyIGxpc3QgPSBbXSwgaSA9IDA7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIGxpc3RbaV0gPSAnYVsnICsgaSArICddJztcbiAgICBmYWN0b3JpZXNbYXJnc0xlbmd0aF0gPSBGdW5jdGlvbignQyxhJywgJ3JldHVybiBuZXcgQygnICsgam9pbihsaXN0LCAnLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2FyZ3NMZW5ndGhdKEMsIGFyZ3MpO1xufTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBGdW5jdGlvbi5iaW5kIDogZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgRiA9IGFDYWxsYWJsZSh0aGlzKTtcbiAgdmFyIFByb3RvdHlwZSA9IEYucHJvdG90eXBlO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gY29uY2F0KHBhcnRBcmdzLCBhcnJheVNsaWNlKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmRGdW5jdGlvbiA/IGNvbnN0cnVjdChGLCBhcmdzLmxlbmd0aCwgYXJncykgOiBGLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoUHJvdG90eXBlKSkgYm91bmRGdW5jdGlvbi5wcm90b3R5cGUgPSBQcm90b3R5cGU7XG4gIHJldHVybiBib3VuZEZ1bmN0aW9uO1xufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGNhbGwpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShjYWxsLCBhcmd1bWVudHMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBiaW5kID0gRnVuY3Rpb25Qcm90b3R5cGUuYmluZDtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpcyA9IE5BVElWRV9CSU5EICYmIGJpbmQuYmluZChjYWxsLCBjYWxsKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgdW5jdXJyeVRoaXMoZm4pO1xufSA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHZhcmlhYmxlKSA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBnZXRNZXRob2QoaXQsIElURVJBVE9SKVxuICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCwgdXNpbmdJdGVyYXRvcikge1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGdldEl0ZXJhdG9yTWV0aG9kKGFyZ3VtZW50KSA6IHVzaW5nSXRlcmF0b3I7XG4gIGlmIChhQ2FsbGFibGUoaXRlcmF0b3JNZXRob2QpKSByZXR1cm4gYW5PYmplY3QoY2FsbChpdGVyYXRvck1ldGhvZCwgYXJndW1lbnQpKTtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbi8vIGBHZXRNZXRob2RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgdmFyIGZ1bmMgPSBWW1BdO1xuICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHt9Lmhhc093blByb3BlcnR5KTtcblxuLy8gYEhhc093blByb3BlcnR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaGFzb3ducHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rcyB0byBJRTggZm9yIGl0cyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgT2JqZWN0ID0gZ2xvYmFsLk9iamVjdDtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvbi50b1N0cmluZyk7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgY29yZS1qc0AzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICghaXNDYWxsYWJsZShzdG9yZS5pbnNwZWN0U291cmNlKSkge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG4vLyBgSW5zdGFsbEVycm9yQ2F1c2VgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL3Byb3Bvc2FsLWVycm9yLWNhdXNlLyNzZWMtZXJyb3JvYmplY3RzLWluc3RhbGwtZXJyb3ItY2F1c2Vcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIG9wdGlvbnMpIHtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjYXVzZScgaW4gb3B0aW9ucykge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCAnY2F1c2UnLCBvcHRpb25zLmNhdXNlKTtcbiAgfVxufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHVuY3VycnlUaGlzKHN0b3JlLmdldCk7XG4gIHZhciB3bWhhcyA9IHVuY3VycnlUaGlzKHN0b3JlLmhhcyk7XG4gIHZhciB3bXNldCA9IHVuY3VycnlUaGlzKHN0b3JlLnNldCk7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAod21oYXMoc3RvcmUsIGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChoYXNPd24oaXQsIFNUQVRFKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBjbGFzc29mKGFyZ3VtZW50KSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgZW1wdHkgPSBbXTtcbnZhciBjb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIGNvbnN0cnVjdG9yUmVnRXhwID0gL15cXHMqKD86Y2xhc3N8ZnVuY3Rpb24pXFxiLztcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoY29uc3RydWN0b3JSZWdFeHAuZXhlYyk7XG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9ICFjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKG5vb3ApO1xuXG52YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0cnVjdChub29wLCBlbXB0eSwgYXJndW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzogcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gd2UgY2FuJ3QgY2hlY2sgLnByb3RvdHlwZSBzaW5jZSBjb25zdHJ1Y3RvcnMgcHJvZHVjZWQgYnkgLmJpbmQgaGF2ZW4ndCBpdFxuICAgIC8vIGBGdW5jdGlvbiN0b1N0cmluZ2AgdGhyb3dzIG9uIHNvbWUgYnVpbHQtaXQgZnVuY3Rpb24gaW4gc29tZSBsZWdhY3kgZW5naW5lc1xuICAgIC8vIChmb3IgZXhhbXBsZSwgYERPTVF1YWRgIGFuZCBzaW1pbGFyIGluIEZGNDEtKVxuICAgIHJldHVybiBJTkNPUlJFQ1RfVE9fU1RSSU5HIHx8ICEhZXhlYyhjb25zdHJ1Y3RvclJlZ0V4cCwgaW5zcGVjdFNvdXJjZShhcmd1bWVudCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5pc0NvbnN0cnVjdG9yTGVnYWN5LnNoYW0gPSB0cnVlO1xuXG4vLyBgSXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gIWNvbnN0cnVjdCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsZWQ7XG4gIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihPYmplY3QpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlOyB9KVxuICAgIHx8IGNhbGxlZDtcbn0pID8gaXNDb25zdHJ1Y3RvckxlZ2FjeSA6IGlzQ29uc3RydWN0b3JNb2Rlcm47XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsIE9iamVjdChpdCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxudmFyIFJlc3VsdFByb3RvdHlwZSA9IFJlc3VsdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCB1bmJvdW5kRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgdmFyIHRoYXQgPSBvcHRpb25zICYmIG9wdGlvbnMudGhhdDtcbiAgdmFyIEFTX0VOVFJJRVMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuQVNfRU5UUklFUyk7XG4gIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gIHZhciBJTlRFUlJVUFRFRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JTlRFUlJVUFRFRCk7XG4gIHZhciBmbiA9IGJpbmQodW5ib3VuZEZ1bmN0aW9uLCB0aGF0KTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICdub3JtYWwnLCBjb25kaXRpb24pO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7XG4gIH07XG5cbiAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChBU19FTlRSSUVTKSB7XG4gICAgICBhbk9iamVjdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICB9IHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlLCBzdG9wKSA6IGZuKHZhbHVlKTtcbiAgfTtcblxuICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAoIWl0ZXJGbikgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGl0ZXJhYmxlKSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShpdGVyYWJsZSk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUsIGl0ZXJGbik7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxGbihzdGVwLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgaXNQcm90b3R5cGVPZihSZXN1bHRQcm90b3R5cGUsIHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcbiIsInZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwga2luZCwgdmFsdWUpIHtcbiAgdmFyIGlubmVyUmVzdWx0LCBpbm5lckVycm9yO1xuICBhbk9iamVjdChpdGVyYXRvcik7XG4gIHRyeSB7XG4gICAgaW5uZXJSZXN1bHQgPSBnZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICBpZiAoIWlubmVyUmVzdWx0KSB7XG4gICAgICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlubmVyUmVzdWx0ID0gY2FsbChpbm5lclJlc3VsdCwgaXRlcmF0b3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlubmVyRXJyb3IgPSB0cnVlO1xuICAgIGlubmVyUmVzdWx0ID0gZXJyb3I7XG4gIH1cbiAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICBpZiAoaW5uZXJFcnJvcikgdGhyb3cgaW5uZXJSZXN1bHQ7XG4gIGFuT2JqZWN0KGlubmVyUmVzdWx0KTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuZWxzZSBpZiAoSVNfUFVSRSkgSXRlcmF0b3JQcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1AQGl0ZXJhdG9yXG5pZiAoIWlzQ2FsbGFibGUoSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICByZWRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgTGVuZ3RoT2ZBcnJheUxpa2VgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0b0xlbmd0aChvYmoubGVuZ3RoKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfSU9TX1BFQkJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZScpO1xudmFyIElTX1dFQk9TX1dFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0Jyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICAvLyBhbHNvIGV4Y2VwdCBXZWJPUyBXZWJraXQgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg5OFxuICBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmICghSVNfSU9TX1BFQkJMRSAmJiBQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIC8vIHdvcmthcm91bmQgb2YgV2ViS2l0IH4gaU9TIFNhZmFyaSAxMC4xIGJ1Z1xuICAgIHByb21pc2UuY29uc3RydWN0b3IgPSBQcm9taXNlO1xuICAgIHRoZW4gPSBiaW5kKHByb21pc2UudGhlbiwgcHJvbWlzZSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gTm9kZS5qcyB3aXRob3V0IHByb21pc2VzXG4gIH0gZWxzZSBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuYmluZChnbG9iYWwpXG4gICAgbWFjcm90YXNrID0gYmluZChtYWNyb3Rhc2ssIGdsb2JhbCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbWFjcm90YXNrKGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzXG4gIHJldHVybiAhU3RyaW5nKHN5bWJvbCkgfHwgIShPYmplY3Qoc3ltYm9sKSBpbnN0YW5jZW9mIFN5bWJvbCkgfHxcbiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlc1xuICAgICFTeW1ib2wuc2hhbSAmJiBWOF9WRVJTSU9OICYmIFY4X1ZFUlNJT04gPCA0MTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQ2FsbGFibGUoV2Vha01hcCkgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhQ2FsbGFibGUocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUNhbGxhYmxlKHJlamVjdCk7XG59O1xuXG4vLyBgTmV3UHJvbWlzZUNhcGFiaWxpdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1uZXdwcm9taXNlY2FwYWJpbGl0eVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCwgJGRlZmF1bHQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID09PSB1bmRlZmluZWQgPyBhcmd1bWVudHMubGVuZ3RoIDwgMiA/ICcnIDogJGRlZmF1bHQgOiB0b1N0cmluZyhhcmd1bWVudCk7XG59O1xuIiwiLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgLS0gb2xkIElFLCBXU0ggKi9cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnXG4gICAgPyBkb2N1bWVudC5kb21haW4gJiYgYWN0aXZlWERvY3VtZW50XG4gICAgICA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSAvLyBvbGQgSUVcbiAgICAgIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKClcbiAgICA6IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KTsgLy8gV1NIXG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllc01vZHVsZS5mKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHtcbiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudFtXUklUQUJMRV0pIHtcbiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgQXR0cmlidXRlcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBDT05GSUdVUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFXSA6IGN1cnJlbnRbQ09ORklHVVJBQkxFXSxcbiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbn0gOiAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXNPd24oTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIWNhbGwocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiwgTywgUCksIE9bUF0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmUgKi9cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBhcnJheVNsaWNlKHdpbmRvd05hbWVzKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIGNsYXNzb2YoaXQpID09ICdXaW5kb3cnXG4gICAgPyBnZXRXaW5kb3dOYW1lcyhpdClcbiAgICA6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzT3duKG9iamVjdCwgSUVfUFJPVE8pKSByZXR1cm4gb2JqZWN0W0lFX1BST1RPXTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBpZiAoaXNDYWxsYWJsZShjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyh7fS5pc1Byb3RvdHlwZU9mKTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpICYmIGhhc093bihPLCBrZXkpICYmIHB1c2gocmVzdWx0LCBrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzT3duKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHB1c2gocmVzdWx0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi9cbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgIHNldHRlciA9IHVuY3VycnlUaGlzKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCk7XG4gICAgc2V0dGVyKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChwcmVmID09PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChrZXlzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmhlYWQgPSBudWxsO1xuICB0aGlzLnRhaWwgPSBudWxsO1xufTtcblxuUXVldWUucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGVudHJ5ID0geyBpdGVtOiBpdGVtLCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMuaGVhZCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtcbiAgICBlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmhlYWQ7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICB0aGlzLmhlYWQgPSBlbnRyeS5uZXh0O1xuICAgICAgaWYgKHRoaXMudGFpbCA9PT0gZW50cnkpIHRoaXMudGFpbCA9IG51bGw7XG4gICAgICByZXR1cm4gZW50cnkuaXRlbTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudW5zYWZlICYmIHRhcmdldFtrZXldKSB0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIGVsc2UgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVudW1lcmFibGUpIHRhcmdldFtrZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwga2V5LCB2YWx1ZSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQywgU0VUX01FVEhPRCkge1xuICBpZiAoaXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGU7XG4gICAgaWYgKCFoYXNPd24odGFyZ2V0LCBUT19TVFJJTkdfVEFHKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgICB9XG4gICAgaWYgKFNFVF9NRVRIT0QgJiYgIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwgJ3RvU3RyaW5nJywgdG9TdHJpbmcpO1xuICAgIH1cbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMjAuMycsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDIyIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMjAuMy9MSUNFTlNFJyxcbiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUNvbnN0cnVjdG9yKFMpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyT3JJbmZpbml0eShwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBjaGFyQXQoUywgcG9zaXRpb24pXG4gICAgICAgICAgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBzdHJpbmdTbGljZShTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKVxuICAgICAgICAgIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIEZ1bmN0aW9uID0gZ2xvYmFsLkZ1bmN0aW9uO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBsb2NhdGlvbiwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnRyeSB7XG4gIC8vIERlbm8gdGhyb3dzIGEgUmVmZXJlbmNlRXJyb3Igb24gYGxvY2F0aW9uYCBhY2Nlc3Mgd2l0aG91dCBgLS1sb2NhdGlvbmAgZmxhZ1xuICBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxudmFyIHJ1biA9IGZ1bmN0aW9uIChpZCkge1xuICBpZiAoaGFzT3duKHF1ZXVlLCBpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgcnVubmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcnVuKGlkKTtcbiAgfTtcbn07XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgcG9zdCA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKFN0cmluZyhpZCksIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMsIDEpO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhcHBseShpc0NhbGxhYmxlKGZuKSA/IGZuIDogRnVuY3Rpb24oZm4pLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIGlzQ2FsbGFibGUoZ2xvYmFsLnBvc3RNZXNzYWdlKSAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgIGxvY2F0aW9uICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKHBvc3QpXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbnVtYmVyID0gK2FyZ3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIHNhZmVcbiAgcmV0dXJuIG51bWJlciAhPT0gbnVtYmVyIHx8IG51bWJlciA9PT0gMCA/IDAgOiAobnVtYmVyID4gMCA/IGZsb29yIDogY2VpbCkobnVtYmVyKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcbiIsInZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoY2xhc3NvZihhcmd1bWVudCkgPT09ICdTeW1ib2wnKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnT2JqZWN0JztcbiAgfVxufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArIHRvU3RyaW5nKCsraWQgKyBwb3N0Zml4LCAzNik7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDM2LVxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzMzNFxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdwcm90b3R5cGUnLCB7XG4gICAgdmFsdWU6IDQyLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KS5wcm90b3R5cGUgIT0gNDI7XG59KTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBzeW1ib2xGb3IgPSBTeW1ib2wgJiYgU3ltYm9sWydmb3InXTtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXNPd24oV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSB8fCAhKE5BVElWRV9TWU1CT0wgfHwgdHlwZW9mIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9PSAnc3RyaW5nJykpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAnU3ltYm9sLicgKyBuYW1lO1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhc093bihTeW1ib2wsIG5hbWUpKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgfSBlbHNlIGlmIChVU0VfU1lNQk9MX0FTX1VJRCAmJiBzeW1ib2xGb3IpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IHN5bWJvbEZvcihkZXNjcmlwdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgfVxuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNsZWFyRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGVhci1lcnJvci1zdGFjaycpO1xudmFyIGluc3RhbGxFcnJvckNhdXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3RhbGwtZXJyb3ItY2F1c2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBub3JtYWxpemVTdHJpbmdBcmd1bWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3JtYWxpemUtc3RyaW5nLWFyZ3VtZW50Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3Itc3RhY2staW5zdGFsbGFibGUnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgRXJyb3IgPSBnbG9iYWwuRXJyb3I7XG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbnZhciAkQWdncmVnYXRlRXJyb3IgPSBmdW5jdGlvbiBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UgLyogLCBvcHRpb25zICovKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBpc0luc3RhbmNlID0gaXNQcm90b3R5cGVPZihBZ2dyZWdhdGVFcnJvclByb3RvdHlwZSwgdGhpcyk7XG4gIHZhciB0aGF0O1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICB0aGF0ID0gc2V0UHJvdG90eXBlT2YobmV3IEVycm9yKCksIGlzSW5zdGFuY2UgPyBnZXRQcm90b3R5cGVPZih0aGlzKSA6IEFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGF0ID0gaXNJbnN0YW5jZSA/IHRoaXMgOiBjcmVhdGUoQWdncmVnYXRlRXJyb3JQcm90b3R5cGUpO1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0aGF0LCBUT19TVFJJTkdfVEFHLCAnRXJyb3InKTtcbiAgfVxuICBpZiAobWVzc2FnZSAhPT0gdW5kZWZpbmVkKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgJ21lc3NhZ2UnLCBub3JtYWxpemVTdHJpbmdBcmd1bWVudChtZXNzYWdlKSk7XG4gIGlmIChFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdzdGFjaycsIGNsZWFyRXJyb3JTdGFjayh0aGF0LnN0YWNrLCAxKSk7XG4gIGluc3RhbGxFcnJvckNhdXNlKHRoYXQsIG9wdGlvbnMpO1xuICB2YXIgZXJyb3JzQXJyYXkgPSBbXTtcbiAgaXRlcmF0ZShlcnJvcnMsIHB1c2gsIHsgdGhhdDogZXJyb3JzQXJyYXkgfSk7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0aGF0LCAnZXJyb3JzJywgZXJyb3JzQXJyYXkpO1xuICByZXR1cm4gdGhhdDtcbn07XG5cbmlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoJEFnZ3JlZ2F0ZUVycm9yLCBFcnJvcik7XG5lbHNlIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoJEFnZ3JlZ2F0ZUVycm9yLCBFcnJvciwgeyBuYW1lOiB0cnVlIH0pO1xuXG52YXIgQWdncmVnYXRlRXJyb3JQcm90b3R5cGUgPSAkQWdncmVnYXRlRXJyb3IucHJvdG90eXBlID0gY3JlYXRlKEVycm9yLnByb3RvdHlwZSwge1xuICBjb25zdHJ1Y3RvcjogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICRBZ2dyZWdhdGVFcnJvciksXG4gIG1lc3NhZ2U6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCAnJyksXG4gIG5hbWU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCAnQWdncmVnYXRlRXJyb3InKVxufSk7XG5cbi8vIGBBZ2dyZWdhdGVFcnJvcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWdncmVnYXRlLWVycm9yLWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgQWdncmVnYXRlRXJyb3I6ICRBZ2dyZWdhdGVFcnJvclxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgYXJyYXlbSVNfQ09OQ0FUX1NQUkVBREFCTEVdID0gZmFsc2U7XG4gIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7XG59KTtcblxudmFyIFNQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2NvbmNhdCcpO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhU1BFQ0lFU19TVVBQT1JUO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKEUpO1xuICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktZnJvbSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG4vLyBgQXJyYXkuaXNBcnJheWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmlzYXJyYXlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUgfSwge1xuICBpc0FycmF5OiBpc0FycmF5XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG52YXIgdmFsdWVzID0gSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDQ1LSBidWdcbmlmICghSVNfUFVSRSAmJiBERVNDUklQVE9SUyAmJiB2YWx1ZXMubmFtZSAhPT0gJ3ZhbHVlcycpIHRyeSB7XG4gIGRlZmluZVByb3BlcnR5KHZhbHVlcywgJ25hbWUnLCB7IHZhbHVlOiAndmFsdWVzJyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHVuJFNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKGlzQ29uc3RydWN0b3IoQ29uc3RydWN0b3IpICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuJFNsaWNlKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiQoeyB0YXJnZXQ6ICdGdW5jdGlvbicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZ1bmN0aW9uLmJpbmQgIT09IGJpbmQgfSwge1xuICBiaW5kOiBiaW5kXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gSlNPTltAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09IGRlZmluZVByb3BlcnR5LCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHlcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBQcm9taXNlLmFsbFNldHRsZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbHNldHRsZWRcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGFsbFNldHRsZWQ6IGZ1bmN0aW9uIGFsbFNldHRsZWQoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbChwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0geyBzdGF0dXM6ICdyZWplY3RlZCcsIHJlYXNvbjogZXJyb3IgfTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG52YXIgUFJPTUlTRV9BTllfRVJST1IgPSAnTm8gb25lIHByb21pc2UgcmVzb2x2ZWQnO1xuXG4vLyBgUHJvbWlzZS5hbnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFueVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlIH0sIHtcbiAgYW55OiBmdW5jdGlvbiBhbnkoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIEFnZ3JlZ2F0ZUVycm9yID0gZ2V0QnVpbHRJbignQWdncmVnYXRlRXJyb3InKTtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICB2YXIgYWxyZWFkeVJlc29sdmVkID0gZmFsc2U7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5UmVqZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIGNhbGwocHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlSZWplY3RlZCB8fCBhbHJlYWR5UmVzb2x2ZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5UmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlSZWplY3RlZCA9IHRydWU7XG4gICAgICAgICAgZXJyb3JzW2luZGV4XSA9IGVycm9yO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlamVjdChuZXcgQWdncmVnYXRlRXJyb3IoZXJyb3JzLCBQUk9NSVNFX0FOWV9FUlJPUikpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIFBST01JU0VfQU5ZX0VSUk9SKSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbi8vIFNhZmFyaSBidWcgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwMDgyOVxudmFyIE5PTl9HRU5FUklDID0gISFOYXRpdmVQcm9taXNlICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdGhlbmFibGUgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXS5jYWxsKHsgdGhlbjogZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9IH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmZpbmFsbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IE5PTl9HRU5FUklDIH0sIHtcbiAgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgZ2V0QnVpbHRJbignUHJvbWlzZScpKTtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IGlzQ2FsbGFibGUob25GaW5hbGx5KTtcbiAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHksXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5XG4gICAgKTtcbiAgfVxufSk7XG5cbi8vIG1ha2VzIHN1cmUgdGhhdCBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzIGBQcm9taXNlI2ZpbmFsbHlgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZSkpIHtcbiAgdmFyIG1ldGhvZCA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2ZpbmFsbHknXTtcbiAgaWYgKE5hdGl2ZVByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10gIT09IG1ldGhvZCkge1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAnZmluYWxseScsIG1ldGhvZCwgeyB1bnNhZmU6IHRydWUgfSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIFF1ZXVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3F1ZXVlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX0JST1dTRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXInKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2UgJiYgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGU7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG5cbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBOQVRJVkVfUkVKRUNUSU9OX0VWRU5UID0gaXNDYWxsYWJsZShnbG9iYWwuUHJvbWlzZVJlamVjdGlvbkV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBTVUJDTEFTU0lORyA9IGZhbHNlO1xuXG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFID0gaW5zcGVjdFNvdXJjZShQcm9taXNlQ29uc3RydWN0b3IpO1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFICE9PSBTdHJpbmcoUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgbmVlZCBQcm9taXNlI2ZpbmFsbHkgaW4gdGhlIHB1cmUgdmVyc2lvbiBmb3IgcHJldmVudGluZyBwcm90b3R5cGUgcG9sbHV0aW9uXG4gIGlmIChJU19QVVJFICYmICFQcm9taXNlUHJvdG90eXBlWydmaW5hbGx5J10pIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKDEpOyB9KTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICBTVUJDTEFTU0lORyA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIGlmICghU1VCQ0xBU1NJTkcpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIHJldHVybiAhR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSAmJiBJU19CUk9XU0VSICYmICFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgaXNDYWxsYWJsZSh0aGVuID0gaXQudGhlbikgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgY2FsbFJlYWN0aW9uID0gZnVuY3Rpb24gKHJlYWN0aW9uLCBzdGF0ZSkge1xuICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgdHJ5IHtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgaWYgKCFvaykge1xuICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgY2FsbCh0aGVuLCByZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWFjdGlvbnMgPSBzdGF0ZS5yZWFjdGlvbnM7XG4gICAgdmFyIHJlYWN0aW9uO1xuICAgIHdoaWxlIChyZWFjdGlvbiA9IHJlYWN0aW9ucy5nZXQoKSkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgY2FsbCh0YXNrLCBnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkoc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXRlLmZhY2FkZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNhbGwodGhlbiwgdmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgYUNhbGxhYmxlKGV4ZWN1dG9yKTtcbiAgICBjYWxsKEludGVybmFsLCB0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdChzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgUHJvbWlzZVByb3RvdHlwZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogbmV3IFF1ZXVlKCksXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VQcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdGhlbmFibGUgLS0gc2FmZVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLm9rID0gaXNDYWxsYWJsZShvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gaXNDYWxsYWJsZShvblJlamVjdGVkKSAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlID09IFBFTkRJTkcpIHN0YXRlLnJlYWN0aW9ucy5hZGQocmVhY3Rpb24pO1xuICAgICAgZWxzZSBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsUmVhY3Rpb24ocmVhY3Rpb24sIHN0YXRlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2UpICYmIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICBuYXRpdmVUaGVuID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZS50aGVuO1xuXG4gICAgaWYgKCFTVUJDTEFTU0lORykge1xuICAgICAgLy8gbWFrZSBgUHJvbWlzZSN0aGVuYCByZXR1cm4gYSBwb2x5ZmlsbGVkIGBQcm9taXNlYCBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGNhbGwobmF0aXZlVGhlbiwgdGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgICAgLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjY2F0Y2hgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ2NhdGNoJywgUHJvbWlzZVByb3RvdHlwZVsnY2F0Y2gnXSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBgLmNvbnN0cnVjdG9yID09PSBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIC8vIG1ha2UgYGluc3RhbmNlb2YgUHJvbWlzZWAgd29yayBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgc2V0UHJvdG90eXBlT2YoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IGdldEJ1aWx0SW4oUFJPTUlTRSk7XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICBjYWxsKGNhcGFiaWxpdHkucmVqZWN0LCB1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbCgkcHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgY2FsbCgkcHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHRvU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuYXN5bmNpdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLmhhc0luc3RhbmNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaGFzaW5zdGFuY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaGFzSW5zdGFuY2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXNjb25jYXRzcHJlYWRhYmxlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcblxudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2wgJiYgJFN5bWJvbFtQUk9UT1RZUEVdO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKFN5bWJvbFByb3RvdHlwZSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhc093bihPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzT3duKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9Qcm9wZXJ0eUtleShWKTtcbiAgdmFyIGVudW1lcmFibGUgPSBjYWxsKG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLCB0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywgUCkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzT3duKHRoaXMsIFApIHx8ICFoYXNPd24oQWxsU3ltYm9scywgUCkgfHwgaGFzT3duKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdXG4gICAgPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhKGhhc093bihpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSkgcHVzaChyZXN1bHQsIGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhc093bihPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICBwdXNoKHJlc3VsdCwgQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZihTeW1ib2xQcm90b3R5cGUsIHRoaXMpKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogJHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgY2FsbChzZXR0ZXIsIE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXNPd24odGhpcywgSElEREVOKSAmJiBoYXNPd24odGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sW1BST1RPVFlQRV07XG5cbiAgcmVkZWZpbmUoU3ltYm9sUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIHJlZGVmaW5lKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydGllcztcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gJHRvU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhc093bihTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXNPd24oU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpO1xuICAgIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gICAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG4gIH0pO1xuXG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfSlNPTl9TVFJJTkdJRlkgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0NhbGxhYmxlKCRyZXBsYWNlcikpIHZhbHVlID0gY2FsbCgkcmVwbGFjZXIsIHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICAgIHJldHVybiBhcHBseSgkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCFTeW1ib2xQcm90b3R5cGVbVE9fUFJJTUlUSVZFXSkge1xuICB2YXIgdmFsdWVPZiA9IFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIC5sZW5ndGhcbiAgcmVkZWZpbmUoU3ltYm9sUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGZ1bmN0aW9uIChoaW50KSB7XG4gICAgLy8gVE9ETzogaW1wcm92ZSBoaW50IGxvZ2ljXG4gICAgcmV0dXJuIGNhbGwodmFsdWVPZiwgdGhpcyk7XG4gIH0pO1xufVxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hBbGxgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5tYXRjaGFsbFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaEFsbCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5tYXRjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLm1hdGNoXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnJlcGxhY2VgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5yZXBsYWNlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuc2VhcmNoYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc2VhcmNoXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NlYXJjaCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zcGVjaWVzYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc3BlY2llc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNwbGl0YCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc3BsaXRcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BsaXQnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wudG9QcmltaXRpdmVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3ByaW1pdGl2ZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC50b1N0cmluZ1RhZ2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvc3RyaW5ndGFnXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnVuc2NvcGFibGVzYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudW5zY29wYWJsZXNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuYXN5bmNEaXNwb3NlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtdXNpbmctc3RhdGVtZW50XG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2FzeW5jRGlzcG9zZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5kaXNwb3NlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtdXNpbmctc3RhdGVtZW50XG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2Rpc3Bvc2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hlcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXBhdHRlcm4tbWF0Y2hpbmdcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWF0Y2hlcicpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5tZXRhZGF0YWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWRlY29yYXRvcnNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWV0YWRhdGEnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wub2JzZXJ2YWJsZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuIiwiLy8gVE9ETzogcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wucGF0dGVybk1hdGNoYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcGF0dGVybi1tYXRjaGluZ1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdwYXR0ZXJuTWF0Y2gnKTtcbiIsIi8vIFRPRE86IHJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3JlcGxhY2VBbGwnKTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIGNsYXNzb2YoQ29sbGVjdGlvblByb3RvdHlwZSkgIT09IFRPX1NUUklOR19UQUcpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgfVxuICBJdGVyYXRvcnNbQ09MTEVDVElPTl9OQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9hcnJheS9mcm9tJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2VzL2FycmF5L2lzLWFycmF5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uLy4uL2VzL2FycmF5L3ZpcnR1YWwva2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi9lcy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vZXMvZ2V0LWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvaW5zdGFuY2UvYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9pbnN0YW5jZS9jb25jYXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3InKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIG1ldGhvZCA9IHJlcXVpcmUoJy4uL2FycmF5L3ZpcnR1YWwva2V5cycpO1xuXG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgTm9kZUxpc3Q6IHRydWVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBvd24gPSBpdC5rZXlzO1xuICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlIHx8IChpc1Byb3RvdHlwZU9mKEFycmF5UHJvdG90eXBlLCBpdCkgJiYgb3duID09PSBBcnJheVByb3RvdHlwZS5rZXlzKVxuICAgIHx8IGhhc093bihET01JdGVyYWJsZXMsIGNsYXNzb2YoaXQpKSA/IG1ldGhvZCA6IG93bjtcbn07XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvaW5zdGFuY2Uvc2xpY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvc3ltYm9sL2ZvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9zeW1ib2wvaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ29uc3RydWN0b3IoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCcgfHwgaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUHJvdG90eXBlKSB7XG4gIGlmIChpc1Byb3RvdHlwZU9mKFByb3RvdHlwZSwgaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcihTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXR5cGVkLWFycmF5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT0gJ3VuZGVmaW5lZCc7XG4iLCIvLyBGRjI2LSBidWc6IEFycmF5QnVmZmVycyBhcmUgbm9uLWV4dGVuc2libGUsIGJ1dCBPYmplY3QuaXNFeHRlbnNpYmxlIGRvZXMgbm90IHJlcG9ydCBpdFxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyID09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlLCBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIGlmIChPYmplY3QuaXNFeHRlbnNpYmxlKGJ1ZmZlcikpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShidWZmZXIsICdhJywgeyB2YWx1ZTogOCB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIEludDhBcnJheVByb3RvdHlwZSA9IEludDhBcnJheSAmJiBJbnQ4QXJyYXkucHJvdG90eXBlO1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5ID0gZ2xvYmFsLlVpbnQ4Q2xhbXBlZEFycmF5O1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlID0gVWludDhDbGFtcGVkQXJyYXkgJiYgVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlO1xudmFyIFR5cGVkQXJyYXkgPSBJbnQ4QXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5KTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5UHJvdG90eXBlICYmIGdldFByb3RvdHlwZU9mKEludDhBcnJheVByb3RvdHlwZSk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSB1aWQoJ1RZUEVEX0FSUkFZX1RBRycpO1xudmFyIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SID0gdWlkKCdUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUicpO1xuLy8gRml4aW5nIG5hdGl2ZSB0eXBlZCBhcnJheXMgaW4gT3BlcmEgUHJlc3RvIGNyYXNoZXMgdGhlIGJyb3dzZXIsIHNlZSAjNTk1XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IE5BVElWRV9BUlJBWV9CVUZGRVIgJiYgISFzZXRQcm90b3R5cGVPZiAmJiBjbGFzc29mKGdsb2JhbC5vcGVyYSkgIT09ICdPcGVyYSc7XG52YXIgVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEID0gZmFsc2U7XG52YXIgTkFNRSwgQ29uc3RydWN0b3IsIFByb3RvdHlwZTtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0ID0ge1xuICBJbnQ4QXJyYXk6IDEsXG4gIFVpbnQ4QXJyYXk6IDEsXG4gIFVpbnQ4Q2xhbXBlZEFycmF5OiAxLFxuICBJbnQxNkFycmF5OiAyLFxuICBVaW50MTZBcnJheTogMixcbiAgSW50MzJBcnJheTogNCxcbiAgVWludDMyQXJyYXk6IDQsXG4gIEZsb2F0MzJBcnJheTogNCxcbiAgRmxvYXQ2NEFycmF5OiA4XG59O1xuXG52YXIgQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0ID0ge1xuICBCaWdJbnQ2NEFycmF5OiA4LFxuICBCaWdVaW50NjRBcnJheTogOFxufTtcblxudmFyIGlzVmlldyA9IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICB2YXIga2xhc3MgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIGtsYXNzID09PSAnRGF0YVZpZXcnXG4gICAgfHwgaGFzT3duKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcylcbiAgICB8fCBoYXNPd24oQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcyk7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpO1xuICByZXR1cm4gaGFzT3duKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcylcbiAgICB8fCBoYXNPd24oQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzVHlwZWRBcnJheShpdCkpIHJldHVybiBpdDtcbiAgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGEgdHlwZWQgYXJyYXknKTtcbn07XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKEMpIHtcbiAgaWYgKGlzQ2FsbGFibGUoQykgJiYgKCFzZXRQcm90b3R5cGVPZiB8fCBpc1Byb3RvdHlwZU9mKFR5cGVkQXJyYXksIEMpKSkgcmV0dXJuIEM7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhDKSArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3InKTtcbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCwgb3B0aW9ucykge1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChmb3JjZWQpIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSwgS0VZKSkgdHJ5IHtcbiAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIG9sZCBXZWJLaXQgYnVnIC0gc29tZSBtZXRob2RzIGFyZSBub24tY29uZmlndXJhYmxlXG4gICAgICB0cnkge1xuICAgICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV0gPSBwcm9wZXJ0eTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfVxuICB9XG4gIGlmICghVHlwZWRBcnJheVByb3RvdHlwZVtLRVldIHx8IGZvcmNlZCkge1xuICAgIHJlZGVmaW5lKFR5cGVkQXJyYXlQcm90b3R5cGUsIEtFWSwgZm9yY2VkID8gcHJvcGVydHlcbiAgICAgIDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBJbnQ4QXJyYXlQcm90b3R5cGVbS0VZXSB8fCBwcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCkge1xuICB2YXIgQVJSQVksIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAoZm9yY2VkKSBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVkpKSB0cnkge1xuICAgICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV07XG4gICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfVxuICAgIGlmICghVHlwZWRBcnJheVtLRVldIHx8IGZvcmNlZCkge1xuICAgICAgLy8gVjggfiBDaHJvbWUgNDktNTAgYCVUeXBlZEFycmF5JWAgbWV0aG9kcyBhcmUgbm9uLXdyaXRhYmxlIG5vbi1jb25maWd1cmFibGVcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZWRlZmluZShUeXBlZEFycmF5LCBLRVksIGZvcmNlZCA/IHByb3BlcnR5IDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBUeXBlZEFycmF5W0tFWV0gfHwgcHJvcGVydHkpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICAgIH0gZWxzZSByZXR1cm47XG4gIH1cbiAgZm9yIChBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiAoIVR5cGVkQXJyYXlDb25zdHJ1Y3RvcltLRVldIHx8IGZvcmNlZCkpIHtcbiAgICAgIHJlZGVmaW5lKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZLCBwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFByb3RvdHlwZSwgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IsIENvbnN0cnVjdG9yKTtcbiAgZWxzZSBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gZmFsc2U7XG59XG5cbmZvciAoTkFNRSBpbiBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFByb3RvdHlwZSwgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IsIENvbnN0cnVjdG9yKTtcbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIHR5cGVkIGFycmF5cyBjb25zdHJ1Y3RvcnMgcHJvdG90eXBlIGlzIE9iamVjdC5wcm90b3R5cGVcbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhaXNDYWxsYWJsZShUeXBlZEFycmF5KSB8fCBUeXBlZEFycmF5ID09PSBGdW5jdGlvbi5wcm90b3R5cGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdyAtLSBzYWZlXG4gIFR5cGVkQXJyYXkgPSBmdW5jdGlvbiBUeXBlZEFycmF5KCkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTtcbiAgfTtcbiAgaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIGlmIChnbG9iYWxbTkFNRV0pIHNldFByb3RvdHlwZU9mKGdsb2JhbFtOQU1FXSwgVHlwZWRBcnJheSk7XG4gIH1cbn1cblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFUeXBlZEFycmF5UHJvdG90eXBlIHx8IFR5cGVkQXJyYXlQcm90b3R5cGUgPT09IE9iamVjdFByb3RvdHlwZSkge1xuICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheS5wcm90b3R5cGU7XG4gIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBpZiAoZ2xvYmFsW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxbTkFNRV0ucHJvdG90eXBlLCBUeXBlZEFycmF5UHJvdG90eXBlKTtcbiAgfVxufVxuXG4vLyBXZWJLaXQgYnVnIC0gb25lIG1vcmUgb2JqZWN0IGluIFVpbnQ4Q2xhbXBlZEFycmF5IHByb3RvdHlwZSBjaGFpblxuaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUpICE9PSBUeXBlZEFycmF5UHJvdG90eXBlKSB7XG4gIHNldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlLCBUeXBlZEFycmF5UHJvdG90eXBlKTtcbn1cblxuaWYgKERFU0NSSVBUT1JTICYmICFoYXNPd24oVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEID0gdHJ1ZTtcbiAgZGVmaW5lUHJvcGVydHkoVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGhpcykgPyB0aGlzW1RZUEVEX0FSUkFZX1RBR10gOiB1bmRlZmluZWQ7XG4gIH0gfSk7XG4gIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkgaWYgKGdsb2JhbFtOQU1FXSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWxbTkFNRV0sIFRZUEVEX0FSUkFZX1RBRywgTkFNRSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MsXG4gIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SOiBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUixcbiAgVFlQRURfQVJSQVlfVEFHOiBUWVBFRF9BUlJBWV9UQUdfUkVRVUlSRUQgJiYgVFlQRURfQVJSQVlfVEFHLFxuICBhVHlwZWRBcnJheTogYVR5cGVkQXJyYXksXG4gIGFUeXBlZEFycmF5Q29uc3RydWN0b3I6IGFUeXBlZEFycmF5Q29uc3RydWN0b3IsXG4gIGV4cG9ydFR5cGVkQXJyYXlNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlNZXRob2QsXG4gIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QsXG4gIGlzVmlldzogaXNWaWV3LFxuICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheTogVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheVByb3RvdHlwZTogVHlwZWRBcnJheVByb3RvdHlwZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgSUVFRTc1NCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZWVlNzU0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXgnO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJEFycmF5QnVmZmVyID0gTmF0aXZlQXJyYXlCdWZmZXI7XG52YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXIgJiYgJEFycmF5QnVmZmVyW1BST1RPVFlQRV07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXcgJiYgJERhdGFWaWV3W1BST1RPVFlQRV07XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgZmlsbCA9IHVuY3VycnlUaGlzKGFycmF5RmlsbCk7XG52YXIgcmV2ZXJzZSA9IHVuY3VycnlUaGlzKFtdLnJldmVyc2UpO1xuXG52YXIgcGFja0lFRUU3NTQgPSBJRUVFNzU0LnBhY2s7XG52YXIgdW5wYWNrSUVFRTc1NCA9IElFRUU3NTQudW5wYWNrO1xuXG52YXIgcGFja0ludDggPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDE2ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRiwgbnVtYmVyID4+IDE2ICYgMHhGRiwgbnVtYmVyID4+IDI0ICYgMHhGRl07XG59O1xuXG52YXIgdW5wYWNrSW50MzIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXJbM10gPDwgMjQgfCBidWZmZXJbMl0gPDwgMTYgfCBidWZmZXJbMV0gPDwgOCB8IGJ1ZmZlclswXTtcbn07XG5cbnZhciBwYWNrRmxvYXQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgMjMsIDQpO1xufTtcblxudmFyIHBhY2tGbG9hdDY0ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCA1MiwgOCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBrZXkpIHtcbiAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3JbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldOyB9IH0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgoaW5kZXgpO1xuICB2YXIgc3RvcmUgPSBnZXRJbnRlcm5hbFN0YXRlKHZpZXcpO1xuICBpZiAoaW50SW5kZXggKyBjb3VudCA+IHN0b3JlLmJ5dGVMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgYnl0ZXMgPSBnZXRJbnRlcm5hbFN0YXRlKHN0b3JlLmJ1ZmZlcikuYnl0ZXM7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgc3RvcmUuYnl0ZU9mZnNldDtcbiAgdmFyIHBhY2sgPSBhcnJheVNsaWNlKGJ5dGVzLCBzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiByZXZlcnNlKHBhY2spO1xufTtcblxudmFyIHNldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIGJ5dGVzW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGNvdW50IC0gaSAtIDFdO1xufTtcblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnl0ZXM6IGZpbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIERhdGFWaWV3UHJvdG90eXBlKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBnZXRJbnRlcm5hbFN0YXRlKGJ1ZmZlcikuYnl0ZUxlbmd0aDtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoLFxuICAgICAgYnl0ZU9mZnNldDogb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykge1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgfTtcblxuICBEYXRhVmlld1Byb3RvdHlwZSA9ICREYXRhVmlld1tQUk9UT1RZUEVdO1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVPZmZzZXQnKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgMjMpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCA1Mik7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDY0LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICB2YXIgSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FID0gUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgTmF0aXZlQXJyYXlCdWZmZXIubmFtZSAhPT0gQVJSQVlfQlVGRkVSO1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgTmF0aXZlQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKC0xKTtcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigxLjUpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcihOYU4pO1xuICAgIHJldHVybiBJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgJiYgIUNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FO1xuICB9KSkge1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCBBcnJheUJ1ZmZlclByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gbmV3IE5hdGl2ZUFycmF5QnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcblxuICAgICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQXJyYXlCdWZmZXJQcm90b3R5cGU7XG5cbiAgICBmb3IgKHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVBcnJheUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRBcnJheUJ1ZmZlciwga2V5LCBOYXRpdmVBcnJheUJ1ZmZlcltrZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBBcnJheUJ1ZmZlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfSBlbHNlIGlmIChJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTmF0aXZlQXJyYXlCdWZmZXIsICduYW1lJywgQVJSQVlfQlVGRkVSKTtcbiAgfVxuXG4gIC8vIFdlYktpdCBidWcgLSB0aGUgc2FtZSBwYXJlbnQgcHJvdG90eXBlIGZvciB0eXBlZCBhcnJheXMgYW5kIGRhdGEgdmlld1xuICBpZiAoc2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoRGF0YVZpZXdQcm90b3R5cGUpICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBzZXRQcm90b3R5cGVPZihEYXRhVmlld1Byb3RvdHlwZSwgT2JqZWN0UHJvdG90eXBlKTtcbiAgfVxuXG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdGVzdFZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5zZXRJbnQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHRlc3RWaWV3LmdldEludDgoMCkgfHwgIXRlc3RWaWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDgodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlcixcbiAgRGF0YVZpZXc6ICREYXRhVmlld1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWNvcHl3aXRoaW4gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gbWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsbFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gIVNUUklDVF9NRVRIT0QgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxufSA6IFtdLmZvckVhY2g7XG4iLCJ2YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGxpc3QpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGxpc3QpO1xuICB2YXIgcmVzdWx0ID0gbmV3IENvbnN0cnVjdG9yKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIElTX0NPTlNUUlVDVE9SID0gaXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICEodGhpcyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMoKSA6IFtdO1xuICAgIGZvciAoOyEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICByZXN1bHQgPSBJU19DT05TVFJVQ1RPUiA/IG5ldyB0aGlzKGxlbmd0aCkgOiBBcnJheShsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1sYXN0aW5kZXhvZiAtLSBzYWZlICovXG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG52YXIgJGxhc3RJbmRleE9mID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJGxhc3RJbmRleE9mICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnbGFzdEluZGV4T2YnKTtcbnZhciBGT1JDRUQgPSBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmxhc3RpbmRleG9mXG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgLy8gY29udmVydCAtMCB0byArMFxuICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuIGFwcGx5KCRsYXN0SW5kZXhPZiwgdGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gbWluKGluZGV4LCB0b0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50c1sxXSkpO1xuICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTyAmJiBPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gIHJldHVybiAtMTtcbn0gOiAkbGFzdEluZGV4T2Y7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgaW5kZXggPSBJU19SSUdIVCA/IGxlbmd0aCAtIDEgOiAwO1xuICAgIHZhciBpID0gSVNfUklHSFQgPyAtMSA6IDE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7SVNfUklHSFQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICBsZWZ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gIHZhciByZXN1bHQgPSBBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyhbXS5zbGljZSk7XG4iLCJ2YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxudmFyIG1lcmdlU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBtaWRkbGUgPSBmbG9vcihsZW5ndGggLyAyKTtcbiAgcmV0dXJuIGxlbmd0aCA8IDggPyBpbnNlcnRpb25Tb3J0KGFycmF5LCBjb21wYXJlZm4pIDogbWVyZ2UoXG4gICAgYXJyYXksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIDAsIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgY29tcGFyZWZuXG4gICk7XG59O1xuXG52YXIgaW5zZXJ0aW9uU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBpID0gMTtcbiAgdmFyIGVsZW1lbnQsIGo7XG5cbiAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICBqID0gaTtcbiAgICBlbGVtZW50ID0gYXJyYXlbaV07XG4gICAgd2hpbGUgKGogJiYgY29tcGFyZWZuKGFycmF5W2ogLSAxXSwgZWxlbWVudCkgPiAwKSB7XG4gICAgICBhcnJheVtqXSA9IGFycmF5Wy0tal07XG4gICAgfVxuICAgIGlmIChqICE9PSBpKyspIGFycmF5W2pdID0gZWxlbWVudDtcbiAgfSByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiAoYXJyYXksIGxlZnQsIHJpZ2h0LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxsZW5ndGggPSBsZWZ0Lmxlbmd0aDtcbiAgdmFyIHJsZW5ndGggPSByaWdodC5sZW5ndGg7XG4gIHZhciBsaW5kZXggPSAwO1xuICB2YXIgcmluZGV4ID0gMDtcblxuICB3aGlsZSAobGluZGV4IDwgbGxlbmd0aCB8fCByaW5kZXggPCBybGVuZ3RoKSB7XG4gICAgYXJyYXlbbGluZGV4ICsgcmluZGV4XSA9IChsaW5kZXggPCBsbGVuZ3RoICYmIHJpbmRleCA8IHJsZW5ndGgpXG4gICAgICA/IGNvbXBhcmVmbihsZWZ0W2xpbmRleF0sIHJpZ2h0W3JpbmRleF0pIDw9IDAgPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXVxuICAgICAgOiBsaW5kZXggPCBsbGVuZ3RoID8gbGVmdFtsaW5kZXgrK10gOiByaWdodFtyaW5kZXgrK107XG4gIH0gcmV0dXJuIGFycmF5O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZVNvcnQ7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbi8vIGEgcGFydCBvZiBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKGlzQ29uc3RydWN0b3IoQykgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZmFzdEtleTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgUHJvdG90eXBlKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpbmRleDogY3JlYXRlKG51bGwpLFxuICAgICAgICBmaXJzdDogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWQsXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH0pO1xuICAgICAgaWYgKCFERVNDUklQVE9SUykgdGhhdC5zaXplID0gMDtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgdmFyIHByZXZpb3VzLCBpbmRleDtcbiAgICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0ID0gZW50cnkgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZW1vdmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXN0YXRlLmZpcnN0KSBzdGF0ZS5maXJzdCA9IGVudHJ5O1xuICAgICAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSBlbnRyeTtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplKys7XG4gICAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICB2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gICAgICB2YXIgZW50cnk7XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHN0YXRlLmluZGV4W2luZGV4XTtcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICAgICAgZm9yIChlbnRyeSA9IHN0YXRlLmZpcnN0OyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgICAgIGlmIChlbnRyeS5rZXkgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlZGVmaW5lQWxsKFByb3RvdHlwZSwge1xuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuY2xlYXIoKWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmNsZWFyXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuY2xlYXJcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZGF0YSA9IHN0YXRlLmluZGV4O1xuICAgICAgICB2YXIgZW50cnkgPSBzdGF0ZS5maXJzdDtcbiAgICAgICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnByZXZpb3VzKSBlbnRyeS5wcmV2aW91cyA9IGVudHJ5LnByZXZpb3VzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5maXJzdCA9IHN0YXRlLmxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZSA9IDA7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5kZWxldGUoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5leHQ7XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgICBkZWxldGUgc3RhdGUuaW5kZXhbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm5leHQgPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnByZXZpb3VzID0gcHJldjtcbiAgICAgICAgICBpZiAoc3RhdGUuZmlyc3QgPT0gZW50cnkpIHN0YXRlLmZpcnN0ID0gbmV4dDtcbiAgICAgICAgICBpZiAoc3RhdGUubGFzdCA9PSBlbnRyeSkgc3RhdGUubGFzdCA9IHByZXY7XG4gICAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplLS07XG4gICAgICAgICAgZWxzZSB0aGF0LnNpemUtLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZm9yZWFjaFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmZvcmVhY2hcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5maXJzdCkge1xuICAgICAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldH0ucHJvdG90eXBlLmhhcyhrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuaGFzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZGVmaW5lQWxsKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuZ2V0KGtleSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmdldFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcbiAgICAgIH0sXG4gICAgICAvLyBgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gYFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuYWRkXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KFByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuc2l6ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH0sXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApIHtcbiAgICB2YXIgSVRFUkFUT1JfTkFNRSA9IENPTlNUUlVDVE9SX05BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICB2YXIgZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuICAgIHZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKElURVJBVE9SX05BTUUpO1xuICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLnsga2V5cywgdmFsdWVzLCBlbnRyaWVzLCBAQGl0ZXJhdG9yIH0oKWAgbWV0aG9kc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5lbnRyaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmtleXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUudmFsdWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLUBAaXRlcmF0b3JcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgZGVmaW5lSXRlcmF0b3IoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgIHR5cGU6IElURVJBVE9SX05BTUUsXG4gICAgICAgIHRhcmdldDogaXRlcmF0ZWQsXG4gICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUubGFzdDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS5rZXksIGRvbmU6IGZhbHNlIH07XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IGVudHJ5LnZhbHVlLCBkb25lOiBmYWxzZSB9O1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXSwgZG9uZTogZmFsc2UgfTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZVtAQHNwZWNpZXNdYCBhY2Nlc3NvcnNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1tYXAtQEBzcGVjaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtc2V0LUBAc3BlY2llc1xuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSwgd3JhcHBlciwgY29tbW9uKSB7XG4gIHZhciBJU19NQVAgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ01hcCcpICE9PSAtMTtcbiAgdmFyIElTX1dFQUsgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ1dlYWsnKSAhPT0gLTE7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBOYXRpdmVDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgdmFyIE5hdGl2ZVByb3RvdHlwZSA9IE5hdGl2ZUNvbnN0cnVjdG9yICYmIE5hdGl2ZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgdmFyIENvbnN0cnVjdG9yID0gTmF0aXZlQ29uc3RydWN0b3I7XG4gIHZhciBleHBvcnRlZCA9IHt9O1xuXG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKE5hdGl2ZVByb3RvdHlwZVtLRVldKTtcbiAgICByZWRlZmluZShOYXRpdmVQcm90b3R5cGUsIEtFWSxcbiAgICAgIEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gOiBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IHVuZGVmaW5lZCA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICB2YXIgUkVQTEFDRSA9IGlzRm9yY2VkKFxuICAgIENPTlNUUlVDVE9SX05BTUUsXG4gICAgIWlzQ2FsbGFibGUoTmF0aXZlQ29uc3RydWN0b3IpIHx8ICEoSVNfV0VBSyB8fCBOYXRpdmVQcm90b3R5cGUuZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCkuZW50cmllcygpLm5leHQoKTtcbiAgICB9KSlcbiAgKTtcblxuICBpZiAoUkVQTEFDRSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQ29uc3RydWN0b3IgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgfSBlbHNlIGlmIChpc0ZvcmNlZChDT05TVFJVQ1RPUl9OQU1FLCB0cnVlKSkge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihpdGVyYWJsZSk7IH0pO1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG5cbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UoZHVtbXksIE5hdGl2ZVByb3RvdHlwZSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCksIGR1bW15LCBDb25zdHJ1Y3Rvcik7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE5hdGl2ZVByb3RvdHlwZTtcbiAgICAgIE5hdGl2ZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIH1cblxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cblxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuXG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBOYXRpdmVQcm90b3R5cGUuY2xlYXIpIGRlbGV0ZSBOYXRpdmVQcm90b3R5cGUuY2xlYXI7XG4gIH1cblxuICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IENvbnN0cnVjdG9yO1xuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IENvbnN0cnVjdG9yICE9IE5hdGl2ZUNvbnN0cnVjdG9yIH0sIGV4cG9ydGVkKTtcblxuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSAmJiAhKGV4Y2VwdGlvbnMgJiYgaGFzT3duKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHZhciByZWdleHAgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCwgRU5VTUVSQUJMRV9ORVhUKSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoKyFFTlVNRVJBQkxFX05FWFQsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgICAgcmVkZWZpbmUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBpZiAoIUlTX1BVUkUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ25hbWUnLCBWQUxVRVMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gY2FsbChuYXRpdmVJdGVyYXRvciwgdGhpcyk7IH07XG4gICAgfVxuICB9XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yLCB7IG5hbWU6IERFRkFVTFQgfSk7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzT3duKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBmaXJlZm94ID0gdXNlckFnZW50Lm1hdGNoKC9maXJlZm94XFwvKFxcZCspL2kpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhZmlyZWZveCAmJiArZmlyZWZveFsxXTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JztcbiIsInZhciBVQSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9NU0lFfFRyaWRlbnQvLnRlc3QoVUEpO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvaXBhZHxpcGhvbmV8aXBvZC9pLnRlc3QodXNlckFnZW50KSAmJiBnbG9iYWwuUGViYmxlICE9PSB1bmRlZmluZWQ7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyg/OmlwYWR8aXBob25lfGlwb2QpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzb2YoZ2xvYmFsLnByb2Nlc3MpID09ICdwcm9jZXNzJztcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvd2ViMHMoPyEuKmNocm9tZSkvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERlbm8gPSBnbG9iYWwuRGVubztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucyB8fCBEZW5vICYmIERlbm8udmVyc2lvbjtcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICAvLyBpbiBvbGQgQ2hyb21lLCB2ZXJzaW9ucyBvZiBWOCBpc24ndCBWOCA9IENocm9tZSAvIDEwXG4gIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG4gIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG59XG5cbi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuLy8gc28gY2hlY2sgYHVzZXJBZ2VudGAgZXZlbiBpZiBgLnY4YCBleGlzdHMsIGJ1dCAwXG5pZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbjtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHdlYmtpdCA9IHVzZXJBZ2VudC5tYXRjaCgvQXBwbGVXZWJLaXRcXC8oXFxkKylcXC4vKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIXdlYmtpdCAmJiArd2Via2l0WzFdO1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEZPUkNFRCwgU0hBTSkge1xuICB2YXIgU1lNQk9MID0gd2VsbEtub3duU3ltYm9sKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG5cbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgcmVhbCByZWdleCBoZXJlIHNpbmNlIGl0IGNhdXNlcyBkZW9wdGltaXphdGlvblxuICAgICAgLy8gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24gaW4gVjhcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMDZcbiAgICAgIHJlID0ge307XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgRk9SQ0VEXG4gICkge1xuICAgIHZhciB1bmN1cnJpZWROYXRpdmVSZWdFeHBNZXRob2QgPSB1bmN1cnJ5VGhpcygvLi9bU1lNQk9MXSk7XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICB2YXIgdW5jdXJyaWVkTmF0aXZlTWV0aG9kID0gdW5jdXJyeVRoaXMobmF0aXZlTWV0aG9kKTtcbiAgICAgIHZhciAkZXhlYyA9IHJlZ2V4cC5leGVjO1xuICAgICAgaWYgKCRleGVjID09PSByZWdleHBFeGVjIHx8ICRleGVjID09PSBSZWdFeHBQcm90b3R5cGUuZXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmN1cnJpZWROYXRpdmVNZXRob2Qoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICB9XG4gICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgIH0pO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBtZXRob2RzWzBdKTtcbiAgICByZWRlZmluZShSZWdFeHBQcm90b3R5cGUsIFNZTUJPTCwgbWV0aG9kc1sxXSk7XG4gIH1cblxuICBpZiAoU0hBTSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cFByb3RvdHlwZVtTWU1CT0xdLCAnc2hhbScsIHRydWUpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlLCBlcy9uby1vYmplY3QtcHJldmVudGV4dGVuc2lvbnMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbiIsInZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIGJpbmQgPSBGdW5jdGlvblByb3RvdHlwZS5iaW5kO1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKGJpbmQgPyBjYWxsLmJpbmQoYXBwbHkpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShhcHBseSwgYXJndW1lbnRzKTtcbn0pO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHtcbiAgYUNhbGxhYmxlKGZuKTtcbiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogYmluZCA/IGJpbmQoZm4sIHRoYXQpIDogZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghaGFzT3duKGZhY3RvcmllcywgYXJnc0xlbmd0aCkpIHtcbiAgICBmb3IgKHZhciBsaXN0ID0gW10sIGkgPSAwOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gRnVuY3Rpb24oJ0MsYScsICdyZXR1cm4gbmV3IEMoJyArIGpvaW4obGlzdCwgJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1thcmdzTGVuZ3RoXShDLCBhcmdzKTtcbn07XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgRiA9IGFDYWxsYWJsZSh0aGlzKTtcbiAgdmFyIFByb3RvdHlwZSA9IEYucHJvdG90eXBlO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gY29uY2F0KHBhcnRBcmdzLCBhcnJheVNsaWNlKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmRGdW5jdGlvbiA/IGNvbnN0cnVjdChGLCBhcmdzLmxlbmd0aCwgYXJncykgOiBGLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoUHJvdG90eXBlKSkgYm91bmRGdW5jdGlvbi5wcm90b3R5cGUgPSBQcm90b3R5cGU7XG4gIHJldHVybiBib3VuZEZ1bmN0aW9uO1xufTtcbiIsInZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gY2FsbC5iaW5kID8gY2FsbC5iaW5kKGNhbGwpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShjYWxsLCBhcmd1bWVudHMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGJpbmQgPSBGdW5jdGlvblByb3RvdHlwZS5iaW5kO1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xudmFyIHVuY3VycnlUaGlzID0gYmluZCAmJiBiaW5kLmJpbmQoY2FsbCwgY2FsbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmluZCA/IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgdW5jdXJyeVRoaXMoZm4pO1xufSA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBnZXRNZXRob2QoaXQsIElURVJBVE9SKVxuICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCwgdXNpbmdJdGVyYXRvcikge1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGdldEl0ZXJhdG9yTWV0aG9kKGFyZ3VtZW50KSA6IHVzaW5nSXRlcmF0b3I7XG4gIGlmIChhQ2FsbGFibGUoaXRlcmF0b3JNZXRob2QpKSByZXR1cm4gYW5PYmplY3QoY2FsbChpdGVyYXRvck1ldGhvZCwgYXJndW1lbnQpKTtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbi8vIGBHZXRNZXRob2RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgdmFyIGZ1bmMgPSBWW1BdO1xuICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJidgXXxcXGR7MSwyfSkvZztcblxuLy8gYEdldFN1YnN0aXR1dGlvbmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICB9XG4gIHJldHVybiByZXBsYWNlKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaGFyQXQoY2gsIDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCAwLCBwb3NpdGlvbik7XG4gICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCB0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tzdHJpbmdTbGljZShjaCwgMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaGFyQXQoY2gsIDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2hhckF0KGNoLCAxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZ2xvYmFsLXRoaXMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2tcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoe30uaGFzT3duUHJvcGVydHkpO1xuXG4vLyBgSGFzT3duUHJvcGVydHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1oYXNvd25wcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eSh0b09iamVjdChpdCksIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIHBhY2sgPSBmdW5jdGlvbiAobnVtYmVyLCBtYW50aXNzYUxlbmd0aCwgYnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IEFycmF5KGJ5dGVzKTtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbWFudGlzc2FMZW5ndGggPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCB8fCBudW1iZXIgPT09IDAgJiYgMSAvIG51bWJlciA8IDAgPyAxIDogMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGV4cG9uZW50LCBtYW50aXNzYSwgYztcbiAgbnVtYmVyID0gYWJzKG51bWJlcik7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChudW1iZXIgIT0gbnVtYmVyIHx8IG51bWJlciA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBjID0gcG93KDIsIC1leHBvbmVudCk7XG4gICAgaWYgKG51bWJlciAqIGMgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG1hbnRpc3NhTGVuZ3RoID49IDgpIHtcbiAgICBidWZmZXJbaW5kZXgrK10gPSBtYW50aXNzYSAmIDI1NTtcbiAgICBtYW50aXNzYSAvPSAyNTY7XG4gICAgbWFudGlzc2FMZW5ndGggLT0gODtcbiAgfVxuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICB3aGlsZSAoZXhwb25lbnRMZW5ndGggPiAwKSB7XG4gICAgYnVmZmVyW2luZGV4KytdID0gZXhwb25lbnQgJiAyNTU7XG4gICAgZXhwb25lbnQgLz0gMjU2O1xuICAgIGV4cG9uZW50TGVuZ3RoIC09IDg7XG4gIH1cbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrID0gZnVuY3Rpb24gKGJ1ZmZlciwgbWFudGlzc2FMZW5ndGgpIHtcbiAgdmFyIGJ5dGVzID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZXhwb25lbnRMZW5ndGggLSA3O1xuICB2YXIgaW5kZXggPSBieXRlcyAtIDE7XG4gIHZhciBzaWduID0gYnVmZmVyW2luZGV4LS1dO1xuICB2YXIgZXhwb25lbnQgPSBzaWduICYgMTI3O1xuICB2YXIgbWFudGlzc2E7XG4gIHNpZ24gPj49IDc7XG4gIHdoaWxlIChuQml0cyA+IDApIHtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4LS1dO1xuICAgIG5CaXRzIC09IDg7XG4gIH1cbiAgbWFudGlzc2EgPSBleHBvbmVudCAmICgxIDw8IC1uQml0cykgLSAxO1xuICBleHBvbmVudCA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtYW50aXNzYUxlbmd0aDtcbiAgd2hpbGUgKG5CaXRzID4gMCkge1xuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXgtLV07XG4gICAgbkJpdHMgLT0gODtcbiAgfVxuICBpZiAoZXhwb25lbnQgPT09IDApIHtcbiAgICBleHBvbmVudCA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gZU1heCkge1xuICAgIHJldHVybiBtYW50aXNzYSA/IE5hTiA6IHNpZ24gPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICsgcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzaWduID8gLTEgOiAxKSAqIG1hbnRpc3NhICogcG93KDIsIGV4cG9uZW50IC0gbWFudGlzc2FMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhY2s6IHBhY2ssXG4gIHVucGFjazogdW5wYWNrXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIGlzQ2FsbGFibGUoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpICYmXG4gICAgTmV3VGFyZ2V0ICE9PSBXcmFwcGVyICYmXG4gICAgaXNPYmplY3QoTmV3VGFyZ2V0UHJvdG90eXBlID0gTmV3VGFyZ2V0LnByb3RvdHlwZSkgJiZcbiAgICBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlXG4gICkgc2V0UHJvdG90eXBlT2YoJHRoaXMsIE5ld1RhcmdldFByb3RvdHlwZSk7XG4gIHJldHVybiAkdGhpcztcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGBjb3JlLWpzQDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKCFpc0NhbGxhYmxlKHN0b3JlLmluc3BlY3RTb3VyY2UpKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZyhpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcblxudmFyIFJFUVVJUkVEID0gZmFsc2U7XG52YXIgTUVUQURBVEEgPSB1aWQoJ21ldGEnKTtcbnZhciBpZCA9IDA7XG5cbnZhciBzZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBkZWZpbmVQcm9wZXJ0eShpdCwgTUVUQURBVEEsIHsgdmFsdWU6IHtcbiAgICBvYmplY3RJRDogJ08nICsgaWQrKywgLy8gb2JqZWN0IElEXG4gICAgd2Vha0RhdGE6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xuXG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBhIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXNPd24oaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLm9iamVjdElEO1xufTtcblxudmFyIGdldFdlYWtEYXRhID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXNPd24oaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiB0aGUgc3RvcmUgb2Ygd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLndlYWtEYXRhO1xufTtcblxuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaSU5HICYmIFJFUVVJUkVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhc093bihpdCwgTUVUQURBVEEpKSBzZXRNZXRhZGF0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbnZhciBlbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIG1ldGEuZW5hYmxlID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuICBSRVFVSVJFRCA9IHRydWU7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mO1xuICB2YXIgc3BsaWNlID0gdW5jdXJyeVRoaXMoW10uc3BsaWNlKTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdGVzdFtNRVRBREFUQV0gPSAxO1xuXG4gIC8vIHByZXZlbnQgZXhwb3Npbmcgb2YgbWV0YWRhdGEga2V5XG4gIGlmIChnZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QpLmxlbmd0aCkge1xuICAgIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGZ1bmN0aW9uIChpdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocmVzdWx0W2ldID09PSBNRVRBREFUQSkge1xuICAgICAgICAgIHNwbGljZShyZXN1bHQsIGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgZ2V0T3duUHJvcGVydHlOYW1lczogZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlLmZcbiAgICB9KTtcbiAgfVxufTtcblxudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW5hYmxlOiBlbmFibGUsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWtEYXRhOiBnZXRXZWFrRGF0YSxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5oaWRkZW5LZXlzW01FVEFEQVRBXSA9IHRydWU7XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQIHx8IHNoYXJlZC5zdGF0ZSkge1xuICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuICB2YXIgd21nZXQgPSB1bmN1cnJ5VGhpcyhzdG9yZS5nZXQpO1xuICB2YXIgd21oYXMgPSB1bmN1cnJ5VGhpcyhzdG9yZS5oYXMpO1xuICB2YXIgd21zZXQgPSB1bmN1cnJ5VGhpcyhzdG9yZS5zZXQpO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKHdtaGFzKHN0b3JlLCBpdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIHdtc2V0KHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0KHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcyhzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAoaGFzT3duKGl0LCBTVEFURSkpIHRocm93IG5ldyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2FycmF5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmd1bWVudCkge1xuICByZXR1cm4gY2xhc3NvZihhcmd1bWVudCkgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyBgSXNDYWxsYWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIGVtcHR5ID0gW107XG52YXIgY29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcbnZhciBjb25zdHJ1Y3RvclJlZ0V4cCA9IC9eXFxzKig/OmNsYXNzfGZ1bmN0aW9uKVxcYi87XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKGNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMpO1xudmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSAhY29uc3RydWN0b3JSZWdFeHAuZXhlYyhub29wKTtcblxudmFyIGlzQ29uc3RydWN0b3JNb2Rlcm4gPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdHJ1Y3Qobm9vcCwgZW1wdHksIGFyZ3VtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBpc0NvbnN0cnVjdG9yTGVnYWN5ID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHN3aXRjaCAoY2xhc3NvZihhcmd1bWVudCkpIHtcbiAgICBjYXNlICdBc3luY0Z1bmN0aW9uJzpcbiAgICBjYXNlICdHZW5lcmF0b3JGdW5jdGlvbic6XG4gICAgY2FzZSAnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbic6IHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIC8vIHdlIGNhbid0IGNoZWNrIC5wcm90b3R5cGUgc2luY2UgY29uc3RydWN0b3JzIHByb2R1Y2VkIGJ5IC5iaW5kIGhhdmVuJ3QgaXRcbiAgICAvLyBgRnVuY3Rpb24jdG9TdHJpbmdgIHRocm93cyBvbiBzb21lIGJ1aWx0LWl0IGZ1bmN0aW9uIGluIHNvbWUgbGVnYWN5IGVuZ2luZXNcbiAgICAvLyAoZm9yIGV4YW1wbGUsIGBET01RdWFkYCBhbmQgc2ltaWxhciBpbiBGRjQxLSlcbiAgICByZXR1cm4gSU5DT1JSRUNUX1RPX1NUUklORyB8fCAhIWV4ZWMoY29uc3RydWN0b3JSZWdFeHAsIGluc3BlY3RTb3VyY2UoYXJndW1lbnQpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuaXNDb25zdHJ1Y3RvckxlZ2FjeS5zaGFtID0gdHJ1ZTtcblxuLy8gYElzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9ICFjb25zdHJ1Y3QgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgY2FsbGVkO1xuICByZXR1cm4gaXNDb25zdHJ1Y3Rvck1vZGVybihpc0NvbnN0cnVjdG9yTW9kZXJuLmNhbGwpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oT2JqZWN0KVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZTsgfSlcbiAgICB8fCBjYWxsZWQ7XG59KSA/IGlzQ29uc3RydWN0b3JMZWdhY3kgOiBpc0NvbnN0cnVjdG9yTW9kZXJuO1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRlc2NyaXB0b3IpIHtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCAmJiAoaGFzT3duKGRlc2NyaXB0b3IsICd2YWx1ZScpIHx8IGhhc093bihkZXNjcmlwdG9yLCAnd3JpdGFibGUnKSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IGlzQ2FsbGFibGUoZGV0ZWN0aW9uKSA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgSXNJbnRlZ3JhbE51bWJlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzaW50ZWdyYWxudW1iZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1udW1iZXItaXNpbnRlZ2VyIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZShpdCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxuLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsIE9iamVjdChpdCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxudmFyIFJlc3VsdFByb3RvdHlwZSA9IFJlc3VsdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCB1bmJvdW5kRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgdmFyIHRoYXQgPSBvcHRpb25zICYmIG9wdGlvbnMudGhhdDtcbiAgdmFyIEFTX0VOVFJJRVMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuQVNfRU5UUklFUyk7XG4gIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gIHZhciBJTlRFUlJVUFRFRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JTlRFUlJVUFRFRCk7XG4gIHZhciBmbiA9IGJpbmQodW5ib3VuZEZ1bmN0aW9uLCB0aGF0KTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICdub3JtYWwnLCBjb25kaXRpb24pO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7XG4gIH07XG5cbiAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChBU19FTlRSSUVTKSB7XG4gICAgICBhbk9iamVjdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICB9IHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlLCBzdG9wKSA6IGZuKHZhbHVlKTtcbiAgfTtcblxuICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAoIWl0ZXJGbikgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGl0ZXJhYmxlKSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShpdGVyYWJsZSk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUsIGl0ZXJGbik7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxGbihzdGVwLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgaXNQcm90b3R5cGVPZihSZXN1bHRQcm90b3R5cGUsIHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcbiIsInZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwga2luZCwgdmFsdWUpIHtcbiAgdmFyIGlubmVyUmVzdWx0LCBpbm5lckVycm9yO1xuICBhbk9iamVjdChpdGVyYXRvcik7XG4gIHRyeSB7XG4gICAgaW5uZXJSZXN1bHQgPSBnZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICBpZiAoIWlubmVyUmVzdWx0KSB7XG4gICAgICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlubmVyUmVzdWx0ID0gY2FsbChpbm5lclJlc3VsdCwgaXRlcmF0b3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlubmVyRXJyb3IgPSB0cnVlO1xuICAgIGlubmVyUmVzdWx0ID0gZXJyb3I7XG4gIH1cbiAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICBpZiAoaW5uZXJFcnJvcikgdGhyb3cgaW5uZXJSZXN1bHQ7XG4gIGFuT2JqZWN0KGlubmVyUmVzdWx0KTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuZWxzZSBpZiAoSVNfUFVSRSkgSXRlcmF0b3JQcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1AQGl0ZXJhdG9yXG5pZiAoIWlzQ2FsbGFibGUoSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICByZWRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgTGVuZ3RoT2ZBcnJheUxpa2VgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0b0xlbmd0aChvYmoubGVuZ3RoKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfSU9TX1BFQkJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZScpO1xudmFyIElTX1dFQk9TX1dFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0Jyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICAvLyBhbHNvIGV4Y2VwdCBXZWJPUyBXZWJraXQgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg5OFxuICBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmICghSVNfSU9TX1BFQkJMRSAmJiBQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIC8vIHdvcmthcm91bmQgb2YgV2ViS2l0IH4gaU9TIFNhZmFyaSAxMC4xIGJ1Z1xuICAgIHByb21pc2UuY29uc3RydWN0b3IgPSBQcm9taXNlO1xuICAgIHRoZW4gPSBiaW5kKHByb21pc2UudGhlbiwgcHJvbWlzZSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gTm9kZS5qcyB3aXRob3V0IHByb21pc2VzXG4gIH0gZWxzZSBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuYmluZChnbG9iYWwpXG4gICAgbWFjcm90YXNrID0gYmluZChtYWNyb3Rhc2ssIGdsb2JhbCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbWFjcm90YXNrKGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzXG4gIHJldHVybiAhU3RyaW5nKHN5bWJvbCkgfHwgIShPYmplY3Qoc3ltYm9sKSBpbnN0YW5jZW9mIFN5bWJvbCkgfHxcbiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlc1xuICAgICFTeW1ib2wuc2hhbSAmJiBWOF9WRVJTSU9OICYmIFY4X1ZFUlNJT04gPCA0MTtcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9yZWxhdGl2ZS11cmwtc3R5bGUgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgdmFyIHVybCA9IG5ldyBVUkwoJ2I/YT0xJmI9MiZjPTMnLCAnaHR0cDovL2EnKTtcbiAgdmFyIHNlYXJjaFBhcmFtcyA9IHVybC5zZWFyY2hQYXJhbXM7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdXJsLnBhdGhuYW1lID0gJ2MlMjBkJztcbiAgc2VhcmNoUGFyYW1zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICBzZWFyY2hQYXJhbXNbJ2RlbGV0ZSddKCdiJyk7XG4gICAgcmVzdWx0ICs9IGtleSArIHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIChJU19QVVJFICYmICF1cmwudG9KU09OKVxuICAgIHx8ICFzZWFyY2hQYXJhbXMuc29ydFxuICAgIHx8IHVybC5ocmVmICE9PSAnaHR0cDovL2EvYyUyMGQ/YT0xJmM9MydcbiAgICB8fCBzZWFyY2hQYXJhbXMuZ2V0KCdjJykgIT09ICczJ1xuICAgIHx8IFN0cmluZyhuZXcgVVJMU2VhcmNoUGFyYW1zKCc/YT0xJykpICE9PSAnYT0xJ1xuICAgIHx8ICFzZWFyY2hQYXJhbXNbSVRFUkFUT1JdXG4gICAgLy8gdGhyb3dzIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwczovL2FAYicpLnVzZXJuYW1lICE9PSAnYSdcbiAgICB8fCBuZXcgVVJMU2VhcmNoUGFyYW1zKG5ldyBVUkxTZWFyY2hQYXJhbXMoJ2E9YicpKS5nZXQoJ2EnKSAhPT0gJ2InXG4gICAgLy8gbm90IHB1bnljb2RlZCBpbiBFZGdlXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL9GC0LXRgdGCJykuaG9zdCAhPT0gJ3huLS1lMWF5YmMnXG4gICAgLy8gbm90IGVzY2FwZWQgaW4gQ2hyb21lIDYyLVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly9hI9CxJykuaGFzaCAhPT0gJyMlRDAlQjEnXG4gICAgLy8gZmFpbHMgaW4gQ2hyb21lIDY2LVxuICAgIHx8IHJlc3VsdCAhPT0gJ2ExYzMnXG4gICAgLy8gdGhyb3dzIGluIFNhZmFyaVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly94JywgdW5kZWZpbmVkKS5ob3N0ICE9PSAneCc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0NhbGxhYmxlKFdlYWtNYXApICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUNhbGxhYmxlKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFDYWxsYWJsZShyZWplY3QpO1xufTtcblxuLy8gYE5ld1Byb21pc2VDYXBhYmlsaXR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbmV3cHJvbWlzZWNhcGFiaWxpdHlcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSBzYWZlXG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gc2hvdWxkIGhhdmUgY29ycmVjdCBvcmRlciBvZiBvcGVyYXRpb25zIChFZGdlIGJ1ZylcbiAgaWYgKERFU0NSSVBUT1JTICYmICRhc3NpZ24oeyBiOiAxIH0sICRhc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pLCB7IGI6IDIgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlO1xuICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN5bWJvbCAtLSBzYWZlXG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtzeW1ib2xdID0gNztcbiAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikgeyBCW2Nocl0gPSBjaHI7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbc3ltYm9sXSAhPSA3IHx8IG9iamVjdEtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbiAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQob2JqZWN0S2V5cyhTKSwgZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGNhbGwocHJvcGVydHlJc0VudW1lcmFibGUsIFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSwgV1NIICovXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyAmJiAhVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIHByb3BzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1ZycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIEVOVU1FUkFCTEUgPSAnZW51bWVyYWJsZSc7XG52YXIgQ09ORklHVVJBQkxFID0gJ2NvbmZpZ3VyYWJsZSc7XG52YXIgV1JJVEFCTEUgPSAnd3JpdGFibGUnO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAodHlwZW9mIE8gPT09ICdmdW5jdGlvbicgJiYgUCA9PT0gJ3Byb3RvdHlwZScgJiYgJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzICYmIFdSSVRBQkxFIGluIEF0dHJpYnV0ZXMgJiYgIUF0dHJpYnV0ZXNbV1JJVEFCTEVdKSB7XG4gICAgdmFyIGN1cnJlbnQgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnRbV1JJVEFCTEVdKSB7XG4gICAgICBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogQ09ORklHVVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0NPTkZJR1VSQUJMRV0gOiBjdXJyZW50W0NPTkZJR1VSQUJMRV0sXG4gICAgICAgIGVudW1lcmFibGU6IEVOVU1FUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbRU5VTUVSQUJMRV0gOiBjdXJyZW50W0VOVU1FUkFCTEVdLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9IHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG59IDogJGRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzT3duKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYsIE8sIFApLCBPW1BdKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlICovXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gYXJyYXlTbGljZSh3aW5kb3dOYW1lcyk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiBjbGFzc29mKGl0KSA9PSAnV2luZG93J1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiAkZ2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0ID0gZ2xvYmFsLk9iamVjdDtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIHZhciBvYmplY3QgPSB0b09iamVjdChPKTtcbiAgaWYgKGhhc093bihvYmplY3QsIElFX1BST1RPKSkgcmV0dXJuIG9iamVjdFtJRV9QUk9UT107XG4gIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgaWYgKGlzQ2FsbGFibGUoY29uc3RydWN0b3IpICYmIG9iamVjdCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1ub24tZXh0ZW5zaWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSAtLSBzYWZlXG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJGlzRXh0ZW5zaWJsZSgxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzZXh0ZW5zaWJsZVxubW9kdWxlLmV4cG9ydHMgPSAoRkFJTFNfT05fUFJJTUlUSVZFUyB8fCBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUpID8gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgJiYgY2xhc3NvZihpdCkgPT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZTtcbn0gOiAkaXNFeHRlbnNpYmxlO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKHt9LmlzUHJvdG90eXBlT2YpO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzT3duKGhpZGRlbktleXMsIGtleSkgJiYgaGFzT3duKE8sIGtleSkgJiYgcHVzaChyZXN1bHQsIGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXNPd24oTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcHVzaChyZXN1bHQsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gLS0gc2FmZSAqL1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgc2V0dGVyID0gdW5jdXJyeVRoaXMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0KTtcbiAgICBzZXR0ZXIodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJykuZjtcblxudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gdW5jdXJyeVRoaXMoJHByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbi8vIGBPYmplY3QueyBlbnRyaWVzLCB2YWx1ZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUT19FTlRSSUVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUoTywga2V5KSkge1xuICAgICAgICBwdXNoKHJlc3VsdCwgVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiAgZW50cmllczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuICB2YWx1ZXM6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChpc0NhbGxhYmxlKGZuID0gaW5wdXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KGtleXMsIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmhlYWQgPSBudWxsO1xuICB0aGlzLnRhaWwgPSBudWxsO1xufTtcblxuUXVldWUucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGVudHJ5ID0geyBpdGVtOiBpdGVtLCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMuaGVhZCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtcbiAgICBlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmhlYWQ7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICB0aGlzLmhlYWQgPSBlbnRyeS5uZXh0O1xuICAgICAgaWYgKHRoaXMudGFpbCA9PT0gZW50cnkpIHRoaXMudGFpbCA9IG51bGw7XG4gICAgICByZXR1cm4gZW50cnkuaXRlbTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkNPTkZJR1VSQUJMRTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgbmFtZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5hbWUgOiBrZXk7XG4gIHZhciBzdGF0ZTtcbiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSB7XG4gICAgaWYgKFN0cmluZyhuYW1lKS5zbGljZSgwLCA3KSA9PT0gJ1N5bWJvbCgnKSB7XG4gICAgICBuYW1lID0gJ1snICsgU3RyaW5nKG5hbWUpLnJlcGxhY2UoL15TeW1ib2xcXCgoW14pXSopXFwpLywgJyQxJykgKyAnXSc7XG4gICAgfVxuICAgIGlmICghaGFzT3duKHZhbHVlLCAnbmFtZScpIHx8IChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSAmJiB2YWx1ZS5uYW1lICE9PSBuYW1lKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIG5hbWUpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyA/IG5hbWUgOiAnJyk7XG4gICAgfVxuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gaXNDYWxsYWJsZSh0aGlzKSAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAoaXNDYWxsYWJsZShleGVjKSkge1xuICAgIHZhciByZXN1bHQgPSBjYWxsKGV4ZWMsIFIsIFMpO1xuICAgIGlmIChyZXN1bHQgIT09IG51bGwpIGFuT2JqZWN0KHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSA9PT0gJ1JlZ0V4cCcpIHJldHVybiBjYWxsKHJlZ2V4cEV4ZWMsIFIsIFMpO1xuICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgbmF0aXZlUmVwbGFjZSA9IHNoYXJlZCgnbmF0aXZlLXN0cmluZy1yZXBsYWNlJywgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGluZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUxLCAnYScpO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0c7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyaW5nKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmF3ID0gc3RhdGUucmF3O1xuICAgIHZhciByZXN1bHQsIHJlQ29weSwgbGFzdEluZGV4LCBtYXRjaCwgaSwgb2JqZWN0LCBncm91cDtcblxuICAgIGlmIChyYXcpIHtcbiAgICAgIHJhdy5sYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICByZXN1bHQgPSBjYWxsKHBhdGNoZWRFeGVjLCByYXcsIHN0cik7XG4gICAgICByZS5sYXN0SW5kZXggPSByYXcubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgZ3JvdXBzID0gc3RhdGUuZ3JvdXBzO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSBjYWxsKHJlZ2V4cEZsYWdzLCByZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsICd5JywgJycpO1xuICAgICAgaWYgKGluZGV4T2YoZmxhZ3MsICdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IHN0cmluZ1NsaWNlKHN0ciwgcmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIGNoYXJBdChzdHIsIHJlLmxhc3RJbmRleCAtIDEpICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBjYWxsKG5hdGl2ZUV4ZWMsIHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IHN0cmluZ1NsaWNlKG1hdGNoLmlucHV0LCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBzdHJpbmdTbGljZShtYXRjaFswXSwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBjYWxsKG5hdGl2ZVJlcGxhY2UsIG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2ggJiYgZ3JvdXBzKSB7XG4gICAgICBtYXRjaC5ncm91cHMgPSBvYmplY3QgPSBjcmVhdGUobnVsbCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2ldO1xuICAgICAgICBvYmplY3RbZ3JvdXBbMF1dID0gbWF0Y2hbZ3JvdXBbMV1dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuLy8gVUMgQnJvd3NlciBidWdcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMDA4XG52YXIgTUlTU0VEX1NUSUNLWSA9IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISRSZWdFeHAoJ2EnLCAneScpLnN0aWNreTtcbn0pO1xuXG52YXIgQlJPS0VOX0NBUkVUID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSAkUmVnRXhwKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQlJPS0VOX0NBUkVUOiBCUk9LRU5fQ0FSRVQsXG4gIE1JU1NFRF9TVElDS1k6IE1JU1NFRF9TVElDS1ksXG4gIFVOU1VQUE9SVEVEX1k6IFVOU1VQUE9SVEVEX1lcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnLicsICdzJykgLT4gLy4vcyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcuJywgJ3MnKTtcbiAgcmV0dXJuICEocmUuZG90QWxsICYmIHJlLmV4ZWMoJ1xcbicpICYmIHJlLmZsYWdzID09PSAncycpO1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcoPzxhPmIpJywgJ2cnKTtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2InKS5ncm91cHMuYSAhPT0gJ2InIHx8XG4gICAgJ2InLnJlcGxhY2UocmUsICckPGE+YycpICE9PSAnYmMnO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBUQUcsIFNUQVRJQykge1xuICBpZiAodGFyZ2V0ICYmICFTVEFUSUMpIHRhcmdldCA9IHRhcmdldC5wcm90b3R5cGU7XG4gIGlmICh0YXJnZXQgJiYgIWhhc093bih0YXJnZXQsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMjAuMicsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMiBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNvbnN0cnVjdG9yJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhQ29uc3RydWN0b3IoUyk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXJPckluZmluaXR5KHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IGNoYXJBdChTLCBwb3NpdGlvbilcbiAgICAgICAgICA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IHN0cmluZ1NsaWNlKFMsIHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpXG4gICAgICAgICAgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9WZXJzaW9uXFwvMTAoPzpcXC5cXGQrKXsxLDJ9KD86IFtcXHcuL10rKT8oPzogTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciAkcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgcmVwZWF0ID0gdW5jdXJyeVRoaXMoJHJlcGVhdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2VpbCA9IE1hdGguY2VpbDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBwYWRTdGFydCwgcGFkRW5kIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfRU5EKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIG1heExlbmd0aCwgZmlsbFN0cmluZykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICAgIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IHRvU3RyaW5nKGZpbGxTdHJpbmcpO1xuICAgIHZhciBmaWxsTGVuLCBzdHJpbmdGaWxsZXI7XG4gICAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gICAgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgICBzdHJpbmdGaWxsZXIgPSByZXBlYXQoZmlsbFN0ciwgY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ1NsaWNlKHN0cmluZ0ZpbGxlciwgMCwgZmlsbExlbik7XG4gICAgcmV0dXJuIElTX0VORCA/IFMgKyBzdHJpbmdGaWxsZXIgOiBzdHJpbmdGaWxsZXIgKyBTO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzL2Jsb2IvbWFzdGVyL3B1bnljb2RlLmpzXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgbWF4SW50ID0gMjE0NzQ4MzY0NzsgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxudmFyIGJhc2UgPSAzNjtcbnZhciB0TWluID0gMTtcbnZhciB0TWF4ID0gMjY7XG52YXIgc2tldyA9IDM4O1xudmFyIGRhbXAgPSA3MDA7XG52YXIgaW5pdGlhbEJpYXMgPSA3MjtcbnZhciBpbml0aWFsTiA9IDEyODsgLy8gMHg4MFxudmFyIGRlbGltaXRlciA9ICctJzsgLy8gJ1xceDJEJ1xudmFyIHJlZ2V4Tm9uQVNDSUkgPSAvW15cXDAtXFx1MDA3RV0vOyAvLyBub24tQVNDSUkgY2hhcnNcbnZhciByZWdleFNlcGFyYXRvcnMgPSAvWy5cXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2c7IC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcbnZhciBPVkVSRkxPV19FUlJPUiA9ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2Vzcyc7XG52YXIgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluO1xuXG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhyZWdleFNlcGFyYXRvcnMuZXhlYyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xudmFyIHRvTG93ZXJDYXNlID0gdW5jdXJyeVRoaXMoJycudG9Mb3dlckNhc2UpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqL1xudmFyIHVjczJkZWNvZGUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgdmFyIGNvdW50ZXIgPSAwO1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBjaGFyQ29kZUF0KHN0cmluZywgY291bnRlcisrKTtcbiAgICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgICAvLyBJdCdzIGEgaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyLlxuICAgICAgdmFyIGV4dHJhID0gY2hhckNvZGVBdChzdHJpbmcsIGNvdW50ZXIrKyk7XG4gICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gTG93IHN1cnJvZ2F0ZS5cbiAgICAgICAgcHVzaChvdXRwdXQsICgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJdCdzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZVxuICAgICAgICAvLyBuZXh0IGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cbiAgICAgICAgcHVzaChvdXRwdXQsIHZhbHVlKTtcbiAgICAgICAgY291bnRlci0tO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKG91dHB1dCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKi9cbnZhciBkaWdpdFRvQmFzaWMgPSBmdW5jdGlvbiAoZGlnaXQpIHtcbiAgLy8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcbiAgLy8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG4gIHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNik7XG59O1xuXG4vKipcbiAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuICovXG52YXIgYWRhcHQgPSBmdW5jdGlvbiAoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG4gIHZhciBrID0gMDtcbiAgZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcbiAgZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuICB3aGlsZSAoZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxKSB7XG4gICAgZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuICAgIGsgKz0gYmFzZTtcbiAgfVxuICByZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcbiAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKi9cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuXG4gIC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIGFuIGFycmF5IG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG4gIGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cbiAgLy8gQ2FjaGUgdGhlIGxlbmd0aC5cbiAgdmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHN0YXRlLlxuICB2YXIgbiA9IGluaXRpYWxOO1xuICB2YXIgZGVsdGEgPSAwO1xuICB2YXIgYmlhcyA9IGluaXRpYWxCaWFzO1xuICB2YXIgaSwgY3VycmVudFZhbHVlO1xuXG4gIC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHMuXG4gIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgIGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG4gICAgICBwdXNoKG91dHB1dCwgZnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7IC8vIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cbiAgdmFyIGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGg7IC8vIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXG4gIC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIHdpdGggYSBkZWxpbWl0ZXIgdW5sZXNzIGl0J3MgZW1wdHkuXG4gIGlmIChiYXNpY0xlbmd0aCkge1xuICAgIHB1c2gob3V0cHV0LCBkZWxpbWl0ZXIpO1xuICB9XG5cbiAgLy8gTWFpbiBlbmNvZGluZyBsb29wOlxuICB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuICAgIC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHQgbGFyZ2VyIG9uZTpcbiAgICB2YXIgbSA9IG1heEludDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcbiAgICAgICAgbSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93LlxuICAgIHZhciBoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG4gICAgaWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcbiAgICAgIHRocm93IFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpO1xuICAgIH1cblxuICAgIGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG4gICAgbiA9IG07XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuICAgICAgICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuICAgICAgICAvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cbiAgICAgICAgdmFyIHEgPSBkZWx0YTtcbiAgICAgICAgdmFyIGsgPSBiYXNlO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIHZhciB0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcbiAgICAgICAgICBpZiAocSA8IHQpIGJyZWFrO1xuICAgICAgICAgIHZhciBxTWludXNUID0gcSAtIHQ7XG4gICAgICAgICAgdmFyIGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcbiAgICAgICAgICBwdXNoKG91dHB1dCwgZnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QpKSk7XG4gICAgICAgICAgcSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcbiAgICAgICAgICBrICs9IGJhc2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdXNoKG91dHB1dCwgZnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxKSkpO1xuICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuICAgICAgICBkZWx0YSA9IDA7XG4gICAgICAgIGhhbmRsZWRDUENvdW50Kys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVsdGErKztcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIGpvaW4ob3V0cHV0LCAnJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgZW5jb2RlZCA9IFtdO1xuICB2YXIgbGFiZWxzID0gc3BsaXQocmVwbGFjZSh0b0xvd2VyQ2FzZShpbnB1dCksIHJlZ2V4U2VwYXJhdG9ycywgJ1xcdTAwMkUnKSwgJy4nKTtcbiAgdmFyIGksIGxhYmVsO1xuICBmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGFiZWwgPSBsYWJlbHNbaV07XG4gICAgcHVzaChlbmNvZGVkLCBleGVjKHJlZ2V4Tm9uQVNDSUksIGxhYmVsKSA/ICd4bi0tJyArIGVuY29kZShsYWJlbCkgOiBsYWJlbCk7XG4gIH1cbiAgcmV0dXJuIGpvaW4oZW5jb2RlZCwgJy4nKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwZWF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXJPckluZmluaXR5KGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG51bWJlciBvZiByZXBldGl0aW9ucycpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzdWx0ICs9IHN0cjtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciBub24gPSAnXFx1MjAwQlxcdTAwODVcXHUxODBFJztcblxuLy8gY2hlY2sgdGhhdCBhIG1ldGhvZCB3b3JrcyB3aXRoIHRoZSBjb3JyZWN0IGxpc3Rcbi8vIG9mIHdoaXRlc3BhY2VzIGFuZCBoYXMgYSBjb3JyZWN0IG5hbWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKClcbiAgICAgIHx8IG5vbltNRVRIT0RfTkFNRV0oKSAhPT0gbm9uXG4gICAgICB8fCAoUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdLm5hbWUgIT09IE1FVEhPRF9OQU1FKTtcbiAgfSk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciB3aGl0ZXNwYWNlID0gJ1snICsgd2hpdGVzcGFjZXMgKyAnXSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgd2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVJpZ2h0LCB0cmltRW5kIH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICB0cmltOiBjcmVhdGVNZXRob2QoMylcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgbG9jYXRpb24sIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG50cnkge1xuICAvLyBEZW5vIHRocm93cyBhIFJlZmVyZW5jZUVycm9yIG9uIGBsb2NhdGlvbmAgYWNjZXNzIHdpdGhvdXQgYC0tbG9jYXRpb25gIGZsYWdcbiAgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgaWYgKGhhc093bihxdWV1ZSwgaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShTdHJpbmcoaWQpLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgYXBwbHkoaXNDYWxsYWJsZShmbikgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChJU19OT0RFKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIC8vIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjI0XG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0KTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICBpc0NhbGxhYmxlKGdsb2JhbC5wb3N0TWVzc2FnZSkgJiZcbiAgICAhZ2xvYmFsLmltcG9ydFNjcmlwdHMgJiZcbiAgICBsb2NhdGlvbiAmJiBsb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2ZpbGU6JyAmJlxuICAgICFmYWlscyhwb3N0KVxuICApIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxuLy8gYHRoaXNOdW1iZXJWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRoaXNudW1iZXJ2YWx1ZVxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcygxLjAudmFsdWVPZik7XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuXG4vLyBgVG9JbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGggb3IgaW5kZXgnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyT3JJbmZpbml0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlcm9yaW5maW5pdHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBudW1iZXIgPSArYXJndW1lbnQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gc2FmZVxuICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IChudW1iZXIgPiAwID8gZmxvb3IgOiBjZWlsKShudW1iZXIpO1xufTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgT2JqZWN0ID0gZ2xvYmFsLk9iamVjdDtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9Qb3NpdGl2ZUludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlcicpO1xuXG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgdmFyIG9mZnNldCA9IHRvUG9zaXRpdmVJbnRlZ2VyKGl0KTtcbiAgaWYgKG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQnKTtcbiAgcmV0dXJuIG9mZnNldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpdCk7XG4gIGlmIChyZXN1bHQgPCAwKSB0aHJvdyBSYW5nZUVycm9yKFwiVGhlIGFyZ3VtZW50IGNhbid0IGJlIGxlc3MgdGhhbiAwXCIpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGV4b3RpY1RvUHJpbSA9IGdldE1ldGhvZChpbnB1dCwgVE9fUFJJTUlUSVZFKTtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKGV4b3RpY1RvUHJpbSkge1xuICAgIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnZGVmYXVsdCc7XG4gICAgcmVzdWx0ID0gY2FsbChleG90aWNUb1ByaW0sIGlucHV0LCBwcmVmKTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG4gIH1cbiAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdudW1iZXInO1xuICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgcHJlZik7XG59O1xuIiwidmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xuXG4vLyBgVG9Qcm9wZXJ0eUtleWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ3N0cmluZycpO1xuICByZXR1cm4gaXNTeW1ib2woa2V5KSA/IGtleSA6IGtleSArICcnO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ1N5bWJvbCcpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcbiAgcmV0dXJuIFN0cmluZyhhcmd1bWVudCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIFN0cmluZyhhcmd1bWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBBcnJheUJ1ZmZlciA9IEFycmF5QnVmZmVyTW9kdWxlLkFycmF5QnVmZmVyO1xudmFyIEFycmF5QnVmZmVyUHJvdG90eXBlID0gQXJyYXlCdWZmZXIucHJvdG90eXBlO1xudmFyIERhdGFWaWV3ID0gQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcbnZhciBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiA9IEFycmF5QnVmZmVyVmlld0NvcmUuVFlQRURfQVJSQVlfQ09OU1RSVUNUT1I7XG52YXIgVFlQRURfQVJSQVlfVEFHID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UWVBFRF9BUlJBWV9UQUc7XG52YXIgVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuVHlwZWRBcnJheTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5UHJvdG90eXBlO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgaXNUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5pc1R5cGVkQXJyYXk7XG52YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGgnO1xuXG52YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICBhVHlwZWRBcnJheUNvbnN0cnVjdG9yKEMpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgQyhsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcylba2V5XTtcbiAgfSB9KTtcbn07XG5cbnZhciBpc0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBrbGFzcztcbiAgcmV0dXJuIGlzUHJvdG90eXBlT2YoQXJyYXlCdWZmZXJQcm90b3R5cGUsIGl0KSB8fCAoa2xhc3MgPSBjbGFzc29mKGl0KSkgPT0gJ0FycmF5QnVmZmVyJyB8fCBrbGFzcyA9PSAnU2hhcmVkQXJyYXlCdWZmZXInO1xufTtcblxudmFyIGlzVHlwZWRBcnJheUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gIHJldHVybiBpc1R5cGVkQXJyYXkodGFyZ2V0KVxuICAgICYmICFpc1N5bWJvbChrZXkpXG4gICAgJiYga2V5IGluIHRhcmdldFxuICAgICYmIGlzSW50ZWdyYWxOdW1iZXIoK2tleSlcbiAgICAmJiBrZXkgPj0gMDtcbn07XG5cbnZhciB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5KVxuICAgID8gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDIsIHRhcmdldFtrZXldKVxuICAgIDogbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbn07XG5cbnZhciB3cmFwcGVkRGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICBrZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gIGlmIChpc1R5cGVkQXJyYXlJbmRleCh0YXJnZXQsIGtleSlcbiAgICAmJiBpc09iamVjdChkZXNjcmlwdG9yKVxuICAgICYmIGhhc093bihkZXNjcmlwdG9yLCAndmFsdWUnKVxuICAgICYmICFoYXNPd24oZGVzY3JpcHRvciwgJ2dldCcpXG4gICAgJiYgIWhhc093bihkZXNjcmlwdG9yLCAnc2V0JylcbiAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZVxuICAgICYmICghaGFzT3duKGRlc2NyaXB0b3IsICd3cml0YWJsZScpIHx8IGRlc2NyaXB0b3Iud3JpdGFibGUpXG4gICAgJiYgKCFoYXNPd24oZGVzY3JpcHRvciwgJ2VudW1lcmFibGUnKSB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUpXG4gICkge1xuICAgIHRhcmdldFtrZXldID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSB3cmFwcGVkRGVmaW5lUHJvcGVydHk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdidWZmZXInKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J5dGVPZmZzZXQnKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J5dGVMZW5ndGgnKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2xlbmd0aCcpO1xuICB9XG5cbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfSwge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBkZWZpbmVQcm9wZXJ0eTogd3JhcHBlZERlZmluZVByb3BlcnR5XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICB2YXIgQllURVMgPSBUWVBFLm1hdGNoKC9cXGQrJC8pWzBdIC8gODtcbiAgICB2YXIgQ09OU1RSVUNUT1JfTkFNRSA9IFRZUEUgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgVFlQRTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBUWVBFO1xuICAgIHZhciBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQ09OU1RSVUNUT1JfTkFNRV07XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICByZXR1cm4gZGF0YS52aWV3W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSByb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4RkYgPyAweEZGIDogdmFsdWUgJiAweEZGO1xuICAgICAgZGF0YS52aWV3W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdmFsdWUsIHRydWUpO1xuICAgIH07XG5cbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgbmF0aXZlRGVmaW5lUHJvcGVydHkodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCBvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aDtcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBieXRlT2Zmc2V0ID0gdG9PZmZzZXQob2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBieXRlT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBieXRlT2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGwodHlwZWRBcnJheUZyb20sIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICAgICAgYnl0ZU9mZnNldDogYnl0ZU9mZnNldCxcbiAgICAgICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aDogbGVuZ3RoLFxuICAgICAgICAgIHZpZXc6IG5ldyBEYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihUeXBlZEFycmF5Q29uc3RydWN0b3IsIFR5cGVkQXJyYXkpO1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShUeXBlZEFycmF5UHJvdG90eXBlKTtcbiAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKGR1bW15LCBkYXRhLCB0eXBlZEFycmF5T2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UoZHVtbXksIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiBpbmhlcml0SWZSZXF1aXJlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IodG9JbmRleChkYXRhKSk7XG4gICAgICAgICAgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhLCB0b09mZnNldCh0eXBlZEFycmF5T2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6IHR5cGVkQXJyYXlPZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IoZGF0YSwgdG9PZmZzZXQodHlwZWRBcnJheU9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IoZGF0YSk7XG4gICAgICAgICAgaWYgKGlzVHlwZWRBcnJheShkYXRhKSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgICAgcmV0dXJuIGNhbGwodHlwZWRBcnJheUZyb20sIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIH0oKSwgZHVtbXksIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcik7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihUeXBlZEFycmF5Q29uc3RydWN0b3IsIFR5cGVkQXJyYXkpO1xuICAgICAgZm9yRWFjaChnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBrZXksIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcltrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlO1xuICAgIH1cblxuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUuY29uc3RydWN0b3IgIT09IFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcikge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheUNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheUNvbnN0cnVjdG9yKTtcblxuICAgIGlmIChUWVBFRF9BUlJBWV9UQUcpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsIFRZUEVEX0FSUkFZX1RBRywgQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgfVxuXG4gICAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbiAgICAkKHtcbiAgICAgIGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBUeXBlZEFycmF5Q29uc3RydWN0b3IgIT0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBzaGFtOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXU1xuICAgIH0sIGV4cG9ydGVkKTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3IsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG4gICAgfVxuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcbiAgICB9XG5cbiAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG5cbnZhciBBcnJheUJ1ZmZlciA9IGdsb2JhbC5BcnJheUJ1ZmZlcjtcbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIEludDhBcnJheSgxKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5ldyBJbnQ4QXJyYXkoLTEpO1xufSkgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgbmV3IEludDhBcnJheSgpO1xuICBuZXcgSW50OEFycmF5KG51bGwpO1xuICBuZXcgSW50OEFycmF5KDEuNSk7XG4gIG5ldyBJbnQ4QXJyYXkoaXRlcmFibGUpO1xufSwgdHJ1ZSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBTYWZhcmkgKDExKykgYnVnIC0gYSByZWFzb24gd2h5IGV2ZW4gU2FmYXJpIDEzIHNob3VsZCBsb2FkIGEgdHlwZWQgYXJyYXkgcG9seWZpbGxcbiAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKDIpLCAxLCB1bmRlZmluZWQpLmxlbmd0aCAhPT0gMTtcbn0pO1xuIiwidmFyIGFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tLWNvbnN0cnVjdG9yLWFuZC1saXN0Jyk7XG52YXIgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsaXN0KSB7XG4gIHJldHVybiBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QodHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihpbnN0YW5jZSksIGxpc3QpO1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNvbnN0cnVjdG9yJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICB2YXIgQyA9IGFDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGksIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dDtcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICFpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgTyA9IFtdO1xuICAgIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgTy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgIH1cbiAgfVxuICBpZiAobWFwcGluZyAmJiBhcmd1bWVudHNMZW5ndGggPiAyKSB7XG4gICAgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNbMl0pO1xuICB9XG4gIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQykpKGxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UWVBFRF9BUlJBWV9DT05TVFJVQ1RPUjtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4vLyBhIHBhcnQgb2YgYFR5cGVkQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyN0eXBlZGFycmF5LXNwZWNpZXMtY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gIHJldHVybiBhVHlwZWRBcnJheUNvbnN0cnVjdG9yKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbEFycmF5LCBvcmlnaW5hbEFycmF5W1RZUEVEX0FSUkFZX0NPTlNUUlVDVE9SXSkpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArIHRvU3RyaW5nKCsraWQgKyBwb3N0Zml4LCAzNik7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDM2LVxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzMzNFxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdwcm90b3R5cGUnLCB7XG4gICAgdmFsdWU6IDQyLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KS5wcm90b3R5cGUgIT0gNDI7XG59KTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBzeW1ib2xGb3IgPSBTeW1ib2wgJiYgU3ltYm9sWydmb3InXTtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXNPd24oV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSB8fCAhKE5BVElWRV9TWU1CT0wgfHwgdHlwZW9mIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9PSAnc3RyaW5nJykpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAnU3ltYm9sLicgKyBuYW1lO1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhc093bihTeW1ib2wsIG5hbWUpKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgfSBlbHNlIGlmIChVU0VfU1lNQk9MX0FTX1VJRCAmJiBzeW1ib2xGb3IpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IHN5bWJvbEZvcihkZXNjcmlwdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgfVxuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiLy8gYSBzdHJpbmcgb2YgYWxsIHZhbGlkIHVuaWNvZGUgd2hpdGVzcGFjZXNcbm1vZHVsZS5leHBvcnRzID0gJ1xcdTAwMDlcXHUwMDBBXFx1MDAwQlxcdTAwMENcXHUwMDBEXFx1MDAyMFxcdTAwQTBcXHUxNjgwXFx1MjAwMFxcdTIwMDFcXHUyMDAyJyArXG4gICdcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBBcnJheUJ1ZmZlciA9IEFycmF5QnVmZmVyTW9kdWxlLkFycmF5QnVmZmVyO1xudmFyIERhdGFWaWV3ID0gQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXc7XG52YXIgRGF0YVZpZXdQcm90b3R5cGUgPSBEYXRhVmlldy5wcm90b3R5cGU7XG52YXIgdW4kQXJyYXlCdWZmZXJTbGljZSA9IHVuY3VycnlUaGlzKEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSk7XG52YXIgZ2V0VWludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5nZXRVaW50OCk7XG52YXIgc2V0VWludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5zZXRVaW50OCk7XG5cbnZhciBJTkNPUlJFQ1RfU0xJQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3IEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pO1xuXG4vLyBgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlidWZmZXIucHJvdG90eXBlLnNsaWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXlCdWZmZXInLCBwcm90bzogdHJ1ZSwgdW5zYWZlOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9TTElDRSB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKHVuJEFycmF5QnVmZmVyU2xpY2UgJiYgZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1biRBcnJheUJ1ZmZlclNsaWNlKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3U291cmNlID0gbmV3IERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VGFyZ2V0ID0gbmV3IERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHNldFVpbnQ4KHZpZXdUYXJnZXQsIGluZGV4KyssIGdldFVpbnQ4KHZpZXdTb3VyY2UsIGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0XG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAaXNDb25jYXRTcHJlYWRhYmxlIGFuZCBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KGFyZykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShFKTtcbiAgICAgICAgaWYgKG4gKyBsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG4gPj0gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnZmlsdGVyJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgRklORCA9ICdmaW5kJztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORCBpbiBbXSkgQXJyYXkoMSlbRklORF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1mb3JlYWNoIC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFtdLmZvckVhY2ggIT0gZm9yRWFjaCB9LCB7XG4gIGZvckVhY2g6IGZvckVhY2hcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWluZGV4b2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyICRJbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIHVuJEluZGV4T2YgPSB1bmN1cnJ5VGhpcyhbXS5pbmRleE9mKTtcblxudmFyIE5FR0FUSVZFX1pFUk8gPSAhIXVuJEluZGV4T2YgJiYgMSAvIHVuJEluZGV4T2YoWzFdLCAxLCAtMCkgPCAwO1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdpbmRleE9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHZhciBmcm9tSW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyB1biRJbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkgfHwgMFxuICAgICAgOiAkSW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxuLy8gYEFycmF5LmlzQXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5pc2FycmF5XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNBcnJheTogaXNBcnJheVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBBUlJBWV9JVEVSQVRPUiA9ICdBcnJheSBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4vLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBpbmRleCwgZG9uZTogZmFsc2UgfTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiB0YXJnZXRbaW5kZXhdLCBkb25lOiBmYWxzZSB9O1xuICByZXR1cm4geyB2YWx1ZTogW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwgZG9uZTogZmFsc2UgfTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxudmFyIHZhbHVlcyA9IEl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vLyBWOCB+IENocm9tZSA0NS0gYnVnXG5pZiAoIUlTX1BVUkUgJiYgREVTQ1JJUFRPUlMgJiYgdmFsdWVzLm5hbWUgIT09ICd2YWx1ZXMnKSB0cnkge1xuICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsICduYW1lJywgeyB2YWx1ZTogJ3ZhbHVlcycgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciB1biRKb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbnZhciBFUzNfU1RSSU5HUyA9IEluZGV4ZWRPYmplY3QgIT0gT2JqZWN0O1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdqb2luJywgJywnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmpvaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEVTM19TVFJJTkdTIHx8ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gdW4kSm9pbih0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIENIUk9NRV9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ3JlZHVjZScpO1xuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfHwgQ0hST01FX0JVRyB9LCB7XG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBsZW5ndGgsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHVuJFNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKGlzQ29uc3RydWN0b3IoQ29uc3RydWN0b3IpICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuJFNsaWNlKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5zb21lO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ3NvbWUnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NwbGljZScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBsZW5ndGggZXhjZWVkZWQnO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGFjdHVhbFN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpbnNlcnRDb3VudCwgYWN0dWFsRGVsZXRlQ291bnQsIEEsIGssIGZyb20sIHRvO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICAgIGluc2VydENvdW50ID0gYWN0dWFsRGVsZXRlQ291bnQgPSAwO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAxKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IDA7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IGxlbiAtIGFjdHVhbFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFyZ3VtZW50c0xlbmd0aCAtIDI7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IG1pbihtYXgodG9JbnRlZ2VyT3JJbmZpbml0eShkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG4gICAgfVxuICAgIGlmIChsZW4gKyBpbnNlcnRDb3VudCAtIGFjdHVhbERlbGV0ZUNvdW50ID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQpO1xuICAgIH1cbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgIGlmIChmcm9tIGluIE8pIGNyZWF0ZVByb3BlcnR5KEEsIGssIE9bZnJvbV0pO1xuICAgIH1cbiAgICBBLmxlbmd0aCA9IGFjdHVhbERlbGV0ZUNvdW50O1xuICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBhY3R1YWxTdGFydDsgayA8IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSBsZW47IGsgPiBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50OyBrLS0pIGRlbGV0ZSBPW2sgLSAxXTtcbiAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrID4gYWN0dWFsU3RhcnQ7IGstLSkge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMTtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgT1trICsgYWN0dWFsU3RhcnRdID0gYXJndW1lbnRzW2sgKyAyXTtcbiAgICB9XG4gICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50O1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgdW4kRGF0ZVRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZVtUT19TVFJJTkddKTtcbnZhciBnZXRUaW1lID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRUaW1lKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChTdHJpbmcobmV3IERhdGUoTmFOKSkgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlZGVmaW5lKERhdGVQcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZSh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB1biREYXRlVG9TdHJpbmcodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRlVOQ1RJT05fTkFNRV9FWElTVFMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkVYSVNUUztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZyk7XG52YXIgbmFtZVJFID0gL2Z1bmN0aW9uXFxiKD86XFxzfFxcL1xcKltcXFNcXHNdKj9cXCpcXC98XFwvXFwvW15cXG5cXHJdKltcXG5cXHJdKykqKFteXFxzKC9dKikvO1xudmFyIHJlZ0V4cEV4ZWMgPSB1bmN1cnJ5VGhpcyhuYW1lUkUuZXhlYyk7XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhRlVOQ1RJT05fTkFNRV9FWElTVFMpIHtcbiAgZGVmaW5lUHJvcGVydHkoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVnRXhwRXhlYyhuYW1lUkUsIGZ1bmN0aW9uVG9TdHJpbmcodGhpcykpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbnZhciB0ZXN0ZXIgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbnZhciBsb3cgPSAvXltcXHVEODAwLVxcdURCRkZdJC87XG52YXIgaGkgPSAvXltcXHVEQzAwLVxcdURGRkZdJC87XG5cbnZhciBmaXggPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIHZhciBwcmV2ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0IC0gMSk7XG4gIHZhciBuZXh0ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0ICsgMSk7XG4gIGlmICgoZXhlYyhsb3csIG1hdGNoKSAmJiAhZXhlYyhoaSwgbmV4dCkpIHx8IChleGVjKGhpLCBtYXRjaCkgJiYgIWV4ZWMobG93LCBwcmV2KSkpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArIG51bWJlclRvU3RyaW5nKGNoYXJDb2RlQXQobWF0Y2gsIDApLCAxNik7XG4gIH0gcmV0dXJuIG1hdGNoO1xufTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRzdHJpbmdpZnkoJ1xcdURGMDZcXHVEODM0JykgIT09ICdcIlxcXFx1ZGYwNlxcXFx1ZDgzNFwiJ1xuICAgIHx8ICRzdHJpbmdpZnkoJ1xcdURFQUQnKSAhPT0gJ1wiXFxcXHVkZWFkXCInO1xufSk7XG5cbmlmICgkc3RyaW5naWZ5KSB7XG4gIC8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtd2VsbC1mb3JtZWQtc3RyaW5naWZ5XG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkobCk7IGkgPCBsOyBpKyspIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICB2YXIgcmVzdWx0ID0gYXBwbHkoJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG4gICAgICByZXR1cm4gdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlcGxhY2UocmVzdWx0LCB0ZXN0ZXIsIGZpeCkgOiByZXN1bHQ7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xuXG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgTmF0aXZlTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgTnVtYmVyUHJvdG90eXBlID0gTmF0aXZlTnVtYmVyLnByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGFycmF5U2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xuXG4vLyBgVG9OdW1lcmljYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1lcmljXG52YXIgdG9OdW1lcmljID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcmltVmFsdWUgPSB0b1ByaW1pdGl2ZSh2YWx1ZSwgJ251bWJlcicpO1xuICByZXR1cm4gdHlwZW9mIHByaW1WYWx1ZSA9PSAnYmlnaW50JyA/IHByaW1WYWx1ZSA6IHRvTnVtYmVyKHByaW1WYWx1ZSk7XG59O1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnbnVtYmVyJyk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmIChpc1N5bWJvbChpdCkpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSB0cmltKGl0KTtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoaXQsIDApO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGNoYXJDb2RlQXQoaXQsIDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoY2hhckNvZGVBdChpdCwgMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IGFycmF5U2xpY2UoaXQsIDIpO1xuICAgICAgbGVuZ3RoID0gZGlnaXRzLmxlbmd0aDtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb2RlID0gY2hhckNvZGVBdChkaWdpdHMsIGluZGV4KTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKE5VTUJFUiwgIU5hdGl2ZU51bWJlcignIDBvMScpIHx8ICFOYXRpdmVOdW1iZXIoJzBiMScpIHx8IE5hdGl2ZU51bWJlcignKzB4MScpKSkge1xuICB2YXIgTnVtYmVyV3JhcHBlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogTmF0aXZlTnVtYmVyKHRvTnVtZXJpYyh2YWx1ZSkpO1xuICAgIHZhciBkdW1teSA9IHRoaXM7XG4gICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgcmV0dXJuIGlzUHJvdG90eXBlT2YoTnVtYmVyUHJvdG90eXBlLCBkdW1teSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyB0aGlzTnVtYmVyVmFsdWUoZHVtbXkpOyB9KVxuICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChPYmplY3QobiksIGR1bW15LCBOdW1iZXJXcmFwcGVyKSA6IG47XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBERVNDUklQVE9SUyA/IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlTnVtYmVyKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTMjAxNSAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTMjAxNSBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixwYXJzZUZsb2F0LHBhcnNlSW50LCcgK1xuICAgIC8vIEVTTmV4dFxuICAgICdmcm9tU3RyaW5nLHJhbmdlJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhc093bihOYXRpdmVOdW1iZXIsIGtleSA9IGtleXNbal0pICYmICFoYXNPd24oTnVtYmVyV3JhcHBlciwga2V5KSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoTnVtYmVyV3JhcHBlciwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTmF0aXZlTnVtYmVyLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgTnVtYmVyV3JhcHBlci5wcm90b3R5cGUgPSBOdW1iZXJQcm90b3R5cGU7XG4gIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG4gIHJlZGVmaW5lKGdsb2JhbCwgTlVNQkVSLCBOdW1iZXJXcmFwcGVyKTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9iamVjdC5hc3NpZ24gIT09IGFzc2lnbiB9LCB7XG4gIGFzc2lnbjogYXNzaWduXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgY3JlYXRlOiBjcmVhdGVcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpLmY7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgIT09IGRlZmluZVByb3BlcnRpZXMsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09IGRlZmluZVByb3BlcnR5LCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHlcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykuZW50cmllcztcblxuLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhPKSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoMSk7IH0pO1xudmFyIEZPUkNFRCA9ICFERVNDUklQVE9SUyB8fCBGQUlMU19PTl9QUklNSVRJVkVTO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JbmRleGVkT2JqZWN0KGl0KSwga2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBrZXksIGRlc2NyaXB0b3I7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5ID0ga2V5c1tpbmRleCsrXSk7XG4gICAgICBpZiAoZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldFByb3RvdHlwZU9mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBzZXRQcm90b3R5cGVPZlxufSk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIHJlZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIFF1ZXVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3F1ZXVlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX0JST1dTRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXInKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2UgJiYgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGU7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG5cbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBOQVRJVkVfUkVKRUNUSU9OX0VWRU5UID0gaXNDYWxsYWJsZShnbG9iYWwuUHJvbWlzZVJlamVjdGlvbkV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBTVUJDTEFTU0lORyA9IGZhbHNlO1xuXG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFID0gaW5zcGVjdFNvdXJjZShQcm9taXNlQ29uc3RydWN0b3IpO1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFICE9PSBTdHJpbmcoUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgbmVlZCBQcm9taXNlI2ZpbmFsbHkgaW4gdGhlIHB1cmUgdmVyc2lvbiBmb3IgcHJldmVudGluZyBwcm90b3R5cGUgcG9sbHV0aW9uXG4gIGlmIChJU19QVVJFICYmICFQcm9taXNlUHJvdG90eXBlWydmaW5hbGx5J10pIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKDEpOyB9KTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICBTVUJDTEFTU0lORyA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIGlmICghU1VCQ0xBU1NJTkcpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIHJldHVybiAhR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSAmJiBJU19CUk9XU0VSICYmICFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgaXNDYWxsYWJsZSh0aGVuID0gaXQudGhlbikgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgY2FsbFJlYWN0aW9uID0gZnVuY3Rpb24gKHJlYWN0aW9uLCBzdGF0ZSkge1xuICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgdHJ5IHtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgaWYgKCFvaykge1xuICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgY2FsbCh0aGVuLCByZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWFjdGlvbnMgPSBzdGF0ZS5yZWFjdGlvbnM7XG4gICAgdmFyIHJlYWN0aW9uO1xuICAgIHdoaWxlIChyZWFjdGlvbiA9IHJlYWN0aW9ucy5nZXQoKSkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgY2FsbCh0YXNrLCBnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkoc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXRlLmZhY2FkZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNhbGwodGhlbiwgdmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgYUNhbGxhYmxlKGV4ZWN1dG9yKTtcbiAgICBjYWxsKEludGVybmFsLCB0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdChzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgUHJvbWlzZVByb3RvdHlwZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogbmV3IFF1ZXVlKCksXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VQcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdGhlbmFibGUgLS0gc2FmZVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLm9rID0gaXNDYWxsYWJsZShvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gaXNDYWxsYWJsZShvblJlamVjdGVkKSAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlID09IFBFTkRJTkcpIHN0YXRlLnJlYWN0aW9ucy5hZGQocmVhY3Rpb24pO1xuICAgICAgZWxzZSBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsUmVhY3Rpb24ocmVhY3Rpb24sIHN0YXRlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2UpICYmIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICBuYXRpdmVUaGVuID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZS50aGVuO1xuXG4gICAgaWYgKCFTVUJDTEFTU0lORykge1xuICAgICAgLy8gbWFrZSBgUHJvbWlzZSN0aGVuYCByZXR1cm4gYSBwb2x5ZmlsbGVkIGBQcm9taXNlYCBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGNhbGwobmF0aXZlVGhlbiwgdGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgICAgLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjY2F0Y2hgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ2NhdGNoJywgUHJvbWlzZVByb3RvdHlwZVsnY2F0Y2gnXSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBgLmNvbnN0cnVjdG9yID09PSBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIC8vIG1ha2UgYGluc3RhbmNlb2YgUHJvbWlzZWAgd29yayBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgc2V0UHJvdG90eXBlT2YoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IGdldEJ1aWx0SW4oUFJPTUlTRSk7XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICBjYWxsKGNhcGFiaWxpdHkucmVqZWN0LCB1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbCgkcHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgY2FsbCgkcHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kJyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVDb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBSZWZsZWN0LmNvbnN0cnVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuY29uc3RydWN0XG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xuXG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG52YXIgRk9SQ0VEID0gTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUc7XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06IEZPUkNFRCB9LCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFDb25zdHJ1Y3RvcihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFDb25zdHJ1Y3Rvcihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiBuYXRpdmVDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgYXBwbHkocHVzaCwgJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYXBwbHkoYmluZCwgVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0UHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gYXBwbHkoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWRhdGEtZGVzY3JpcHRvcicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3QuZ2V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRcbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjcmlwdG9yLCBwcm90b3R5cGU7XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZih0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IpIHJldHVybiBpc0RhdGFEZXNjcmlwdG9yKGRlc2NyaXB0b3IpXG4gICAgPyBkZXNjcmlwdG9yLnZhbHVlXG4gICAgOiBkZXNjcmlwdG9yLmdldCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY2FsbChkZXNjcmlwdG9yLmdldCwgcmVjZWl2ZXIpO1xuICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBnZXQ6IGdldFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7IFJlZmxlY3Q6IHt9IH0pO1xuXG4vLyBSZWZsZWN0W0BAdG9TdHJpbmdUYWddIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLlJlZmxlY3QsICdSZWZsZWN0JywgdHJ1ZSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgU3ludGF4RXJyb3IgPSBnbG9iYWwuU3ludGF4RXJyb3I7XG52YXIgZ2V0RmxhZ3MgPSB1bmN1cnJ5VGhpcyhyZWdFeHBGbGFncyk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKFJlZ0V4cFByb3RvdHlwZS5leGVjKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG4vLyBUT0RPOiBVc2Ugb25seSBwcm9wcGVyIFJlZ0V4cElkZW50aWZpZXJOYW1lXG52YXIgSVNfTkNHID0gL15cXD88W15cXHNcXGQhIyUmKis8PT5AXl1bXlxccyEjJSYqKzw9PkBeXSo+LztcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG5cbi8vIFwibmV3XCIgc2hvdWxkIGNyZWF0ZSBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgTmF0aXZlUmVnRXhwKHJlMSkgIT09IHJlMTtcblxudmFyIE1JU1NFRF9TVElDS1kgPSBzdGlja3lIZWxwZXJzLk1JU1NFRF9TVElDS1k7XG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcblxudmFyIEJBU0VfRk9SQ0VEID0gREVTQ1JJUFRPUlMgJiZcbiAgKCFDT1JSRUNUX05FVyB8fCBNSVNTRURfU1RJQ0tZIHx8IFVOU1VQUE9SVEVEX0RPVF9BTEwgfHwgVU5TVVBQT1JURURfTkNHIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZTJbTUFUQ0hdID0gZmFsc2U7XG4gICAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgICByZXR1cm4gTmF0aXZlUmVnRXhwKHJlMSkgIT0gcmUxIHx8IE5hdGl2ZVJlZ0V4cChyZTIpID09IHJlMiB8fCBOYXRpdmVSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbiAgfSkpO1xuXG52YXIgaGFuZGxlRG90QWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgYnJhY2tldHMgPSBmYWxzZTtcbiAgdmFyIGNocjtcbiAgZm9yICg7IGluZGV4IDw9IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNociA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgICBpZiAoY2hyID09PSAnXFxcXCcpIHtcbiAgICAgIHJlc3VsdCArPSBjaHIgKyBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIWJyYWNrZXRzICYmIGNociA9PT0gJy4nKSB7XG4gICAgICByZXN1bHQgKz0gJ1tcXFxcc1xcXFxTXSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjaHIgPT09ICdbJykge1xuICAgICAgICBicmFja2V0cyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICAgIGJyYWNrZXRzID0gZmFsc2U7XG4gICAgICB9IHJlc3VsdCArPSBjaHI7XG4gICAgfVxuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgaGFuZGxlTkNHID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbmFtZWQgPSBbXTtcbiAgdmFyIG5hbWVzID0ge307XG4gIHZhciBicmFja2V0cyA9IGZhbHNlO1xuICB2YXIgbmNnID0gZmFsc2U7XG4gIHZhciBncm91cGlkID0gMDtcbiAgdmFyIGdyb3VwbmFtZSA9ICcnO1xuICB2YXIgY2hyO1xuICBmb3IgKDsgaW5kZXggPD0gbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChjaHIgPT09ICdcXFxcJykge1xuICAgICAgY2hyID0gY2hyICsgY2hhckF0KHN0cmluZywgKytpbmRleCk7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09ICddJykge1xuICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFicmFja2V0cykgc3dpdGNoICh0cnVlKSB7XG4gICAgICBjYXNlIGNociA9PT0gJ1snOlxuICAgICAgICBicmFja2V0cyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBjaHIgPT09ICcoJzpcbiAgICAgICAgaWYgKGV4ZWMoSVNfTkNHLCBzdHJpbmdTbGljZShzdHJpbmcsIGluZGV4ICsgMSkpKSB7XG4gICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICBuY2cgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICAgIGdyb3VwaWQrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICBjYXNlIGNociA9PT0gJz4nICYmIG5jZzpcbiAgICAgICAgaWYgKGdyb3VwbmFtZSA9PT0gJycgfHwgaGFzT3duKG5hbWVzLCBncm91cG5hbWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdJbnZhbGlkIGNhcHR1cmUgZ3JvdXAgbmFtZScpO1xuICAgICAgICB9XG4gICAgICAgIG5hbWVzW2dyb3VwbmFtZV0gPSB0cnVlO1xuICAgICAgICBuYW1lZFtuYW1lZC5sZW5ndGhdID0gW2dyb3VwbmFtZSwgZ3JvdXBpZF07XG4gICAgICAgIG5jZyA9IGZhbHNlO1xuICAgICAgICBncm91cG5hbWUgPSAnJztcbiAgICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChuY2cpIGdyb3VwbmFtZSArPSBjaHI7XG4gICAgZWxzZSByZXN1bHQgKz0gY2hyO1xuICB9IHJldHVybiBbcmVzdWx0LCBuYW1lZF07XG59O1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAtY29uc3RydWN0b3JcbmlmIChpc0ZvcmNlZCgnUmVnRXhwJywgQkFTRV9GT1JDRUQpKSB7XG4gIHZhciBSZWdFeHBXcmFwcGVyID0gZnVuY3Rpb24gUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHRoaXNJc1JlZ0V4cCA9IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCB0aGlzKTtcbiAgICB2YXIgcGF0dGVybklzUmVnRXhwID0gaXNSZWdFeHAocGF0dGVybik7XG4gICAgdmFyIGZsYWdzQXJlVW5kZWZpbmVkID0gZmxhZ3MgPT09IHVuZGVmaW5lZDtcbiAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgdmFyIHJhd1BhdHRlcm4gPSBwYXR0ZXJuO1xuICAgIHZhciByYXdGbGFncywgZG90QWxsLCBzdGlja3ksIGhhbmRsZWQsIHJlc3VsdCwgc3RhdGU7XG5cbiAgICBpZiAoIXRoaXNJc1JlZ0V4cCAmJiBwYXR0ZXJuSXNSZWdFeHAgJiYgZmxhZ3NBcmVVbmRlZmluZWQgJiYgcGF0dGVybi5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwV3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgfVxuXG4gICAgaWYgKHBhdHRlcm5Jc1JlZ0V4cCB8fCBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgcGF0dGVybikpIHtcbiAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNvdXJjZTtcbiAgICAgIGlmIChmbGFnc0FyZVVuZGVmaW5lZCkgZmxhZ3MgPSAnZmxhZ3MnIGluIHJhd1BhdHRlcm4gPyByYXdQYXR0ZXJuLmZsYWdzIDogZ2V0RmxhZ3MocmF3UGF0dGVybik7XG4gICAgfVxuXG4gICAgcGF0dGVybiA9IHBhdHRlcm4gPT09IHVuZGVmaW5lZCA/ICcnIDogdG9TdHJpbmcocGF0dGVybik7XG4gICAgZmxhZ3MgPSBmbGFncyA9PT0gdW5kZWZpbmVkID8gJycgOiB0b1N0cmluZyhmbGFncyk7XG4gICAgcmF3UGF0dGVybiA9IHBhdHRlcm47XG5cbiAgICBpZiAoVU5TVVBQT1JURURfRE9UX0FMTCAmJiAnZG90QWxsJyBpbiByZTEpIHtcbiAgICAgIGRvdEFsbCA9ICEhZmxhZ3MgJiYgc3RyaW5nSW5kZXhPZihmbGFncywgJ3MnKSA+IC0xO1xuICAgICAgaWYgKGRvdEFsbCkgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAvcy9nLCAnJyk7XG4gICAgfVxuXG4gICAgcmF3RmxhZ3MgPSBmbGFncztcblxuICAgIGlmIChNSVNTRURfU1RJQ0tZICYmICdzdGlja3knIGluIHJlMSkge1xuICAgICAgc3RpY2t5ID0gISFmbGFncyAmJiBzdHJpbmdJbmRleE9mKGZsYWdzLCAneScpID4gLTE7XG4gICAgICBpZiAoc3RpY2t5ICYmIFVOU1VQUE9SVEVEX1kpIGZsYWdzID0gcmVwbGFjZShmbGFncywgL3kvZywgJycpO1xuICAgIH1cblxuICAgIGlmIChVTlNVUFBPUlRFRF9OQ0cpIHtcbiAgICAgIGhhbmRsZWQgPSBoYW5kbGVOQ0cocGF0dGVybik7XG4gICAgICBwYXR0ZXJuID0gaGFuZGxlZFswXTtcbiAgICAgIGdyb3VwcyA9IGhhbmRsZWRbMV07XG4gICAgfVxuXG4gICAgcmVzdWx0ID0gaW5oZXJpdElmUmVxdWlyZWQoTmF0aXZlUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSwgdGhpc0lzUmVnRXhwID8gdGhpcyA6IFJlZ0V4cFByb3RvdHlwZSwgUmVnRXhwV3JhcHBlcik7XG5cbiAgICBpZiAoZG90QWxsIHx8IHN0aWNreSB8fCBncm91cHMubGVuZ3RoKSB7XG4gICAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHJlc3VsdCk7XG4gICAgICBpZiAoZG90QWxsKSB7XG4gICAgICAgIHN0YXRlLmRvdEFsbCA9IHRydWU7XG4gICAgICAgIHN0YXRlLnJhdyA9IFJlZ0V4cFdyYXBwZXIoaGFuZGxlRG90QWxsKHBhdHRlcm4pLCByYXdGbGFncyk7XG4gICAgICB9XG4gICAgICBpZiAoc3RpY2t5KSBzdGF0ZS5zdGlja3kgPSB0cnVlO1xuICAgICAgaWYgKGdyb3Vwcy5sZW5ndGgpIHN0YXRlLmdyb3VwcyA9IGdyb3VwcztcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybiAhPT0gcmF3UGF0dGVybikgdHJ5IHtcbiAgICAgIC8vIGZhaWxzIGluIG9sZCBlbmdpbmVzLCBidXQgd2UgaGF2ZSBubyBhbHRlcm5hdGl2ZXMgZm9yIHVuc3VwcG9ydGVkIHJlZ2V4IHN5bnRheFxuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHJlc3VsdCwgJ3NvdXJjZScsIHJhd1BhdHRlcm4gPT09ICcnID8gJyg/OiknIDogcmF3UGF0dGVybik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluIFJlZ0V4cFdyYXBwZXIgfHwgZGVmaW5lUHJvcGVydHkoUmVnRXhwV3JhcHBlciwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5hdGl2ZVJlZ0V4cFtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgTmF0aXZlUmVnRXhwW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZVJlZ0V4cCksIGluZGV4ID0gMDsga2V5cy5sZW5ndGggPiBpbmRleDspIHtcbiAgICBwcm94eShrZXlzW2luZGV4KytdKTtcbiAgfVxuXG4gIFJlZ0V4cFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlZ0V4cFdyYXBwZXI7XG4gIFJlZ0V4cFdyYXBwZXIucHJvdG90eXBlID0gUmVnRXhwUHJvdG90eXBlO1xuICByZWRlZmluZShnbG9iYWwsICdSZWdFeHAnLCBSZWdFeHBXcmFwcGVyKTtcbn1cblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLUBAc3BlY2llc1xuc2V0U3BlY2llcygnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE1JU1NFRF9TVElDS1kgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJykuTUlTU0VEX1NUSUNLWTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcblxudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuc3RpY2t5YCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuc3RpY2t5XG5pZiAoREVTQ1JJUFRPUlMgJiYgTUlTU0VEX1NUSUNLWSkge1xuICBkZWZpbmVQcm9wZXJ0eShSZWdFeHBQcm90b3R5cGUsICdzdGlja3knLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMgPT09IFJlZ0V4cFByb3RvdHlwZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIC8vIFdlIGNhbid0IHVzZSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvciBiZWNhdXNlXG4gICAgICAvLyB3ZSBkb24ndCBhZGQgbWV0YWRhdGEgZm9yIHJlZ2V4cHMgY3JlYXRlZCBieSBhIGxpdGVyYWwuXG4gICAgICBpZiAoY2xhc3NvZih0aGlzKSA9PT0gJ1JlZ0V4cCcpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdGlja3k7XG4gICAgICB9XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgUmVnRXhwIHJlcXVpcmVkJyk7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gIHZhciByZSA9IC9bYWNdLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBleGVjQ2FsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gLy4vLmV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgcmV0dXJuIHJlLnRlc3QoJ2FiYycpID09PSB0cnVlICYmIGV4ZWNDYWxsZWQ7XG59KCk7XG5cbnZhciBFcnJvciA9IGdsb2JhbC5FcnJvcjtcbnZhciB1biRUZXN0ID0gdW5jdXJyeVRoaXMoLy4vLnRlc3QpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50ZXN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50ZXN0XG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogIURFTEVHQVRFU19UT19FWEVDIH0sIHtcbiAgdGVzdDogZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciBleGVjID0gdGhpcy5leGVjO1xuICAgIGlmICghaXNDYWxsYWJsZShleGVjKSkgcmV0dXJuIHVuJFRlc3QodGhpcywgc3RyKTtcbiAgICB2YXIgcmVzdWx0ID0gY2FsbChleGVjLCB0aGlzLCBzdHIpO1xuICAgIGlmIChyZXN1bHQgIT09IG51bGwgJiYgIWlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiAhIXJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG4kVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbiRUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBuJFRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSAkdG9TdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgUikgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgPyBnZXRGbGFncyhSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYFNldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LW9iamVjdHNcbmNvbGxlY3Rpb24oJ1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIWNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdpbmNsdWRlcycpIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5zdHJpbmdJbmRleE9mKFxuICAgICAgdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSksXG4gICAgICB0b1N0cmluZyhub3RBUmVnRXhwKHNlYXJjaFN0cmluZykpLFxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICApO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG5cbnZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogdG9TdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdtYXRjaCcsIGZ1bmN0aW9uIChNQVRDSCwgbmF0aXZlTWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBtYXRjaGVyID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChyZWdleHAsIE1BVENIKTtcbiAgICAgIHJldHVybiBtYXRjaGVyID8gY2FsbChtYXRjaGVyLCByZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXSh0b1N0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWF0Y2gsIHJ4LCBTKTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuXG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZFN0YXJ0KHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGdldFN1YnN0aXR1dGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGdldEZsYWdzID0gdW5jdXJyeVRoaXMocmVnRXhwRmxhZ3MpO1xudmFyIGluZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbnZhciBzdHJpbmdJbmRleE9mID0gZnVuY3Rpb24gKHN0cmluZywgc2VhcmNoVmFsdWUsIGZyb21JbmRleCkge1xuICBpZiAoZnJvbUluZGV4ID4gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIC0xO1xuICBpZiAoc2VhcmNoVmFsdWUgPT09ICcnKSByZXR1cm4gZnJvbUluZGV4O1xuICByZXR1cm4gaW5kZXhPZihzdHJpbmcsIHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpO1xufTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZWFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgcmVwbGFjZUFsbDogZnVuY3Rpb24gcmVwbGFjZUFsbChzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBJU19SRUdfRVhQLCBmbGFncywgcmVwbGFjZXIsIHN0cmluZywgc2VhcmNoU3RyaW5nLCBmdW5jdGlvbmFsUmVwbGFjZSwgc2VhcmNoTGVuZ3RoLCBhZHZhbmNlQnksIHJlcGxhY2VtZW50O1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGVuZE9mTGFzdE1hdGNoID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgaWYgKHNlYXJjaFZhbHVlICE9IG51bGwpIHtcbiAgICAgIElTX1JFR19FWFAgPSBpc1JlZ0V4cChzZWFyY2hWYWx1ZSk7XG4gICAgICBpZiAoSVNfUkVHX0VYUCkge1xuICAgICAgICBmbGFncyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGVcbiAgICAgICAgICA/IHNlYXJjaFZhbHVlLmZsYWdzXG4gICAgICAgICAgOiBnZXRGbGFncyhzZWFyY2hWYWx1ZSlcbiAgICAgICAgKSk7XG4gICAgICAgIGlmICghfmluZGV4T2YoZmxhZ3MsICdnJykpIHRocm93IFR5cGVFcnJvcignYC5yZXBsYWNlQWxsYCBkb2VzIG5vdCBhbGxvdyBub24tZ2xvYmFsIHJlZ2V4ZXMnKTtcbiAgICAgIH1cbiAgICAgIHJlcGxhY2VyID0gZ2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBSRVBMQUNFKTtcbiAgICAgIGlmIChyZXBsYWNlcikge1xuICAgICAgICByZXR1cm4gY2FsbChyZXBsYWNlciwgc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKElTX1BVUkUgJiYgSVNfUkVHX0VYUCkge1xuICAgICAgICByZXR1cm4gcmVwbGFjZSh0b1N0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN0cmluZyA9IHRvU3RyaW5nKE8pO1xuICAgIHNlYXJjaFN0cmluZyA9IHRvU3RyaW5nKHNlYXJjaFZhbHVlKTtcbiAgICBmdW5jdGlvbmFsUmVwbGFjZSA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSB0b1N0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgIHNlYXJjaExlbmd0aCA9IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gICAgYWR2YW5jZUJ5ID0gbWF4KDEsIHNlYXJjaExlbmd0aCk7XG4gICAgcG9zaXRpb24gPSBzdHJpbmdJbmRleE9mKHN0cmluZywgc2VhcmNoU3RyaW5nLCAwKTtcbiAgICB3aGlsZSAocG9zaXRpb24gIT09IC0xKSB7XG4gICAgICByZXBsYWNlbWVudCA9IGZ1bmN0aW9uYWxSZXBsYWNlXG4gICAgICAgID8gdG9TdHJpbmcocmVwbGFjZVZhbHVlKHNlYXJjaFN0cmluZywgcG9zaXRpb24sIHN0cmluZykpXG4gICAgICAgIDogZ2V0U3Vic3RpdHV0aW9uKHNlYXJjaFN0cmluZywgc3RyaW5nLCBwb3NpdGlvbiwgW10sIHVuZGVmaW5lZCwgcmVwbGFjZVZhbHVlKTtcbiAgICAgIHJlc3VsdCArPSBzdHJpbmdTbGljZShzdHJpbmcsIGVuZE9mTGFzdE1hdGNoLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgIGVuZE9mTGFzdE1hdGNoID0gcG9zaXRpb24gKyBzZWFyY2hMZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHN0cmluZ0luZGV4T2Yoc3RyaW5nLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uICsgYWR2YW5jZUJ5KTtcbiAgICB9XG4gICAgaWYgKGVuZE9mTGFzdE1hdGNoIDwgc3RyaW5nLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ICs9IHN0cmluZ1NsaWNlKHN0cmluZywgZW5kT2ZMYXN0TWF0Y2gpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIElFIDw9IDExIHJlcGxhY2VzICQwIHdpdGggdGhlIHdob2xlIG1hdGNoLCBhcyBpZiBpdCB3YXMgJCZcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwMjQ2NjYvZ2V0dGluZy1pZS10by1yZXBsYWNlLWEtcmVnZXgtd2l0aC10aGUtbGl0ZXJhbC1zdHJpbmctMFxudmFyIFJFUExBQ0VfS0VFUFNfJDAgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL3ByZWZlci1lc2NhcGUtcmVwbGFjZW1lbnQtZG9sbGFyLWNoYXIgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuICdhJy5yZXBsYWNlKC8uLywgJyQwJykgPT09ICckMCc7XG59KSgpO1xuXG4vLyBTYWZhcmkgPD0gMTMuMC4zKD8pIHN1YnN0aXR1dGVzIG50aCBjYXB0dXJlIHdoZXJlIG4+bSB3aXRoIGFuIGVtcHR5IHN0cmluZ1xudmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKC8uL1tSRVBMQUNFXSkge1xuICAgIHJldHVybiAvLi9bUkVQTEFDRV0oJ2EnLCAnJDAnKSA9PT0gJyc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSkoKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLXVzZWxlc3MtZG9sbGFyLXJlcGxhY2VtZW50cyAtLSBmYWxzZSBwb3NpdGl2ZVxuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3JlcGxhY2UnLCBmdW5jdGlvbiAoXywgbmF0aXZlUmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBVTlNBRkVfU1VCU1RJVFVURSA9IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID8gJyQnIDogJyQwJztcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgcmVwbGFjZXIgPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2Qoc2VhcmNoVmFsdWUsIFJFUExBQ0UpO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyXG4gICAgICAgID8gY2FsbChyZXBsYWNlciwgc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBjYWxsKG5hdGl2ZVJlcGxhY2UsIHRvU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAoc3RyaW5nLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiByZXBsYWNlVmFsdWUgPT0gJ3N0cmluZycgJiZcbiAgICAgICAgc3RyaW5nSW5kZXhPZihyZXBsYWNlVmFsdWUsIFVOU0FGRV9TVUJTVElUVVRFKSA9PT0gLTEgJiZcbiAgICAgICAgc3RyaW5nSW5kZXhPZihyZXBsYWNlVmFsdWUsICckPCcpID09PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlUmVwbGFjZSwgcngsIFMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gaXNDYWxsYWJsZShyZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gdG9TdHJpbmcocmVwbGFjZVZhbHVlKTtcblxuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuXG4gICAgICAgIHB1c2gocmVzdWx0cywgcmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgICAgICB2YXIgbWF0Y2hlZCA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBwdXNoKGNhcHR1cmVzLCBtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBjb25jYXQoW21hdGNoZWRdLCBjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHB1c2gocmVwbGFjZXJBcmdzLCBuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB0b1N0cmluZyhhcHBseShyZXBsYWNlVmFsdWUsIHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIHN0cmluZ1NsaWNlKFMsIG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xufSwgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIHx8ICFSRVBMQUNFX0tFRVBTXyQwIHx8IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1k7XG52YXIgTUFYX1VJTlQzMiA9IDB4RkZGRkZGRkY7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcygvLi8uZXhlYyk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKCRwdXNoKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAhPT0gMiB8fCByZXN1bHRbMF0gIT09ICdhJyB8fCByZXN1bHRbMV0gIT09ICdiJztcbn0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc3BsaXQnLCBmdW5jdGlvbiAoU1BMSVQsIG5hdGl2ZVNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYycuc3BsaXQoLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgJ3Rlc3QnLnNwbGl0KC8oPzopLywgLTEpLmxlbmd0aCAhPSA0IHx8XG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPSAyIHx8XG4gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPSA0IHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1jYXB0dXJpbmctZ3JvdXAsIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICcuJy5zcGxpdCgvKCkoKS8pLmxlbmd0aCA+IDEgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGhcbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFtzdHJpbmddO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICByZXR1cm4gY2FsbChuYXRpdmVTcGxpdCwgc3RyaW5nLCBzZXBhcmF0b3IsIGxpbSk7XG4gICAgICB9XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IGNhbGwocmVnZXhwRXhlYywgc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleDtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBwdXNoKG91dHB1dCwgc3RyaW5nU2xpY2Uoc3RyaW5nLCBsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nLmxlbmd0aCkgYXBwbHkoJHB1c2gsIG91dHB1dCwgYXJyYXlTbGljZShtYXRjaCwgMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW0pIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHkubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFleGVjKHNlcGFyYXRvckNvcHksICcnKSkgcHVzaChvdXRwdXQsICcnKTtcbiAgICAgIH0gZWxzZSBwdXNoKG91dHB1dCwgc3RyaW5nU2xpY2Uoc3RyaW5nLCBsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IGxpbSA/IGFycmF5U2xpY2Uob3V0cHV0LCAwLCBsaW0pIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCcuc3BsaXQodW5kZWZpbmVkLCAwKS5sZW5ndGgpIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogY2FsbChuYXRpdmVTcGxpdCwgdGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIGludGVybmFsU3BsaXQgPSBuYXRpdmVTcGxpdDtcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHNlcGFyYXRvciwgU1BMSVQpO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyXG4gICAgICAgID8gY2FsbChzcGxpdHRlciwgc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBjYWxsKGludGVybmFsU3BsaXQsIHRvU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAoc3RyaW5nLCBsaW1pdCkge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJ4LCBTLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gbmF0aXZlU3BsaXQpO1xuXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFVOU1VQUE9SVEVEX1kgPyAnZycgOiAneScpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoVU5TVVBQT1JURURfWSA/ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJyA6IHJ4LCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gVU5TVVBQT1JURURfWSA/IDAgOiBxO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBVTlNVUFBPUlRFRF9ZID8gc3RyaW5nU2xpY2UoUywgcSkgOiBTKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSBtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFVOU1VQUE9SVEVEX1kgPyBxIDogMCkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdXNoKEEsIHN0cmluZ1NsaWNlKFMsIHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIHB1c2goQSwgeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcHVzaChBLCBzdHJpbmdTbGljZShTLCBwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59LCAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDLCBVTlNVUFBPUlRFRF9ZKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcblxuaWYgKERFU0NSSVBUT1JTICYmIGlzQ2FsbGFibGUoTmF0aXZlU3ltYm9sKSAmJiAoISgnZGVzY3JpcHRpb24nIGluIFN5bWJvbFByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKVxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBTeW1ib2xQcm90b3R5cGU7XG4gIFN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIE5BVElWRV9TWU1CT0wgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCd0ZXN0JykpID09ICdTeW1ib2wodGVzdCknO1xuICB2YXIgc3ltYm9sVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudG9TdHJpbmcpO1xuICB2YXIgc3ltYm9sVmFsdWVPZiA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mKTtcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIHZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG4gIHZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuICBkZWZpbmVQcm9wZXJ0eShTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBzeW1ib2xWYWx1ZU9mKHRoaXMpO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbFRvU3RyaW5nKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzT3duKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBOQVRJVkVfU1lNQk9MID8gc3RyaW5nU2xpY2Uoc3RyaW5nLCA3LCAtMSkgOiByZXBsYWNlKHN0cmluZywgcmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG5cbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sICYmICRTeW1ib2xbUFJPVE9UWVBFXTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZShTeW1ib2xQcm90b3R5cGUpO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXNPd24oTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgIE9bSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhc093bihPLCBISURERU4pICYmIE9bSElEREVOXVtrZXldKSBPW0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgQXR0cmlidXRlcyA9IG5hdGl2ZU9iamVjdENyZWF0ZShBdHRyaWJ1dGVzLCB7IGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpO1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBrZXksIEF0dHJpYnV0ZXMpO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgJGZvckVhY2goa2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghREVTQ1JJUFRPUlMgfHwgY2FsbCgkcHJvcGVydHlJc0VudW1lcmFibGUsIHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgUCA9IHRvUHJvcGVydHlLZXkoVik7XG4gIHZhciBlbnVtZXJhYmxlID0gY2FsbChuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSwgdGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIFApICYmICFoYXNPd24oT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhc093bih0aGlzLCBQKSB8fCAhaGFzT3duKEFsbFN5bWJvbHMsIFApIHx8IGhhc093bih0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXVxuICAgID8gZW51bWVyYWJsZSA6IHRydWU7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXNPd24oaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duKGhpZGRlbktleXMsIGtleSkpIHB1c2gocmVzdWx0LCBrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pIHtcbiAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoSVNfT0JKRUNUX1BST1RPVFlQRSA/IE9iamVjdFByb3RvdHlwZVN5bWJvbHMgOiB0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXNPd24oT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkge1xuICAgICAgcHVzaChyZXN1bHQsIEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKSkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICR0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIGNhbGwoc2V0dGVyLCBPYmplY3RQcm90b3R5cGVTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzT3duKHRoaXMsIEhJRERFTikgJiYgaGFzT3duKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBVU0VfU0VUVEVSKSBzZXRTeW1ib2xEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiBzZXR0ZXIgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7XG4gIH07XG5cbiAgU3ltYm9sUHJvdG90eXBlID0gJFN5bWJvbFtQUk9UT1RZUEVdO1xuXG4gIHJlZGVmaW5lKFN5bWJvbFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICByZWRlZmluZSgkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZGVmaW5lUHJvcGVydGllc01vZHVsZS5mID0gJGRlZmluZVByb3BlcnRpZXM7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9ICR0b1N0cmluZyhrZXkpO1xuICAgIGlmIChoYXNPd24oU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzT3duKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMpO1xuICAgICAgdmFyICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNDYWxsYWJsZSgkcmVwbGFjZXIpKSB2YWx1ZSA9IGNhbGwoJHJlcGxhY2VyLCB0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICByZXR1cm4gYXBwbHkoJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghU3ltYm9sUHJvdG90eXBlW1RPX1BSSU1JVElWRV0pIHtcbiAgdmFyIHZhbHVlT2YgPSBTeW1ib2xQcm90b3R5cGUudmFsdWVPZjtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciAubGVuZ3RoXG4gIHJlZGVmaW5lKFN5bWJvbFByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBmdW5jdGlvbiAoaGludCkge1xuICAgIC8vIFRPRE86IGltcHJvdmUgaGludCBsb2dpY1xuICAgIHJldHVybiBjYWxsKHZhbHVlT2YsIHRoaXMpO1xuICB9KTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1yZWxhdGl2ZS1pbmRleGluZy1tZXRob2RcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2F0JywgZnVuY3Rpb24gYXQoaW5kZXgpIHtcbiAgdmFyIE8gPSBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgcmVsYXRpdmVJbmRleCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICB2YXIgayA9IHJlbGF0aXZlSW5kZXggPj0gMCA/IHJlbGF0aXZlSW5kZXggOiBsZW4gKyByZWxhdGl2ZUluZGV4O1xuICByZXR1cm4gKGsgPCAwIHx8IGsgPj0gbGVuKSA/IHVuZGVmaW5lZCA6IE9ba107XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkQXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluJyk7XG5cbnZhciB1JEFycmF5Q29weVdpdGhpbiA9IHVuY3VycnlUaGlzKCRBcnJheUNvcHlXaXRoaW4pO1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5jb3B5d2l0aGluXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdjb3B5V2l0aGluJywgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gIHJldHVybiB1JEFycmF5Q29weVdpdGhpbihhVHlwZWRBcnJheSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmV2ZXJ5O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5ldmVyeVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZXZlcnknLCBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGV2ZXJ5KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciAkZmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmlsbFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmlsbCcsIGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gY2FsbChcbiAgICAkZmlsbCxcbiAgICBhVHlwZWRBcnJheSh0aGlzKSxcbiAgICB2YWx1ZSxcbiAgICBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLFxuICAgIGxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGZyb21TcGVjaWVzQW5kTGlzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLXNwZWNpZXMtYW5kLWxpc3QnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbHRlclxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmlsdGVyJywgZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHZhciBsaXN0ID0gJGZpbHRlcihhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICByZXR1cm4gZnJvbVNwZWNpZXNBbmRMaXN0KHRoaXMsIGxpc3QpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kaW5kZXhcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbmRJbmRleCcsIGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZEluZGV4KGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmluZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZCcsIGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZpbmQoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5mb3JlYWNoXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmb3JFYWNoJywgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAkZm9yRWFjaChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5jbHVkZXM7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmluY2x1ZGVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdpbmNsdWRlcycsIGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgcmV0dXJuICRpbmNsdWRlcyhhVHlwZWRBcnJheSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmluZGV4b2ZcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2luZGV4T2YnLCBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgcmV0dXJuICRpbmRleE9mKGFUeXBlZEFycmF5KHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbnZhciBhcnJheVZhbHVlcyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLnZhbHVlcyk7XG52YXIgYXJyYXlLZXlzID0gdW5jdXJyeVRoaXMoQXJyYXlJdGVyYXRvcnMua2V5cyk7XG52YXIgYXJyYXlFbnRyaWVzID0gdW5jdXJyeVRoaXMoQXJyYXlJdGVyYXRvcnMuZW50cmllcyk7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFVpbnQ4QXJyYXkgJiYgVWludDhBcnJheS5wcm90b3R5cGU7XG5cbnZhciBHRU5FUklDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbChbMV0pO1xufSk7XG5cbnZhciBJVEVSQVRPUl9JU19WQUxVRVMgPSAhIVR5cGVkQXJyYXlQcm90b3R5cGVcbiAgJiYgVHlwZWRBcnJheVByb3RvdHlwZS52YWx1ZXNcbiAgJiYgVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IFR5cGVkQXJyYXlQcm90b3R5cGUudmFsdWVzXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudmFsdWVzLm5hbWUgPT09ICd2YWx1ZXMnO1xuXG52YXIgdHlwZWRBcnJheVZhbHVlcyA9IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgcmV0dXJuIGFycmF5VmFsdWVzKGFUeXBlZEFycmF5KHRoaXMpKTtcbn07XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmVudHJpZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2VudHJpZXMnLCBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICByZXR1cm4gYXJyYXlFbnRyaWVzKGFUeXBlZEFycmF5KHRoaXMpKTtcbn0sIEdFTkVSSUMpO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUua2V5c1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgna2V5cycsIGZ1bmN0aW9uIGtleXMoKSB7XG4gIHJldHVybiBhcnJheUtleXMoYVR5cGVkQXJyYXkodGhpcykpO1xufSwgR0VORVJJQyk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnZhbHVlc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndmFsdWVzJywgdHlwZWRBcnJheVZhbHVlcywgR0VORVJJQyB8fCAhSVRFUkFUT1JfSVNfVkFMVUVTLCB7IG5hbWU6ICd2YWx1ZXMnIH0pO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLUBAaXRlcmF0b3JcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoSVRFUkFUT1IsIHR5cGVkQXJyYXlWYWx1ZXMsIEdFTkVSSUMgfHwgIUlURVJBVE9SX0lTX1ZBTFVFUywgeyBuYW1lOiAndmFsdWVzJyB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICRqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmpvaW5cbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2pvaW4nLCBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICByZXR1cm4gJGpvaW4oYVR5cGVkQXJyYXkodGhpcyksIHNlcGFyYXRvcik7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyICRsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmxhc3RpbmRleG9mXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdsYXN0SW5kZXhPZicsIGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHJldHVybiBhcHBseSgkbGFzdEluZGV4T2YsIGFUeXBlZEFycmF5KHRoaXMpLCBsZW5ndGggPiAxID8gW3NlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXV0gOiBbc2VhcmNoRWxlbWVudF0pO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5tYXBcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ21hcCcsIGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRtYXAoYVR5cGVkQXJyYXkodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgKHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IoTykpKGxlbmd0aCk7XG4gIH0pO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZVJpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLnJpZ2h0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZVJpY2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmVkdWNlUmlnaHQnLCBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gJHJlZHVjZVJpZ2h0KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBsZW5ndGgsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZWR1Y2UnLCBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuICRyZWR1Y2UoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGxlbmd0aCwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmV2ZXJzZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmV2ZXJzZScsIGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IGFUeXBlZEFycmF5KHRoYXQpLmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgdmFsdWU7XG4gIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICB9IHJldHVybiB0aGF0O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBJbnQ4QXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXkgJiYgSW50OEFycmF5LnByb3RvdHlwZTtcbnZhciAkc2V0ID0gSW50OEFycmF5UHJvdG90eXBlICYmIEludDhBcnJheVByb3RvdHlwZS5zZXQ7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbnZhciBXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciBhcnJheSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSgyKTtcbiAgY2FsbCgkc2V0LCBhcnJheSwgeyBsZW5ndGg6IDEsIDA6IDMgfSwgMSk7XG4gIHJldHVybiBhcnJheVsxXSAhPT0gMztcbn0pO1xuXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xMTI5NCBhbmQgb3RoZXJcbnZhciBUT19PQkpFQ1RfQlVHID0gV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTICYmIEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IG5ldyBJbnQ4QXJyYXkoMik7XG4gIGFycmF5LnNldCgxKTtcbiAgYXJyYXkuc2V0KCcyJywgMSk7XG4gIHJldHVybiBhcnJheVswXSAhPT0gMCB8fCBhcnJheVsxXSAhPT0gMjtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNldFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2V0JywgZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAxKTtcbiAgdmFyIHNyYyA9IHRvSW5kZXhlZE9iamVjdChhcnJheUxpa2UpO1xuICBpZiAoV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTKSByZXR1cm4gY2FsbCgkc2V0LCB0aGlzLCBzcmMsIG9mZnNldCk7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKHNyYyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCcpO1xuICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xufSwgIVdPUktTX1dJVEhfT0JKRUNUU19BTkRfR0VFUklDX09OX1RZUEVEX0FSUkFZUyB8fCBUT19PQkpFQ1RfQlVHKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2xpY2UoKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2xpY2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NsaWNlJywgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgbGlzdCA9IGFycmF5U2xpY2UoYVR5cGVkQXJyYXkodGhpcyksIHN0YXJ0LCBlbmQpO1xuICB2YXIgQyA9IHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLnNvbWU7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc29tZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc29tZScsIGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRzb21lKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGludGVybmFsU29ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgRkYgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWZmLXZlcnNpb24nKTtcbnZhciBJRV9PUl9FREdFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlJyk7XG52YXIgVjggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBXRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uJyk7XG5cbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBVaW50MTZBcnJheSA9IGdsb2JhbC5VaW50MTZBcnJheTtcbnZhciB1biRTb3J0ID0gVWludDE2QXJyYXkgJiYgdW5jdXJyeVRoaXMoVWludDE2QXJyYXkucHJvdG90eXBlLnNvcnQpO1xuXG4vLyBXZWJLaXRcbnZhciBBQ0NFUFRfSU5DT1JSRUNUX0FSR1VNRU5UUyA9ICEhdW4kU29ydCAmJiAhKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdW4kU29ydChuZXcgVWludDE2QXJyYXkoMiksIG51bGwpO1xufSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRTb3J0KG5ldyBVaW50MTZBcnJheSgyKSwge30pO1xufSkpO1xuXG52YXIgU1RBQkxFX1NPUlQgPSAhIXVuJFNvcnQgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZmVhdHVyZSBkZXRlY3Rpb24gY2FuIGJlIHRvbyBzbG93LCBzbyBjaGVjayBlbmdpbmVzIHZlcnNpb25zXG4gIGlmIChWOCkgcmV0dXJuIFY4IDwgNzQ7XG4gIGlmIChGRikgcmV0dXJuIEZGIDwgNjc7XG4gIGlmIChJRV9PUl9FREdFKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFdFQktJVCkgcmV0dXJuIFdFQktJVCA8IDYwMjtcblxuICB2YXIgYXJyYXkgPSBuZXcgVWludDE2QXJyYXkoNTE2KTtcbiAgdmFyIGV4cGVjdGVkID0gQXJyYXkoNTE2KTtcbiAgdmFyIGluZGV4LCBtb2Q7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNTE2OyBpbmRleCsrKSB7XG4gICAgbW9kID0gaW5kZXggJSA0O1xuICAgIGFycmF5W2luZGV4XSA9IDUxNSAtIGluZGV4O1xuICAgIGV4cGVjdGVkW2luZGV4XSA9IGluZGV4IC0gMiAqIG1vZCArIDM7XG4gIH1cblxuICB1biRTb3J0KGFycmF5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAoYSAvIDQgfCAwKSAtIChiIC8gNCB8IDApO1xuICB9KTtcblxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA1MTY7IGluZGV4KyspIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdICE9PSBleHBlY3RlZFtpbmRleF0pIHJldHVybiB0cnVlO1xuICB9XG59KTtcblxudmFyIGdldFNvcnRDb21wYXJlID0gZnVuY3Rpb24gKGNvbXBhcmVmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIHJldHVybiArY29tcGFyZWZuKHgsIHkpIHx8IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoeSAhPT0geSkgcmV0dXJuIC0xO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKHggIT09IHgpIHJldHVybiAxO1xuICAgIGlmICh4ID09PSAwICYmIHkgPT09IDApIHJldHVybiAxIC8geCA+IDAgJiYgMSAvIHkgPCAwID8gMSA6IC0xO1xuICAgIHJldHVybiB4ID4geTtcbiAgfTtcbn07XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvcnRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NvcnQnLCBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIGFDYWxsYWJsZShjb21wYXJlZm4pO1xuICBpZiAoU1RBQkxFX1NPUlQpIHJldHVybiB1biRTb3J0KHRoaXMsIGNvbXBhcmVmbik7XG5cbiAgcmV0dXJuIGludGVybmFsU29ydChhVHlwZWRBcnJheSh0aGlzKSwgZ2V0U29ydENvbXBhcmUoY29tcGFyZWZuKSk7XG59LCAhU1RBQkxFX1NPUlQgfHwgQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnN1YmFycmF5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zdWJhcnJheVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc3ViYXJyYXknLCBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgdmFyIGJlZ2luSW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gIHZhciBDID0gdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihPKTtcbiAgcmV0dXJuIG5ldyBDKFxuICAgIE8uYnVmZmVyLFxuICAgIE8uYnl0ZU9mZnNldCArIGJlZ2luSW5kZXggKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gYmVnaW5JbmRleClcbiAgKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkdG9Mb2NhbGVTdHJpbmcgPSBbXS50b0xvY2FsZVN0cmluZztcblxuLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxudmFyIFRPX0xPQ0FMRV9TVFJJTkdfQlVHID0gISFJbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgSW50OEFycmF5KDEpKTtcbn0pO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IEludDhBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9sb2NhbGVzdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvTG9jYWxlU3RyaW5nJywgZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gIHJldHVybiBhcHBseShcbiAgICAkdG9Mb2NhbGVTdHJpbmcsXG4gICAgVE9fTE9DQUxFX1NUUklOR19CVUcgPyBhcnJheVNsaWNlKGFUeXBlZEFycmF5KHRoaXMpKSA6IGFUeXBlZEFycmF5KHRoaXMpLFxuICAgIGFycmF5U2xpY2UoYXJndW1lbnRzKVxuICApO1xufSwgRk9SQ0VEKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xudmFyIFVpbnQ4QXJyYXlQcm90b3R5cGUgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlIHx8IHt9O1xudmFyIGFycmF5VG9TdHJpbmcgPSBbXS50b1N0cmluZztcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gIGFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gam9pbih0aGlzKTtcbiAgfTtcbn1cblxudmFyIElTX05PVF9BUlJBWV9NRVRIT0QgPSBVaW50OEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmc7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS50b3N0cmluZ1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndG9TdHJpbmcnLCBhcnJheVRvU3RyaW5nLCBJU19OT1RfQVJSQVlfTUVUSE9EKTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmF0Jyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSB7XG4gICAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKSB7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKTtcbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSwgJ0RPTVRva2VuTGlzdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS11cmwnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5U29ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zb3J0Jyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVUkxfU0VBUkNIX1BBUkFNUyA9ICdVUkxTZWFyY2hQYXJhbXMnO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SID0gVVJMX1NFQVJDSF9QQVJBTVMgKyAnSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVMpO1xudmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SKTtcblxudmFyIG4kRmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIE4kUmVxdWVzdCA9IGdldEJ1aWx0SW4oJ1JlcXVlc3QnKTtcbnZhciBIZWFkZXJzID0gZ2V0QnVpbHRJbignSGVhZGVycycpO1xudmFyIFJlcXVlc3RQcm90b3R5cGUgPSBOJFJlcXVlc3QgJiYgTiRSZXF1ZXN0LnByb3RvdHlwZTtcbnZhciBIZWFkZXJzUHJvdG90eXBlID0gSGVhZGVycyAmJiBIZWFkZXJzLnByb3RvdHlwZTtcbnZhciBSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZGVjb2RlVVJJQ29tcG9uZW50ID0gZ2xvYmFsLmRlY29kZVVSSUNvbXBvbmVudDtcbnZhciBlbmNvZGVVUklDb21wb25lbnQgPSBnbG9iYWwuZW5jb2RlVVJJQ29tcG9uZW50O1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc2hpZnQgPSB1bmN1cnJ5VGhpcyhbXS5zaGlmdCk7XG52YXIgc3BsaWNlID0gdW5jdXJyeVRoaXMoW10uc3BsaWNlKTtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIHBsdXMgPSAvXFwrL2c7XG52YXIgc2VxdWVuY2VzID0gQXJyYXkoNCk7XG5cbnZhciBwZXJjZW50U2VxdWVuY2UgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgcmV0dXJuIHNlcXVlbmNlc1tieXRlcyAtIDFdIHx8IChzZXF1ZW5jZXNbYnl0ZXMgLSAxXSA9IFJlZ0V4cCgnKCg/OiVbXFxcXGRhLWZdezJ9KXsnICsgYnl0ZXMgKyAnfSknLCAnZ2knKSk7XG59O1xuXG52YXIgcGVyY2VudERlY29kZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc2VxdWVuY2UpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBzZXF1ZW5jZTtcbiAgfVxufTtcblxudmFyIGRlc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSByZXBsYWNlKGl0LCBwbHVzLCAnICcpO1xuICB2YXIgYnl0ZXMgPSA0O1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3aGlsZSAoYnl0ZXMpIHtcbiAgICAgIHJlc3VsdCA9IHJlcGxhY2UocmVzdWx0LCBwZXJjZW50U2VxdWVuY2UoYnl0ZXMtLSksIHBlcmNlbnREZWNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgZmluZCA9IC9bIScoKX5dfCUyMC9nO1xuXG52YXIgcmVwbGFjZW1lbnRzID0ge1xuICAnISc6ICclMjEnLFxuICBcIidcIjogJyUyNycsXG4gICcoJzogJyUyOCcsXG4gICcpJzogJyUyOScsXG4gICd+JzogJyU3RScsXG4gICclMjAnOiAnKydcbn07XG5cbnZhciByZXBsYWNlciA9IGZ1bmN0aW9uIChtYXRjaCkge1xuICByZXR1cm4gcmVwbGFjZW1lbnRzW21hdGNoXTtcbn07XG5cbnZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHJlcGxhY2UoZW5jb2RlVVJJQ29tcG9uZW50KGl0KSwgZmluZCwgcmVwbGFjZXIpO1xufTtcblxudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gZnVuY3Rpb24gKHBhc3NlZCwgcmVxdWlyZWQpIHtcbiAgaWYgKHBhc3NlZCA8IHJlcXVpcmVkKSB0aHJvdyBUeXBlRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIEl0ZXJhdG9yKHBhcmFtcywga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUixcbiAgICBpdGVyYXRvcjogZ2V0SXRlcmF0b3IoZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZShwYXJhbXMpLmVudHJpZXMpLFxuICAgIGtpbmQ6IGtpbmRcbiAgfSk7XG59LCAnSXRlcmF0b3InLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUodGhpcyk7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIHN0ZXAgPSBzdGF0ZS5pdGVyYXRvci5uZXh0KCk7XG4gIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gIGlmICghc3RlcC5kb25lKSB7XG4gICAgc3RlcC52YWx1ZSA9IGtpbmQgPT09ICdrZXlzJyA/IGVudHJ5LmtleSA6IGtpbmQgPT09ICd2YWx1ZXMnID8gZW50cnkudmFsdWUgOiBbZW50cnkua2V5LCBlbnRyeS52YWx1ZV07XG4gIH0gcmV0dXJuIHN0ZXA7XG59LCB0cnVlKTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc1N0YXRlID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgdGhpcy5lbnRyaWVzID0gW107XG4gIHRoaXMudXJsID0gbnVsbDtcblxuICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGlzT2JqZWN0KGluaXQpKSB0aGlzLnBhcnNlT2JqZWN0KGluaXQpO1xuICAgIGVsc2UgdGhpcy5wYXJzZVF1ZXJ5KHR5cGVvZiBpbml0ID09ICdzdHJpbmcnID8gY2hhckF0KGluaXQsIDApID09PSAnPycgPyBzdHJpbmdTbGljZShpbml0LCAxKSA6IGluaXQgOiAkdG9TdHJpbmcoaW5pdCkpO1xuICB9XG59O1xuXG5VUkxTZWFyY2hQYXJhbXNTdGF0ZS5wcm90b3R5cGUgPSB7XG4gIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TLFxuICBiaW5kVVJMOiBmdW5jdGlvbiAodXJsKSB7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfSxcbiAgcGFyc2VPYmplY3Q6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChvYmplY3QpO1xuICAgIHZhciBpdGVyYXRvciwgbmV4dCwgc3RlcCwgZW50cnlJdGVyYXRvciwgZW50cnlOZXh0LCBmaXJzdCwgc2Vjb25kO1xuXG4gICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKG9iamVjdCwgaXRlcmF0b3JNZXRob2QpO1xuICAgICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgICAgZW50cnlJdGVyYXRvciA9IGdldEl0ZXJhdG9yKGFuT2JqZWN0KHN0ZXAudmFsdWUpKTtcbiAgICAgICAgZW50cnlOZXh0ID0gZW50cnlJdGVyYXRvci5uZXh0O1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKGZpcnN0ID0gY2FsbChlbnRyeU5leHQsIGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgKHNlY29uZCA9IGNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fFxuICAgICAgICAgICFjYWxsKGVudHJ5TmV4dCwgZW50cnlJdGVyYXRvcikuZG9uZVxuICAgICAgICApIHRocm93IFR5cGVFcnJvcignRXhwZWN0ZWQgc2VxdWVuY2Ugd2l0aCBsZW5ndGggMicpO1xuICAgICAgICBwdXNoKHRoaXMuZW50cmllcywgeyBrZXk6ICR0b1N0cmluZyhmaXJzdC52YWx1ZSksIHZhbHVlOiAkdG9TdHJpbmcoc2Vjb25kLnZhbHVlKSB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgZm9yICh2YXIga2V5IGluIG9iamVjdCkgaWYgKGhhc093bihvYmplY3QsIGtleSkpIHtcbiAgICAgIHB1c2godGhpcy5lbnRyaWVzLCB7IGtleToga2V5LCB2YWx1ZTogJHRvU3RyaW5nKG9iamVjdFtrZXldKSB9KTtcbiAgICB9XG4gIH0sXG4gIHBhcnNlUXVlcnk6IGZ1bmN0aW9uIChxdWVyeSkge1xuICAgIGlmIChxdWVyeSkge1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzcGxpdChxdWVyeSwgJyYnKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgYXR0cmlidXRlLCBlbnRyeTtcbiAgICAgIHdoaWxlIChpbmRleCA8IGF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICAgIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaW5kZXgrK107XG4gICAgICAgIGlmIChhdHRyaWJ1dGUubGVuZ3RoKSB7XG4gICAgICAgICAgZW50cnkgPSBzcGxpdChhdHRyaWJ1dGUsICc9Jyk7XG4gICAgICAgICAgcHVzaCh0aGlzLmVudHJpZXMsIHtcbiAgICAgICAgICAgIGtleTogZGVzZXJpYWxpemUoc2hpZnQoZW50cnkpKSxcbiAgICAgICAgICAgIHZhbHVlOiBkZXNlcmlhbGl6ZShqb2luKGVudHJ5LCAnPScpKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzZXJpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICAgIHB1c2gocmVzdWx0LCBzZXJpYWxpemUoZW50cnkua2V5KSArICc9JyArIHNlcmlhbGl6ZShlbnRyeS52YWx1ZSkpO1xuICAgIH0gcmV0dXJuIGpvaW4ocmVzdWx0LCAnJicpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudHJpZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnBhcnNlUXVlcnkodGhpcy51cmwucXVlcnkpO1xuICB9LFxuICB1cGRhdGVVUkw6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy51cmwpIHRoaXMudXJsLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtdXJsc2VhcmNocGFyYW1zXG52YXIgVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkxTZWFyY2hQYXJhbXMoLyogaW5pdCAqLykge1xuICBhbkluc3RhbmNlKHRoaXMsIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSk7XG4gIHZhciBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywgbmV3IFVSTFNlYXJjaFBhcmFtc1N0YXRlKGluaXQpKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnJlZGVmaW5lQWxsKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwge1xuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5hcHBlbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtYXBwZW5kXG4gIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMik7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBwdXNoKHN0YXRlLmVudHJpZXMsIHsga2V5OiAkdG9TdHJpbmcobmFtZSksIHZhbHVlOiAkdG9TdHJpbmcodmFsdWUpIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5kZWxldGVgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZGVsZXRlXG4gICdkZWxldGUnOiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBzcGxpY2UoZW50cmllcywgaW5kZXgsIDEpO1xuICAgICAgZWxzZSBpbmRleCsrO1xuICAgIH1cbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldFxuICBnZXQ6IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHJldHVybiBlbnRyaWVzW2luZGV4XS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldEFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRhbGxcbiAgZ2V0QWxsOiBmdW5jdGlvbiBnZXRBbGwobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcHVzaChyZXN1bHQsIGVudHJpZXNbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaGFzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWhhc1xuICBoYXM6IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleCsrXS5rZXkgPT09IGtleSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNldFxuICBzZXQ6IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIHZhbCA9ICR0b1N0cmluZyh2YWx1ZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICBpZiAoZW50cnkua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGZvdW5kKSBzcGxpY2UoZW50cmllcywgaW5kZXgtLSwgMSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWZvdW5kKSBwdXNoKGVudHJpZXMsIHsga2V5OiBrZXksIHZhbHVlOiB2YWwgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc29ydFxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KCkge1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgYXJyYXlTb3J0KHN0YXRlLmVudHJpZXMsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5rZXkgPiBiLmtleSA/IDEgOiAtMTtcbiAgICB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2sgLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgfVxuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5rZXlzYCBtZXRob2RcbiAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdrZXlzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ3ZhbHVlcycpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2RcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdlbnRyaWVzJyk7XG4gIH1cbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCBJVEVSQVRPUiwgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLmVudHJpZXMsIHsgbmFtZTogJ2VudHJpZXMnIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHNlYXJjaHBhcmFtcy1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbnJlZGVmaW5lKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5zZXRUb1N0cmluZ1RhZyhVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCB9LCB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3Jcbn0pO1xuXG4vLyBXcmFwIGBmZXRjaGAgYW5kIGBSZXF1ZXN0YCBmb3IgY29ycmVjdCB3b3JrIHdpdGggcG9seWZpbGxlZCBgVVJMU2VhcmNoUGFyYW1zYFxuaWYgKCFVU0VfTkFUSVZFX1VSTCAmJiBpc0NhbGxhYmxlKEhlYWRlcnMpKSB7XG4gIHZhciBoZWFkZXJzSGFzID0gdW5jdXJyeVRoaXMoSGVhZGVyc1Byb3RvdHlwZS5oYXMpO1xuICB2YXIgaGVhZGVyc1NldCA9IHVuY3VycnlUaGlzKEhlYWRlcnNQcm90b3R5cGUuc2V0KTtcblxuICB2YXIgd3JhcFJlcXVlc3RPcHRpb25zID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHtcbiAgICAgIHZhciBib2R5ID0gaW5pdC5ib2R5O1xuICAgICAgdmFyIGhlYWRlcnM7XG4gICAgICBpZiAoY2xhc3NvZihib2R5KSA9PT0gVVJMX1NFQVJDSF9QQVJBTVMpIHtcbiAgICAgICAgaGVhZGVycyA9IGluaXQuaGVhZGVycyA/IG5ldyBIZWFkZXJzKGluaXQuaGVhZGVycykgOiBuZXcgSGVhZGVycygpO1xuICAgICAgICBpZiAoIWhlYWRlcnNIYXMoaGVhZGVycywgJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgICAgaGVhZGVyc1NldChoZWFkZXJzLCAnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZShpbml0LCB7XG4gICAgICAgICAgYm9keTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsICR0b1N0cmluZyhib2R5KSksXG4gICAgICAgICAgaGVhZGVyczogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGhlYWRlcnMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gcmV0dXJuIGluaXQ7XG4gIH07XG5cbiAgaWYgKGlzQ2FsbGFibGUobiRGZXRjaCkpIHtcbiAgICAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gbiRGZXRjaChpbnB1dCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB3cmFwUmVxdWVzdE9wdGlvbnMoYXJndW1lbnRzWzFdKSA6IHt9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChpc0NhbGxhYmxlKE4kUmVxdWVzdCkpIHtcbiAgICB2YXIgUmVxdWVzdENvbnN0cnVjdG9yID0gZnVuY3Rpb24gUmVxdWVzdChpbnB1dCAvKiAsIGluaXQgKi8pIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgUmVxdWVzdFByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gbmV3IE4kUmVxdWVzdChpbnB1dCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB3cmFwUmVxdWVzdE9wdGlvbnMoYXJndW1lbnRzWzFdKSA6IHt9KTtcbiAgICB9O1xuXG4gICAgUmVxdWVzdFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlcXVlc3RDb25zdHJ1Y3RvcjtcbiAgICBSZXF1ZXN0Q29uc3RydWN0b3IucHJvdG90eXBlID0gUmVxdWVzdFByb3RvdHlwZTtcblxuICAgICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBSZXF1ZXN0OiBSZXF1ZXN0Q29uc3RydWN0b3JcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvcixcbiAgZ2V0U3RhdGU6IGdldEludGVybmFsUGFyYW1zU3RhdGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVVNFX05BVElWRV9VUkwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXVybCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJykuZjtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG52YXIgYXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xudmFyIHRvQVNDSUkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgVVJMU2VhcmNoUGFyYW1zTW9kdWxlID0gcmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxVUkxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKCdVUkwnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXMgPSBVUkxTZWFyY2hQYXJhbXNNb2R1bGUuVVJMU2VhcmNoUGFyYW1zO1xudmFyIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUgPSBVUkxTZWFyY2hQYXJhbXNNb2R1bGUuZ2V0U3RhdGU7XG5cbnZhciBOYXRpdmVVUkwgPSBnbG9iYWwuVVJMO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xudmFyIHBvcCA9IHVuY3VycnlUaGlzKFtdLnBvcCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzaGlmdCA9IHVuY3VycnlUaGlzKFtdLnNoaWZ0KTtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciB0b0xvd2VyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvTG93ZXJDYXNlKTtcbnZhciB1bnNoaWZ0ID0gdW5jdXJyeVRoaXMoW10udW5zaGlmdCk7XG5cbnZhciBJTlZBTElEX0FVVEhPUklUWSA9ICdJbnZhbGlkIGF1dGhvcml0eSc7XG52YXIgSU5WQUxJRF9TQ0hFTUUgPSAnSW52YWxpZCBzY2hlbWUnO1xudmFyIElOVkFMSURfSE9TVCA9ICdJbnZhbGlkIGhvc3QnO1xudmFyIElOVkFMSURfUE9SVCA9ICdJbnZhbGlkIHBvcnQnO1xuXG52YXIgQUxQSEEgPSAvW2Etel0vaTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tb2JzY3VyZS1yYW5nZSAtLSBzYWZlXG52YXIgQUxQSEFOVU1FUklDID0gL1tcXGQrLS5hLXpdL2k7XG52YXIgRElHSVQgPSAvXFxkLztcbnZhciBIRVhfU1RBUlQgPSAvXjB4L2k7XG52YXIgT0NUID0gL15bMC03XSskLztcbnZhciBERUMgPSAvXlxcZCskLztcbnZhciBIRVggPSAvXltcXGRhLWZdKyQvaTtcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1jb250cm9sLWNoYXJhY3RlciAtLSBzYWZlICovXG52YXIgRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCA9IC9bXFwwXFx0XFxuXFxyICMlLzo8Pj9AW1xcXFxcXF1efF0vO1xudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQgPSAvW1xcMFxcdFxcblxcciAjLzo8Pj9AW1xcXFxcXF1efF0vO1xudmFyIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UgPSAvXltcXHUwMDAwLVxcdTAwMjBdK3xbXFx1MDAwMC1cXHUwMDIwXSskL2c7XG52YXIgVEFCX0FORF9ORVdfTElORSA9IC9bXFx0XFxuXFxyXS9nO1xuLyogZXNsaW50LWVuYWJsZSByZWdleHAvbm8tY29udHJvbC1jaGFyYWN0ZXIgLS0gc2FmZSAqL1xudmFyIEVPRjtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpcHY0LW51bWJlci1wYXJzZXJcbnZhciBwYXJzZUlQdjQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIHBhcnRzID0gc3BsaXQoaW5wdXQsICcuJyk7XG4gIHZhciBwYXJ0c0xlbmd0aCwgbnVtYmVycywgaW5kZXgsIHBhcnQsIHJhZGl4LCBudW1iZXIsIGlwdjQ7XG4gIGlmIChwYXJ0cy5sZW5ndGggJiYgcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gPT0gJycpIHtcbiAgICBwYXJ0cy5sZW5ndGgtLTtcbiAgfVxuICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHBhcnRzTGVuZ3RoID4gNCkgcmV0dXJuIGlucHV0O1xuICBudW1iZXJzID0gW107XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcGFydCA9IHBhcnRzW2luZGV4XTtcbiAgICBpZiAocGFydCA9PSAnJykgcmV0dXJuIGlucHV0O1xuICAgIHJhZGl4ID0gMTA7XG4gICAgaWYgKHBhcnQubGVuZ3RoID4gMSAmJiBjaGFyQXQocGFydCwgMCkgPT0gJzAnKSB7XG4gICAgICByYWRpeCA9IGV4ZWMoSEVYX1NUQVJULCBwYXJ0KSA/IDE2IDogODtcbiAgICAgIHBhcnQgPSBzdHJpbmdTbGljZShwYXJ0LCByYWRpeCA9PSA4ID8gMSA6IDIpO1xuICAgIH1cbiAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgIG51bWJlciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghZXhlYyhyYWRpeCA9PSAxMCA/IERFQyA6IHJhZGl4ID09IDggPyBPQ1QgOiBIRVgsIHBhcnQpKSByZXR1cm4gaW5wdXQ7XG4gICAgICBudW1iZXIgPSBwYXJzZUludChwYXJ0LCByYWRpeCk7XG4gICAgfVxuICAgIHB1c2gobnVtYmVycywgbnVtYmVyKTtcbiAgfVxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIG51bWJlciA9IG51bWJlcnNbaW5kZXhdO1xuICAgIGlmIChpbmRleCA9PSBwYXJ0c0xlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChudW1iZXIgPj0gcG93KDI1NiwgNSAtIHBhcnRzTGVuZ3RoKSkgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPiAyNTUpIHJldHVybiBudWxsO1xuICB9XG4gIGlwdjQgPSBwb3AobnVtYmVycyk7XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG51bWJlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgaXB2NCArPSBudW1iZXJzW2luZGV4XSAqIHBvdygyNTYsIDMgLSBpbmRleCk7XG4gIH1cbiAgcmV0dXJuIGlwdjQ7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtaXB2Ni1wYXJzZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBUT0RPXG52YXIgcGFyc2VJUHY2ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgcGllY2VJbmRleCA9IDA7XG4gIHZhciBjb21wcmVzcyA9IG51bGw7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIHZhbHVlLCBsZW5ndGgsIG51bWJlcnNTZWVuLCBpcHY0UGllY2UsIG51bWJlciwgc3dhcHMsIHN3YXA7XG5cbiAgdmFyIGNociA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhckF0KGlucHV0LCBwb2ludGVyKTtcbiAgfTtcblxuICBpZiAoY2hyKCkgPT0gJzonKSB7XG4gICAgaWYgKGNoYXJBdChpbnB1dCwgMSkgIT0gJzonKSByZXR1cm47XG4gICAgcG9pbnRlciArPSAyO1xuICAgIHBpZWNlSW5kZXgrKztcbiAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gIH1cbiAgd2hpbGUgKGNocigpKSB7XG4gICAgaWYgKHBpZWNlSW5kZXggPT0gOCkgcmV0dXJuO1xuICAgIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICAgIGlmIChjb21wcmVzcyAhPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgcGllY2VJbmRleCsrO1xuICAgICAgY29tcHJlc3MgPSBwaWVjZUluZGV4O1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhbHVlID0gbGVuZ3RoID0gMDtcbiAgICB3aGlsZSAobGVuZ3RoIDwgNCAmJiBleGVjKEhFWCwgY2hyKCkpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlICogMTYgKyBwYXJzZUludChjaHIoKSwgMTYpO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgbGVuZ3RoKys7XG4gICAgfVxuICAgIGlmIChjaHIoKSA9PSAnLicpIHtcbiAgICAgIGlmIChsZW5ndGggPT0gMCkgcmV0dXJuO1xuICAgICAgcG9pbnRlciAtPSBsZW5ndGg7XG4gICAgICBpZiAocGllY2VJbmRleCA+IDYpIHJldHVybjtcbiAgICAgIG51bWJlcnNTZWVuID0gMDtcbiAgICAgIHdoaWxlIChjaHIoKSkge1xuICAgICAgICBpcHY0UGllY2UgPSBudWxsO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPiAwKSB7XG4gICAgICAgICAgaWYgKGNocigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKztcbiAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWV4ZWMoRElHSVQsIGNocigpKSkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAoZXhlYyhESUdJVCwgY2hyKCkpKSB7XG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQoY2hyKCksIDEwKTtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID09PSBudWxsKSBpcHY0UGllY2UgPSBudW1iZXI7XG4gICAgICAgICAgZWxzZSBpZiAoaXB2NFBpZWNlID09IDApIHJldHVybjtcbiAgICAgICAgICBlbHNlIGlwdjRQaWVjZSA9IGlwdjRQaWVjZSAqIDEwICsgbnVtYmVyO1xuICAgICAgICAgIGlmIChpcHY0UGllY2UgPiAyNTUpIHJldHVybjtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIH1cbiAgICAgICAgYWRkcmVzc1twaWVjZUluZGV4XSA9IGFkZHJlc3NbcGllY2VJbmRleF0gKiAyNTYgKyBpcHY0UGllY2U7XG4gICAgICAgIG51bWJlcnNTZWVuKys7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA9PSAyIHx8IG51bWJlcnNTZWVuID09IDQpIHBpZWNlSW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChudW1iZXJzU2VlbiAhPSA0KSByZXR1cm47XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGNocigpID09ICc6Jykge1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgaWYgKCFjaHIoKSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY2hyKCkpIHJldHVybjtcbiAgICBhZGRyZXNzW3BpZWNlSW5kZXgrK10gPSB2YWx1ZTtcbiAgfVxuICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHtcbiAgICBzd2FwcyA9IHBpZWNlSW5kZXggLSBjb21wcmVzcztcbiAgICBwaWVjZUluZGV4ID0gNztcbiAgICB3aGlsZSAocGllY2VJbmRleCAhPSAwICYmIHN3YXBzID4gMCkge1xuICAgICAgc3dhcCA9IGFkZHJlc3NbcGllY2VJbmRleF07XG4gICAgICBhZGRyZXNzW3BpZWNlSW5kZXgtLV0gPSBhZGRyZXNzW2NvbXByZXNzICsgc3dhcHMgLSAxXTtcbiAgICAgIGFkZHJlc3NbY29tcHJlc3MgKyAtLXN3YXBzXSA9IHN3YXA7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBpZWNlSW5kZXggIT0gOCkgcmV0dXJuO1xuICByZXR1cm4gYWRkcmVzcztcbn07XG5cbnZhciBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZSA9IGZ1bmN0aW9uIChpcHY2KSB7XG4gIHZhciBtYXhJbmRleCA9IG51bGw7XG4gIHZhciBtYXhMZW5ndGggPSAxO1xuICB2YXIgY3VyclN0YXJ0ID0gbnVsbDtcbiAgdmFyIGN1cnJMZW5ndGggPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICBmb3IgKDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgaWYgKGlwdjZbaW5kZXhdICE9PSAwKSB7XG4gICAgICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgICBtYXhJbmRleCA9IGN1cnJTdGFydDtcbiAgICAgICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGN1cnJTdGFydCA9IG51bGw7XG4gICAgICBjdXJyTGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGN1cnJTdGFydCA9PT0gbnVsbCkgY3VyclN0YXJ0ID0gaW5kZXg7XG4gICAgICArK2N1cnJMZW5ndGg7XG4gICAgfVxuICB9XG4gIGlmIChjdXJyTGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgfVxuICByZXR1cm4gbWF4SW5kZXg7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2hvc3Qtc2VyaWFsaXppbmdcbnZhciBzZXJpYWxpemVIb3N0ID0gZnVuY3Rpb24gKGhvc3QpIHtcbiAgdmFyIHJlc3VsdCwgaW5kZXgsIGNvbXByZXNzLCBpZ25vcmUwO1xuICAvLyBpcHY0XG4gIGlmICh0eXBlb2YgaG9zdCA9PSAnbnVtYmVyJykge1xuICAgIHJlc3VsdCA9IFtdO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDQ7IGluZGV4KyspIHtcbiAgICAgIHVuc2hpZnQocmVzdWx0LCBob3N0ICUgMjU2KTtcbiAgICAgIGhvc3QgPSBmbG9vcihob3N0IC8gMjU2KTtcbiAgICB9IHJldHVybiBqb2luKHJlc3VsdCwgJy4nKTtcbiAgLy8gaXB2NlxuICB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoaWdub3JlMCAmJiBob3N0W2luZGV4XSA9PT0gMCkgY29udGludWU7XG4gICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlO1xuICAgICAgaWYgKGNvbXByZXNzID09PSBpbmRleCkge1xuICAgICAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonO1xuICAgICAgICBpZ25vcmUwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBudW1iZXJUb1N0cmluZyhob3N0W2luZGV4XSwgMTYpO1xuICAgICAgICBpZiAoaW5kZXggPCA3KSByZXN1bHQgKz0gJzonO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJ1snICsgcmVzdWx0ICsgJ10nO1xuICB9IHJldHVybiBob3N0O1xufTtcblxudmFyIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQgPSB7fTtcbnZhciBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyAnOiAxLCAnXCInOiAxLCAnPCc6IDEsICc+JzogMSwgJ2AnOiAxXG59KTtcbnZhciBwYXRoUGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcjJzogMSwgJz8nOiAxLCAneyc6IDEsICd9JzogMVxufSk7XG52YXIgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBwYXRoUGVyY2VudEVuY29kZVNldCwge1xuICAnLyc6IDEsICc6JzogMSwgJzsnOiAxLCAnPSc6IDEsICdAJzogMSwgJ1snOiAxLCAnXFxcXCc6IDEsICddJzogMSwgJ14nOiAxLCAnfCc6IDFcbn0pO1xuXG52YXIgcGVyY2VudEVuY29kZSA9IGZ1bmN0aW9uIChjaHIsIHNldCkge1xuICB2YXIgY29kZSA9IGNvZGVBdChjaHIsIDApO1xuICByZXR1cm4gY29kZSA+IDB4MjAgJiYgY29kZSA8IDB4N0YgJiYgIWhhc093bihzZXQsIGNocikgPyBjaHIgOiBlbmNvZGVVUklDb21wb25lbnQoY2hyKTtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc3BlY2lhbC1zY2hlbWVcbnZhciBzcGVjaWFsU2NoZW1lcyA9IHtcbiAgZnRwOiAyMSxcbiAgZmlsZTogbnVsbCxcbiAgaHR0cDogODAsXG4gIGh0dHBzOiA0NDMsXG4gIHdzOiA4MCxcbiAgd3NzOiA0NDNcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jd2luZG93cy1kcml2ZS1sZXR0ZXJcbnZhciBpc1dpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcsIG5vcm1hbGl6ZWQpIHtcbiAgdmFyIHNlY29uZDtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT0gMiAmJiBleGVjKEFMUEhBLCBjaGFyQXQoc3RyaW5nLCAwKSlcbiAgICAmJiAoKHNlY29uZCA9IGNoYXJBdChzdHJpbmcsIDEpKSA9PSAnOicgfHwgKCFub3JtYWxpemVkICYmIHNlY29uZCA9PSAnfCcpKTtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc3RhcnQtd2l0aC1hLXdpbmRvd3MtZHJpdmUtbGV0dGVyXG52YXIgc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIHRoaXJkO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA+IDEgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoc3RyaW5nU2xpY2Uoc3RyaW5nLCAwLCAyKSkgJiYgKFxuICAgIHN0cmluZy5sZW5ndGggPT0gMiB8fFxuICAgICgodGhpcmQgPSBjaGFyQXQoc3RyaW5nLCAyKSkgPT09ICcvJyB8fCB0aGlyZCA9PT0gJ1xcXFwnIHx8IHRoaXJkID09PSAnPycgfHwgdGhpcmQgPT09ICcjJylcbiAgKTtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc2luZ2xlLWRvdC1wYXRoLXNlZ21lbnRcbnZhciBpc1NpbmdsZURvdCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLicgfHwgdG9Mb3dlckNhc2Uoc2VnbWVudCkgPT09ICclMmUnO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb3VibGUtZG90LXBhdGgtc2VnbWVudFxudmFyIGlzRG91YmxlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgc2VnbWVudCA9IHRvTG93ZXJDYXNlKHNlZ21lbnQpO1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4uJyB8fCBzZWdtZW50ID09PSAnJTJlLicgfHwgc2VnbWVudCA9PT0gJy4lMmUnIHx8IHNlZ21lbnQgPT09ICclMmUlMmUnO1xufTtcblxuLy8gU3RhdGVzOlxudmFyIFNDSEVNRV9TVEFSVCA9IHt9O1xudmFyIFNDSEVNRSA9IHt9O1xudmFyIE5PX1NDSEVNRSA9IHt9O1xudmFyIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUEFUSF9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBSRUxBVElWRSA9IHt9O1xudmFyIFJFTEFUSVZFX1NMQVNIID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTID0ge307XG52YXIgQVVUSE9SSVRZID0ge307XG52YXIgSE9TVCA9IHt9O1xudmFyIEhPU1ROQU1FID0ge307XG52YXIgUE9SVCA9IHt9O1xudmFyIEZJTEUgPSB7fTtcbnZhciBGSUxFX1NMQVNIID0ge307XG52YXIgRklMRV9IT1NUID0ge307XG52YXIgUEFUSF9TVEFSVCA9IHt9O1xudmFyIFBBVEggPSB7fTtcbnZhciBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIID0ge307XG52YXIgUVVFUlkgPSB7fTtcbnZhciBGUkFHTUVOVCA9IHt9O1xuXG52YXIgVVJMU3RhdGUgPSBmdW5jdGlvbiAodXJsLCBpc0Jhc2UsIGJhc2UpIHtcbiAgdmFyIHVybFN0cmluZyA9ICR0b1N0cmluZyh1cmwpO1xuICB2YXIgYmFzZVN0YXRlLCBmYWlsdXJlLCBzZWFyY2hQYXJhbXM7XG4gIGlmIChpc0Jhc2UpIHtcbiAgICBmYWlsdXJlID0gdGhpcy5wYXJzZSh1cmxTdHJpbmcpO1xuICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIGJhc2VTdGF0ZSA9IG5ldyBVUkxTdGF0ZShiYXNlLCB0cnVlKTtcbiAgICBmYWlsdXJlID0gdGhpcy5wYXJzZSh1cmxTdHJpbmcsIG51bGwsIGJhc2VTdGF0ZSk7XG4gICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICBzZWFyY2hQYXJhbXMgPSBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKG5ldyBVUkxTZWFyY2hQYXJhbXMoKSk7XG4gICAgc2VhcmNoUGFyYW1zLmJpbmRVUkwodGhpcyk7XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMgPSBzZWFyY2hQYXJhbXM7XG4gIH1cbn07XG5cblVSTFN0YXRlLnByb3RvdHlwZSA9IHtcbiAgdHlwZTogJ1VSTCcsXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLXBhcnNpbmdcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbiAgcGFyc2U6IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGVPdmVycmlkZSwgYmFzZSkge1xuICAgIHZhciB1cmwgPSB0aGlzO1xuICAgIHZhciBzdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgU0NIRU1FX1NUQVJUO1xuICAgIHZhciBwb2ludGVyID0gMDtcbiAgICB2YXIgYnVmZmVyID0gJyc7XG4gICAgdmFyIHNlZW5BdCA9IGZhbHNlO1xuICAgIHZhciBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICAgIHZhciBzZWVuUGFzc3dvcmRUb2tlbiA9IGZhbHNlO1xuICAgIHZhciBjb2RlUG9pbnRzLCBjaHIsIGJ1ZmZlckNvZGVQb2ludHMsIGZhaWx1cmU7XG5cbiAgICBpbnB1dCA9ICR0b1N0cmluZyhpbnB1dCk7XG5cbiAgICBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgIHVybC5zY2hlbWUgPSAnJztcbiAgICAgIHVybC51c2VybmFtZSA9ICcnO1xuICAgICAgdXJsLnBhc3N3b3JkID0gJyc7XG4gICAgICB1cmwuaG9zdCA9IG51bGw7XG4gICAgICB1cmwucG9ydCA9IG51bGw7XG4gICAgICB1cmwucGF0aCA9IFtdO1xuICAgICAgdXJsLnF1ZXJ5ID0gbnVsbDtcbiAgICAgIHVybC5mcmFnbWVudCA9IG51bGw7XG4gICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IGZhbHNlO1xuICAgICAgaW5wdXQgPSByZXBsYWNlKGlucHV0LCBMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFLCAnJyk7XG4gICAgfVxuXG4gICAgaW5wdXQgPSByZXBsYWNlKGlucHV0LCBUQUJfQU5EX05FV19MSU5FLCAnJyk7XG5cbiAgICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcblxuICAgIHdoaWxlIChwb2ludGVyIDw9IGNvZGVQb2ludHMubGVuZ3RoKSB7XG4gICAgICBjaHIgPSBjb2RlUG9pbnRzW3BvaW50ZXJdO1xuICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICBjYXNlIFNDSEVNRV9TVEFSVDpcbiAgICAgICAgICBpZiAoY2hyICYmIGV4ZWMoQUxQSEEsIGNocikpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSB0b0xvd2VyQ2FzZShjaHIpO1xuICAgICAgICAgICAgc3RhdGUgPSBTQ0hFTUU7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU0NIRU1FOlxuICAgICAgICAgIGlmIChjaHIgJiYgKGV4ZWMoQUxQSEFOVU1FUklDLCBjaHIpIHx8IGNociA9PSAnKycgfHwgY2hyID09ICctJyB8fCBjaHIgPT0gJy4nKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IHRvTG93ZXJDYXNlKGNocik7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJzonKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiAoXG4gICAgICAgICAgICAgICh1cmwuaXNTcGVjaWFsKCkgIT0gaGFzT3duKHNwZWNpYWxTY2hlbWVzLCBidWZmZXIpKSB8fFxuICAgICAgICAgICAgICAoYnVmZmVyID09ICdmaWxlJyAmJiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSB8fCB1cmwucG9ydCAhPT0gbnVsbCkpIHx8XG4gICAgICAgICAgICAgICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLmhvc3QpXG4gICAgICAgICAgICApKSByZXR1cm47XG4gICAgICAgICAgICB1cmwuc2NoZW1lID0gYnVmZmVyO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSA9PSB1cmwucG9ydCkgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgICBzdGF0ZSA9IEZJTEU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBiYXNlICYmIGJhc2Uuc2NoZW1lID09IHVybC5zY2hlbWUpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmlzU3BlY2lhbCgpKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSF9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpO1xuICAgICAgICAgICAgICBzdGF0ZSA9IENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICAgIHBvaW50ZXIgPSAwO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE5PX1NDSEVNRTpcbiAgICAgICAgICBpZiAoIWJhc2UgfHwgKGJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjaHIgIT0gJyMnKSkgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICAgIGlmIChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlID0gYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnID8gRklMRSA6IFJFTEFUSVZFO1xuICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIGNhc2UgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk6XG4gICAgICAgICAgaWYgKGNociA9PSAnLycgJiYgY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFBBVEhfT1JfQVVUSE9SSVRZOlxuICAgICAgICAgIGlmIChjaHIgPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBSRUxBVElWRTpcbiAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgICAgaWYgKGNociA9PSBFT0YpIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnLycgfHwgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBSRUxBVElWRV9TTEFTSDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5wYXRoLmxlbmd0aC0tO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFJFTEFUSVZFX1NMQVNIOlxuICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkgJiYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM6XG4gICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgICBpZiAoY2hyICE9ICcvJyB8fCBjaGFyQXQoYnVmZmVyLCBwb2ludGVyICsgMSkgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUzpcbiAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiBjaHIgIT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBVVRIT1JJVFk6XG4gICAgICAgICAgaWYgKGNociA9PSAnQCcpIHtcbiAgICAgICAgICAgIGlmIChzZWVuQXQpIGJ1ZmZlciA9ICclNDAnICsgYnVmZmVyO1xuICAgICAgICAgICAgc2VlbkF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJ1ZmZlckNvZGVQb2ludHMgPSBhcnJheUZyb20oYnVmZmVyKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyQ29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gYnVmZmVyQ29kZVBvaW50c1tpXTtcbiAgICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA9PSAnOicgJiYgIXNlZW5QYXNzd29yZFRva2VuKSB7XG4gICAgICAgICAgICAgICAgc2VlblBhc3N3b3JkVG9rZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBlbmNvZGVkQ29kZVBvaW50cyA9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50LCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgICAgICBpZiAoc2VlblBhc3N3b3JkVG9rZW4pIHVybC5wYXNzd29yZCArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICAgICAgZWxzZSB1cmwudXNlcm5hbWUgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHNlZW5BdCAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0FVVEhPUklUWTtcbiAgICAgICAgICAgIHBvaW50ZXIgLT0gYXJyYXlGcm9tKGJ1ZmZlcikubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBIT1NUO1xuICAgICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgSE9TVDpcbiAgICAgICAgY2FzZSBIT1NUTkFNRTpcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiB1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnOicgJiYgIXNlZW5CcmFja2V0KSB7XG4gICAgICAgICAgICBpZiAoYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBQT1JUO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgPT0gSE9TVE5BTUUpIHJldHVybjtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiBidWZmZXIgPT0gJycgJiYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSByZXR1cm47XG4gICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaHIgPT0gJ1snKSBzZWVuQnJhY2tldCA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChjaHIgPT0gJ10nKSBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICAgICAgICAgICAgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUE9SVDpcbiAgICAgICAgICBpZiAoZXhlYyhESUdJVCwgY2hyKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSB8fFxuICAgICAgICAgICAgc3RhdGVPdmVycmlkZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlciAhPSAnJykge1xuICAgICAgICAgICAgICB2YXIgcG9ydCA9IHBhcnNlSW50KGJ1ZmZlciwgMTApO1xuICAgICAgICAgICAgICBpZiAocG9ydCA+IDB4RkZGRikgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgICAgICAgdXJsLnBvcnQgPSAodXJsLmlzU3BlY2lhbCgpICYmIHBvcnQgPT09IHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdKSA/IG51bGwgOiBwb3J0O1xuICAgICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEZJTEU6XG4gICAgICAgICAgdXJsLnNjaGVtZSA9ICdmaWxlJztcbiAgICAgICAgICBpZiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSBzdGF0ZSA9IEZJTEVfU0xBU0g7XG4gICAgICAgICAgZWxzZSBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgIGlmIChjaHIgPT0gRU9GKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIXN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIoam9pbihhcnJheVNsaWNlKGNvZGVQb2ludHMsIHBvaW50ZXIpLCAnJykpKSB7XG4gICAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgICAgdXJsLnNob3J0ZW5QYXRoKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIEZJTEVfU0xBU0g6XG4gICAgICAgICAgaWYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykge1xuICAgICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnICYmICFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGpvaW4oYXJyYXlTbGljZShjb2RlUG9pbnRzLCBwb2ludGVyKSwgJycpKSkge1xuICAgICAgICAgICAgaWYgKGlzV2luZG93c0RyaXZlTGV0dGVyKGJhc2UucGF0aFswXSwgdHJ1ZSkpIHB1c2godXJsLnBhdGgsIGJhc2UucGF0aFswXSk7XG4gICAgICAgICAgICBlbHNlIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgY2FzZSBGSUxFX0hPU1Q6XG4gICAgICAgICAgaWYgKGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJykge1xuICAgICAgICAgICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChidWZmZXIgPT0gJycpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTtcbiAgICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgICBpZiAodXJsLmhvc3QgPT0gJ2xvY2FsaG9zdCcpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICB9IGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUEFUSF9TVEFSVDpcbiAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiBjaHIgIT0gJ1xcXFwnKSBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociAhPSBFT0YpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUEFUSDpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHxcbiAgICAgICAgICAgIChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkgfHxcbiAgICAgICAgICAgICghc3RhdGVPdmVycmlkZSAmJiAoY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChpc0RvdWJsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICAgIHVybC5zaG9ydGVuUGF0aCgpO1xuICAgICAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiAhKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSkge1xuICAgICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsICcnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmICEoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7XG4gICAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5wYXRoLmxlbmd0aCAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVybC5ob3N0KSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGNoYXJBdChidWZmZXIsIDApICsgJzonOyAvLyBub3JtYWxpemUgd2luZG93cyBkcml2ZSBsZXR0ZXJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCBidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgKGNociA9PSBFT0YgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSkge1xuICAgICAgICAgICAgICB3aGlsZSAodXJsLnBhdGgubGVuZ3RoID4gMSAmJiB1cmwucGF0aFswXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBzaGlmdCh1cmwucGF0aCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gcGVyY2VudEVuY29kZShjaHIsIHBhdGhQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDpcbiAgICAgICAgICBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikge1xuICAgICAgICAgICAgdXJsLnBhdGhbMF0gKz0gcGVyY2VudEVuY29kZShjaHIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBRVUVSWTpcbiAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikge1xuICAgICAgICAgICAgaWYgKGNociA9PSBcIidcIiAmJiB1cmwuaXNTcGVjaWFsKCkpIHVybC5xdWVyeSArPSAnJTI3JztcbiAgICAgICAgICAgIGVsc2UgaWYgKGNociA9PSAnIycpIHVybC5xdWVyeSArPSAnJTIzJztcbiAgICAgICAgICAgIGVsc2UgdXJsLnF1ZXJ5ICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRlJBR01FTlQ6XG4gICAgICAgICAgaWYgKGNociAhPSBFT0YpIHVybC5mcmFnbWVudCArPSBwZXJjZW50RW5jb2RlKGNociwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcG9pbnRlcisrO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNob3N0LXBhcnNpbmdcbiAgcGFyc2VIb3N0OiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICB2YXIgcmVzdWx0LCBjb2RlUG9pbnRzLCBpbmRleDtcbiAgICBpZiAoY2hhckF0KGlucHV0LCAwKSA9PSAnWycpIHtcbiAgICAgIGlmIChjaGFyQXQoaW5wdXQsIGlucHV0Lmxlbmd0aCAtIDEpICE9ICddJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHJlc3VsdCA9IHBhcnNlSVB2NihzdHJpbmdTbGljZShpbnB1dCwgMSwgLTEpKTtcbiAgICAgIGlmICghcmVzdWx0KSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgdGhpcy5ob3N0ID0gcmVzdWx0O1xuICAgIC8vIG9wYXF1ZSBob3N0XG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1NwZWNpYWwoKSkge1xuICAgICAgaWYgKGV4ZWMoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVCwgaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgcmVzdWx0ID0gJyc7XG4gICAgICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvZGVQb2ludHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaW5kZXhdLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaG9zdCA9IHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQgPSB0b0FTQ0lJKGlucHV0KTtcbiAgICAgIGlmIChleGVjKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQsIGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHJlc3VsdCA9IHBhcnNlSVB2NChpbnB1dCk7XG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgdGhpcy5ob3N0ID0gcmVzdWx0O1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjYW5ub3QtaGF2ZS1hLXVzZXJuYW1lLXBhc3N3b3JkLXBvcnRcbiAgY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICF0aGlzLmhvc3QgfHwgdGhpcy5jYW5ub3RCZUFCYXNlVVJMIHx8IHRoaXMuc2NoZW1lID09ICdmaWxlJztcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbmNsdWRlLWNyZWRlbnRpYWxzXG4gIGluY2x1ZGVzQ3JlZGVudGlhbHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51c2VybmFtZSAhPSAnJyB8fCB0aGlzLnBhc3N3b3JkICE9ICcnO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2lzLXNwZWNpYWxcbiAgaXNTcGVjaWFsOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGhhc093bihzcGVjaWFsU2NoZW1lcywgdGhpcy5zY2hlbWUpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3Nob3J0ZW4tYS11cmxzLXBhdGhcbiAgc2hvcnRlblBhdGg6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICB2YXIgcGF0aFNpemUgPSBwYXRoLmxlbmd0aDtcbiAgICBpZiAocGF0aFNpemUgJiYgKHRoaXMuc2NoZW1lICE9ICdmaWxlJyB8fCBwYXRoU2l6ZSAhPSAxIHx8ICFpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdLCB0cnVlKSkpIHtcbiAgICAgIHBhdGgubGVuZ3RoLS07XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtdXJsLXNlcmlhbGl6ZXJcbiAgc2VyaWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVybCA9IHRoaXM7XG4gICAgdmFyIHNjaGVtZSA9IHVybC5zY2hlbWU7XG4gICAgdmFyIHVzZXJuYW1lID0gdXJsLnVzZXJuYW1lO1xuICAgIHZhciBwYXNzd29yZCA9IHVybC5wYXNzd29yZDtcbiAgICB2YXIgaG9zdCA9IHVybC5ob3N0O1xuICAgIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gICAgdmFyIHBhdGggPSB1cmwucGF0aDtcbiAgICB2YXIgcXVlcnkgPSB1cmwucXVlcnk7XG4gICAgdmFyIGZyYWdtZW50ID0gdXJsLmZyYWdtZW50O1xuICAgIHZhciBvdXRwdXQgPSBzY2hlbWUgKyAnOic7XG4gICAgaWYgKGhvc3QgIT09IG51bGwpIHtcbiAgICAgIG91dHB1dCArPSAnLy8nO1xuICAgICAgaWYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkpIHtcbiAgICAgICAgb3V0cHV0ICs9IHVzZXJuYW1lICsgKHBhc3N3b3JkID8gJzonICsgcGFzc3dvcmQgOiAnJykgKyAnQCc7XG4gICAgICB9XG4gICAgICBvdXRwdXQgKz0gc2VyaWFsaXplSG9zdChob3N0KTtcbiAgICAgIGlmIChwb3J0ICE9PSBudWxsKSBvdXRwdXQgKz0gJzonICsgcG9ydDtcbiAgICB9IGVsc2UgaWYgKHNjaGVtZSA9PSAnZmlsZScpIG91dHB1dCArPSAnLy8nO1xuICAgIG91dHB1dCArPSB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIGpvaW4ocGF0aCwgJy8nKSA6ICcnO1xuICAgIGlmIChxdWVyeSAhPT0gbnVsbCkgb3V0cHV0ICs9ICc/JyArIHF1ZXJ5O1xuICAgIGlmIChmcmFnbWVudCAhPT0gbnVsbCkgb3V0cHV0ICs9ICcjJyArIGZyYWdtZW50O1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ocmVmXG4gIHNldEhyZWY6IGZ1bmN0aW9uIChocmVmKSB7XG4gICAgdmFyIGZhaWx1cmUgPSB0aGlzLnBhcnNlKGhyZWYpO1xuICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMudXBkYXRlKCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW5cbiAgZ2V0T3JpZ2luOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjaGVtZSA9IHRoaXMuc2NoZW1lO1xuICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0O1xuICAgIGlmIChzY2hlbWUgPT0gJ2Jsb2InKSB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBVUkxDb25zdHJ1Y3RvcihzY2hlbWUucGF0aFswXSkub3JpZ2luO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cbiAgICBpZiAoc2NoZW1lID09ICdmaWxlJyB8fCAhdGhpcy5pc1NwZWNpYWwoKSkgcmV0dXJuICdudWxsJztcbiAgICByZXR1cm4gc2NoZW1lICsgJzovLycgKyBzZXJpYWxpemVIb3N0KHRoaXMuaG9zdCkgKyAocG9ydCAhPT0gbnVsbCA/ICc6JyArIHBvcnQgOiAnJyk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wcm90b2NvbFxuICBnZXRQcm90b2NvbDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNjaGVtZSArICc6JztcbiAgfSxcbiAgc2V0UHJvdG9jb2w6IGZ1bmN0aW9uIChwcm90b2NvbCkge1xuICAgIHRoaXMucGFyc2UoJHRvU3RyaW5nKHByb3RvY29sKSArICc6JywgU0NIRU1FX1NUQVJUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXVzZXJuYW1lXG4gIGdldFVzZXJuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlcm5hbWU7XG4gIH0sXG4gIHNldFVzZXJuYW1lOiBmdW5jdGlvbiAodXNlcm5hbWUpIHtcbiAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbSgkdG9TdHJpbmcodXNlcm5hbWUpKTtcbiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuO1xuICAgIHRoaXMudXNlcm5hbWUgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMudXNlcm5hbWUgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhc3N3b3JkXG4gIGdldFBhc3N3b3JkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFzc3dvcmQ7XG4gIH0sXG4gIHNldFBhc3N3b3JkOiBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbSgkdG9TdHJpbmcocGFzc3dvcmQpKTtcbiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuO1xuICAgIHRoaXMucGFzc3dvcmQgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGFzc3dvcmQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RcbiAgZ2V0SG9zdDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0O1xuICAgIHJldHVybiBob3N0ID09PSBudWxsID8gJydcbiAgICAgIDogcG9ydCA9PT0gbnVsbCA/IHNlcmlhbGl6ZUhvc3QoaG9zdClcbiAgICAgIDogc2VyaWFsaXplSG9zdChob3N0KSArICc6JyArIHBvcnQ7XG4gIH0sXG4gIHNldEhvc3Q6IGZ1bmN0aW9uIChob3N0KSB7XG4gICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgIHRoaXMucGFyc2UoaG9zdCwgSE9TVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0bmFtZVxuICBnZXRIb3N0bmFtZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICAgIHJldHVybiBob3N0ID09PSBudWxsID8gJycgOiBzZXJpYWxpemVIb3N0KGhvc3QpO1xuICB9LFxuICBzZXRIb3N0bmFtZTogZnVuY3Rpb24gKGhvc3RuYW1lKSB7XG4gICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgIHRoaXMucGFyc2UoaG9zdG5hbWUsIEhPU1ROQU1FKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBvcnRcbiAgZ2V0UG9ydDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0O1xuICAgIHJldHVybiBwb3J0ID09PSBudWxsID8gJycgOiAkdG9TdHJpbmcocG9ydCk7XG4gIH0sXG4gIHNldFBvcnQ6IGZ1bmN0aW9uIChwb3J0KSB7XG4gICAgaWYgKHRoaXMuY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KCkpIHJldHVybjtcbiAgICBwb3J0ID0gJHRvU3RyaW5nKHBvcnQpO1xuICAgIGlmIChwb3J0ID09ICcnKSB0aGlzLnBvcnQgPSBudWxsO1xuICAgIGVsc2UgdGhpcy5wYXJzZShwb3J0LCBQT1JUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhdGhuYW1lXG4gIGdldFBhdGhuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgcmV0dXJuIHRoaXMuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIGpvaW4ocGF0aCwgJy8nKSA6ICcnO1xuICB9LFxuICBzZXRQYXRobmFtZTogZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgIHRoaXMucGF0aCA9IFtdO1xuICAgIHRoaXMucGFyc2UocGF0aG5hbWUsIFBBVEhfU1RBUlQpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoXG4gIGdldFNlYXJjaDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgcmV0dXJuIHF1ZXJ5ID8gJz8nICsgcXVlcnkgOiAnJztcbiAgfSxcbiAgc2V0U2VhcmNoOiBmdW5jdGlvbiAoc2VhcmNoKSB7XG4gICAgc2VhcmNoID0gJHRvU3RyaW5nKHNlYXJjaCk7XG4gICAgaWYgKHNlYXJjaCA9PSAnJykge1xuICAgICAgdGhpcy5xdWVyeSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgnPycgPT0gY2hhckF0KHNlYXJjaCwgMCkpIHNlYXJjaCA9IHN0cmluZ1NsaWNlKHNlYXJjaCwgMSk7XG4gICAgICB0aGlzLnF1ZXJ5ID0gJyc7XG4gICAgICB0aGlzLnBhcnNlKHNlYXJjaCwgUVVFUlkpO1xuICAgIH1cbiAgICB0aGlzLnNlYXJjaFBhcmFtcy51cGRhdGUoKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaHBhcmFtc1xuICBnZXRTZWFyY2hQYXJhbXM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hQYXJhbXMuZmFjYWRlO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICBnZXRIYXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gdGhpcy5mcmFnbWVudDtcbiAgICByZXR1cm4gZnJhZ21lbnQgPyAnIycgKyBmcmFnbWVudCA6ICcnO1xuICB9LFxuICBzZXRIYXNoOiBmdW5jdGlvbiAoaGFzaCkge1xuICAgIGhhc2ggPSAkdG9TdHJpbmcoaGFzaCk7XG4gICAgaWYgKGhhc2ggPT0gJycpIHtcbiAgICAgIHRoaXMuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoJyMnID09IGNoYXJBdChoYXNoLCAwKSkgaGFzaCA9IHN0cmluZ1NsaWNlKGhhc2gsIDEpO1xuICAgIHRoaXMuZnJhZ21lbnQgPSAnJztcbiAgICB0aGlzLnBhcnNlKGhhc2gsIEZSQUdNRU5UKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoUGFyYW1zLnNlcmlhbGl6ZSgpIHx8IG51bGw7XG4gIH1cbn07XG5cbi8vIGBVUkxgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1jbGFzc1xudmFyIFVSTENvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMKHVybCAvKiAsIGJhc2UgKi8pIHtcbiAgdmFyIHRoYXQgPSBhbkluc3RhbmNlKHRoaXMsIFVSTFByb3RvdHlwZSk7XG4gIHZhciBiYXNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBzdGF0ZSA9IHNldEludGVybmFsU3RhdGUodGhhdCwgbmV3IFVSTFN0YXRlKHVybCwgZmFsc2UsIGJhc2UpKTtcbiAgaWYgKCFERVNDUklQVE9SUykge1xuICAgIHRoYXQuaHJlZiA9IHN0YXRlLnNlcmlhbGl6ZSgpO1xuICAgIHRoYXQub3JpZ2luID0gc3RhdGUuZ2V0T3JpZ2luKCk7XG4gICAgdGhhdC5wcm90b2NvbCA9IHN0YXRlLmdldFByb3RvY29sKCk7XG4gICAgdGhhdC51c2VybmFtZSA9IHN0YXRlLmdldFVzZXJuYW1lKCk7XG4gICAgdGhhdC5wYXNzd29yZCA9IHN0YXRlLmdldFBhc3N3b3JkKCk7XG4gICAgdGhhdC5ob3N0ID0gc3RhdGUuZ2V0SG9zdCgpO1xuICAgIHRoYXQuaG9zdG5hbWUgPSBzdGF0ZS5nZXRIb3N0bmFtZSgpO1xuICAgIHRoYXQucG9ydCA9IHN0YXRlLmdldFBvcnQoKTtcbiAgICB0aGF0LnBhdGhuYW1lID0gc3RhdGUuZ2V0UGF0aG5hbWUoKTtcbiAgICB0aGF0LnNlYXJjaCA9IHN0YXRlLmdldFNlYXJjaCgpO1xuICAgIHRoYXQuc2VhcmNoUGFyYW1zID0gc3RhdGUuZ2V0U2VhcmNoUGFyYW1zKCk7XG4gICAgdGhhdC5oYXNoID0gc3RhdGUuZ2V0SGFzaCgpO1xuICB9XG59O1xuXG52YXIgVVJMUHJvdG90eXBlID0gVVJMQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG52YXIgYWNjZXNzb3JEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldHRlciwgc2V0dGVyKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKVtnZXR0ZXJdKCk7XG4gICAgfSxcbiAgICBzZXQ6IHNldHRlciAmJiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpW3NldHRlcl0odmFsdWUpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICBkZWZpbmVQcm9wZXJ0aWVzKFVSTFByb3RvdHlwZSwge1xuICAgIC8vIGBVUkwucHJvdG90eXBlLmhyZWZgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhyZWZcbiAgICBocmVmOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ3NlcmlhbGl6ZScsICdzZXRIcmVmJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUub3JpZ2luYCBnZXR0ZXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtb3JpZ2luXG4gICAgb3JpZ2luOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldE9yaWdpbicpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnByb3RvY29sYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wcm90b2NvbFxuICAgIHByb3RvY29sOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFByb3RvY29sJywgJ3NldFByb3RvY29sJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUudXNlcm5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXVzZXJuYW1lXG4gICAgdXNlcm5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0VXNlcm5hbWUnLCAnc2V0VXNlcm5hbWUnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wYXNzd29yZGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGFzc3dvcmRcbiAgICBwYXNzd29yZDogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQYXNzd29yZCcsICdzZXRQYXNzd29yZCcpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLmhvc3RgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RcbiAgICBob3N0OiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldEhvc3QnLCAnc2V0SG9zdCcpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLmhvc3RuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0bmFtZVxuICAgIGhvc3RuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldEhvc3RuYW1lJywgJ3NldEhvc3RuYW1lJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucG9ydGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcG9ydFxuICAgIHBvcnQ6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UG9ydCcsICdzZXRQb3J0JyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucGF0aG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhdGhuYW1lXG4gICAgcGF0aG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UGF0aG5hbWUnLCAnc2V0UGF0aG5hbWUnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaFxuICAgIHNlYXJjaDogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRTZWFyY2gnLCAnc2V0U2VhcmNoJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoUGFyYW1zYCBnZXR0ZXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNocGFyYW1zXG4gICAgc2VhcmNoUGFyYW1zOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFNlYXJjaFBhcmFtcycpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLmhhc2hgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhhc2hcbiAgICBoYXNoOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldEhhc2gnLCAnc2V0SGFzaCcpXG4gIH0pO1xufVxuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9KU09OJywgZnVuY3Rpb24gdG9KU09OKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5zZXJpYWxpemUoKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNVUkwtc3RyaW5naWZpY2F0aW9uLWJlaGF2aW9yXG5yZWRlZmluZShVUkxQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5zZXJpYWxpemUoKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuaWYgKE5hdGl2ZVVSTCkge1xuICB2YXIgbmF0aXZlQ3JlYXRlT2JqZWN0VVJMID0gTmF0aXZlVVJMLmNyZWF0ZU9iamVjdFVSTDtcbiAgdmFyIG5hdGl2ZVJldm9rZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5yZXZva2VPYmplY3RVUkw7XG4gIC8vIGBVUkwuY3JlYXRlT2JqZWN0VVJMYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9jcmVhdGVPYmplY3RVUkxcbiAgaWYgKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBiaW5kKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCwgTmF0aXZlVVJMKSk7XG4gIC8vIGBVUkwucmV2b2tlT2JqZWN0VVJMYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9yZXZva2VPYmplY3RVUkxcbiAgaWYgKG5hdGl2ZVJldm9rZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdyZXZva2VPYmplY3RVUkwnLCBiaW5kKG5hdGl2ZVJldm9rZU9iamVjdFVSTCwgTmF0aXZlVVJMKSk7XG59XG5cbnNldFRvU3RyaW5nVGFnKFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBVUkw6IFVSTENvbnN0cnVjdG9yXG59KTtcbiIsImNvbnN0IGJ5dGVPcmRlck1hcmtzID0gcmVxdWlyZShcIi4uL2NvbmZpZy9ieXRlT3JkZXJNYXJrT2JqZWN0LmpzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh1SW50OFN0YXJ0KSA9PiB7XG4gIGZvciAoY29uc3QgZWxlbWVudCBvZiBieXRlT3JkZXJNYXJrcykge1xuICAgIGlmIChlbGVtZW50LnJlZ2V4LnRlc3QodUludDhTdGFydCkpIHJldHVybiBlbGVtZW50LmVuY29kaW5nO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuIiwi77u/bW9kdWxlLmV4cG9ydHMgPSAoY29udGVudCkgPT4ge1xuICAgIGZvciAobGV0IGIgPSAwOyBiIDwgY29udGVudC5sZW5ndGg7IGIrKykge1xuICAgICAgICAvLyBJZiA/IGlzIGVuY291bnRlcmVkIGl0J3MgZGVmaW5pdGVseSBub3QgdXRmOCFcbiAgICAgICAgaWYgKGNvbnRlbnRbYl0gPT09IFwi77+9XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn0iLCJjb25zdCBjb3VudEFsbE1hdGNoZXMgPSByZXF1aXJlKFwiLi9wcm9jZXNzaW5nLWNvbnRlbnQvY291bnRBbGxNYXRjaGVzLmpzXCIpO1xuY29uc3QgY2FsY3VsYXRlQ29uZmlkZW5jZVNjb3JlID0gcmVxdWlyZShcIi4vcHJvY2Vzc2luZy1jb250ZW50L2NhbGN1bGF0ZUNvbmZpZGVuY2VTY29yZS5qc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZGF0YSwgZmlsZUluZm8pID0+IHtcbiAgZGF0YS5sYW5ndWFnZUFyciA9IGNvdW50QWxsTWF0Y2hlcyhkYXRhLCBmaWxlSW5mby5lbmNvZGluZyk7XG5cbiAgZmlsZUluZm8ubGFuZ3VhZ2UgPSBkYXRhLmxhbmd1YWdlQXJyLnJlZHVjZSgoYWNjLCB2YWwpID0+XG4gICAgYWNjLmNvdW50ID4gdmFsLmNvdW50ID8gYWNjIDogdmFsXG4gICkubmFtZTtcblxuICAvLyBcInBvc1wiIGdpdmVzIHVzIHRoZSBwb3NpdGlvbiBpbiB0aGUgbGFuZ3VhZ2UgYXJyYXkgdGhhdCBoYXMgdGhlIG1vc3QgbWF0Y2hlc1xuICBkYXRhLnBvcyA9IGRhdGEubGFuZ3VhZ2VBcnIuZmluZEluZGV4KFxuICAgIChlbGVtKSA9PiBlbGVtLm5hbWUgPT09IGZpbGVJbmZvLmxhbmd1YWdlXG4gICk7XG5cbiAgLy8gRGV0ZXJtaW5lIHRoZSBlbmNvZGluZ1xuICBpZiAoIWZpbGVJbmZvLmVuY29kaW5nKSB7XG4gICAgZmlsZUluZm8uZW5jb2RpbmcgPSBkYXRhLmxhbmd1YWdlQXJyW2RhdGEucG9zXS5lbmNvZGluZztcbiAgfVxuXG4gIGNvbnN0IGNhbGN1bGF0aW9ucyA9IGNhbGN1bGF0ZUNvbmZpZGVuY2VTY29yZShkYXRhLCBmaWxlSW5mbyk7XG5cbiAgaWYgKGZpbGVJbmZvLmNvbmZpZGVuY2UuZW5jb2RpbmcpIHtcbiAgICBmaWxlSW5mby5jb25maWRlbmNlLmxhbmd1YWdlID0gY2FsY3VsYXRpb25zO1xuICB9IGVsc2Uge1xuICAgIGZpbGVJbmZvLmNvbmZpZGVuY2UuZW5jb2RpbmcgPSBjYWxjdWxhdGlvbnM7XG4gICAgZmlsZUluZm8uY29uZmlkZW5jZS5sYW5ndWFnZSA9IGNhbGN1bGF0aW9ucztcbiAgfVxuXG4gIC8vIEVkZ2UgY2FzZSwgd2hlbiBubyBtYXRjaGVzIHdlcmUgZm91bmRcbiAgaWYgKCFkYXRhLmxhbmd1YWdlQXJyW2RhdGEucG9zXS5jb3VudCkge1xuICAgIGZpbGVJbmZvLmxhbmd1YWdlID0gbnVsbDtcbiAgICBmaWxlSW5mby5jb25maWRlbmNlLmxhbmd1YWdlID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBmaWxlSW5mbztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBmaWxlSW5mbykgPT4ge1xuICBjb25zdCBjaGFyUmVnZXggPSBuZXcgUmVnRXhwKFxuICAgIC9cXGR8XFxufFxcc3xcXC18XFwufFxcLHxcXDp8XFw7fFxcP3xcXCF8XFw8fFxcPnxcXFt8XFxdfFxce3xcXH18XFwmfFxcPXxcXHwvLFxuICAgIFwiZ1wiXG4gICk7XG4gIGNvbnN0IHRvdGFsQ2hhcmFjdGVycyA9IGRhdGEuY29udGVudC5yZXBsYWNlKGNoYXJSZWdleCwgXCJcIikubGVuZ3RoO1xuICBjb25zdCBsYW5nQXJyID0gZGF0YS5sYW5ndWFnZUFycjtcbiAgY29uc3QgcG9zID0gZGF0YS5wb3M7XG5cbiAgY29uc3Qgc2Vjb25kTGFuZ3VhZ2UgPSBsYW5nQXJyLnJlZHVjZSgoYWNjLCB2YWwpID0+IHtcbiAgICBpZiAoYWNjLm5hbWUgPT09IGZpbGVJbmZvLmxhbmd1YWdlKSByZXR1cm4gdmFsO1xuICAgIGlmICh2YWwubmFtZSA9PT0gZmlsZUluZm8ubGFuZ3VhZ2UpIHJldHVybiBhY2M7XG5cbiAgICByZXR1cm4gYWNjLmNvdW50ID49IHZhbC5jb3VudCA/IGFjYyA6IHZhbDtcbiAgfSk7XG5cbiAgY29uc3QgbGFuZ3VhZ2VSYXRpbyA9XG4gICAgbGFuZ0Fycltwb3NdLmNvdW50IC8gKHNlY29uZExhbmd1YWdlLmNvdW50ICsgbGFuZ0Fycltwb3NdLmNvdW50KTtcbiAgY29uc3QgY2hhcmFjdGVyV29yZFJhdGlvID0gbGFuZ0Fycltwb3NdLmNvdW50IC8gdG90YWxDaGFyYWN0ZXJzO1xuXG4gIGxldCBsb3dlckxpbWl0ID0gbnVsbDtcbiAgbGV0IHVwcGVyTGltaXQgPSBudWxsO1xuICBjb25zdCBtdWx0aXBsaWVyID0gMC44O1xuXG4gIGlmIChmaWxlSW5mby5lbmNvZGluZyA9PT0gXCJVVEYtOFwiIHx8IGZpbGVJbmZvLmVuY29kaW5nID09PSBcIlVURi0xNkxFXCIpIHtcbiAgICBsb3dlckxpbWl0ID0gbGFuZ0Fycltwb3NdLnV0ZkZyZXF1ZW5jeVxuICAgICAgPyBsYW5nQXJyW3Bvc10udXRmRnJlcXVlbmN5LmxvdyAqIG11bHRpcGxpZXJcbiAgICAgIDogbnVsbDtcbiAgICB1cHBlckxpbWl0ID0gbGFuZ0Fycltwb3NdLnV0ZkZyZXF1ZW5jeVxuICAgICAgPyAobGFuZ0Fycltwb3NdLnV0ZkZyZXF1ZW5jeS5sb3cgKyBsYW5nQXJyW3Bvc10udXRmRnJlcXVlbmN5LmhpZ2gpIC8gMlxuICAgICAgOiBudWxsO1xuICB9IGVsc2Uge1xuICAgIGxvd2VyTGltaXQgPSBsYW5nQXJyW3Bvc10uaXNvRnJlcXVlbmN5XG4gICAgICA/IGxhbmdBcnJbcG9zXS5pc29GcmVxdWVuY3kubG93ICogbXVsdGlwbGllclxuICAgICAgOiBudWxsO1xuICAgIHVwcGVyTGltaXQgPSBsYW5nQXJyW3Bvc10uaXNvRnJlcXVlbmN5XG4gICAgICA/IChsYW5nQXJyW3Bvc10uaXNvRnJlcXVlbmN5LmxvdyArIGxhbmdBcnJbcG9zXS5pc29GcmVxdWVuY3kuaGlnaCkgLyAyXG4gICAgICA6IG51bGw7XG4gIH1cblxuICBsZXQgY29uZmlkZW5jZVNjb3JlO1xuXG4gIGlmICghbG93ZXJMaW1pdCB8fCAhdXBwZXJMaW1pdCkge1xuICAgIGNvbmZpZGVuY2VTY29yZSA9IG51bGw7XG4gIH0gZWxzZSBpZiAoY2hhcmFjdGVyV29yZFJhdGlvID49IHVwcGVyTGltaXQpIHtcbiAgICBjb25maWRlbmNlU2NvcmUgPSAxO1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlcldvcmRSYXRpbyA+IGxvd2VyTGltaXQpIHtcbiAgICBjb25zdCByYW5nZSA9IHVwcGVyTGltaXQgLSBsb3dlckxpbWl0O1xuICAgIGNvbnN0IHN1cnBsdXMgPSBjaGFyYWN0ZXJXb3JkUmF0aW8gLSBsb3dlckxpbWl0O1xuICAgIGNvbnN0IGNvbmZpZGVuY2VSYWlzZVBlcmNlbnRhZ2UgPSBzdXJwbHVzIC8gcmFuZ2U7XG4gICAgY29uc3QgY29uZmlkZW5jZVJhaXNlID0gKDEgLSBsYW5ndWFnZVJhdGlvKSAqIGNvbmZpZGVuY2VSYWlzZVBlcmNlbnRhZ2U7XG4gICAgY29uZmlkZW5jZVNjb3JlID0gTnVtYmVyKChsYW5ndWFnZVJhdGlvICsgY29uZmlkZW5jZVJhaXNlKS50b0ZpeGVkKDIpKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWRlbmNlU2NvcmUgPSBOdW1iZXIoXG4gICAgICAobGFuZ3VhZ2VSYXRpbyAqIChjaGFyYWN0ZXJXb3JkUmF0aW8gLyBsb3dlckxpbWl0KSkudG9GaXhlZCgyKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gY29uZmlkZW5jZVNjb3JlO1xufTtcbiIsImNvbnN0IGxhbmd1YWdlQXJyID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZy9sYW5ndWFnZU9iamVjdC5qc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZGF0YSwgZW5jb2RpbmcpID0+IHtcbiAgY29uc3QgbmV3TGFuZ3VhZ2VBcnIgPSBbXTtcblxuICAvLyBDbG9uaW5nIHRoZSBsYW5ndWFnZSBhcnJheSBhbmQgbWFraW5nIHN1cmUgdGhhdCBcImNvdW50XCIgaGFzIG5vIHJlZmVyZW5jZSB0byBcImxhbmd1YWdlQXJyXCIhXG4gIGxhbmd1YWdlQXJyLmZvckVhY2goKG9iaikgPT4ge1xuICAgIGNvbnN0IHVwZGF0ZWRMYW5nT2JqID0ge307XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgIT09IFwiY291bnRcIikge1xuICAgICAgICB1cGRhdGVkTGFuZ09ialtrZXldID0gb2JqW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVkTGFuZ09iai5jb3VudCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmV3TGFuZ3VhZ2VBcnIucHVzaCh1cGRhdGVkTGFuZ09iaik7XG4gIH0pO1xuXG4gIGNvbnN0IHJlZ2V4ID0gZW5jb2RpbmcgPyBcInV0ZlJlZ2V4XCIgOiBcImlzb1JlZ2V4XCI7XG5cbiAgLy8gUG9wdWxhdGluZyB0aGUgY291bnQgcHJvcGVydHkgb2YgdGhlIGxhbmd1YWdlIGFycmF5XG4gIG5ld0xhbmd1YWdlQXJyLmZvckVhY2goKGxhbmcpID0+IHtcbiAgICBpZiAobGFuZ1tyZWdleF0pIHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBkYXRhLmNvbnRlbnQubWF0Y2gobGFuZ1tyZWdleF0pO1xuXG4gICAgICBpZiAobWF0Y2hlcykgbGFuZy5jb3VudCA9IG1hdGNoZXMubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0xhbmd1YWdlQXJyO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gW1xuICB7XG4gICAgZW5jb2Rpbmc6IFwiVVRGLUVCQ0RJQ1wiLFxuICAgIHJlZ2V4OiBuZXcgUmVnRXhwKFwiMjIxIDExNSAxMDIgMTE1XCIpLFxuICB9LFxuICB7XG4gICAgZW5jb2Rpbmc6IFwiR0ItMTgwMzBcIixcbiAgICByZWdleDogbmV3IFJlZ0V4cChcIjEzMiA0OSAxNDkgNTFcIiksXG4gIH0sXG4gIHtcbiAgICBlbmNvZGluZzogXCJVVEYtMzJMRVwiLFxuICAgIHJlZ2V4OiBuZXcgUmVnRXhwKFwiMjU1IDI1NCAwIDBcIiksXG4gIH0sXG4gIHtcbiAgICBlbmNvZGluZzogXCJVVEYtMzJCRVwiLFxuICAgIHJlZ2V4OiBuZXcgUmVnRXhwKFwiMCAwIDI1NCAyNTVcIiksXG4gIH0sXG4gIHtcbiAgICBlbmNvZGluZzogXCJVVEYtOFwiLFxuICAgIHJlZ2V4OiBuZXcgUmVnRXhwKFwiMjM5IDE4NyAxOTFcIiksXG4gIH0sXG4gIHtcbiAgICBlbmNvZGluZzogXCJVVEYtN1wiLFxuICAgIHJlZ2V4OiBuZXcgUmVnRXhwKFwiNDMgNDcgMTE4XCIpLFxuICB9LFxuICB7XG4gICAgZW5jb2Rpbmc6IFwiVVRGLTFcIixcbiAgICByZWdleDogbmV3IFJlZ0V4cChcIjI0NyAxMDAgNzZcIiksXG4gIH0sXG4gIHtcbiAgICBlbmNvZGluZzogXCJTQ1NVXCIsXG4gICAgcmVnZXg6IG5ldyBSZWdFeHAoXCIxNCAyNTQgMjU1XCIpLFxuICB9LFxuICB7XG4gICAgZW5jb2Rpbmc6IFwiQk9DVS0xXCIsXG4gICAgcmVnZXg6IG5ldyBSZWdFeHAoXCIyNTEgMjM4IDQwXCIpLFxuICB9LFxuICB7XG4gICAgZW5jb2Rpbmc6IFwiVVRGLTE2QkVcIixcbiAgICByZWdleDogbmV3IFJlZ0V4cChcIjI1NCAyNTVcIiksXG4gIH0sXG4gIHtcbiAgICBlbmNvZGluZzogXCJVVEYtMTZMRVwiLFxuICAgIHJlZ2V4OiBuZXcgUmVnRXhwKFwiMjU1IDI1NFwiKSxcbiAgfSxcbl07XG4iLCLvu79jb25zdCBmbGFnID0gXCJnaVwiO1xuXG5jb25zdCBzaGFyZWRSZWdleCA9IHtcbiAgICBjemVjaDogbmV3IFJlZ0V4cCgvanNlbXxqc2kvLCBmbGFnKSxcbiAgICBodW5nYXJpYW46IG5ldyBSZWdFeHAoL1xcc25lbVxccy8sIGZsYWcpLFxuICAgIHNsb3ZhazogbmV3IFJlZ0V4cCgvcG9yaWFka3V8bXlzbMOtbXxcXHNzbWVcXHMvLCBmbGFnKSxcbiAgICBzbG92ZW5pYW46IG5ldyBSZWdFeHAoL1xcc2thalxcc3xsYWhrb3x6ZGFqLywgZmxhZyksXG4gICAgYWxiYW5pYW46IG5ldyBSZWdFeHAoL251ay8sIGZsYWcpLFxuICAgIGVuZ2xpc2g6IG5ldyBSZWdFeHAoLyB0aGUgLywgZmxhZyksXG4gICAgZnJlbmNoOiBuZXcgUmVnRXhwKC9jJ2VzdC8sIGZsYWcpLFxuICAgIHBvcnR1Z3Vlc2U6IG5ldyBSZWdFeHAoLyBuw6NvIC8sIGZsYWcpLFxuICAgIHNwYW5pc2g6IG5ldyBSZWdFeHAoL2VzdGFiYXxcXHNtdXlcXHN8c2llbXByZXxhaG9yYS8sIGZsYWcpLFxuICAgIGdlcm1hbjogbmV3IFJlZ0V4cCgvXFxzZGFzXFxzLywgZmxhZyksXG4gICAgaXRhbGlhbjogbmV3IFJlZ0V4cCgvXFxzY2hlXFxzLywgZmxhZyksXG4gICAgZGFuaXNoOiBuZXcgUmVnRXhwKC9odmFkfG5vZ2V0LywgZmxhZyksXG4gICAgbm9yd2VnaWFuOiBuZXcgUmVnRXhwKC9kZWcvLCBmbGFnKSxcbiAgICBzd2VkaXNoOiBuZXcgUmVnRXhwKC8gamFnIC8sIGZsYWcpLFxuICAgIGR1dGNoOiBuZXcgUmVnRXhwKC8gaGV0IC8sIGZsYWcpLFxuICAgIGZpbm5pc2g6IG5ldyBSZWdFeHAoL2jDpG4vLCBmbGFnKSxcbiAgICBcInNlcmJvLWNyb2F0aWFuXCI6IG5ldyBSZWdFeHAoLyBzYW0gfCBrYWtvIC8sIGZsYWcpLFxuICAgIGVzdG9uaWFuOiBuZXcgUmVnRXhwKC9cXHNzZWRhXFxzfFxcc3BvbGVcXHN8bWlkYWdpLywgZmxhZyksXG4gICAgaWNlbGFuZGljOiBuZXcgUmVnRXhwKC/DnmHDsC8sIGZsYWcpLFxuICAgIFwibWFsYXktaW5kb25lc2lhblwiOiBuZXcgUmVnRXhwKC90aWRhay8sIGZsYWcpLFxuICAgIHR1cmtpc2g6IG5ldyBSZWdFeHAoLyBiaXIgLywgZmxhZyksXG4gICAgbGl0aHVhbmlhbjogbmV3IFJlZ0V4cCgvdGFpcHxcXHN0YWlcXHMvLCBmbGFnKSxcbiAgICBiZW5nYWxpOiBuZXcgUmVnRXhwKC/gpo/gpp/gpr4vLCBmbGFnKSxcbiAgICBoaW5kaTogbmV3IFJlZ0V4cCgv4KS54KWI4KSCLywgZmxhZyksXG4gICAgdXJkdTogbmV3IFJlZ0V4cCgv2KfbjNqpLywgZmxhZyksXG4gICAgdmlldG5hbWVzZTogbmV3IFJlZ0V4cCgvIGtow7RuZyAvLCBmbGFnKVxufTtcblxuY29uc3Qgc2hhcmVkRnJlcXVlbmN5ID0ge1xuICAgIHBvbGlzaDogeyBsb3c6IDAuMDA0MzU1LCBoaWdoOiAwLjAwNTEwMiB9LFxuICAgIGN6ZWNoOiB7IGxvdzogMC4wMDQ0MzMsIGhpZ2g6IDAuMDA3MzI0IH0sXG4gICAgaHVuZ2FyaWFuOiB7IGxvdzogMC4wMDQ5OTQsIGhpZ2g6IDAuMDA1MTgzIH0sXG4gICAgcm9tYW5pYW46IHsgbG93OiAwLjAwMzMxOSwgaGlnaDogMC4wMDQxOTAgfSxcbiAgICBzbG92YWs6IHsgbG93OiAwLjAwMTczNiwgaGlnaDogMC4wMDI1NTcgfSxcbiAgICBzbG92ZW5pYW46IHsgbG93OiAwLjAwNDExMSwgaGlnaDogMC4wMDQ5NTkgfSxcbiAgICBhbGJhbmlhbjogeyBsb3c6IDAuMDAzNzczLCBoaWdoOiAwLjAwNzMxMyB9LFxuICAgIHVrcmFpbmlhbjogeyBsb3c6IDAuMDAyOTMzLCBoaWdoOiAwLjAwNTM4OSB9LFxuICAgIGVuZ2xpc2g6IHsgbG93OiAwLjAwNDY3OSwgaGlnaDogMC4wMDc1ODAgfSxcbiAgICBmcmVuY2g6IHsgbG93OiAwLjAwMzAxNiwgaGlnaDogMC4wMDQ4MjUgfSxcbiAgICBwb3J0dWd1ZXNlOiB7IGxvdzogMC4wMDM0MDYsIGhpZ2g6IDAuMDA1MDMyIH0sXG4gICAgc3BhbmlzaDogeyBsb3c6IDAuMDAyMzQ4LCBoaWdoOiAwLjAwMjg4MSB9LFxuICAgIGdlcm1hbjogeyBsb3c6IDAuMDA0MDQ0LCBoaWdoOiAwLjAwNDM5MSB9LFxuICAgIGl0YWxpYW46IHsgbG93OiAwLjAwMzg4OSwgaGlnaDogMC4wMDUxNzUgfSxcbiAgICBkYW5pc2g6IHsgbG93OiAwLjAwMzYzMCwgaGlnaDogMC4wMDQxODkgfSxcbiAgICBub3J3ZWdpYW46IHsgbG93OiAwLjAwMjQxMCwgaGlnaDogMC4wMDM5MTggfSxcbiAgICBzd2VkaXNoOiB7IGxvdzogMC4wMDQ5MTYsIGhpZ2g6IDAuMDA3MjIxIH0sXG4gICAgZHV0Y2g6IHsgbG93OiAwLjAwMzUwMSwgaGlnaDogMC4wMDQxNTAgfSxcbiAgICBmaW5uaXNoOiB7IGxvdzogMC4wMDMzMDgsIGhpZ2g6IDAuMDA1MTM1IH0sXG4gICAgXCJzZXJiby1jcm9hdGlhblwiOiB7IGxvdzogMC4wMDI1NjgsIGhpZ2g6IDAuMDA1MTgyIH0sXG4gICAgZXN0b25pYW46IHsgbG93OiAwLjAwMjg5MiwgaGlnaDogMC4wMDM5NjMgfSxcbiAgICBpY2VsYW5kaWM6IHsgbG93OiAwLjAwNDM2NiwgaGlnaDogMC4wMDQzNjYgfSxcbiAgICBcIm1hbGF5LWluZG9uZXNpYW5cIjogeyBsb3c6IDAuMDAyODI1LCBoaWdoOiAwLjAwMzkzMiB9LFxuICAgIGdyZWVrOiB7IGxvdzogMC4wMDM0NDAsIGhpZ2g6IDAuMDA0ODYyIH0sXG4gICAgdHVya2lzaDogeyBsb3c6IDAuMDAyOTE1LCBoaWdoOiAwLjAwNDU4OCB9LFxuICAgIGhlYnJldzogeyBsb3c6IDAuMDAzNjYzLCBoaWdoOiAwLjAwNDY2NiB9LFxuICAgIGxpdGh1YW5pYW46IHsgbG93OiAwLjAwMzI3NywgaGlnaDogMC4wMDM3NjggfSxcbiAgICBiZW5nYWxpOiB7IGxvdzogMC4wMDMxNTUsIGhpZ2g6IDAuMDA1MjM2IH0sXG4gICAgaGluZGk6IHsgbG93OiAwLjAwNDE1OSwgaGlnaDogMC4wMDY0NzggfSxcbiAgICB1cmR1OiB7IGxvdzogMC4wMDQxMTgsIGhpZ2g6IDAuMDA1ODUxIH0sXG4gICAgdmlldG5hbWVzZTogeyBsb3c6IDAuMDAzMzg3LCBoaWdoOiAwLjAwNTE5MSB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6IFwicG9saXNoXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogbmV3IFJlZ0V4cCgvc2nEmS8sIGZsYWcpLFxuICAgICAgICBpc29SZWdleDogbmV3IFJlZ0V4cCgvc2nDqi8sIGZsYWcpLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTBcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kucG9saXNoLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5wb2xpc2hcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJjemVjaFwiLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdXRmUmVnZXg6IHNoYXJlZFJlZ2V4LmN6ZWNoLFxuICAgICAgICBpc29SZWdleDogc2hhcmVkUmVnZXguY3plY2gsXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1MFwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5jemVjaCxcbiAgICAgICAgaXNvRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuY3plY2hcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJodW5nYXJpYW5cIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBzaGFyZWRSZWdleC5odW5nYXJpYW4sXG4gICAgICAgIGlzb1JlZ2V4OiBzaGFyZWRSZWdleC5odW5nYXJpYW4sXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1MFwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5odW5nYXJpYW4sXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5Lmh1bmdhcmlhblxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcInJvbWFuaWFuXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogbmV3IFJlZ0V4cCgvc3VudHxlxZ90aS8sIGZsYWcpLFxuICAgICAgICBpc29SZWdleDogbmV3IFJlZ0V4cCgvc3VudHxlwrp0aS8sIGZsYWcpLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTBcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kucm9tYW5pYW4sXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LnJvbWFuaWFuXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwic2xvdmFrXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXguc2xvdmFrLFxuICAgICAgICBpc29SZWdleDogc2hhcmVkUmVnZXguc2xvdmFrLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTBcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuc2xvdmFrLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5zbG92YWtcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJzbG92ZW5pYW5cIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBzaGFyZWRSZWdleC5zbG92ZW5pYW4sXG4gICAgICAgIGlzb1JlZ2V4OiBzaGFyZWRSZWdleC5zbG92ZW5pYW4sXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1MFwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5zbG92ZW5pYW4sXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LnNsb3ZlbmlhblxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImFsYmFuaWFuXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXguYWxiYW5pYW4sXG4gICAgICAgIGlzb1JlZ2V4OiBzaGFyZWRSZWdleC5hbGJhbmlhbixcbiAgICAgICAgZW5jb2Rpbmc6IFwiQ1AxMjUwXCIsXG4gICAgICAgIHV0ZkZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LmFsYmFuaWFuLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5hbGJhbmlhblxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcInJ1c3NpYW5cIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBuZXcgUmVnRXhwKC/Rh9GC0L4vLCBmbGFnKSxcbiAgICAgICAgaXNvUmVnZXg6IG5ldyBSZWdFeHAoL8O3w7LDri8sIGZsYWcpLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTFcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiB7IGxvdzogMC4wMDQ5NjUsIGhpZ2g6IDAuMDA1MzQxIH0sXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogeyBsb3c6IDAuMDAzODg0LCBoaWdoOiAwLjAwMzk4NiB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwidWtyYWluaWFuXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogbmV3IFJlZ0V4cCgv0LLRltC9fNCw0LvQtS8sIGZsYWcpLFxuICAgICAgICBpc29SZWdleDogbmV3IFJlZ0V4cCgvw6LCs8OtfMOgw6vDpS8sIGZsYWcpLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTFcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kudWtyYWluaWFuLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS51a3JhaW5pYW5cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJidWxnYXJpYW5cIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBuZXcgUmVnRXhwKC/RgtC+0LLQsHzQutCw0LrQstC+LywgZmxhZyksXG4gICAgICAgIGlzb1JlZ2V4OiBuZXcgUmVnRXhwKC/DssOuw6LDoHzDpMOuw6HDsMOlfMOqYcOqw6JvLywgZmxhZyksXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1MVwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHsgbG93OiAwLjAwNTIyNSwgaGlnaDogMC4wMDU2MjggfSxcbiAgICAgICAgaXNvRnJlcXVlbmN5OiB7IGxvdzogMC4wMDI3NjcsIGhpZ2g6IDAuMDA0OTUxIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlbmdsaXNoXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXguZW5nbGlzaCxcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LmVuZ2xpc2gsXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1MlwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5lbmdsaXNoLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5lbmdsaXNoXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZnJlbmNoXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXguZnJlbmNoLFxuICAgICAgICBpc29SZWdleDogc2hhcmVkUmVnZXguZnJlbmNoLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTJcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuZnJlbmNoLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5mcmVuY2hcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJwb3J0dWd1ZXNlXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXgucG9ydHVndWVzZSxcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LnBvcnR1Z3Vlc2UsXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1MlwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5wb3J0dWd1ZXNlLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5wb3J0dWd1ZXNlXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwic3BhbmlzaFwiLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdXRmUmVnZXg6IHNoYXJlZFJlZ2V4LnNwYW5pc2gsXG4gICAgICAgIGlzb1JlZ2V4OiBzaGFyZWRSZWdleC5zcGFuaXNoLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTJcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuc3BhbmlzaCxcbiAgICAgICAgaXNvRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuc3BhbmlzaFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImdlcm1hblwiLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdXRmUmVnZXg6IHNoYXJlZFJlZ2V4Lmdlcm1hbixcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4Lmdlcm1hbixcbiAgICAgICAgZW5jb2Rpbmc6IFwiQ1AxMjUyXCIsXG4gICAgICAgIHV0ZkZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5Lmdlcm1hbixcbiAgICAgICAgaXNvRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuZ2VybWFuXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiaXRhbGlhblwiLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdXRmUmVnZXg6IHNoYXJlZFJlZ2V4Lml0YWxpYW4sXG4gICAgICAgIGlzb1JlZ2V4OiBzaGFyZWRSZWdleC5pdGFsaWFuLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTJcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuaXRhbGlhbixcbiAgICAgICAgaXNvRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuaXRhbGlhblxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImRhbmlzaFwiLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdXRmUmVnZXg6IHNoYXJlZFJlZ2V4LmRhbmlzaCxcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LmRhbmlzaCxcbiAgICAgICAgZW5jb2Rpbmc6IFwiQ1AxMjUyXCIsXG4gICAgICAgIHV0ZkZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LmRhbmlzaCxcbiAgICAgICAgaXNvRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuZGFuaXNoXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwibm9yd2VnaWFuXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXgubm9yd2VnaWFuLFxuICAgICAgICBpc29SZWdleDogc2hhcmVkUmVnZXgubm9yd2VnaWFuLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTJcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kubm9yd2VnaWFuLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5ub3J3ZWdpYW5cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJzd2VkaXNoXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXguc3dlZGlzaCxcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LnN3ZWRpc2gsXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1MlwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5zd2VkaXNoLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5zd2VkaXNoXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZHV0Y2hcIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBzaGFyZWRSZWdleC5kdXRjaCxcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LmR1dGNoLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTJcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuZHV0Y2gsXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LmR1dGNoXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZmlubmlzaFwiLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdXRmUmVnZXg6IHNoYXJlZFJlZ2V4LmZpbm5pc2gsXG4gICAgICAgIGlzb1JlZ2V4OiBzaGFyZWRSZWdleC5maW5uaXNoLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTJcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuZmlubmlzaCxcbiAgICAgICAgaXNvRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuZmlubmlzaFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcInNlcmJvLWNyb2F0aWFuXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXhbXCJzZXJiby1jcm9hdGlhblwiXSxcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4W1wic2VyYm8tY3JvYXRpYW5cIl0sXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1MlwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeVtcInNlcmJvLWNyb2F0aWFuXCJdLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeVtcInNlcmJvLWNyb2F0aWFuXCJdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZXN0b25pYW5cIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBzaGFyZWRSZWdleC5lc3RvbmlhbixcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LmVzdG9uaWFuLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTJcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuZXN0b25pYW4sXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LmVzdG9uaWFuXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiaWNlbGFuZGljXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXguaWNlbGFuZGljLFxuICAgICAgICBpc29SZWdleDogc2hhcmVkUmVnZXguaWNlbGFuZGljLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTJcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuaWNlbGFuZGljLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5pY2VsYW5kaWNcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJtYWxheS1pbmRvbmVzaWFuXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXhbXCJtYWxheS1pbmRvbmVzaWFuXCJdLFxuICAgICAgICBpc29SZWdleDogc2hhcmVkUmVnZXhbXCJtYWxheS1pbmRvbmVzaWFuXCJdLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTJcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3lbXCJtYWxheS1pbmRvbmVzaWFuXCJdLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeVtcIm1hbGF5LWluZG9uZXNpYW5cIl1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJncmVla1wiLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdXRmUmVnZXg6IG5ldyBSZWdFeHAoL861zq/Ovc6xzrkvLCBmbGFnKSxcbiAgICAgICAgaXNvUmVnZXg6IG5ldyBSZWdFeHAoL8Olw5/DrcOhw6kvLCBmbGFnKSxcbiAgICAgICAgZW5jb2Rpbmc6IFwiQ1AxMjUzXCIsXG4gICAgICAgIHV0ZkZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LmdyZWVrLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5ncmVla1xuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcInR1cmtpc2hcIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBzaGFyZWRSZWdleC50dXJraXNoLFxuICAgICAgICBpc29SZWdleDogc2hhcmVkUmVnZXgudHVya2lzaCxcbiAgICAgICAgZW5jb2Rpbmc6IFwiQ1AxMjU0XCIsXG4gICAgICAgIHV0ZkZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LnR1cmtpc2gsXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LnR1cmtpc2hcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJoZWJyZXdcIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBuZXcgUmVnRXhwKC/XkNeq15QvLCBmbGFnKSxcbiAgICAgICAgaXNvUmVnZXg6IG5ldyBSZWdFeHAoL8Ogw7rDpC8sIGZsYWcpLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTVcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuaGVicmV3LFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5oZWJyZXdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJhcmFiaWNcIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBuZXcgUmVnRXhwKC/Zh9iw2KcvLCBmbGFnKSxcbiAgICAgICAgaXNvUmVnZXg6IG5ldyBSZWdFeHAoL8Olw7DDpy8sIGZsYWcpLFxuICAgICAgICBlbmNvZGluZzogXCJDUDEyNTZcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiB7IGxvdzogMC4wMDM1MjIsIGhpZ2g6IDAuMDA0MzQ4IH0sXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogeyBsb3c6IDAuMDAzNzczLCBoaWdoOiAwLjAwNTU1OSB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZmFyc2ktcGVyc2lhblwiLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdXRmUmVnZXg6IG5ldyBSZWdFeHAoL9in2YjZhi8sIGZsYWcpLFxuICAgICAgICBpc29SZWdleDogbmV3IFJlZ0V4cCgvw6fDrcOkLywgZmxhZyksXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1NlwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHsgbG93OiAwLjAwMjc2MSwgaGlnaDogMC4wMDQ4NTYgfSxcbiAgICAgICAgaXNvRnJlcXVlbmN5OiB7IGxvdzogMC4wMDMwMTAsIGhpZ2g6IDAuMDA2NjQ2IH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJsaXRodWFuaWFuXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXgubGl0aHVhbmlhbixcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LmxpdGh1YW5pYW4sXG4gICAgICAgIGVuY29kaW5nOiBcIkNQMTI1N1wiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5saXRodWFuaWFuLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5saXRodWFuaWFuXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiY2hpbmVzZS1zaW1wbGlmaWVkXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogbmV3IFJlZ0V4cCgv5LmILywgZmxhZyksXG4gICAgICAgIGlzb1JlZ2V4OiBuZXcgUmVnRXhwKC/CtMOzfMK2wq98w4XCri8sIGZsYWcpLFxuICAgICAgICBlbmNvZGluZzogXCJHQjE4MDMwXCIsXG4gICAgICAgIHV0ZkZyZXF1ZW5jeTogeyBsb3c6IDAuMDA5NTY3LCBoaWdoOiAwLjAxMTUwMiB9LFxuICAgICAgICBpc29GcmVxdWVuY3k6IHsgbG93OiAwLjAwMzEzNywgaGlnaDogMC4wMDUwMDkgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImNoaW5lc2UtdHJhZGl0aW9uYWxcIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBuZXcgUmVnRXhwKC/lgJEvLCBmbGFnKSxcbiAgICAgICAgaXNvUmVnZXg6IG5ldyBSZWdFeHAoL8KmYi8sIGZsYWcpLFxuICAgICAgICBlbmNvZGluZzogXCJCSUc1XCIsXG4gICAgICAgIHV0ZkZyZXF1ZW5jeTogeyBsb3c6IDAuMDEyNDg0LCBoaWdoOiAwLjAxNDk2NCB9LFxuICAgICAgICBpc29GcmVxdWVuY3k6IHsgbG93OiAwLjAwNTA2MywgaGlnaDogMC4wMDU4MjIgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImphcGFuZXNlXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogbmV3IFJlZ0V4cCgv44GpLywgZmxhZyksXG4gICAgICAgIGlzb1JlZ2V4OiBuZXcgUmVnRXhwKC/igJrCuy8sIGZsYWcpLFxuICAgICAgICBlbmNvZGluZzogXCJTaGlmdC1KSVNcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiB7IGxvdzogMC4wMDQyNTcsIGhpZ2g6IDAuMDA2NTg1IH0sXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogeyBsb3c6IDAuMDA0Mjg2LCBoaWdoOiAwLjAwNDY1MyB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwia29yZWFuXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogbmV3IFJlZ0V4cCgv64+ELywgZmxhZyksXG4gICAgICAgIGlzb1JlZ2V4OiBuZXcgUmVnRXhwKC/DoMO2wr7DrnzDpcK+w598wqHCvMKtLywgZmxhZyksXG4gICAgICAgIGVuY29kaW5nOiBcIkVVQy1LUlwiLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHsgbG93OiAwLjAxMDkxMCwgaGlnaDogMC4wMTM2NzAgfSxcbiAgICAgICAgaXNvRnJlcXVlbmN5OiB7IGxvdzogMC4wMDQxMTgsIGhpZ2g6IDAuMDA0OTYxIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJ0aGFpXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogbmV3IFJlZ0V4cCgv4LmB4Liu4Lij4LmM4Lij4Li14LmIfOC4nuC4reC4leC5gOC4leC4reC4o+C5jC8sIGZsYWcpLFxuICAgICAgICBpc29SZWdleDogbmV3IFJlZ0V4cCgvw6HDrsOjw6zDo8O1w6h8wr7DrcK1w6DCtcOtw6PDrMKtLywgZmxhZyksXG4gICAgICAgIGVuY29kaW5nOiBcIlRJUy02MjBcIixcbiAgICAgICAgdXRmRnJlcXVlbmN5OiB7IGxvdzogMC4wMDMxOTQsIGhpZ2g6IDAuMDAzNDY4IH0sXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogeyBsb3c6IDAuMDAyMDkxLCBoaWdoOiAwLjAwMjMwMyB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiYmVuZ2FsaVwiLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdXRmUmVnZXg6IHNoYXJlZFJlZ2V4LmJlbmdhbGksXG4gICAgICAgIGlzb1JlZ2V4OiBzaGFyZWRSZWdleC5iZW5nYWxpLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5iZW5nYWxpLFxuICAgICAgICBpc29GcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5iZW5nYWxpXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiaGluZGlcIixcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHV0ZlJlZ2V4OiBzaGFyZWRSZWdleC5oaW5kaSxcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LmhpbmRpLFxuICAgICAgICB1dGZGcmVxdWVuY3k6IHNoYXJlZEZyZXF1ZW5jeS5oaW5kaSxcbiAgICAgICAgaXNvRnJlcXVlbmN5OiBzaGFyZWRGcmVxdWVuY3kuaGluZGlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJ1cmR1XCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXgudXJkdSxcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LnVyZHUsXG4gICAgICAgIHV0ZkZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LnVyZHUsXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LnVyZHVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJ2aWV0bmFtZXNlXCIsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB1dGZSZWdleDogc2hhcmVkUmVnZXgudmlldG5hbWVzZSxcbiAgICAgICAgaXNvUmVnZXg6IHNoYXJlZFJlZ2V4LnZpZXRuYW1lc2UsXG4gICAgICAgIHV0ZkZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LnZpZXRuYW1lc2UsXG4gICAgICAgIGlzb0ZyZXF1ZW5jeTogc2hhcmVkRnJlcXVlbmN5LnZpZXRuYW1lc2VcbiAgICB9LFxuXTsiLCJjb25zdCBjaGVja1VURiA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvY2hlY2tVVEYuanNcIik7XG5jb25zdCBwcm9jZXNzQ29udGVudCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvcHJvY2Vzc0NvbnRlbnQuanNcIik7XG5jb25zdCBjaGVja0J5dGVPcmRlck1hcmsgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL2NoZWNrQnl0ZU9yZGVyTWFyay5qc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZmlsZSkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGZpbGVJbmZvID0ge1xuICAgICAgZW5jb2Rpbmc6IG51bGwsXG4gICAgICBsYW5ndWFnZTogbnVsbCxcbiAgICAgIGNvbmZpZGVuY2U6IHtcbiAgICAgICAgZW5jb2Rpbmc6IG51bGwsXG4gICAgICAgIGxhbmd1YWdlOiBudWxsLFxuICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IGRhdGEgPSB7fTtcblxuICAgIC8vIENoZWNrIHRoZSBieXRlIG9yZGVyIG1hcmshXG4gICAgY29uc3QgYnl0ZU9yZGVyTWFya0J1ZmZlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICBieXRlT3JkZXJNYXJrQnVmZmVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHVJbnQ4U3RyaW5nID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZU9yZGVyTWFya0J1ZmZlci5yZXN1bHQpXG4gICAgICAgIC5zbGljZSgwLCA0KVxuICAgICAgICAuam9pbihcIiBcIik7XG4gICAgICBjb25zdCBieXRlT3JkZXJNYXJrID0gY2hlY2tCeXRlT3JkZXJNYXJrKHVJbnQ4U3RyaW5nKTtcblxuICAgICAgaWYgKGJ5dGVPcmRlck1hcmspIHtcbiAgICAgICAgZmlsZUluZm8uZW5jb2RpbmcgPSBieXRlT3JkZXJNYXJrO1xuICAgICAgICBmaWxlSW5mby5jb25maWRlbmNlLmVuY29kaW5nID0gMTtcblxuICAgICAgICBjb25zdCBieXRlT3JkZXJNYXJrUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgICBieXRlT3JkZXJNYXJrUmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICBkYXRhLmNvbnRlbnQgPSBieXRlT3JkZXJNYXJrUmVhZGVyLnJlc3VsdDtcbiAgICAgICAgICByZXNvbHZlKHByb2Nlc3NDb250ZW50KGRhdGEsIGZpbGVJbmZvKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYnl0ZU9yZGVyTWFya1JlYWRlci5vbmVycm9yID0gKGVycikgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGJ5dGVPcmRlck1hcmtSZWFkZXIucmVhZEFzVGV4dChmaWxlLCBmaWxlSW5mby5lbmNvZGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZWFkIHdpdGggVVRGLTggZmlyc3QsIHRoZW4gd2l0aCBJU08tODg1OS0xXG4gICAgICAgIGNvbnN0IHV0ZlJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgdXRmUmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCB1dGZDb250ZW50ID0gdXRmUmVhZGVyLnJlc3VsdDtcblxuICAgICAgICAgIGNvbnN0IHV0ZjggPSBjaGVja1VURih1dGZDb250ZW50KTtcblxuICAgICAgICAgIGlmICh1dGY4KSB7XG4gICAgICAgICAgICBmaWxlSW5mby5lbmNvZGluZyA9IFwiVVRGLThcIjtcbiAgICAgICAgICAgIGZpbGVJbmZvLmNvbmZpZGVuY2UuZW5jb2RpbmcgPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGY4KSB7XG4gICAgICAgICAgICBkYXRhLmNvbnRlbnQgPSB1dGZDb250ZW50O1xuICAgICAgICAgICAgcmVzb2x2ZShwcm9jZXNzQ29udGVudChkYXRhLCBmaWxlSW5mbykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpc29SZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICAgICAgICBpc29SZWFkZXIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICBkYXRhLmNvbnRlbnQgPSBpc29SZWFkZXIucmVzdWx0O1xuICAgICAgICAgICAgICByZXNvbHZlKHByb2Nlc3NDb250ZW50KGRhdGEsIGZpbGVJbmZvKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpc29SZWFkZXIucmVhZEFzVGV4dChmaWxlLCBcIklTTy04ODU5LTFcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHV0ZlJlYWRlci5vbmVycm9yID0gKGVycikgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHV0ZlJlYWRlci5yZWFkQXNUZXh0KGZpbGUsIFwiVVRGLThcIik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGJ5dGVPcmRlck1hcmtCdWZmZXIub25lcnJvciA9IChlcnIpID0+IHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH07XG5cbiAgICBieXRlT3JkZXJNYXJrQnVmZmVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuICB9KTtcbn07XG4iLCIvKiBAbGljZW5zZVxuUGFwYSBQYXJzZVxudjUuMy4xXG5odHRwczovL2dpdGh1Yi5jb20vbWhvbHQvUGFwYVBhcnNlXG5MaWNlbnNlOiBNSVRcbiovXG4hZnVuY3Rpb24oZSx0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPXQoKTplLlBhcGE9dCgpfSh0aGlzLGZ1bmN0aW9uIHMoKXtcInVzZSBzdHJpY3RcIjt2YXIgZj1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnZvaWQgMCE9PWY/Zjp7fTt2YXIgbj0hZi5kb2N1bWVudCYmISFmLnBvc3RNZXNzYWdlLG89biYmL2Jsb2I6L2kudGVzdCgoZi5sb2NhdGlvbnx8e30pLnByb3RvY29sKSxhPXt9LGg9MCxiPXtwYXJzZTpmdW5jdGlvbihlLHQpe3ZhciBpPSh0PXR8fHt9KS5keW5hbWljVHlwaW5nfHwhMTtNKGkpJiYodC5keW5hbWljVHlwaW5nRnVuY3Rpb249aSxpPXt9KTtpZih0LmR5bmFtaWNUeXBpbmc9aSx0LnRyYW5zZm9ybT0hIU0odC50cmFuc2Zvcm0pJiZ0LnRyYW5zZm9ybSx0LndvcmtlciYmYi5XT1JLRVJTX1NVUFBPUlRFRCl7dmFyIHI9ZnVuY3Rpb24oKXtpZighYi5XT1JLRVJTX1NVUFBPUlRFRClyZXR1cm4hMTt2YXIgZT0oaT1mLlVSTHx8Zi53ZWJraXRVUkx8fG51bGwscj1zLnRvU3RyaW5nKCksYi5CTE9CX1VSTHx8KGIuQkxPQl9VUkw9aS5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW1wiKFwiLHIsXCIpKCk7XCJdLHt0eXBlOlwidGV4dC9qYXZhc2NyaXB0XCJ9KSkpKSx0PW5ldyBmLldvcmtlcihlKTt2YXIgaSxyO3JldHVybiB0Lm9ubWVzc2FnZT1fLHQuaWQ9aCsrLGFbdC5pZF09dH0oKTtyZXR1cm4gci51c2VyU3RlcD10LnN0ZXAsci51c2VyQ2h1bms9dC5jaHVuayxyLnVzZXJDb21wbGV0ZT10LmNvbXBsZXRlLHIudXNlckVycm9yPXQuZXJyb3IsdC5zdGVwPU0odC5zdGVwKSx0LmNodW5rPU0odC5jaHVuayksdC5jb21wbGV0ZT1NKHQuY29tcGxldGUpLHQuZXJyb3I9TSh0LmVycm9yKSxkZWxldGUgdC53b3JrZXIsdm9pZCByLnBvc3RNZXNzYWdlKHtpbnB1dDplLGNvbmZpZzp0LHdvcmtlcklkOnIuaWR9KX12YXIgbj1udWxsO2IuTk9ERV9TVFJFQU1fSU5QVVQsXCJzdHJpbmdcIj09dHlwZW9mIGU/bj10LmRvd25sb2FkP25ldyBsKHQpOm5ldyBwKHQpOiEwPT09ZS5yZWFkYWJsZSYmTShlLnJlYWQpJiZNKGUub24pP249bmV3IGcodCk6KGYuRmlsZSYmZSBpbnN0YW5jZW9mIEZpbGV8fGUgaW5zdGFuY2VvZiBPYmplY3QpJiYobj1uZXcgYyh0KSk7cmV0dXJuIG4uc3RyZWFtKGUpfSx1bnBhcnNlOmZ1bmN0aW9uKGUsdCl7dmFyIG49ITEsXz0hMCxtPVwiLFwiLHk9XCJcXHJcXG5cIixzPSdcIicsYT1zK3MsaT0hMSxyPW51bGwsbz0hMTshZnVuY3Rpb24oKXtpZihcIm9iamVjdFwiIT10eXBlb2YgdClyZXR1cm47XCJzdHJpbmdcIiE9dHlwZW9mIHQuZGVsaW1pdGVyfHxiLkJBRF9ERUxJTUlURVJTLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4tMSE9PXQuZGVsaW1pdGVyLmluZGV4T2YoZSl9KS5sZW5ndGh8fChtPXQuZGVsaW1pdGVyKTsoXCJib29sZWFuXCI9PXR5cGVvZiB0LnF1b3Rlc3x8XCJmdW5jdGlvblwiPT10eXBlb2YgdC5xdW90ZXN8fEFycmF5LmlzQXJyYXkodC5xdW90ZXMpKSYmKG49dC5xdW90ZXMpO1wiYm9vbGVhblwiIT10eXBlb2YgdC5za2lwRW1wdHlMaW5lcyYmXCJzdHJpbmdcIiE9dHlwZW9mIHQuc2tpcEVtcHR5TGluZXN8fChpPXQuc2tpcEVtcHR5TGluZXMpO1wic3RyaW5nXCI9PXR5cGVvZiB0Lm5ld2xpbmUmJih5PXQubmV3bGluZSk7XCJzdHJpbmdcIj09dHlwZW9mIHQucXVvdGVDaGFyJiYocz10LnF1b3RlQ2hhcik7XCJib29sZWFuXCI9PXR5cGVvZiB0LmhlYWRlciYmKF89dC5oZWFkZXIpO2lmKEFycmF5LmlzQXJyYXkodC5jb2x1bW5zKSl7aWYoMD09PXQuY29sdW1ucy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uIGNvbHVtbnMgaXMgZW1wdHlcIik7cj10LmNvbHVtbnN9dm9pZCAwIT09dC5lc2NhcGVDaGFyJiYoYT10LmVzY2FwZUNoYXIrcyk7XCJib29sZWFuXCI9PXR5cGVvZiB0LmVzY2FwZUZvcm11bGFlJiYobz10LmVzY2FwZUZvcm11bGFlKX0oKTt2YXIgaD1uZXcgUmVnRXhwKGoocyksXCJnXCIpO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1KU09OLnBhcnNlKGUpKTtpZihBcnJheS5pc0FycmF5KGUpKXtpZighZS5sZW5ndGh8fEFycmF5LmlzQXJyYXkoZVswXSkpcmV0dXJuIHUobnVsbCxlLGkpO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlWzBdKXJldHVybiB1KHJ8fE9iamVjdC5rZXlzKGVbMF0pLGUsaSl9ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYoZS5kYXRhPUpTT04ucGFyc2UoZS5kYXRhKSksQXJyYXkuaXNBcnJheShlLmRhdGEpJiYoZS5maWVsZHN8fChlLmZpZWxkcz1lLm1ldGEmJmUubWV0YS5maWVsZHMpLGUuZmllbGRzfHwoZS5maWVsZHM9QXJyYXkuaXNBcnJheShlLmRhdGFbMF0pP2UuZmllbGRzOlwib2JqZWN0XCI9PXR5cGVvZiBlLmRhdGFbMF0/T2JqZWN0LmtleXMoZS5kYXRhWzBdKTpbXSksQXJyYXkuaXNBcnJheShlLmRhdGFbMF0pfHxcIm9iamVjdFwiPT10eXBlb2YgZS5kYXRhWzBdfHwoZS5kYXRhPVtlLmRhdGFdKSksdShlLmZpZWxkc3x8W10sZS5kYXRhfHxbXSxpKTt0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gc2VyaWFsaXplIHVucmVjb2duaXplZCBpbnB1dFwiKTtmdW5jdGlvbiB1KGUsdCxpKXt2YXIgcj1cIlwiO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1KU09OLnBhcnNlKGUpKSxcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9SlNPTi5wYXJzZSh0KSk7dmFyIG49QXJyYXkuaXNBcnJheShlKSYmMDxlLmxlbmd0aCxzPSFBcnJheS5pc0FycmF5KHRbMF0pO2lmKG4mJl8pe2Zvcih2YXIgYT0wO2E8ZS5sZW5ndGg7YSsrKTA8YSYmKHIrPW0pLHIrPXYoZVthXSxhKTswPHQubGVuZ3RoJiYocis9eSl9Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBoPW4/ZS5sZW5ndGg6dFtvXS5sZW5ndGgsdT0hMSxmPW4/MD09PU9iamVjdC5rZXlzKHRbb10pLmxlbmd0aDowPT09dFtvXS5sZW5ndGg7aWYoaSYmIW4mJih1PVwiZ3JlZWR5XCI9PT1pP1wiXCI9PT10W29dLmpvaW4oXCJcIikudHJpbSgpOjE9PT10W29dLmxlbmd0aCYmMD09PXRbb11bMF0ubGVuZ3RoKSxcImdyZWVkeVwiPT09aSYmbil7Zm9yKHZhciBkPVtdLGw9MDtsPGg7bCsrKXt2YXIgYz1zP2VbbF06bDtkLnB1c2godFtvXVtjXSl9dT1cIlwiPT09ZC5qb2luKFwiXCIpLnRyaW0oKX1pZighdSl7Zm9yKHZhciBwPTA7cDxoO3ArKyl7MDxwJiYhZiYmKHIrPW0pO3ZhciBnPW4mJnM/ZVtwXTpwO3IrPXYodFtvXVtnXSxwKX1vPHQubGVuZ3RoLTEmJighaXx8MDxoJiYhZikmJihyKz15KX19cmV0dXJuIHJ9ZnVuY3Rpb24gdihlLHQpe2lmKG51bGw9PWUpcmV0dXJuXCJcIjtpZihlLmNvbnN0cnVjdG9yPT09RGF0ZSlyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSkuc2xpY2UoMSwyNSk7ITA9PT1vJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmbnVsbCE9PWUubWF0Y2goL15bPStcXC1AXS4qJC8pJiYoZT1cIidcIitlKTt2YXIgaT1lLnRvU3RyaW5nKCkucmVwbGFjZShoLGEpLHI9XCJib29sZWFuXCI9PXR5cGVvZiBuJiZufHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiZuKGUsdCl8fEFycmF5LmlzQXJyYXkobikmJm5bdF18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspaWYoLTE8ZS5pbmRleE9mKHRbaV0pKXJldHVybiEwO3JldHVybiExfShpLGIuQkFEX0RFTElNSVRFUlMpfHwtMTxpLmluZGV4T2YobSl8fFwiIFwiPT09aS5jaGFyQXQoMCl8fFwiIFwiPT09aS5jaGFyQXQoaS5sZW5ndGgtMSk7cmV0dXJuIHI/cytpK3M6aX19fTtpZihiLlJFQ09SRF9TRVA9U3RyaW5nLmZyb21DaGFyQ29kZSgzMCksYi5VTklUX1NFUD1TdHJpbmcuZnJvbUNoYXJDb2RlKDMxKSxiLkJZVEVfT1JERVJfTUFSSz1cIlxcdWZlZmZcIixiLkJBRF9ERUxJTUlURVJTPVtcIlxcclwiLFwiXFxuXCIsJ1wiJyxiLkJZVEVfT1JERVJfTUFSS10sYi5XT1JLRVJTX1NVUFBPUlRFRD0hbiYmISFmLldvcmtlcixiLk5PREVfU1RSRUFNX0lOUFVUPTEsYi5Mb2NhbENodW5rU2l6ZT0xMDQ4NTc2MCxiLlJlbW90ZUNodW5rU2l6ZT01MjQyODgwLGIuRGVmYXVsdERlbGltaXRlcj1cIixcIixiLlBhcnNlcj1FLGIuUGFyc2VySGFuZGxlPWksYi5OZXR3b3JrU3RyZWFtZXI9bCxiLkZpbGVTdHJlYW1lcj1jLGIuU3RyaW5nU3RyZWFtZXI9cCxiLlJlYWRhYmxlU3RyZWFtU3RyZWFtZXI9ZyxmLmpRdWVyeSl7dmFyIGQ9Zi5qUXVlcnk7ZC5mbi5wYXJzZT1mdW5jdGlvbihvKXt2YXIgaT1vLmNvbmZpZ3x8e30saD1bXTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2lmKCEoXCJJTlBVVFwiPT09ZCh0aGlzKS5wcm9wKFwidGFnTmFtZVwiKS50b1VwcGVyQ2FzZSgpJiZcImZpbGVcIj09PWQodGhpcykuYXR0cihcInR5cGVcIikudG9Mb3dlckNhc2UoKSYmZi5GaWxlUmVhZGVyKXx8IXRoaXMuZmlsZXN8fDA9PT10aGlzLmZpbGVzLmxlbmd0aClyZXR1cm4hMDtmb3IodmFyIHQ9MDt0PHRoaXMuZmlsZXMubGVuZ3RoO3QrKyloLnB1c2goe2ZpbGU6dGhpcy5maWxlc1t0XSxpbnB1dEVsZW06dGhpcyxpbnN0YW5jZUNvbmZpZzpkLmV4dGVuZCh7fSxpKX0pfSksZSgpLHRoaXM7ZnVuY3Rpb24gZSgpe2lmKDAhPT1oLmxlbmd0aCl7dmFyIGUsdCxpLHIsbj1oWzBdO2lmKE0oby5iZWZvcmUpKXt2YXIgcz1vLmJlZm9yZShuLmZpbGUsbi5pbnB1dEVsZW0pO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBzKXtpZihcImFib3J0XCI9PT1zLmFjdGlvbilyZXR1cm4gZT1cIkFib3J0RXJyb3JcIix0PW4uZmlsZSxpPW4uaW5wdXRFbGVtLHI9cy5yZWFzb24sdm9pZChNKG8uZXJyb3IpJiZvLmVycm9yKHtuYW1lOmV9LHQsaSxyKSk7aWYoXCJza2lwXCI9PT1zLmFjdGlvbilyZXR1cm4gdm9pZCB1KCk7XCJvYmplY3RcIj09dHlwZW9mIHMuY29uZmlnJiYobi5pbnN0YW5jZUNvbmZpZz1kLmV4dGVuZChuLmluc3RhbmNlQ29uZmlnLHMuY29uZmlnKSl9ZWxzZSBpZihcInNraXBcIj09PXMpcmV0dXJuIHZvaWQgdSgpfXZhciBhPW4uaW5zdGFuY2VDb25maWcuY29tcGxldGU7bi5pbnN0YW5jZUNvbmZpZy5jb21wbGV0ZT1mdW5jdGlvbihlKXtNKGEpJiZhKGUsbi5maWxlLG4uaW5wdXRFbGVtKSx1KCl9LGIucGFyc2Uobi5maWxlLG4uaW5zdGFuY2VDb25maWcpfWVsc2UgTShvLmNvbXBsZXRlKSYmby5jb21wbGV0ZSgpfWZ1bmN0aW9uIHUoKXtoLnNwbGljZSgwLDEpLGUoKX19fWZ1bmN0aW9uIHUoZSl7dGhpcy5faGFuZGxlPW51bGwsdGhpcy5fZmluaXNoZWQ9ITEsdGhpcy5fY29tcGxldGVkPSExLHRoaXMuX2hhbHRlZD0hMSx0aGlzLl9pbnB1dD1udWxsLHRoaXMuX2Jhc2VJbmRleD0wLHRoaXMuX3BhcnRpYWxMaW5lPVwiXCIsdGhpcy5fcm93Q291bnQ9MCx0aGlzLl9zdGFydD0wLHRoaXMuX25leHRDaHVuaz1udWxsLHRoaXMuaXNGaXJzdENodW5rPSEwLHRoaXMuX2NvbXBsZXRlUmVzdWx0cz17ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7fX0sZnVuY3Rpb24oZSl7dmFyIHQ9dyhlKTt0LmNodW5rU2l6ZT1wYXJzZUludCh0LmNodW5rU2l6ZSksZS5zdGVwfHxlLmNodW5rfHwodC5jaHVua1NpemU9bnVsbCk7dGhpcy5faGFuZGxlPW5ldyBpKHQpLCh0aGlzLl9oYW5kbGUuc3RyZWFtZXI9dGhpcykuX2NvbmZpZz10fS5jYWxsKHRoaXMsZSksdGhpcy5wYXJzZUNodW5rPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5pc0ZpcnN0Q2h1bmsmJk0odGhpcy5fY29uZmlnLmJlZm9yZUZpcnN0Q2h1bmspKXt2YXIgaT10aGlzLl9jb25maWcuYmVmb3JlRmlyc3RDaHVuayhlKTt2b2lkIDAhPT1pJiYoZT1pKX10aGlzLmlzRmlyc3RDaHVuaz0hMSx0aGlzLl9oYWx0ZWQ9ITE7dmFyIHI9dGhpcy5fcGFydGlhbExpbmUrZTt0aGlzLl9wYXJ0aWFsTGluZT1cIlwiO3ZhciBuPXRoaXMuX2hhbmRsZS5wYXJzZShyLHRoaXMuX2Jhc2VJbmRleCwhdGhpcy5fZmluaXNoZWQpO2lmKCF0aGlzLl9oYW5kbGUucGF1c2VkKCkmJiF0aGlzLl9oYW5kbGUuYWJvcnRlZCgpKXt2YXIgcz1uLm1ldGEuY3Vyc29yO3RoaXMuX2ZpbmlzaGVkfHwodGhpcy5fcGFydGlhbExpbmU9ci5zdWJzdHJpbmcocy10aGlzLl9iYXNlSW5kZXgpLHRoaXMuX2Jhc2VJbmRleD1zKSxuJiZuLmRhdGEmJih0aGlzLl9yb3dDb3VudCs9bi5kYXRhLmxlbmd0aCk7dmFyIGE9dGhpcy5fZmluaXNoZWR8fHRoaXMuX2NvbmZpZy5wcmV2aWV3JiZ0aGlzLl9yb3dDb3VudD49dGhpcy5fY29uZmlnLnByZXZpZXc7aWYobylmLnBvc3RNZXNzYWdlKHtyZXN1bHRzOm4sd29ya2VySWQ6Yi5XT1JLRVJfSUQsZmluaXNoZWQ6YX0pO2Vsc2UgaWYoTSh0aGlzLl9jb25maWcuY2h1bmspJiYhdCl7aWYodGhpcy5fY29uZmlnLmNodW5rKG4sdGhpcy5faGFuZGxlKSx0aGlzLl9oYW5kbGUucGF1c2VkKCl8fHRoaXMuX2hhbmRsZS5hYm9ydGVkKCkpcmV0dXJuIHZvaWQodGhpcy5faGFsdGVkPSEwKTtuPXZvaWQgMCx0aGlzLl9jb21wbGV0ZVJlc3VsdHM9dm9pZCAwfXJldHVybiB0aGlzLl9jb25maWcuc3RlcHx8dGhpcy5fY29uZmlnLmNodW5rfHwodGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGE9dGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGEuY29uY2F0KG4uZGF0YSksdGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycz10aGlzLl9jb21wbGV0ZVJlc3VsdHMuZXJyb3JzLmNvbmNhdChuLmVycm9ycyksdGhpcy5fY29tcGxldGVSZXN1bHRzLm1ldGE9bi5tZXRhKSx0aGlzLl9jb21wbGV0ZWR8fCFhfHwhTSh0aGlzLl9jb25maWcuY29tcGxldGUpfHxuJiZuLm1ldGEuYWJvcnRlZHx8KHRoaXMuX2NvbmZpZy5jb21wbGV0ZSh0aGlzLl9jb21wbGV0ZVJlc3VsdHMsdGhpcy5faW5wdXQpLHRoaXMuX2NvbXBsZXRlZD0hMCksYXx8biYmbi5tZXRhLnBhdXNlZHx8dGhpcy5fbmV4dENodW5rKCksbn10aGlzLl9oYWx0ZWQ9ITB9LHRoaXMuX3NlbmRFcnJvcj1mdW5jdGlvbihlKXtNKHRoaXMuX2NvbmZpZy5lcnJvcik/dGhpcy5fY29uZmlnLmVycm9yKGUpOm8mJnRoaXMuX2NvbmZpZy5lcnJvciYmZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6Yi5XT1JLRVJfSUQsZXJyb3I6ZSxmaW5pc2hlZDohMX0pfX1mdW5jdGlvbiBsKGUpe3ZhciByOyhlPWV8fHt9KS5jaHVua1NpemV8fChlLmNodW5rU2l6ZT1iLlJlbW90ZUNodW5rU2l6ZSksdS5jYWxsKHRoaXMsZSksdGhpcy5fbmV4dENodW5rPW4/ZnVuY3Rpb24oKXt0aGlzLl9yZWFkQ2h1bmsoKSx0aGlzLl9jaHVua0xvYWRlZCgpfTpmdW5jdGlvbigpe3RoaXMuX3JlYWRDaHVuaygpfSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXt0aGlzLl9pbnB1dD1lLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9yZWFkQ2h1bms9ZnVuY3Rpb24oKXtpZih0aGlzLl9maW5pc2hlZCl0aGlzLl9jaHVua0xvYWRlZCgpO2Vsc2V7aWYocj1uZXcgWE1MSHR0cFJlcXVlc3QsdGhpcy5fY29uZmlnLndpdGhDcmVkZW50aWFscyYmKHIud2l0aENyZWRlbnRpYWxzPXRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpLG58fChyLm9ubG9hZD12KHRoaXMuX2NodW5rTG9hZGVkLHRoaXMpLHIub25lcnJvcj12KHRoaXMuX2NodW5rRXJyb3IsdGhpcykpLHIub3Blbih0aGlzLl9jb25maWcuZG93bmxvYWRSZXF1ZXN0Qm9keT9cIlBPU1RcIjpcIkdFVFwiLHRoaXMuX2lucHV0LCFuKSx0aGlzLl9jb25maWcuZG93bmxvYWRSZXF1ZXN0SGVhZGVycyl7dmFyIGU9dGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnM7Zm9yKHZhciB0IGluIGUpci5zZXRSZXF1ZXN0SGVhZGVyKHQsZVt0XSl9aWYodGhpcy5fY29uZmlnLmNodW5rU2l6ZSl7dmFyIGk9dGhpcy5fc3RhcnQrdGhpcy5fY29uZmlnLmNodW5rU2l6ZS0xO3Iuc2V0UmVxdWVzdEhlYWRlcihcIlJhbmdlXCIsXCJieXRlcz1cIit0aGlzLl9zdGFydCtcIi1cIitpKX10cnl7ci5zZW5kKHRoaXMuX2NvbmZpZy5kb3dubG9hZFJlcXVlc3RCb2R5KX1jYXRjaChlKXt0aGlzLl9jaHVua0Vycm9yKGUubWVzc2FnZSl9biYmMD09PXIuc3RhdHVzJiZ0aGlzLl9jaHVua0Vycm9yKCl9fSx0aGlzLl9jaHVua0xvYWRlZD1mdW5jdGlvbigpezQ9PT1yLnJlYWR5U3RhdGUmJihyLnN0YXR1czwyMDB8fDQwMDw9ci5zdGF0dXM/dGhpcy5fY2h1bmtFcnJvcigpOih0aGlzLl9zdGFydCs9dGhpcy5fY29uZmlnLmNodW5rU2l6ZT90aGlzLl9jb25maWcuY2h1bmtTaXplOnIucmVzcG9uc2VUZXh0Lmxlbmd0aCx0aGlzLl9maW5pc2hlZD0hdGhpcy5fY29uZmlnLmNodW5rU2l6ZXx8dGhpcy5fc3RhcnQ+PWZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVJhbmdlXCIpO2lmKG51bGw9PT10KXJldHVybi0xO3JldHVybiBwYXJzZUludCh0LnN1YnN0cmluZyh0Lmxhc3RJbmRleE9mKFwiL1wiKSsxKSl9KHIpLHRoaXMucGFyc2VDaHVuayhyLnJlc3BvbnNlVGV4dCkpKX0sdGhpcy5fY2h1bmtFcnJvcj1mdW5jdGlvbihlKXt2YXIgdD1yLnN0YXR1c1RleHR8fGU7dGhpcy5fc2VuZEVycm9yKG5ldyBFcnJvcih0KSl9fWZ1bmN0aW9uIGMoZSl7dmFyIHIsbjsoZT1lfHx7fSkuY2h1bmtTaXplfHwoZS5jaHVua1NpemU9Yi5Mb2NhbENodW5rU2l6ZSksdS5jYWxsKHRoaXMsZSk7dmFyIHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZpbGVSZWFkZXI7dGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSxuPWUuc2xpY2V8fGUud2Via2l0U2xpY2V8fGUubW96U2xpY2Uscz8oKHI9bmV3IEZpbGVSZWFkZXIpLm9ubG9hZD12KHRoaXMuX2NodW5rTG9hZGVkLHRoaXMpLHIub25lcnJvcj12KHRoaXMuX2NodW5rRXJyb3IsdGhpcykpOnI9bmV3IEZpbGVSZWFkZXJTeW5jLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXt0aGlzLl9maW5pc2hlZHx8dGhpcy5fY29uZmlnLnByZXZpZXcmJiEodGhpcy5fcm93Q291bnQ8dGhpcy5fY29uZmlnLnByZXZpZXcpfHx0aGlzLl9yZWFkQ2h1bmsoKX0sdGhpcy5fcmVhZENodW5rPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5faW5wdXQ7aWYodGhpcy5fY29uZmlnLmNodW5rU2l6ZSl7dmFyIHQ9TWF0aC5taW4odGhpcy5fc3RhcnQrdGhpcy5fY29uZmlnLmNodW5rU2l6ZSx0aGlzLl9pbnB1dC5zaXplKTtlPW4uY2FsbChlLHRoaXMuX3N0YXJ0LHQpfXZhciBpPXIucmVhZEFzVGV4dChlLHRoaXMuX2NvbmZpZy5lbmNvZGluZyk7c3x8dGhpcy5fY2h1bmtMb2FkZWQoe3RhcmdldDp7cmVzdWx0Oml9fSl9LHRoaXMuX2NodW5rTG9hZGVkPWZ1bmN0aW9uKGUpe3RoaXMuX3N0YXJ0Kz10aGlzLl9jb25maWcuY2h1bmtTaXplLHRoaXMuX2ZpbmlzaGVkPSF0aGlzLl9jb25maWcuY2h1bmtTaXplfHx0aGlzLl9zdGFydD49dGhpcy5faW5wdXQuc2l6ZSx0aGlzLnBhcnNlQ2h1bmsoZS50YXJnZXQucmVzdWx0KX0sdGhpcy5fY2h1bmtFcnJvcj1mdW5jdGlvbigpe3RoaXMuX3NlbmRFcnJvcihyLmVycm9yKX19ZnVuY3Rpb24gcChlKXt2YXIgaTt1LmNhbGwodGhpcyxlPWV8fHt9KSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gaT1lLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXtpZighdGhpcy5fZmluaXNoZWQpe3ZhciBlLHQ9dGhpcy5fY29uZmlnLmNodW5rU2l6ZTtyZXR1cm4gdD8oZT1pLnN1YnN0cmluZygwLHQpLGk9aS5zdWJzdHJpbmcodCkpOihlPWksaT1cIlwiKSx0aGlzLl9maW5pc2hlZD0haSx0aGlzLnBhcnNlQ2h1bmsoZSl9fX1mdW5jdGlvbiBnKGUpe3UuY2FsbCh0aGlzLGU9ZXx8e30pO3ZhciB0PVtdLGk9ITAscj0hMTt0aGlzLnBhdXNlPWZ1bmN0aW9uKCl7dS5wcm90b3R5cGUucGF1c2UuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2lucHV0LnBhdXNlKCl9LHRoaXMucmVzdW1lPWZ1bmN0aW9uKCl7dS5wcm90b3R5cGUucmVzdW1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9pbnB1dC5yZXN1bWUoKX0sdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSx0aGlzLl9pbnB1dC5vbihcImRhdGFcIix0aGlzLl9zdHJlYW1EYXRhKSx0aGlzLl9pbnB1dC5vbihcImVuZFwiLHRoaXMuX3N0cmVhbUVuZCksdGhpcy5faW5wdXQub24oXCJlcnJvclwiLHRoaXMuX3N0cmVhbUVycm9yKX0sdGhpcy5fY2hlY2tJc0ZpbmlzaGVkPWZ1bmN0aW9uKCl7ciYmMT09PXQubGVuZ3RoJiYodGhpcy5fZmluaXNoZWQ9ITApfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXt0aGlzLl9jaGVja0lzRmluaXNoZWQoKSx0Lmxlbmd0aD90aGlzLnBhcnNlQ2h1bmsodC5zaGlmdCgpKTppPSEwfSx0aGlzLl9zdHJlYW1EYXRhPXYoZnVuY3Rpb24oZSl7dHJ5e3QucHVzaChcInN0cmluZ1wiPT10eXBlb2YgZT9lOmUudG9TdHJpbmcodGhpcy5fY29uZmlnLmVuY29kaW5nKSksaSYmKGk9ITEsdGhpcy5fY2hlY2tJc0ZpbmlzaGVkKCksdGhpcy5wYXJzZUNodW5rKHQuc2hpZnQoKSkpfWNhdGNoKGUpe3RoaXMuX3N0cmVhbUVycm9yKGUpfX0sdGhpcyksdGhpcy5fc3RyZWFtRXJyb3I9dihmdW5jdGlvbihlKXt0aGlzLl9zdHJlYW1DbGVhblVwKCksdGhpcy5fc2VuZEVycm9yKGUpfSx0aGlzKSx0aGlzLl9zdHJlYW1FbmQ9dihmdW5jdGlvbigpe3RoaXMuX3N0cmVhbUNsZWFuVXAoKSxyPSEwLHRoaXMuX3N0cmVhbURhdGEoXCJcIil9LHRoaXMpLHRoaXMuX3N0cmVhbUNsZWFuVXA9dihmdW5jdGlvbigpe3RoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLHRoaXMuX3N0cmVhbURhdGEpLHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsdGhpcy5fc3RyZWFtRW5kKSx0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsdGhpcy5fc3RyZWFtRXJyb3IpfSx0aGlzKX1mdW5jdGlvbiBpKG0pe3ZhciBhLG8saCxyPU1hdGgucG93KDIsNTMpLG49LXIscz0vXlxccyotPyhcXGQrXFwuP3xcXC5cXGQrfFxcZCtcXC5cXGQrKShbZUVdWy0rXT9cXGQrKT9cXHMqJC8sdT0vXihcXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZDpbMC01XVxcZFxcLlxcZCsoWystXVswLTJdXFxkOlswLTVdXFxkfFopKXwoXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGQoWystXVswLTJdXFxkOlswLTVdXFxkfFopKXwoXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQoWystXVswLTJdXFxkOlswLTVdXFxkfFopKSQvLHQ9dGhpcyxpPTAsZj0wLGQ9ITEsZT0hMSxsPVtdLGM9e2RhdGE6W10sZXJyb3JzOltdLG1ldGE6e319O2lmKE0obS5zdGVwKSl7dmFyIHA9bS5zdGVwO20uc3RlcD1mdW5jdGlvbihlKXtpZihjPWUsXygpKWcoKTtlbHNle2lmKGcoKSwwPT09Yy5kYXRhLmxlbmd0aClyZXR1cm47aSs9ZS5kYXRhLmxlbmd0aCxtLnByZXZpZXcmJmk+bS5wcmV2aWV3P28uYWJvcnQoKTooYy5kYXRhPWMuZGF0YVswXSxwKGMsdCkpfX19ZnVuY3Rpb24geShlKXtyZXR1cm5cImdyZWVkeVwiPT09bS5za2lwRW1wdHlMaW5lcz9cIlwiPT09ZS5qb2luKFwiXCIpLnRyaW0oKToxPT09ZS5sZW5ndGgmJjA9PT1lWzBdLmxlbmd0aH1mdW5jdGlvbiBnKCl7aWYoYyYmaCYmKGsoXCJEZWxpbWl0ZXJcIixcIlVuZGV0ZWN0YWJsZURlbGltaXRlclwiLFwiVW5hYmxlIHRvIGF1dG8tZGV0ZWN0IGRlbGltaXRpbmcgY2hhcmFjdGVyOyBkZWZhdWx0ZWQgdG8gJ1wiK2IuRGVmYXVsdERlbGltaXRlcitcIidcIiksaD0hMSksbS5za2lwRW1wdHlMaW5lcylmb3IodmFyIGU9MDtlPGMuZGF0YS5sZW5ndGg7ZSsrKXkoYy5kYXRhW2VdKSYmYy5kYXRhLnNwbGljZShlLS0sMSk7cmV0dXJuIF8oKSYmZnVuY3Rpb24oKXtpZighYylyZXR1cm47ZnVuY3Rpb24gZShlLHQpe00obS50cmFuc2Zvcm1IZWFkZXIpJiYoZT1tLnRyYW5zZm9ybUhlYWRlcihlLHQpKSxsLnB1c2goZSl9aWYoQXJyYXkuaXNBcnJheShjLmRhdGFbMF0pKXtmb3IodmFyIHQ9MDtfKCkmJnQ8Yy5kYXRhLmxlbmd0aDt0KyspYy5kYXRhW3RdLmZvckVhY2goZSk7Yy5kYXRhLnNwbGljZSgwLDEpfWVsc2UgYy5kYXRhLmZvckVhY2goZSl9KCksZnVuY3Rpb24oKXtpZighY3x8IW0uaGVhZGVyJiYhbS5keW5hbWljVHlwaW5nJiYhbS50cmFuc2Zvcm0pcmV0dXJuIGM7ZnVuY3Rpb24gZShlLHQpe3ZhciBpLHI9bS5oZWFkZXI/e306W107Zm9yKGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIG49aSxzPWVbaV07bS5oZWFkZXImJihuPWk+PWwubGVuZ3RoP1wiX19wYXJzZWRfZXh0cmFcIjpsW2ldKSxtLnRyYW5zZm9ybSYmKHM9bS50cmFuc2Zvcm0ocyxuKSkscz12KG4scyksXCJfX3BhcnNlZF9leHRyYVwiPT09bj8ocltuXT1yW25dfHxbXSxyW25dLnB1c2gocykpOnJbbl09c31yZXR1cm4gbS5oZWFkZXImJihpPmwubGVuZ3RoP2soXCJGaWVsZE1pc21hdGNoXCIsXCJUb29NYW55RmllbGRzXCIsXCJUb28gbWFueSBmaWVsZHM6IGV4cGVjdGVkIFwiK2wubGVuZ3RoK1wiIGZpZWxkcyBidXQgcGFyc2VkIFwiK2ksZit0KTppPGwubGVuZ3RoJiZrKFwiRmllbGRNaXNtYXRjaFwiLFwiVG9vRmV3RmllbGRzXCIsXCJUb28gZmV3IGZpZWxkczogZXhwZWN0ZWQgXCIrbC5sZW5ndGgrXCIgZmllbGRzIGJ1dCBwYXJzZWQgXCIraSxmK3QpKSxyfXZhciB0PTE7IWMuZGF0YS5sZW5ndGh8fEFycmF5LmlzQXJyYXkoYy5kYXRhWzBdKT8oYy5kYXRhPWMuZGF0YS5tYXAoZSksdD1jLmRhdGEubGVuZ3RoKTpjLmRhdGE9ZShjLmRhdGEsMCk7bS5oZWFkZXImJmMubWV0YSYmKGMubWV0YS5maWVsZHM9bCk7cmV0dXJuIGYrPXQsY30oKX1mdW5jdGlvbiBfKCl7cmV0dXJuIG0uaGVhZGVyJiYwPT09bC5sZW5ndGh9ZnVuY3Rpb24gdihlLHQpe3JldHVybiBpPWUsbS5keW5hbWljVHlwaW5nRnVuY3Rpb24mJnZvaWQgMD09PW0uZHluYW1pY1R5cGluZ1tpXSYmKG0uZHluYW1pY1R5cGluZ1tpXT1tLmR5bmFtaWNUeXBpbmdGdW5jdGlvbihpKSksITA9PT0obS5keW5hbWljVHlwaW5nW2ldfHxtLmR5bmFtaWNUeXBpbmcpP1widHJ1ZVwiPT09dHx8XCJUUlVFXCI9PT10fHxcImZhbHNlXCIhPT10JiZcIkZBTFNFXCIhPT10JiYoZnVuY3Rpb24oZSl7aWYocy50ZXN0KGUpKXt2YXIgdD1wYXJzZUZsb2F0KGUpO2lmKG48dCYmdDxyKXJldHVybiEwfXJldHVybiExfSh0KT9wYXJzZUZsb2F0KHQpOnUudGVzdCh0KT9uZXcgRGF0ZSh0KTpcIlwiPT09dD9udWxsOnQpOnQ7dmFyIGl9ZnVuY3Rpb24gayhlLHQsaSxyKXt2YXIgbj17dHlwZTplLGNvZGU6dCxtZXNzYWdlOml9O3ZvaWQgMCE9PXImJihuLnJvdz1yKSxjLmVycm9ycy5wdXNoKG4pfXRoaXMucGFyc2U9ZnVuY3Rpb24oZSx0LGkpe3ZhciByPW0ucXVvdGVDaGFyfHwnXCInO2lmKG0ubmV3bGluZXx8KG0ubmV3bGluZT1mdW5jdGlvbihlLHQpe2U9ZS5zdWJzdHJpbmcoMCwxMDQ4NTc2KTt2YXIgaT1uZXcgUmVnRXhwKGoodCkrXCIoW15dKj8pXCIraih0KSxcImdtXCIpLHI9KGU9ZS5yZXBsYWNlKGksXCJcIikpLnNwbGl0KFwiXFxyXCIpLG49ZS5zcGxpdChcIlxcblwiKSxzPTE8bi5sZW5ndGgmJm5bMF0ubGVuZ3RoPHJbMF0ubGVuZ3RoO2lmKDE9PT1yLmxlbmd0aHx8cylyZXR1cm5cIlxcblwiO2Zvcih2YXIgYT0wLG89MDtvPHIubGVuZ3RoO28rKylcIlxcblwiPT09cltvXVswXSYmYSsrO3JldHVybiBhPj1yLmxlbmd0aC8yP1wiXFxyXFxuXCI6XCJcXHJcIn0oZSxyKSksaD0hMSxtLmRlbGltaXRlcilNKG0uZGVsaW1pdGVyKSYmKG0uZGVsaW1pdGVyPW0uZGVsaW1pdGVyKGUpLGMubWV0YS5kZWxpbWl0ZXI9bS5kZWxpbWl0ZXIpO2Vsc2V7dmFyIG49ZnVuY3Rpb24oZSx0LGkscixuKXt2YXIgcyxhLG8saDtuPW58fFtcIixcIixcIlxcdFwiLFwifFwiLFwiO1wiLGIuUkVDT1JEX1NFUCxiLlVOSVRfU0VQXTtmb3IodmFyIHU9MDt1PG4ubGVuZ3RoO3UrKyl7dmFyIGY9blt1XSxkPTAsbD0wLGM9MDtvPXZvaWQgMDtmb3IodmFyIHA9bmV3IEUoe2NvbW1lbnRzOnIsZGVsaW1pdGVyOmYsbmV3bGluZTp0LHByZXZpZXc6MTB9KS5wYXJzZShlKSxnPTA7ZzxwLmRhdGEubGVuZ3RoO2crKylpZihpJiZ5KHAuZGF0YVtnXSkpYysrO2Vsc2V7dmFyIF89cC5kYXRhW2ddLmxlbmd0aDtsKz1fLHZvaWQgMCE9PW8/MDxfJiYoZCs9TWF0aC5hYnMoXy1vKSxvPV8pOm89X30wPHAuZGF0YS5sZW5ndGgmJihsLz1wLmRhdGEubGVuZ3RoLWMpLCh2b2lkIDA9PT1hfHxkPD1hKSYmKHZvaWQgMD09PWh8fGg8bCkmJjEuOTk8bCYmKGE9ZCxzPWYsaD1sKX1yZXR1cm57c3VjY2Vzc2Z1bDohIShtLmRlbGltaXRlcj1zKSxiZXN0RGVsaW1pdGVyOnN9fShlLG0ubmV3bGluZSxtLnNraXBFbXB0eUxpbmVzLG0uY29tbWVudHMsbS5kZWxpbWl0ZXJzVG9HdWVzcyk7bi5zdWNjZXNzZnVsP20uZGVsaW1pdGVyPW4uYmVzdERlbGltaXRlcjooaD0hMCxtLmRlbGltaXRlcj1iLkRlZmF1bHREZWxpbWl0ZXIpLGMubWV0YS5kZWxpbWl0ZXI9bS5kZWxpbWl0ZXJ9dmFyIHM9dyhtKTtyZXR1cm4gbS5wcmV2aWV3JiZtLmhlYWRlciYmcy5wcmV2aWV3KyssYT1lLG89bmV3IEUocyksYz1vLnBhcnNlKGEsdCxpKSxnKCksZD97bWV0YTp7cGF1c2VkOiEwfX06Y3x8e21ldGE6e3BhdXNlZDohMX19fSx0aGlzLnBhdXNlZD1mdW5jdGlvbigpe3JldHVybiBkfSx0aGlzLnBhdXNlPWZ1bmN0aW9uKCl7ZD0hMCxvLmFib3J0KCksYT1NKG0uY2h1bmspP1wiXCI6YS5zdWJzdHJpbmcoby5nZXRDaGFySW5kZXgoKSl9LHRoaXMucmVzdW1lPWZ1bmN0aW9uKCl7dC5zdHJlYW1lci5faGFsdGVkPyhkPSExLHQuc3RyZWFtZXIucGFyc2VDaHVuayhhLCEwKSk6c2V0VGltZW91dCh0LnJlc3VtZSwzKX0sdGhpcy5hYm9ydGVkPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtlPSEwLG8uYWJvcnQoKSxjLm1ldGEuYWJvcnRlZD0hMCxNKG0uY29tcGxldGUpJiZtLmNvbXBsZXRlKGMpLGE9XCJcIn19ZnVuY3Rpb24gaihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZyxcIlxcXFwkJlwiKX1mdW5jdGlvbiBFKGUpe3ZhciBTLE89KGU9ZXx8e30pLmRlbGltaXRlcix4PWUubmV3bGluZSxJPWUuY29tbWVudHMsVD1lLnN0ZXAsRD1lLnByZXZpZXcsQT1lLmZhc3RNb2RlLEw9Uz12b2lkIDA9PT1lLnF1b3RlQ2hhcj8nXCInOmUucXVvdGVDaGFyO2lmKHZvaWQgMCE9PWUuZXNjYXBlQ2hhciYmKEw9ZS5lc2NhcGVDaGFyKSwoXCJzdHJpbmdcIiE9dHlwZW9mIE98fC0xPGIuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihPKSkmJihPPVwiLFwiKSxJPT09Tyl0aHJvdyBuZXcgRXJyb3IoXCJDb21tZW50IGNoYXJhY3RlciBzYW1lIGFzIGRlbGltaXRlclwiKTshMD09PUk/ST1cIiNcIjooXCJzdHJpbmdcIiE9dHlwZW9mIEl8fC0xPGIuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihJKSkmJihJPSExKSxcIlxcblwiIT09eCYmXCJcXHJcIiE9PXgmJlwiXFxyXFxuXCIhPT14JiYoeD1cIlxcblwiKTt2YXIgRj0wLHo9ITE7dGhpcy5wYXJzZT1mdW5jdGlvbihyLHQsaSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHIpdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgbXVzdCBiZSBhIHN0cmluZ1wiKTt2YXIgbj1yLmxlbmd0aCxlPU8ubGVuZ3RoLHM9eC5sZW5ndGgsYT1JLmxlbmd0aCxvPU0oVCksaD1bXSx1PVtdLGY9W10sZD1GPTA7aWYoIXIpcmV0dXJuIEMoKTtpZihBfHwhMSE9PUEmJi0xPT09ci5pbmRleE9mKFMpKXtmb3IodmFyIGw9ci5zcGxpdCh4KSxjPTA7YzxsLmxlbmd0aDtjKyspe2lmKGY9bFtjXSxGKz1mLmxlbmd0aCxjIT09bC5sZW5ndGgtMSlGKz14Lmxlbmd0aDtlbHNlIGlmKGkpcmV0dXJuIEMoKTtpZighSXx8Zi5zdWJzdHJpbmcoMCxhKSE9PUkpe2lmKG8pe2lmKGg9W10sayhmLnNwbGl0KE8pKSxSKCkseilyZXR1cm4gQygpfWVsc2UgayhmLnNwbGl0KE8pKTtpZihEJiZEPD1jKXJldHVybiBoPWguc2xpY2UoMCxEKSxDKCEwKX19cmV0dXJuIEMoKX1mb3IodmFyIHA9ci5pbmRleE9mKE8sRiksZz1yLmluZGV4T2YoeCxGKSxfPW5ldyBSZWdFeHAoaihMKStqKFMpLFwiZ1wiKSxtPXIuaW5kZXhPZihTLEYpOzspaWYocltGXSE9PVMpaWYoSSYmMD09PWYubGVuZ3RoJiZyLnN1YnN0cmluZyhGLEYrYSk9PT1JKXtpZigtMT09PWcpcmV0dXJuIEMoKTtGPWcrcyxnPXIuaW5kZXhPZih4LEYpLHA9ci5pbmRleE9mKE8sRil9ZWxzZSBpZigtMSE9PXAmJihwPGd8fC0xPT09ZykpZi5wdXNoKHIuc3Vic3RyaW5nKEYscCkpLEY9cCtlLHA9ci5pbmRleE9mKE8sRik7ZWxzZXtpZigtMT09PWcpYnJlYWs7aWYoZi5wdXNoKHIuc3Vic3RyaW5nKEYsZykpLHcoZytzKSxvJiYoUigpLHopKXJldHVybiBDKCk7aWYoRCYmaC5sZW5ndGg+PUQpcmV0dXJuIEMoITApfWVsc2UgZm9yKG09RixGKys7Oyl7aWYoLTE9PT0obT1yLmluZGV4T2YoUyxtKzEpKSlyZXR1cm4gaXx8dS5wdXNoKHt0eXBlOlwiUXVvdGVzXCIsY29kZTpcIk1pc3NpbmdRdW90ZXNcIixtZXNzYWdlOlwiUXVvdGVkIGZpZWxkIHVudGVybWluYXRlZFwiLHJvdzpoLmxlbmd0aCxpbmRleDpGfSksRSgpO2lmKG09PT1uLTEpcmV0dXJuIEUoci5zdWJzdHJpbmcoRixtKS5yZXBsYWNlKF8sUykpO2lmKFMhPT1MfHxyW20rMV0hPT1MKXtpZihTPT09THx8MD09PW18fHJbbS0xXSE9PUwpey0xIT09cCYmcDxtKzEmJihwPXIuaW5kZXhPZihPLG0rMSkpLC0xIT09ZyYmZzxtKzEmJihnPXIuaW5kZXhPZih4LG0rMSkpO3ZhciB5PWIoLTE9PT1nP3A6TWF0aC5taW4ocCxnKSk7aWYoclttKzEreV09PT1PKXtmLnB1c2goci5zdWJzdHJpbmcoRixtKS5yZXBsYWNlKF8sUykpLHJbRj1tKzEreStlXSE9PVMmJihtPXIuaW5kZXhPZihTLEYpKSxwPXIuaW5kZXhPZihPLEYpLGc9ci5pbmRleE9mKHgsRik7YnJlYWt9dmFyIHY9YihnKTtpZihyLnN1YnN0cmluZyhtKzErdixtKzErditzKT09PXgpe2lmKGYucHVzaChyLnN1YnN0cmluZyhGLG0pLnJlcGxhY2UoXyxTKSksdyhtKzErditzKSxwPXIuaW5kZXhPZihPLEYpLG09ci5pbmRleE9mKFMsRiksbyYmKFIoKSx6KSlyZXR1cm4gQygpO2lmKEQmJmgubGVuZ3RoPj1EKXJldHVybiBDKCEwKTticmVha311LnB1c2goe3R5cGU6XCJRdW90ZXNcIixjb2RlOlwiSW52YWxpZFF1b3Rlc1wiLG1lc3NhZ2U6XCJUcmFpbGluZyBxdW90ZSBvbiBxdW90ZWQgZmllbGQgaXMgbWFsZm9ybWVkXCIscm93OmgubGVuZ3RoLGluZGV4OkZ9KSxtKyt9fWVsc2UgbSsrfXJldHVybiBFKCk7ZnVuY3Rpb24gayhlKXtoLnB1c2goZSksZD1GfWZ1bmN0aW9uIGIoZSl7dmFyIHQ9MDtpZigtMSE9PWUpe3ZhciBpPXIuc3Vic3RyaW5nKG0rMSxlKTtpJiZcIlwiPT09aS50cmltKCkmJih0PWkubGVuZ3RoKX1yZXR1cm4gdH1mdW5jdGlvbiBFKGUpe3JldHVybiBpfHwodm9pZCAwPT09ZSYmKGU9ci5zdWJzdHJpbmcoRikpLGYucHVzaChlKSxGPW4sayhmKSxvJiZSKCkpLEMoKX1mdW5jdGlvbiB3KGUpe0Y9ZSxrKGYpLGY9W10sZz1yLmluZGV4T2YoeCxGKX1mdW5jdGlvbiBDKGUpe3JldHVybntkYXRhOmgsZXJyb3JzOnUsbWV0YTp7ZGVsaW1pdGVyOk8sbGluZWJyZWFrOngsYWJvcnRlZDp6LHRydW5jYXRlZDohIWUsY3Vyc29yOmQrKHR8fDApfX19ZnVuY3Rpb24gUigpe1QoQygpKSxoPVtdLHU9W119fSx0aGlzLmFib3J0PWZ1bmN0aW9uKCl7ej0hMH0sdGhpcy5nZXRDaGFySW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gRn19ZnVuY3Rpb24gXyhlKXt2YXIgdD1lLmRhdGEsaT1hW3Qud29ya2VySWRdLHI9ITE7aWYodC5lcnJvcilpLnVzZXJFcnJvcih0LmVycm9yLHQuZmlsZSk7ZWxzZSBpZih0LnJlc3VsdHMmJnQucmVzdWx0cy5kYXRhKXt2YXIgbj17YWJvcnQ6ZnVuY3Rpb24oKXtyPSEwLG0odC53b3JrZXJJZCx7ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7YWJvcnRlZDohMH19KX0scGF1c2U6eSxyZXN1bWU6eX07aWYoTShpLnVzZXJTdGVwKSl7Zm9yKHZhciBzPTA7czx0LnJlc3VsdHMuZGF0YS5sZW5ndGgmJihpLnVzZXJTdGVwKHtkYXRhOnQucmVzdWx0cy5kYXRhW3NdLGVycm9yczp0LnJlc3VsdHMuZXJyb3JzLG1ldGE6dC5yZXN1bHRzLm1ldGF9LG4pLCFyKTtzKyspO2RlbGV0ZSB0LnJlc3VsdHN9ZWxzZSBNKGkudXNlckNodW5rKSYmKGkudXNlckNodW5rKHQucmVzdWx0cyxuLHQuZmlsZSksZGVsZXRlIHQucmVzdWx0cyl9dC5maW5pc2hlZCYmIXImJm0odC53b3JrZXJJZCx0LnJlc3VsdHMpfWZ1bmN0aW9uIG0oZSx0KXt2YXIgaT1hW2VdO00oaS51c2VyQ29tcGxldGUpJiZpLnVzZXJDb21wbGV0ZSh0KSxpLnRlcm1pbmF0ZSgpLGRlbGV0ZSBhW2VdfWZ1bmN0aW9uIHkoKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQuXCIpfWZ1bmN0aW9uIHcoZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiBlO3ZhciB0PUFycmF5LmlzQXJyYXkoZSk/W106e307Zm9yKHZhciBpIGluIGUpdFtpXT13KGVbaV0pO3JldHVybiB0fWZ1bmN0aW9uIHYoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtlLmFwcGx5KHQsYXJndW1lbnRzKX19ZnVuY3Rpb24gTShlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfXJldHVybiBvJiYoZi5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kYXRhO3ZvaWQgMD09PWIuV09SS0VSX0lEJiZ0JiYoYi5XT1JLRVJfSUQ9dC53b3JrZXJJZCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQuaW5wdXQpZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6Yi5XT1JLRVJfSUQscmVzdWx0czpiLnBhcnNlKHQuaW5wdXQsdC5jb25maWcpLGZpbmlzaGVkOiEwfSk7ZWxzZSBpZihmLkZpbGUmJnQuaW5wdXQgaW5zdGFuY2VvZiBGaWxlfHx0LmlucHV0IGluc3RhbmNlb2YgT2JqZWN0KXt2YXIgaT1iLnBhcnNlKHQuaW5wdXQsdC5jb25maWcpO2kmJmYucG9zdE1lc3NhZ2Uoe3dvcmtlcklkOmIuV09SS0VSX0lELHJlc3VsdHM6aSxmaW5pc2hlZDohMH0pfX0pLChsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHUucHJvdG90eXBlKSkuY29uc3RydWN0b3I9bCwoYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh1LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWMsKHAucHJvdG90eXBlPU9iamVjdC5jcmVhdGUocC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1wLChnLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHUucHJvdG90eXBlKSkuY29uc3RydWN0b3I9ZyxifSk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF90b0RhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi90b0RhdGVcIikpO1xuXG52YXIgX3RvRmxvYXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi90b0Zsb2F0XCIpKTtcblxudmFyIF90b0ludCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL3RvSW50XCIpKTtcblxudmFyIF90b0Jvb2xlYW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi90b0Jvb2xlYW5cIikpO1xuXG52YXIgX2VxdWFscyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2VxdWFsc1wiKSk7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9jb250YWluc1wiKSk7XG5cbnZhciBfbWF0Y2hlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL21hdGNoZXNcIikpO1xuXG52YXIgX2lzRW1haWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0VtYWlsXCIpKTtcblxudmFyIF9pc1VSTCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzVVJMXCIpKTtcblxudmFyIF9pc01BQ0FkZHJlc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc01BQ0FkZHJlc3NcIikpO1xuXG52YXIgX2lzSVAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0lQXCIpKTtcblxudmFyIF9pc0lQUmFuZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0lQUmFuZ2VcIikpO1xuXG52YXIgX2lzRlFETiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzRlFETlwiKSk7XG5cbnZhciBfaXNEYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNEYXRlXCIpKTtcblxudmFyIF9pc0Jvb2xlYW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0Jvb2xlYW5cIikpO1xuXG52YXIgX2lzTG9jYWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNMb2NhbGVcIikpO1xuXG52YXIgX2lzQWxwaGEgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9saWIvaXNBbHBoYVwiKSk7XG5cbnZhciBfaXNBbHBoYW51bWVyaWMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9saWIvaXNBbHBoYW51bWVyaWNcIikpO1xuXG52YXIgX2lzTnVtZXJpYyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzTnVtZXJpY1wiKSk7XG5cbnZhciBfaXNQYXNzcG9ydE51bWJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzUGFzc3BvcnROdW1iZXJcIikpO1xuXG52YXIgX2lzUG9ydCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzUG9ydFwiKSk7XG5cbnZhciBfaXNMb3dlcmNhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0xvd2VyY2FzZVwiKSk7XG5cbnZhciBfaXNVcHBlcmNhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc1VwcGVyY2FzZVwiKSk7XG5cbnZhciBfaXNJTUVJID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJTUVJXCIpKTtcblxudmFyIF9pc0FzY2lpID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNBc2NpaVwiKSk7XG5cbnZhciBfaXNGdWxsV2lkdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0Z1bGxXaWR0aFwiKSk7XG5cbnZhciBfaXNIYWxmV2lkdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0hhbGZXaWR0aFwiKSk7XG5cbnZhciBfaXNWYXJpYWJsZVdpZHRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNWYXJpYWJsZVdpZHRoXCIpKTtcblxudmFyIF9pc011bHRpYnl0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzTXVsdGlieXRlXCIpKTtcblxudmFyIF9pc1NlbVZlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzU2VtVmVyXCIpKTtcblxudmFyIF9pc1N1cnJvZ2F0ZVBhaXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc1N1cnJvZ2F0ZVBhaXJcIikpO1xuXG52YXIgX2lzSW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJbnRcIikpO1xuXG52YXIgX2lzRmxvYXQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9saWIvaXNGbG9hdFwiKSk7XG5cbnZhciBfaXNEZWNpbWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNEZWNpbWFsXCIpKTtcblxudmFyIF9pc0hleGFkZWNpbWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNIZXhhZGVjaW1hbFwiKSk7XG5cbnZhciBfaXNPY3RhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzT2N0YWxcIikpO1xuXG52YXIgX2lzRGl2aXNpYmxlQnkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0RpdmlzaWJsZUJ5XCIpKTtcblxudmFyIF9pc0hleENvbG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNIZXhDb2xvclwiKSk7XG5cbnZhciBfaXNSZ2JDb2xvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzUmdiQ29sb3JcIikpO1xuXG52YXIgX2lzSFNMID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNIU0xcIikpO1xuXG52YXIgX2lzSVNSQyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSVNSQ1wiKSk7XG5cbnZhciBfaXNJQkFOID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vbGliL2lzSUJBTlwiKSk7XG5cbnZhciBfaXNCSUMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0JJQ1wiKSk7XG5cbnZhciBfaXNNRCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzTUQ1XCIpKTtcblxudmFyIF9pc0hhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0hhc2hcIikpO1xuXG52YXIgX2lzSldUID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNKV1RcIikpO1xuXG52YXIgX2lzSlNPTiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSlNPTlwiKSk7XG5cbnZhciBfaXNFbXB0eSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzRW1wdHlcIikpO1xuXG52YXIgX2lzTGVuZ3RoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNMZW5ndGhcIikpO1xuXG52YXIgX2lzQnl0ZUxlbmd0aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzQnl0ZUxlbmd0aFwiKSk7XG5cbnZhciBfaXNVVUlEID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNVVUlEXCIpKTtcblxudmFyIF9pc01vbmdvSWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc01vbmdvSWRcIikpO1xuXG52YXIgX2lzQWZ0ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0FmdGVyXCIpKTtcblxudmFyIF9pc0JlZm9yZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzQmVmb3JlXCIpKTtcblxudmFyIF9pc0luID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJblwiKSk7XG5cbnZhciBfaXNDcmVkaXRDYXJkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNDcmVkaXRDYXJkXCIpKTtcblxudmFyIF9pc0lkZW50aXR5Q2FyZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSWRlbnRpdHlDYXJkXCIpKTtcblxudmFyIF9pc0VBTiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzRUFOXCIpKTtcblxudmFyIF9pc0lTSU4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0lTSU5cIikpO1xuXG52YXIgX2lzSVNCTiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSVNCTlwiKSk7XG5cbnZhciBfaXNJU1NOID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJU1NOXCIpKTtcblxudmFyIF9pc1RheElEID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNUYXhJRFwiKSk7XG5cbnZhciBfaXNNb2JpbGVQaG9uZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2xpYi9pc01vYmlsZVBob25lXCIpKTtcblxudmFyIF9pc0V0aGVyZXVtQWRkcmVzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzRXRoZXJldW1BZGRyZXNzXCIpKTtcblxudmFyIF9pc0N1cnJlbmN5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNDdXJyZW5jeVwiKSk7XG5cbnZhciBfaXNCdGNBZGRyZXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNCdGNBZGRyZXNzXCIpKTtcblxudmFyIF9pc0lTTyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSVNPODYwMVwiKSk7XG5cbnZhciBfaXNSRkMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc1JGQzMzMzlcIikpO1xuXG52YXIgX2lzSVNPMzE2NjFBbHBoYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSVNPMzE2NjFBbHBoYTJcIikpO1xuXG52YXIgX2lzSVNPMzE2NjFBbHBoYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0lTTzMxNjYxQWxwaGEzXCIpKTtcblxudmFyIF9pc0lTTzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0lTTzQyMTdcIikpO1xuXG52YXIgX2lzQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzQmFzZTMyXCIpKTtcblxudmFyIF9pc0Jhc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNCYXNlNThcIikpO1xuXG52YXIgX2lzQmFzZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0Jhc2U2NFwiKSk7XG5cbnZhciBfaXNEYXRhVVJJID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNEYXRhVVJJXCIpKTtcblxudmFyIF9pc01hZ25ldFVSSSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzTWFnbmV0VVJJXCIpKTtcblxudmFyIF9pc01pbWVUeXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNNaW1lVHlwZVwiKSk7XG5cbnZhciBfaXNMYXRMb25nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNMYXRMb25nXCIpKTtcblxudmFyIF9pc1Bvc3RhbENvZGUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9saWIvaXNQb3N0YWxDb2RlXCIpKTtcblxudmFyIF9sdHJpbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2x0cmltXCIpKTtcblxudmFyIF9ydHJpbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL3J0cmltXCIpKTtcblxudmFyIF90cmltID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvdHJpbVwiKSk7XG5cbnZhciBfZXNjYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvZXNjYXBlXCIpKTtcblxudmFyIF91bmVzY2FwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL3VuZXNjYXBlXCIpKTtcblxudmFyIF9zdHJpcExvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL3N0cmlwTG93XCIpKTtcblxudmFyIF93aGl0ZWxpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi93aGl0ZWxpc3RcIikpO1xuXG52YXIgX2JsYWNrbGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2JsYWNrbGlzdFwiKSk7XG5cbnZhciBfaXNXaGl0ZWxpc3RlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzV2hpdGVsaXN0ZWRcIikpO1xuXG52YXIgX25vcm1hbGl6ZUVtYWlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvbm9ybWFsaXplRW1haWxcIikpO1xuXG52YXIgX2lzU2x1ZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzU2x1Z1wiKSk7XG5cbnZhciBfaXNMaWNlbnNlUGxhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0xpY2Vuc2VQbGF0ZVwiKSk7XG5cbnZhciBfaXNTdHJvbmdQYXNzd29yZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzU3Ryb25nUGFzc3dvcmRcIikpO1xuXG52YXIgX2lzVkFUID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNWQVRcIikpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdmVyc2lvbiA9ICcxMy43LjAnO1xudmFyIHZhbGlkYXRvciA9IHtcbiAgdmVyc2lvbjogdmVyc2lvbixcbiAgdG9EYXRlOiBfdG9EYXRlLmRlZmF1bHQsXG4gIHRvRmxvYXQ6IF90b0Zsb2F0LmRlZmF1bHQsXG4gIHRvSW50OiBfdG9JbnQuZGVmYXVsdCxcbiAgdG9Cb29sZWFuOiBfdG9Cb29sZWFuLmRlZmF1bHQsXG4gIGVxdWFsczogX2VxdWFscy5kZWZhdWx0LFxuICBjb250YWluczogX2NvbnRhaW5zLmRlZmF1bHQsXG4gIG1hdGNoZXM6IF9tYXRjaGVzLmRlZmF1bHQsXG4gIGlzRW1haWw6IF9pc0VtYWlsLmRlZmF1bHQsXG4gIGlzVVJMOiBfaXNVUkwuZGVmYXVsdCxcbiAgaXNNQUNBZGRyZXNzOiBfaXNNQUNBZGRyZXNzLmRlZmF1bHQsXG4gIGlzSVA6IF9pc0lQLmRlZmF1bHQsXG4gIGlzSVBSYW5nZTogX2lzSVBSYW5nZS5kZWZhdWx0LFxuICBpc0ZRRE46IF9pc0ZRRE4uZGVmYXVsdCxcbiAgaXNCb29sZWFuOiBfaXNCb29sZWFuLmRlZmF1bHQsXG4gIGlzSUJBTjogX2lzSUJBTi5kZWZhdWx0LFxuICBpc0JJQzogX2lzQklDLmRlZmF1bHQsXG4gIGlzQWxwaGE6IF9pc0FscGhhLmRlZmF1bHQsXG4gIGlzQWxwaGFMb2NhbGVzOiBfaXNBbHBoYS5sb2NhbGVzLFxuICBpc0FscGhhbnVtZXJpYzogX2lzQWxwaGFudW1lcmljLmRlZmF1bHQsXG4gIGlzQWxwaGFudW1lcmljTG9jYWxlczogX2lzQWxwaGFudW1lcmljLmxvY2FsZXMsXG4gIGlzTnVtZXJpYzogX2lzTnVtZXJpYy5kZWZhdWx0LFxuICBpc1Bhc3Nwb3J0TnVtYmVyOiBfaXNQYXNzcG9ydE51bWJlci5kZWZhdWx0LFxuICBpc1BvcnQ6IF9pc1BvcnQuZGVmYXVsdCxcbiAgaXNMb3dlcmNhc2U6IF9pc0xvd2VyY2FzZS5kZWZhdWx0LFxuICBpc1VwcGVyY2FzZTogX2lzVXBwZXJjYXNlLmRlZmF1bHQsXG4gIGlzQXNjaWk6IF9pc0FzY2lpLmRlZmF1bHQsXG4gIGlzRnVsbFdpZHRoOiBfaXNGdWxsV2lkdGguZGVmYXVsdCxcbiAgaXNIYWxmV2lkdGg6IF9pc0hhbGZXaWR0aC5kZWZhdWx0LFxuICBpc1ZhcmlhYmxlV2lkdGg6IF9pc1ZhcmlhYmxlV2lkdGguZGVmYXVsdCxcbiAgaXNNdWx0aWJ5dGU6IF9pc011bHRpYnl0ZS5kZWZhdWx0LFxuICBpc1NlbVZlcjogX2lzU2VtVmVyLmRlZmF1bHQsXG4gIGlzU3Vycm9nYXRlUGFpcjogX2lzU3Vycm9nYXRlUGFpci5kZWZhdWx0LFxuICBpc0ludDogX2lzSW50LmRlZmF1bHQsXG4gIGlzSU1FSTogX2lzSU1FSS5kZWZhdWx0LFxuICBpc0Zsb2F0OiBfaXNGbG9hdC5kZWZhdWx0LFxuICBpc0Zsb2F0TG9jYWxlczogX2lzRmxvYXQubG9jYWxlcyxcbiAgaXNEZWNpbWFsOiBfaXNEZWNpbWFsLmRlZmF1bHQsXG4gIGlzSGV4YWRlY2ltYWw6IF9pc0hleGFkZWNpbWFsLmRlZmF1bHQsXG4gIGlzT2N0YWw6IF9pc09jdGFsLmRlZmF1bHQsXG4gIGlzRGl2aXNpYmxlQnk6IF9pc0RpdmlzaWJsZUJ5LmRlZmF1bHQsXG4gIGlzSGV4Q29sb3I6IF9pc0hleENvbG9yLmRlZmF1bHQsXG4gIGlzUmdiQ29sb3I6IF9pc1JnYkNvbG9yLmRlZmF1bHQsXG4gIGlzSFNMOiBfaXNIU0wuZGVmYXVsdCxcbiAgaXNJU1JDOiBfaXNJU1JDLmRlZmF1bHQsXG4gIGlzTUQ1OiBfaXNNRC5kZWZhdWx0LFxuICBpc0hhc2g6IF9pc0hhc2guZGVmYXVsdCxcbiAgaXNKV1Q6IF9pc0pXVC5kZWZhdWx0LFxuICBpc0pTT046IF9pc0pTT04uZGVmYXVsdCxcbiAgaXNFbXB0eTogX2lzRW1wdHkuZGVmYXVsdCxcbiAgaXNMZW5ndGg6IF9pc0xlbmd0aC5kZWZhdWx0LFxuICBpc0xvY2FsZTogX2lzTG9jYWxlLmRlZmF1bHQsXG4gIGlzQnl0ZUxlbmd0aDogX2lzQnl0ZUxlbmd0aC5kZWZhdWx0LFxuICBpc1VVSUQ6IF9pc1VVSUQuZGVmYXVsdCxcbiAgaXNNb25nb0lkOiBfaXNNb25nb0lkLmRlZmF1bHQsXG4gIGlzQWZ0ZXI6IF9pc0FmdGVyLmRlZmF1bHQsXG4gIGlzQmVmb3JlOiBfaXNCZWZvcmUuZGVmYXVsdCxcbiAgaXNJbjogX2lzSW4uZGVmYXVsdCxcbiAgaXNDcmVkaXRDYXJkOiBfaXNDcmVkaXRDYXJkLmRlZmF1bHQsXG4gIGlzSWRlbnRpdHlDYXJkOiBfaXNJZGVudGl0eUNhcmQuZGVmYXVsdCxcbiAgaXNFQU46IF9pc0VBTi5kZWZhdWx0LFxuICBpc0lTSU46IF9pc0lTSU4uZGVmYXVsdCxcbiAgaXNJU0JOOiBfaXNJU0JOLmRlZmF1bHQsXG4gIGlzSVNTTjogX2lzSVNTTi5kZWZhdWx0LFxuICBpc01vYmlsZVBob25lOiBfaXNNb2JpbGVQaG9uZS5kZWZhdWx0LFxuICBpc01vYmlsZVBob25lTG9jYWxlczogX2lzTW9iaWxlUGhvbmUubG9jYWxlcyxcbiAgaXNQb3N0YWxDb2RlOiBfaXNQb3N0YWxDb2RlLmRlZmF1bHQsXG4gIGlzUG9zdGFsQ29kZUxvY2FsZXM6IF9pc1Bvc3RhbENvZGUubG9jYWxlcyxcbiAgaXNFdGhlcmV1bUFkZHJlc3M6IF9pc0V0aGVyZXVtQWRkcmVzcy5kZWZhdWx0LFxuICBpc0N1cnJlbmN5OiBfaXNDdXJyZW5jeS5kZWZhdWx0LFxuICBpc0J0Y0FkZHJlc3M6IF9pc0J0Y0FkZHJlc3MuZGVmYXVsdCxcbiAgaXNJU084NjAxOiBfaXNJU08uZGVmYXVsdCxcbiAgaXNSRkMzMzM5OiBfaXNSRkMuZGVmYXVsdCxcbiAgaXNJU08zMTY2MUFscGhhMjogX2lzSVNPMzE2NjFBbHBoYS5kZWZhdWx0LFxuICBpc0lTTzMxNjYxQWxwaGEzOiBfaXNJU08zMTY2MUFscGhhMi5kZWZhdWx0LFxuICBpc0lTTzQyMTc6IF9pc0lTTzIuZGVmYXVsdCxcbiAgaXNCYXNlMzI6IF9pc0Jhc2UuZGVmYXVsdCxcbiAgaXNCYXNlNTg6IF9pc0Jhc2UyLmRlZmF1bHQsXG4gIGlzQmFzZTY0OiBfaXNCYXNlMy5kZWZhdWx0LFxuICBpc0RhdGFVUkk6IF9pc0RhdGFVUkkuZGVmYXVsdCxcbiAgaXNNYWduZXRVUkk6IF9pc01hZ25ldFVSSS5kZWZhdWx0LFxuICBpc01pbWVUeXBlOiBfaXNNaW1lVHlwZS5kZWZhdWx0LFxuICBpc0xhdExvbmc6IF9pc0xhdExvbmcuZGVmYXVsdCxcbiAgbHRyaW06IF9sdHJpbS5kZWZhdWx0LFxuICBydHJpbTogX3J0cmltLmRlZmF1bHQsXG4gIHRyaW06IF90cmltLmRlZmF1bHQsXG4gIGVzY2FwZTogX2VzY2FwZS5kZWZhdWx0LFxuICB1bmVzY2FwZTogX3VuZXNjYXBlLmRlZmF1bHQsXG4gIHN0cmlwTG93OiBfc3RyaXBMb3cuZGVmYXVsdCxcbiAgd2hpdGVsaXN0OiBfd2hpdGVsaXN0LmRlZmF1bHQsXG4gIGJsYWNrbGlzdDogX2JsYWNrbGlzdC5kZWZhdWx0LFxuICBpc1doaXRlbGlzdGVkOiBfaXNXaGl0ZWxpc3RlZC5kZWZhdWx0LFxuICBub3JtYWxpemVFbWFpbDogX25vcm1hbGl6ZUVtYWlsLmRlZmF1bHQsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyxcbiAgaXNTbHVnOiBfaXNTbHVnLmRlZmF1bHQsXG4gIGlzU3Ryb25nUGFzc3dvcmQ6IF9pc1N0cm9uZ1Bhc3N3b3JkLmRlZmF1bHQsXG4gIGlzVGF4SUQ6IF9pc1RheElELmRlZmF1bHQsXG4gIGlzRGF0ZTogX2lzRGF0ZS5kZWZhdWx0LFxuICBpc0xpY2Vuc2VQbGF0ZTogX2lzTGljZW5zZVBsYXRlLmRlZmF1bHQsXG4gIGlzVkFUOiBfaXNWQVQuZGVmYXVsdCxcbiAgaWJhbkxvY2FsZXM6IF9pc0lCQU4ubG9jYWxlc1xufTtcbnZhciBfZGVmYXVsdCA9IHZhbGlkYXRvcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jb21tYURlY2ltYWwgPSBleHBvcnRzLmRvdERlY2ltYWwgPSBleHBvcnRzLmZhcnNpTG9jYWxlcyA9IGV4cG9ydHMuYXJhYmljTG9jYWxlcyA9IGV4cG9ydHMuZW5nbGlzaExvY2FsZXMgPSBleHBvcnRzLmRlY2ltYWwgPSBleHBvcnRzLmFscGhhbnVtZXJpYyA9IGV4cG9ydHMuYWxwaGEgPSB2b2lkIDA7XG52YXIgYWxwaGEgPSB7XG4gICdlbi1VUyc6IC9eW0EtWl0rJC9pLFxuICAnYXotQVonOiAvXltBLVZYWVrDh8aPxJ7EsMSxw5bFnsOcXSskL2ksXG4gICdiZy1CRyc6IC9eW9CQLdCvXSskL2ksXG4gICdjcy1DWic6IC9eW0EtWsOBxIzEjsOJxJrDjcWHw5PFmMWgxaTDmsWuw53FvV0rJC9pLFxuICAnZGEtREsnOiAvXltBLVrDhsOYw4VdKyQvaSxcbiAgJ2RlLURFJzogL15bQS1aw4TDlsOcw59dKyQvaSxcbiAgJ2VsLUdSJzogL15bzpEtz45dKyQvaSxcbiAgJ2VzLUVTJzogL15bQS1aw4HDicONw5HDk8Oaw5xdKyQvaSxcbiAgJ2ZhLUlSJzogL15b2KfYqNm+2KrYq9is2obYrdiu2K/YsNix2LLamNiz2LTYtdi22LfYuNi52LrZgdmC2qnar9mE2YXZhtmI2YfbjF0rJC9pLFxuICAnZmktRkknOiAvXltBLVrDhcOEw5ZdKyQvaSxcbiAgJ2ZyLUZSJzogL15bQS1aw4DDgsOGw4fDicOIw4rDi8OPw47DlMWSw5nDm8OcxbhdKyQvaSxcbiAgJ2l0LUlUJzogL15bQS1aw4DDicOIw4zDjsOTw5LDmV0rJC9pLFxuICAnbmItTk8nOiAvXltBLVrDhsOYw4VdKyQvaSxcbiAgJ25sLU5MJzogL15bQS1aw4HDicOLw4/Dk8OWw5zDml0rJC9pLFxuICAnbm4tTk8nOiAvXltBLVrDhsOYw4VdKyQvaSxcbiAgJ2h1LUhVJzogL15bQS1aw4HDicONw5PDlsWQw5rDnMWwXSskL2ksXG4gICdwbC1QTCc6IC9eW0EtWsSExIbEmMWaxYHFg8OTxbvFuV0rJC9pLFxuICAncHQtUFQnOiAvXltBLVrDg8OBw4DDgsOEw4fDicOKw4vDjcOPw5XDk8OUw5bDmsOcXSskL2ksXG4gICdydS1SVSc6IC9eW9CQLdCv0IFdKyQvaSxcbiAgJ3NsLVNJJzogL15bQS1axIzEhsSQxaDFvV0rJC9pLFxuICAnc2stU0snOiAvXltBLVrDgcSMxI7DicONxYfDk8WgxaTDmsOdxb3EucWUxL3DhMOUXSskL2ksXG4gICdzci1SU0BsYXRpbic6IC9eW0EtWsSMxIbFvcWgxJBdKyQvaSxcbiAgJ3NyLVJTJzogL15b0JAt0K/QgtCI0InQitCL0I9dKyQvaSxcbiAgJ3N2LVNFJzogL15bQS1aw4XDhMOWXSskL2ksXG4gICd0aC1USCc6IC9eW+C4gS3guZBcXHNdKyQvaSxcbiAgJ3RyLVRSJzogL15bQS1aw4fEnsSwxLHDlsWew5xdKyQvaSxcbiAgJ3VrLVVBJzogL15b0JAt0KnQrNCu0K/QhEnQh9KQ0ZZdKyQvaSxcbiAgJ3ZpLVZOJzogL15bQS1aw4DDgeG6oOG6osODw4LhuqbhuqThuqzhuqjhuqrEguG6sOG6ruG6tuG6suG6tMSQw4jDieG6uOG6uuG6vMOK4buA4bq+4buG4buC4buEw4zDjeG7iuG7iMSow5LDk+G7jOG7jsOVw5Thu5Lhu5Dhu5jhu5Thu5bGoOG7nOG7muG7ouG7nuG7oMOZw5rhu6Thu6bFqMav4buq4buo4buw4bus4buu4buyw53hu7Thu7bhu7hdKyQvaSxcbiAgJ2t1LUlRJzogL15b2KbYp9io2b7Yqtis2obYrdiu2K/YsdqV2LLamNiz2LTYudi62YHapNmC2qnar9mE2rXZhdmG2Yjbhtq+25XbjNuO2YrYt9ik2KvYotil2KPZg9i22LXYqdi42LBdKyQvaSxcbiAgYXI6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsF0rJC8sXG4gIGhlOiAvXlvXkC3Xql0rJC8sXG4gIGZhOiAvXlsn2KLYp9ih2KPYpNim2KjZvtiq2KvYrNqG2K3Yrtiv2LDYsdiy2pjYs9i02LXYtti32LjYudi62YHZgtqp2q/ZhNmF2YbZiNmH2KnbjCddKyQvaSxcbiAgJ2hpLUlOJzogL15bXFx1MDkwMC1cXHUwOTYxXStbXFx1MDk3Mi1cXHUwOTdGXSokL2lcbn07XG5leHBvcnRzLmFscGhhID0gYWxwaGE7XG52YXIgYWxwaGFudW1lcmljID0ge1xuICAnZW4tVVMnOiAvXlswLTlBLVpdKyQvaSxcbiAgJ2F6LUFaJzogL15bMC05QS1WWFlaw4fGj8SexLDEscOWxZ7DnF0rJC9pLFxuICAnYmctQkcnOiAvXlswLTnQkC3Qr10rJC9pLFxuICAnY3MtQ1onOiAvXlswLTlBLVrDgcSMxI7DicSaw43Fh8OTxZjFoMWkw5rFrsOdxb1dKyQvaSxcbiAgJ2RhLURLJzogL15bMC05QS1aw4bDmMOFXSskL2ksXG4gICdkZS1ERSc6IC9eWzAtOUEtWsOEw5bDnMOfXSskL2ksXG4gICdlbC1HUic6IC9eWzAtOc6RLc+JXSskL2ksXG4gICdlcy1FUyc6IC9eWzAtOUEtWsOBw4nDjcORw5PDmsOcXSskL2ksXG4gICdmaS1GSSc6IC9eWzAtOUEtWsOFw4TDll0rJC9pLFxuICAnZnItRlInOiAvXlswLTlBLVrDgMOCw4bDh8OJw4jDisOLw4/DjsOUxZLDmcObw5zFuF0rJC9pLFxuICAnaXQtSVQnOiAvXlswLTlBLVrDgMOJw4jDjMOOw5PDksOZXSskL2ksXG4gICdodS1IVSc6IC9eWzAtOUEtWsOBw4nDjcOTw5bFkMOaw5zFsF0rJC9pLFxuICAnbmItTk8nOiAvXlswLTlBLVrDhsOYw4VdKyQvaSxcbiAgJ25sLU5MJzogL15bMC05QS1aw4HDicOLw4/Dk8OWw5zDml0rJC9pLFxuICAnbm4tTk8nOiAvXlswLTlBLVrDhsOYw4VdKyQvaSxcbiAgJ3BsLVBMJzogL15bMC05QS1axITEhsSYxZrFgcWDw5PFu8W5XSskL2ksXG4gICdwdC1QVCc6IC9eWzAtOUEtWsODw4HDgMOCw4TDh8OJw4rDi8ONw4/DlcOTw5TDlsOaw5xdKyQvaSxcbiAgJ3J1LVJVJzogL15bMC050JAt0K/QgV0rJC9pLFxuICAnc2wtU0knOiAvXlswLTlBLVrEjMSGxJDFoMW9XSskL2ksXG4gICdzay1TSyc6IC9eWzAtOUEtWsOBxIzEjsOJw43Fh8OTxaDFpMOaw53FvcS5xZTEvcOEw5RdKyQvaSxcbiAgJ3NyLVJTQGxhdGluJzogL15bMC05QS1axIzEhsW9xaDEkF0rJC9pLFxuICAnc3ItUlMnOiAvXlswLTnQkC3Qr9CC0IjQidCK0IvQj10rJC9pLFxuICAnc3YtU0UnOiAvXlswLTlBLVrDhcOEw5ZdKyQvaSxcbiAgJ3RoLVRIJzogL15b4LiBLeC5mVxcc10rJC9pLFxuICAndHItVFInOiAvXlswLTlBLVrDh8SexLDEscOWxZ7DnF0rJC9pLFxuICAndWstVUEnOiAvXlswLTnQkC3QqdCs0K7Qr9CESdCH0pDRll0rJC9pLFxuICAna3UtSVEnOiAvXlvZoNmh2aLZo9mk2aXZptmn2ajZqTAtOdim2KfYqNm+2KrYrNqG2K3Yrtiv2LHaldiy2pjYs9i02LnYutmB2qTZgtqp2q/ZhNq12YXZhtmI24bavtuV24zbjtmK2LfYpNir2KLYpdij2YPYtti12KnYuNiwXSskL2ksXG4gICd2aS1WTic6IC9eWzAtOUEtWsOAw4HhuqDhuqLDg8OC4bqm4bqk4bqs4bqo4bqqxILhurDhuq7hurbhurLhurTEkMOIw4nhurjhurrhurzDiuG7gOG6vuG7huG7guG7hMOMw43hu4rhu4jEqMOSw5Phu4zhu47DlcOU4buS4buQ4buY4buU4buWxqDhu5zhu5rhu6Lhu57hu6DDmcOa4buk4bumxajGr+G7quG7qOG7sOG7rOG7ruG7ssOd4bu04bu24bu4XSskL2ksXG4gIGFyOiAvXlvZoNmh2aLZo9mk2aXZptmn2ajZqTAtOdih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsF0rJC8sXG4gIGhlOiAvXlswLTnXkC3Xql0rJC8sXG4gIGZhOiAvXlsnMC052KLYp9ih2KPYpNim2KjZvtiq2KvYrNqG2K3Yrtiv2LDYsdiy2pjYs9i02LXYtti32LjYudi62YHZgtqp2q/ZhNmF2YbZiNmH2KnbjNux27Lbs9u027Xbttu327jbuduwJ10rJC9pLFxuICAnaGktSU4nOiAvXltcXHUwOTAwLVxcdTA5NjNdK1tcXHUwOTY2LVxcdTA5N0ZdKiQvaVxufTtcbmV4cG9ydHMuYWxwaGFudW1lcmljID0gYWxwaGFudW1lcmljO1xudmFyIGRlY2ltYWwgPSB7XG4gICdlbi1VUyc6ICcuJyxcbiAgYXI6ICfZqydcbn07XG5leHBvcnRzLmRlY2ltYWwgPSBkZWNpbWFsO1xudmFyIGVuZ2xpc2hMb2NhbGVzID0gWydBVScsICdHQicsICdISycsICdJTicsICdOWicsICdaQScsICdaTSddO1xuZXhwb3J0cy5lbmdsaXNoTG9jYWxlcyA9IGVuZ2xpc2hMb2NhbGVzO1xuXG5mb3IgKHZhciBsb2NhbGUsIGkgPSAwOyBpIDwgZW5nbGlzaExvY2FsZXMubGVuZ3RoOyBpKyspIHtcbiAgbG9jYWxlID0gXCJlbi1cIi5jb25jYXQoZW5nbGlzaExvY2FsZXNbaV0pO1xuICBhbHBoYVtsb2NhbGVdID0gYWxwaGFbJ2VuLVVTJ107XG4gIGFscGhhbnVtZXJpY1tsb2NhbGVdID0gYWxwaGFudW1lcmljWydlbi1VUyddO1xuICBkZWNpbWFsW2xvY2FsZV0gPSBkZWNpbWFsWydlbi1VUyddO1xufSAvLyBTb3VyY2U6IGh0dHA6Ly93d3cubG9jYWxlcGxhbmV0LmNvbS9qYXZhL1xuXG5cbnZhciBhcmFiaWNMb2NhbGVzID0gWydBRScsICdCSCcsICdEWicsICdFRycsICdJUScsICdKTycsICdLVycsICdMQicsICdMWScsICdNQScsICdRTScsICdRQScsICdTQScsICdTRCcsICdTWScsICdUTicsICdZRSddO1xuZXhwb3J0cy5hcmFiaWNMb2NhbGVzID0gYXJhYmljTG9jYWxlcztcblxuZm9yICh2YXIgX2xvY2FsZSwgX2kgPSAwOyBfaSA8IGFyYWJpY0xvY2FsZXMubGVuZ3RoOyBfaSsrKSB7XG4gIF9sb2NhbGUgPSBcImFyLVwiLmNvbmNhdChhcmFiaWNMb2NhbGVzW19pXSk7XG4gIGFscGhhW19sb2NhbGVdID0gYWxwaGEuYXI7XG4gIGFscGhhbnVtZXJpY1tfbG9jYWxlXSA9IGFscGhhbnVtZXJpYy5hcjtcbiAgZGVjaW1hbFtfbG9jYWxlXSA9IGRlY2ltYWwuYXI7XG59XG5cbnZhciBmYXJzaUxvY2FsZXMgPSBbJ0lSJywgJ0FGJ107XG5leHBvcnRzLmZhcnNpTG9jYWxlcyA9IGZhcnNpTG9jYWxlcztcblxuZm9yICh2YXIgX2xvY2FsZTIsIF9pMiA9IDA7IF9pMiA8IGZhcnNpTG9jYWxlcy5sZW5ndGg7IF9pMisrKSB7XG4gIF9sb2NhbGUyID0gXCJmYS1cIi5jb25jYXQoZmFyc2lMb2NhbGVzW19pMl0pO1xuICBhbHBoYW51bWVyaWNbX2xvY2FsZTJdID0gYWxwaGFudW1lcmljLmZhO1xuICBkZWNpbWFsW19sb2NhbGUyXSA9IGRlY2ltYWwuYXI7XG59IC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVjaW1hbF9tYXJrXG5cblxudmFyIGRvdERlY2ltYWwgPSBbJ2FyLUVHJywgJ2FyLUxCJywgJ2FyLUxZJ107XG5leHBvcnRzLmRvdERlY2ltYWwgPSBkb3REZWNpbWFsO1xudmFyIGNvbW1hRGVjaW1hbCA9IFsnYmctQkcnLCAnY3MtQ1onLCAnZGEtREsnLCAnZGUtREUnLCAnZWwtR1InLCAnZW4tWk0nLCAnZXMtRVMnLCAnZnItQ0EnLCAnZnItRlInLCAnaWQtSUQnLCAnaXQtSVQnLCAna3UtSVEnLCAnaGktSU4nLCAnaHUtSFUnLCAnbmItTk8nLCAnbm4tTk8nLCAnbmwtTkwnLCAncGwtUEwnLCAncHQtUFQnLCAncnUtUlUnLCAnc2wtU0knLCAnc3ItUlNAbGF0aW4nLCAnc3ItUlMnLCAnc3YtU0UnLCAndHItVFInLCAndWstVUEnLCAndmktVk4nXTtcbmV4cG9ydHMuY29tbWFEZWNpbWFsID0gY29tbWFEZWNpbWFsO1xuXG5mb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBkb3REZWNpbWFsLmxlbmd0aDsgX2kzKyspIHtcbiAgZGVjaW1hbFtkb3REZWNpbWFsW19pM11dID0gZGVjaW1hbFsnZW4tVVMnXTtcbn1cblxuZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgY29tbWFEZWNpbWFsLmxlbmd0aDsgX2k0KyspIHtcbiAgZGVjaW1hbFtjb21tYURlY2ltYWxbX2k0XV0gPSAnLCc7XG59XG5cbmFscGhhWydmci1DQSddID0gYWxwaGFbJ2ZyLUZSJ107XG5hbHBoYW51bWVyaWNbJ2ZyLUNBJ10gPSBhbHBoYW51bWVyaWNbJ2ZyLUZSJ107XG5hbHBoYVsncHQtQlInXSA9IGFscGhhWydwdC1QVCddO1xuYWxwaGFudW1lcmljWydwdC1CUiddID0gYWxwaGFudW1lcmljWydwdC1QVCddO1xuZGVjaW1hbFsncHQtQlInXSA9IGRlY2ltYWxbJ3B0LVBUJ107IC8vIHNlZSAjODYyXG5cbmFscGhhWydwbC1QbCddID0gYWxwaGFbJ3BsLVBMJ107XG5hbHBoYW51bWVyaWNbJ3BsLVBsJ10gPSBhbHBoYW51bWVyaWNbJ3BsLVBMJ107XG5kZWNpbWFsWydwbC1QbCddID0gZGVjaW1hbFsncGwtUEwnXTsgLy8gc2VlICMxNDU1XG5cbmFscGhhWydmYS1BRiddID0gYWxwaGEuZmE7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBibGFja2xpc3Q7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGJsYWNrbGlzdChzdHIsIGNoYXJzKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiW1wiLmNvbmNhdChjaGFycywgXCJdK1wiKSwgJ2cnKSwgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjb250YWlucztcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxudmFyIF90b1N0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC90b1N0cmluZ1wiKSk7XG5cbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGVmYXVsQ29udGFpbnNPcHRpb25zID0ge1xuICBpZ25vcmVDYXNlOiBmYWxzZSxcbiAgbWluT2NjdXJyZW5jZXM6IDFcbn07XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHN0ciwgZWxlbSwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWxDb250YWluc09wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zLmlnbm9yZUNhc2UpIHtcbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkuc3BsaXQoKDAsIF90b1N0cmluZy5kZWZhdWx0KShlbGVtKS50b0xvd2VyQ2FzZSgpKS5sZW5ndGggPiBvcHRpb25zLm1pbk9jY3VycmVuY2VzO1xuICB9XG5cbiAgcmV0dXJuIHN0ci5zcGxpdCgoMCwgX3RvU3RyaW5nLmRlZmF1bHQpKGVsZW0pKS5sZW5ndGggPiBvcHRpb25zLm1pbk9jY3VycmVuY2VzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBlcXVhbHM7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGVxdWFscyhzdHIsIGNvbXBhcmlzb24pIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIHN0ciA9PT0gY29tcGFyaXNvbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXNjYXBlO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBlc2NhcGUoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvJy9nLCAnJiN4Mjc7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKS5yZXBsYWNlKC9cXC8vZywgJyYjeDJGOycpLnJlcGxhY2UoL1xcXFwvZywgJyYjeDVDOycpLnJlcGxhY2UoL2AvZywgJyYjOTY7Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQWZ0ZXI7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbnZhciBfdG9EYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90b0RhdGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc0FmdGVyKHN0cikge1xuICB2YXIgZGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogU3RyaW5nKG5ldyBEYXRlKCkpO1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgY29tcGFyaXNvbiA9ICgwLCBfdG9EYXRlLmRlZmF1bHQpKGRhdGUpO1xuICB2YXIgb3JpZ2luYWwgPSAoMCwgX3RvRGF0ZS5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gISEob3JpZ2luYWwgJiYgY29tcGFyaXNvbiAmJiBvcmlnaW5hbCA+IGNvbXBhcmlzb24pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0FscGhhO1xuZXhwb3J0cy5sb2NhbGVzID0gdm9pZCAwO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgX2FscGhhID0gcmVxdWlyZShcIi4vYWxwaGFcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzQWxwaGEoX3N0cikge1xuICB2YXIgbG9jYWxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnZW4tVVMnO1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKF9zdHIpO1xuICB2YXIgc3RyID0gX3N0cjtcbiAgdmFyIGlnbm9yZSA9IG9wdGlvbnMuaWdub3JlO1xuXG4gIGlmIChpZ25vcmUpIHtcbiAgICBpZiAoaWdub3JlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShpZ25vcmUsICcnKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpZ25vcmUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiW1wiLmNvbmNhdChpZ25vcmUucmVwbGFjZSgvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXFxcc10vZywgJ1xcXFwkJicpLCBcIl1cIiksICdnJyksICcnKTsgLy8gZXNjYXBlIHJlZ2V4IGZvciBpZ25vcmVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZ25vcmUgc2hvdWxkIGJlIGluc3RhbmNlIG9mIGEgU3RyaW5nIG9yIFJlZ0V4cCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsb2NhbGUgaW4gX2FscGhhLmFscGhhKSB7XG4gICAgcmV0dXJuIF9hbHBoYS5hbHBoYVtsb2NhbGVdLnRlc3Qoc3RyKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9jYWxlICdcIi5jb25jYXQobG9jYWxlLCBcIidcIikpO1xufVxuXG52YXIgbG9jYWxlcyA9IE9iamVjdC5rZXlzKF9hbHBoYS5hbHBoYSk7XG5leHBvcnRzLmxvY2FsZXMgPSBsb2NhbGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNBbHBoYW51bWVyaWM7XG5leHBvcnRzLmxvY2FsZXMgPSB2b2lkIDA7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbnZhciBfYWxwaGEgPSByZXF1aXJlKFwiLi9hbHBoYVwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaXNBbHBoYW51bWVyaWMoX3N0cikge1xuICB2YXIgbG9jYWxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnZW4tVVMnO1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKF9zdHIpO1xuICB2YXIgc3RyID0gX3N0cjtcbiAgdmFyIGlnbm9yZSA9IG9wdGlvbnMuaWdub3JlO1xuXG4gIGlmIChpZ25vcmUpIHtcbiAgICBpZiAoaWdub3JlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShpZ25vcmUsICcnKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpZ25vcmUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiW1wiLmNvbmNhdChpZ25vcmUucmVwbGFjZSgvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXFxcc10vZywgJ1xcXFwkJicpLCBcIl1cIiksICdnJyksICcnKTsgLy8gZXNjYXBlIHJlZ2V4IGZvciBpZ25vcmVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZ25vcmUgc2hvdWxkIGJlIGluc3RhbmNlIG9mIGEgU3RyaW5nIG9yIFJlZ0V4cCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsb2NhbGUgaW4gX2FscGhhLmFscGhhbnVtZXJpYykge1xuICAgIHJldHVybiBfYWxwaGEuYWxwaGFudW1lcmljW2xvY2FsZV0udGVzdChzdHIpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2NhbGUgJ1wiLmNvbmNhdChsb2NhbGUsIFwiJ1wiKSk7XG59XG5cbnZhciBsb2NhbGVzID0gT2JqZWN0LmtleXMoX2FscGhhLmFscGhhbnVtZXJpYyk7XG5leHBvcnRzLmxvY2FsZXMgPSBsb2NhbGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNBc2NpaTtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29udHJvbC1yZWdleCAqL1xudmFyIGFzY2lpID0gL15bXFx4MDAtXFx4N0ZdKyQvO1xuLyogZXNsaW50LWVuYWJsZSBuby1jb250cm9sLXJlZ2V4ICovXG5cbmZ1bmN0aW9uIGlzQXNjaWkoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBhc2NpaS50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQklDO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgX2lzSVNPMzE2NjFBbHBoYSA9IHJlcXVpcmUoXCIuL2lzSVNPMzE2NjFBbHBoYTJcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT185MzYyXG52YXIgaXNCSUNSZWcgPSAvXltBLVphLXpdezZ9W0EtWmEtejAtOV17Mn0oW0EtWmEtejAtOV17M30pPyQvO1xuXG5mdW5jdGlvbiBpc0JJQyhzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTsgLy8gdG9VcHBlckNhc2UoKSBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIGEgbmV3IG1ham9yIHZlcnNpb24gZ29lcyBvdXQgdGhhdCBjaGFuZ2VzXG4gIC8vIHRoZSByZWdleCB0byBbQS1aXSAocGVyIHRoZSBzcGVjKS5cblxuICBpZiAoIV9pc0lTTzMxNjYxQWxwaGEuQ291bnRyeUNvZGVzLmhhcyhzdHIuc2xpY2UoNCwgNikudG9VcHBlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNCSUNSZWcudGVzdChzdHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Jhc2UzMjtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGJhc2UzMiA9IC9eW0EtWjItN10rPSokLztcblxuZnVuY3Rpb24gaXNCYXNlMzIoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gIGlmIChsZW4gJSA4ID09PSAwICYmIGJhc2UzMi50ZXN0KHN0cikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNCYXNlNTg7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIEFjY2VwdGVkIGNoYXJzIC0gMTIzNDU2Nzg5QUJDREVGR0ggSktMTU4gUFFSU1RVVldYWVphYmNkZWZnaGlqayBtbm9wcXJzdHV2d3h5elxudmFyIGJhc2U1OFJlZyA9IC9eW0EtSEotTlAtWmEta20tejEtOV0qJC87XG5cbmZ1bmN0aW9uIGlzQmFzZTU4KHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuXG4gIGlmIChiYXNlNThSZWcudGVzdChzdHIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQmFzZTY0O1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG5vdEJhc2U2NCA9IC9bXkEtWjAtOStcXC89XS9pO1xudmFyIHVybFNhZmVCYXNlNjQgPSAvXltBLVowLTlfXFwtXSokL2k7XG52YXIgZGVmYXVsdEJhc2U2NE9wdGlvbnMgPSB7XG4gIHVybFNhZmU6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBpc0Jhc2U2NChzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UuZGVmYXVsdCkob3B0aW9ucywgZGVmYXVsdEJhc2U2NE9wdGlvbnMpO1xuICB2YXIgbGVuID0gc3RyLmxlbmd0aDtcblxuICBpZiAob3B0aW9ucy51cmxTYWZlKSB7XG4gICAgcmV0dXJuIHVybFNhZmVCYXNlNjQudGVzdChzdHIpO1xuICB9XG5cbiAgaWYgKGxlbiAlIDQgIT09IDAgfHwgbm90QmFzZTY0LnRlc3Qoc3RyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBmaXJzdFBhZGRpbmdDaGFyID0gc3RyLmluZGV4T2YoJz0nKTtcbiAgcmV0dXJuIGZpcnN0UGFkZGluZ0NoYXIgPT09IC0xIHx8IGZpcnN0UGFkZGluZ0NoYXIgPT09IGxlbiAtIDEgfHwgZmlyc3RQYWRkaW5nQ2hhciA9PT0gbGVuIC0gMiAmJiBzdHJbbGVuIC0gMV0gPT09ICc9Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNCZWZvcmU7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbnZhciBfdG9EYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90b0RhdGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc0JlZm9yZShzdHIpIHtcbiAgdmFyIGRhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFN0cmluZyhuZXcgRGF0ZSgpKTtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgdmFyIGNvbXBhcmlzb24gPSAoMCwgX3RvRGF0ZS5kZWZhdWx0KShkYXRlKTtcbiAgdmFyIG9yaWdpbmFsID0gKDAsIF90b0RhdGUuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuICEhKG9yaWdpbmFsICYmIGNvbXBhcmlzb24gJiYgb3JpZ2luYWwgPCBjb21wYXJpc29uKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNCb29sZWFuO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGxvb3NlOiBmYWxzZVxufTtcbnZhciBzdHJpY3RCb29sZWFucyA9IFsndHJ1ZScsICdmYWxzZScsICcxJywgJzAnXTtcbnZhciBsb29zZUJvb2xlYW5zID0gW10uY29uY2F0KHN0cmljdEJvb2xlYW5zLCBbJ3llcycsICdubyddKTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKHN0cikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdE9wdGlvbnM7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG5cbiAgaWYgKG9wdGlvbnMubG9vc2UpIHtcbiAgICByZXR1cm4gbG9vc2VCb29sZWFucy5pbmNsdWRlcyhzdHIudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICByZXR1cm4gc3RyaWN0Qm9vbGVhbnMuaW5jbHVkZXMoc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNCdGNBZGRyZXNzO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBzdXBwb3J0cyBCZWNoMzIgYWRkcmVzc2VzXG52YXIgYmVjaDMyID0gL14oYmMxKVthLXowLTldezI1LDM5fSQvO1xudmFyIGJhc2U1OCA9IC9eKDF8MylbQS1ISi1OUC1aYS1rbS16MS05XXsyNSwzOX0kLztcblxuZnVuY3Rpb24gaXNCdGNBZGRyZXNzKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpOyAvLyBjaGVjayBmb3IgYmVjaDMyXG5cbiAgaWYgKHN0ci5zdGFydHNXaXRoKCdiYzEnKSkge1xuICAgIHJldHVybiBiZWNoMzIudGVzdChzdHIpO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U1OC50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQnl0ZUxlbmd0aDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbmZ1bmN0aW9uIGlzQnl0ZUxlbmd0aChzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgdmFyIG1pbjtcbiAgdmFyIG1heDtcblxuICBpZiAoX3R5cGVvZihvcHRpb25zKSA9PT0gJ29iamVjdCcpIHtcbiAgICBtaW4gPSBvcHRpb25zLm1pbiB8fCAwO1xuICAgIG1heCA9IG9wdGlvbnMubWF4O1xuICB9IGVsc2Uge1xuICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5OiBpc0J5dGVMZW5ndGgoc3RyLCBtaW4gWywgbWF4XSlcbiAgICBtaW4gPSBhcmd1bWVudHNbMV07XG4gICAgbWF4ID0gYXJndW1lbnRzWzJdO1xuICB9XG5cbiAgdmFyIGxlbiA9IGVuY29kZVVSSShzdHIpLnNwbGl0KC8lLi58Li8pLmxlbmd0aCAtIDE7XG4gIHJldHVybiBsZW4gPj0gbWluICYmICh0eXBlb2YgbWF4ID09PSAndW5kZWZpbmVkJyB8fCBsZW4gPD0gbWF4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNDcmVkaXRDYXJkO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG52YXIgY3JlZGl0Q2FyZCA9IC9eKD86NFswLTldezEyfSg/OlswLTldezMsNn0pP3w1WzEtNV1bMC05XXsxNH18KDIyMlsxLTldfDIyWzMtOV1bMC05XXwyWzMtNl1bMC05XXsyfXwyN1swMV1bMC05XXwyNzIwKVswLTldezEyfXw2KD86MDExfDVbMC05XVswLTldKVswLTldezEyLDE1fXwzWzQ3XVswLTldezEzfXwzKD86MFswLTVdfFs2OF1bMC05XSlbMC05XXsxMX18KD86MjEzMXwxODAwfDM1XFxkezN9KVxcZHsxMX18NlsyN11bMC05XXsxNH18Xig4MVswLTldezE0LDE3fSkpJC87XG4vKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuZnVuY3Rpb24gaXNDcmVkaXRDYXJkKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgc2FuaXRpemVkID0gc3RyLnJlcGxhY2UoL1stIF0rL2csICcnKTtcblxuICBpZiAoIWNyZWRpdENhcmQudGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHN1bSA9IDA7XG4gIHZhciBkaWdpdDtcbiAgdmFyIHRtcE51bTtcbiAgdmFyIHNob3VsZERvdWJsZTtcblxuICBmb3IgKHZhciBpID0gc2FuaXRpemVkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgZGlnaXQgPSBzYW5pdGl6ZWQuc3Vic3RyaW5nKGksIGkgKyAxKTtcbiAgICB0bXBOdW0gPSBwYXJzZUludChkaWdpdCwgMTApO1xuXG4gICAgaWYgKHNob3VsZERvdWJsZSkge1xuICAgICAgdG1wTnVtICo9IDI7XG5cbiAgICAgIGlmICh0bXBOdW0gPj0gMTApIHtcbiAgICAgICAgc3VtICs9IHRtcE51bSAlIDEwICsgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1bSArPSB0bXBOdW07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1bSArPSB0bXBOdW07XG4gICAgfVxuXG4gICAgc2hvdWxkRG91YmxlID0gIXNob3VsZERvdWJsZTtcbiAgfVxuXG4gIHJldHVybiAhIShzdW0gJSAxMCA9PT0gMCA/IHNhbml0aXplZCA6IGZhbHNlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNDdXJyZW5jeTtcblxudmFyIF9tZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9tZXJnZVwiKSk7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGN1cnJlbmN5UmVnZXgob3B0aW9ucykge1xuICB2YXIgZGVjaW1hbF9kaWdpdHMgPSBcIlxcXFxke1wiLmNvbmNhdChvcHRpb25zLmRpZ2l0c19hZnRlcl9kZWNpbWFsWzBdLCBcIn1cIik7XG4gIG9wdGlvbnMuZGlnaXRzX2FmdGVyX2RlY2ltYWwuZm9yRWFjaChmdW5jdGlvbiAoZGlnaXQsIGluZGV4KSB7XG4gICAgaWYgKGluZGV4ICE9PSAwKSBkZWNpbWFsX2RpZ2l0cyA9IFwiXCIuY29uY2F0KGRlY2ltYWxfZGlnaXRzLCBcInxcXFxcZHtcIikuY29uY2F0KGRpZ2l0LCBcIn1cIik7XG4gIH0pO1xuICB2YXIgc3ltYm9sID0gXCIoXCIuY29uY2F0KG9wdGlvbnMuc3ltYm9sLnJlcGxhY2UoL1xcVy8sIGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIFwiXFxcXFwiLmNvbmNhdChtKTtcbiAgfSksIFwiKVwiKS5jb25jYXQob3B0aW9ucy5yZXF1aXJlX3N5bWJvbCA/ICcnIDogJz8nKSxcbiAgICAgIG5lZ2F0aXZlID0gJy0/JyxcbiAgICAgIHdob2xlX2RvbGxhcl9hbW91bnRfd2l0aG91dF9zZXAgPSAnWzEtOV1cXFxcZConLFxuICAgICAgd2hvbGVfZG9sbGFyX2Ftb3VudF93aXRoX3NlcCA9IFwiWzEtOV1cXFxcZHswLDJ9KFxcXFxcIi5jb25jYXQob3B0aW9ucy50aG91c2FuZHNfc2VwYXJhdG9yLCBcIlxcXFxkezN9KSpcIiksXG4gICAgICB2YWxpZF93aG9sZV9kb2xsYXJfYW1vdW50cyA9IFsnMCcsIHdob2xlX2RvbGxhcl9hbW91bnRfd2l0aG91dF9zZXAsIHdob2xlX2RvbGxhcl9hbW91bnRfd2l0aF9zZXBdLFxuICAgICAgd2hvbGVfZG9sbGFyX2Ftb3VudCA9IFwiKFwiLmNvbmNhdCh2YWxpZF93aG9sZV9kb2xsYXJfYW1vdW50cy5qb2luKCd8JyksIFwiKT9cIiksXG4gICAgICBkZWNpbWFsX2Ftb3VudCA9IFwiKFxcXFxcIi5jb25jYXQob3B0aW9ucy5kZWNpbWFsX3NlcGFyYXRvciwgXCIoXCIpLmNvbmNhdChkZWNpbWFsX2RpZ2l0cywgXCIpKVwiKS5jb25jYXQob3B0aW9ucy5yZXF1aXJlX2RlY2ltYWwgPyAnJyA6ICc/Jyk7XG4gIHZhciBwYXR0ZXJuID0gd2hvbGVfZG9sbGFyX2Ftb3VudCArIChvcHRpb25zLmFsbG93X2RlY2ltYWwgfHwgb3B0aW9ucy5yZXF1aXJlX2RlY2ltYWwgPyBkZWNpbWFsX2Ftb3VudCA6ICcnKTsgLy8gZGVmYXVsdCBpcyBuZWdhdGl2ZSBzaWduIGJlZm9yZSBzeW1ib2wsIGJ1dCB0aGVyZSBhcmUgdHdvIG90aGVyIG9wdGlvbnMgKGJlc2lkZXMgcGFyZW5zKVxuXG4gIGlmIChvcHRpb25zLmFsbG93X25lZ2F0aXZlcyAmJiAhb3B0aW9ucy5wYXJlbnNfZm9yX25lZ2F0aXZlcykge1xuICAgIGlmIChvcHRpb25zLm5lZ2F0aXZlX3NpZ25fYWZ0ZXJfZGlnaXRzKSB7XG4gICAgICBwYXR0ZXJuICs9IG5lZ2F0aXZlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5uZWdhdGl2ZV9zaWduX2JlZm9yZV9kaWdpdHMpIHtcbiAgICAgIHBhdHRlcm4gPSBuZWdhdGl2ZSArIHBhdHRlcm47XG4gICAgfVxuICB9IC8vIFNvdXRoIEFmcmljYW4gUmFuZCwgZm9yIGV4YW1wbGUsIHVzZXMgUiAxMjMgKHNwYWNlKSBhbmQgUi0xMjMgKG5vIHNwYWNlKVxuXG5cbiAgaWYgKG9wdGlvbnMuYWxsb3dfbmVnYXRpdmVfc2lnbl9wbGFjZWhvbGRlcikge1xuICAgIHBhdHRlcm4gPSBcIiggKD8hXFxcXC0pKT9cIi5jb25jYXQocGF0dGVybik7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5hbGxvd19zcGFjZV9hZnRlcl9zeW1ib2wpIHtcbiAgICBwYXR0ZXJuID0gXCIgP1wiLmNvbmNhdChwYXR0ZXJuKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLmFsbG93X3NwYWNlX2FmdGVyX2RpZ2l0cykge1xuICAgIHBhdHRlcm4gKz0gJyggKD8hJCkpPyc7XG4gIH1cblxuICBpZiAob3B0aW9ucy5zeW1ib2xfYWZ0ZXJfZGlnaXRzKSB7XG4gICAgcGF0dGVybiArPSBzeW1ib2w7XG4gIH0gZWxzZSB7XG4gICAgcGF0dGVybiA9IHN5bWJvbCArIHBhdHRlcm47XG4gIH1cblxuICBpZiAob3B0aW9ucy5hbGxvd19uZWdhdGl2ZXMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnNfZm9yX25lZ2F0aXZlcykge1xuICAgICAgcGF0dGVybiA9IFwiKFxcXFwoXCIuY29uY2F0KHBhdHRlcm4sIFwiXFxcXCl8XCIpLmNvbmNhdChwYXR0ZXJuLCBcIilcIik7XG4gICAgfSBlbHNlIGlmICghKG9wdGlvbnMubmVnYXRpdmVfc2lnbl9iZWZvcmVfZGlnaXRzIHx8IG9wdGlvbnMubmVnYXRpdmVfc2lnbl9hZnRlcl9kaWdpdHMpKSB7XG4gICAgICBwYXR0ZXJuID0gbmVnYXRpdmUgKyBwYXR0ZXJuO1xuICAgIH1cbiAgfSAvLyBlbnN1cmUgdGhlcmUncyBhIGRvbGxhciBhbmQvb3IgZGVjaW1hbCBhbW91bnQsIGFuZCB0aGF0XG4gIC8vIGl0IGRvZXNuJ3Qgc3RhcnQgd2l0aCBhIHNwYWNlIG9yIGEgbmVnYXRpdmUgc2lnbiBmb2xsb3dlZCBieSBhIHNwYWNlXG5cblxuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPyEtPyApKD89LipcXFxcZClcIi5jb25jYXQocGF0dGVybiwgXCIkXCIpKTtcbn1cblxudmFyIGRlZmF1bHRfY3VycmVuY3lfb3B0aW9ucyA9IHtcbiAgc3ltYm9sOiAnJCcsXG4gIHJlcXVpcmVfc3ltYm9sOiBmYWxzZSxcbiAgYWxsb3dfc3BhY2VfYWZ0ZXJfc3ltYm9sOiBmYWxzZSxcbiAgc3ltYm9sX2FmdGVyX2RpZ2l0czogZmFsc2UsXG4gIGFsbG93X25lZ2F0aXZlczogdHJ1ZSxcbiAgcGFyZW5zX2Zvcl9uZWdhdGl2ZXM6IGZhbHNlLFxuICBuZWdhdGl2ZV9zaWduX2JlZm9yZV9kaWdpdHM6IGZhbHNlLFxuICBuZWdhdGl2ZV9zaWduX2FmdGVyX2RpZ2l0czogZmFsc2UsXG4gIGFsbG93X25lZ2F0aXZlX3NpZ25fcGxhY2Vob2xkZXI6IGZhbHNlLFxuICB0aG91c2FuZHNfc2VwYXJhdG9yOiAnLCcsXG4gIGRlY2ltYWxfc2VwYXJhdG9yOiAnLicsXG4gIGFsbG93X2RlY2ltYWw6IHRydWUsXG4gIHJlcXVpcmVfZGVjaW1hbDogZmFsc2UsXG4gIGRpZ2l0c19hZnRlcl9kZWNpbWFsOiBbMl0sXG4gIGFsbG93X3NwYWNlX2FmdGVyX2RpZ2l0czogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGlzQ3VycmVuY3koc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIG9wdGlvbnMgPSAoMCwgX21lcmdlLmRlZmF1bHQpKG9wdGlvbnMsIGRlZmF1bHRfY3VycmVuY3lfb3B0aW9ucyk7XG4gIHJldHVybiBjdXJyZW5jeVJlZ2V4KG9wdGlvbnMpLnRlc3Qoc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNEYXRhVVJJO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdmFsaWRNZWRpYVR5cGUgPSAvXlthLXpdK1xcL1thLXowLTlcXC1cXCtdKyQvaTtcbnZhciB2YWxpZEF0dHJpYnV0ZSA9IC9eW2EtelxcLV0rPVthLXowLTlcXC1dKyQvaTtcbnZhciB2YWxpZERhdGEgPSAvXlthLXowLTkhXFwkJidcXChcXClcXCpcXCssOz1cXC1cXC5ffjpAXFwvXFw/JVxcc10qJC9pO1xuXG5mdW5jdGlvbiBpc0RhdGFVUkkoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBkYXRhID0gc3RyLnNwbGl0KCcsJyk7XG5cbiAgaWYgKGRhdGEubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBhdHRyaWJ1dGVzID0gZGF0YS5zaGlmdCgpLnRyaW0oKS5zcGxpdCgnOycpO1xuICB2YXIgc2NoZW1lQW5kTWVkaWFUeXBlID0gYXR0cmlidXRlcy5zaGlmdCgpO1xuXG4gIGlmIChzY2hlbWVBbmRNZWRpYVR5cGUuc3Vic3RyKDAsIDUpICE9PSAnZGF0YTonKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIG1lZGlhVHlwZSA9IHNjaGVtZUFuZE1lZGlhVHlwZS5zdWJzdHIoNSk7XG5cbiAgaWYgKG1lZGlhVHlwZSAhPT0gJycgJiYgIXZhbGlkTWVkaWFUeXBlLnRlc3QobWVkaWFUeXBlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmICghKGkgPT09IGF0dHJpYnV0ZXMubGVuZ3RoIC0gMSAmJiBhdHRyaWJ1dGVzW2ldLnRvTG93ZXJDYXNlKCkgPT09ICdiYXNlNjQnKSAmJiAhdmFsaWRBdHRyaWJ1dGUudGVzdChhdHRyaWJ1dGVzW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBkYXRhLmxlbmd0aDsgX2krKykge1xuICAgIGlmICghdmFsaWREYXRhLnRlc3QoZGF0YVtfaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRGF0ZTtcblxudmFyIF9tZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9tZXJnZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQ7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IHRocm93IF9lMjsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gb1tTeW1ib2wuaXRlcmF0b3JdKCk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTMpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UzOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxudmFyIGRlZmF1bHRfZGF0ZV9vcHRpb25zID0ge1xuICBmb3JtYXQ6ICdZWVlZL01NL0REJyxcbiAgZGVsaW1pdGVyczogWycvJywgJy0nXSxcbiAgc3RyaWN0TW9kZTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGlzVmFsaWRGb3JtYXQoZm9ybWF0KSB7XG4gIHJldHVybiAvKF4oeXs0fXx5ezJ9KVsuXFwvLV0obXsxLDJ9KVsuXFwvLV0oZHsxLDJ9KSQpfCheKG17MSwyfSlbLlxcLy1dKGR7MSwyfSlbLlxcLy1dKCh5ezR9fHl7Mn0pJCkpfCheKGR7MSwyfSlbLlxcLy1dKG17MSwyfSlbLlxcLy1dKCh5ezR9fHl7Mn0pJCkpL2dpLnRlc3QoZm9ybWF0KTtcbn1cblxuZnVuY3Rpb24gemlwKGRhdGUsIGZvcm1hdCkge1xuICB2YXIgemlwcGVkQXJyID0gW10sXG4gICAgICBsZW4gPSBNYXRoLm1pbihkYXRlLmxlbmd0aCwgZm9ybWF0Lmxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHppcHBlZEFyci5wdXNoKFtkYXRlW2ldLCBmb3JtYXRbaV1dKTtcbiAgfVxuXG4gIHJldHVybiB6aXBwZWRBcnI7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZShpbnB1dCwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gQWxsb3cgYmFja3dhcmQgY29tcGF0YmlsaXR5IGZvciBvbGQgZm9ybWF0IGlzRGF0ZShpbnB1dCBbLCBmb3JtYXRdKVxuICAgIG9wdGlvbnMgPSAoMCwgX21lcmdlLmRlZmF1bHQpKHtcbiAgICAgIGZvcm1hdDogb3B0aW9uc1xuICAgIH0sIGRlZmF1bHRfZGF0ZV9vcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0X2RhdGVfb3B0aW9ucyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyAmJiBpc1ZhbGlkRm9ybWF0KG9wdGlvbnMuZm9ybWF0KSkge1xuICAgIHZhciBmb3JtYXREZWxpbWl0ZXIgPSBvcHRpb25zLmRlbGltaXRlcnMuZmluZChmdW5jdGlvbiAoZGVsaW1pdGVyKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5mb3JtYXQuaW5kZXhPZihkZWxpbWl0ZXIpICE9PSAtMTtcbiAgICB9KTtcbiAgICB2YXIgZGF0ZURlbGltaXRlciA9IG9wdGlvbnMuc3RyaWN0TW9kZSA/IGZvcm1hdERlbGltaXRlciA6IG9wdGlvbnMuZGVsaW1pdGVycy5maW5kKGZ1bmN0aW9uIChkZWxpbWl0ZXIpIHtcbiAgICAgIHJldHVybiBpbnB1dC5pbmRleE9mKGRlbGltaXRlcikgIT09IC0xO1xuICAgIH0pO1xuICAgIHZhciBkYXRlQW5kRm9ybWF0ID0gemlwKGlucHV0LnNwbGl0KGRhdGVEZWxpbWl0ZXIpLCBvcHRpb25zLmZvcm1hdC50b0xvd2VyQ2FzZSgpLnNwbGl0KGZvcm1hdERlbGltaXRlcikpO1xuICAgIHZhciBkYXRlT2JqID0ge307XG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGF0ZUFuZEZvcm1hdCksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBfc3RlcCR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwLnZhbHVlLCAyKSxcbiAgICAgICAgICAgIGRhdGVXb3JkID0gX3N0ZXAkdmFsdWVbMF0sXG4gICAgICAgICAgICBmb3JtYXRXb3JkID0gX3N0ZXAkdmFsdWVbMV07XG5cbiAgICAgICAgaWYgKGRhdGVXb3JkLmxlbmd0aCAhPT0gZm9ybWF0V29yZC5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRlT2JqW2Zvcm1hdFdvcmQuY2hhckF0KDApXSA9IGRhdGVXb3JkO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoXCJcIi5jb25jYXQoZGF0ZU9iai5tLCBcIi9cIikuY29uY2F0KGRhdGVPYmouZCwgXCIvXCIpLmNvbmNhdChkYXRlT2JqLnkpKS5nZXREYXRlKCkgPT09ICtkYXRlT2JqLmQ7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMuc3RyaWN0TW9kZSkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXScgJiYgaXNGaW5pdGUoaW5wdXQpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0RlY2ltYWw7XG5cbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgX2luY2x1ZGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2luY2x1ZGVzXCIpKTtcblxudmFyIF9hbHBoYSA9IHJlcXVpcmUoXCIuL2FscGhhXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBkZWNpbWFsUmVnRXhwKG9wdGlvbnMpIHtcbiAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJeWy0rXT8oWzAtOV0rKT8oXFxcXFwiLmNvbmNhdChfYWxwaGEuZGVjaW1hbFtvcHRpb25zLmxvY2FsZV0sIFwiWzAtOV17XCIpLmNvbmNhdChvcHRpb25zLmRlY2ltYWxfZGlnaXRzLCBcIn0pXCIpLmNvbmNhdChvcHRpb25zLmZvcmNlX2RlY2ltYWwgPyAnJyA6ICc/JywgXCIkXCIpKTtcbiAgcmV0dXJuIHJlZ0V4cDtcbn1cblxudmFyIGRlZmF1bHRfZGVjaW1hbF9vcHRpb25zID0ge1xuICBmb3JjZV9kZWNpbWFsOiBmYWxzZSxcbiAgZGVjaW1hbF9kaWdpdHM6ICcxLCcsXG4gIGxvY2FsZTogJ2VuLVVTJ1xufTtcbnZhciBibGFja2xpc3QgPSBbJycsICctJywgJysnXTtcblxuZnVuY3Rpb24gaXNEZWNpbWFsKHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0X2RlY2ltYWxfb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMubG9jYWxlIGluIF9hbHBoYS5kZWNpbWFsKSB7XG4gICAgcmV0dXJuICEoMCwgX2luY2x1ZGVzLmRlZmF1bHQpKGJsYWNrbGlzdCwgc3RyLnJlcGxhY2UoLyAvZywgJycpKSAmJiBkZWNpbWFsUmVnRXhwKG9wdGlvbnMpLnRlc3Qoc3RyKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9jYWxlICdcIi5jb25jYXQob3B0aW9ucy5sb2NhbGUsIFwiJ1wiKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRGl2aXNpYmxlQnk7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbnZhciBfdG9GbG9hdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdG9GbG9hdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzRGl2aXNpYmxlQnkoc3RyLCBudW0pIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuICgwLCBfdG9GbG9hdC5kZWZhdWx0KShzdHIpICUgcGFyc2VJbnQobnVtLCAxMCkgPT09IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRUFOO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgRUFOIHN0YW5kYXJkIGlzXG4gKiB0aGUgdGhpcnRlZW4tZGlnaXQgRUFOLTEzLCB3aGlsZSB0aGVcbiAqIGxlc3MgY29tbW9ubHkgdXNlZCA4LWRpZ2l0IEVBTi04IGJhcmNvZGUgd2FzXG4gKiBpbnRyb2R1Y2VkIGZvciB1c2Ugb24gc21hbGwgcGFja2FnZXMuXG4gKiBBbHNvIEVBTi9VQ0MtMTQgaXMgdXNlZCBmb3IgR3JvdXBpbmcgb2YgaW5kaXZpZHVhbFxuICogdHJhZGUgaXRlbXMgYWJvdmUgdW5pdCBsZXZlbChJbnRlcm1lZGlhdGUsIENhcnRvbiBvciBQYWxsZXQpLlxuICogRm9yIG1vcmUgaW5mbyBhYm91dCBFQU4tMTQgY2hlY2tvdXQ6IGh0dHBzOi8vd3d3Lmd0aW4uaW5mby9pdGYtMTQtYmFyY29kZXMvXG4gKiBFQU4gY29uc2lzdHMgb2Y6XG4gKiBHUzEgcHJlZml4LCBtYW51ZmFjdHVyZXIgY29kZSwgcHJvZHVjdCBjb2RlIGFuZCBjaGVjayBkaWdpdFxuICogUmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnRlcm5hdGlvbmFsX0FydGljbGVfTnVtYmVyXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vd3d3Lmd0aW4uaW5mby9cbiAqL1xuXG4vKipcbiAqIERlZmluZSBFQU4gTGVuZ2h0czsgOCBmb3IgRUFOLTg7IDEzIGZvciBFQU4tMTM7IDE0IGZvciBFQU4tMTRcbiAqIGFuZCBSZWd1bGFyIEV4cHJlc3Npb24gZm9yIHZhbGlkIEVBTnMgKEVBTi04LCBFQU4tMTMsIEVBTi0xNCksXG4gKiB3aXRoIGV4YWN0IG51bWJlcmljIG1hdGNoaW5nIG9mIDggb3IgMTMgb3IgMTQgZGlnaXRzIFswLTldXG4gKi9cbnZhciBMRU5HVEhfRUFOXzggPSA4O1xudmFyIExFTkdUSF9FQU5fMTQgPSAxNDtcbnZhciB2YWxpZEVhblJlZ2V4ID0gL14oXFxkezh9fFxcZHsxM318XFxkezE0fSkkLztcbi8qKlxuICogR2V0IHBvc2l0aW9uIHdlaWdodCBnaXZlbjpcbiAqIEVBTiBsZW5ndGggYW5kIGRpZ2l0IGluZGV4L3Bvc2l0aW9uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuZnVuY3Rpb24gZ2V0UG9zaXRpb25XZWlnaHRUaHJvdWdoTGVuZ3RoQW5kSW5kZXgobGVuZ3RoLCBpbmRleCkge1xuICBpZiAobGVuZ3RoID09PSBMRU5HVEhfRUFOXzggfHwgbGVuZ3RoID09PSBMRU5HVEhfRUFOXzE0KSB7XG4gICAgcmV0dXJuIGluZGV4ICUgMiA9PT0gMCA/IDMgOiAxO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4ICUgMiA9PT0gMCA/IDEgOiAzO1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgRUFOIENoZWNrIERpZ2l0XG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVybmF0aW9uYWxfQXJ0aWNsZV9OdW1iZXIjQ2FsY3VsYXRpb25fb2ZfY2hlY2tzdW1fZGlnaXRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZWFuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBjYWxjdWxhdGVDaGVja0RpZ2l0KGVhbikge1xuICB2YXIgY2hlY2tzdW0gPSBlYW4uc2xpY2UoMCwgLTEpLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGNoYXIsIGluZGV4KSB7XG4gICAgcmV0dXJuIE51bWJlcihjaGFyKSAqIGdldFBvc2l0aW9uV2VpZ2h0VGhyb3VnaExlbmd0aEFuZEluZGV4KGVhbi5sZW5ndGgsIGluZGV4KTtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBhcnRpYWxTdW0pIHtcbiAgICByZXR1cm4gYWNjICsgcGFydGlhbFN1bTtcbiAgfSwgMCk7XG4gIHZhciByZW1haW5kZXIgPSAxMCAtIGNoZWNrc3VtICUgMTA7XG4gIHJldHVybiByZW1haW5kZXIgPCAxMCA/IHJlbWFpbmRlciA6IDA7XG59XG4vKipcbiAqIENoZWNrIGlmIHN0cmluZyBpcyB2YWxpZCBFQU46XG4gKiBNYXRjaGVzIEVBTi04L0VBTi0xMy9FQU4tMTQgcmVnZXhcbiAqIEhhcyB2YWxpZCBjaGVjayBkaWdpdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cblxuZnVuY3Rpb24gaXNFQU4oc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBhY3R1YWxDaGVja0RpZ2l0ID0gTnVtYmVyKHN0ci5zbGljZSgtMSkpO1xuICByZXR1cm4gdmFsaWRFYW5SZWdleC50ZXN0KHN0cikgJiYgYWN0dWFsQ2hlY2tEaWdpdCA9PT0gY2FsY3VsYXRlQ2hlY2tEaWdpdChzdHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0VtYWlsO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcblxudmFyIF9pc0J5dGVMZW5ndGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzQnl0ZUxlbmd0aFwiKSk7XG5cbnZhciBfaXNGUUROID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0ZRRE5cIikpO1xuXG52YXIgX2lzSVAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzSVBcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGVmYXVsdF9lbWFpbF9vcHRpb25zID0ge1xuICBhbGxvd19kaXNwbGF5X25hbWU6IGZhbHNlLFxuICByZXF1aXJlX2Rpc3BsYXlfbmFtZTogZmFsc2UsXG4gIGFsbG93X3V0ZjhfbG9jYWxfcGFydDogdHJ1ZSxcbiAgcmVxdWlyZV90bGQ6IHRydWUsXG4gIGJsYWNrbGlzdGVkX2NoYXJzOiAnJyxcbiAgaWdub3JlX21heF9sZW5ndGg6IGZhbHNlLFxuICBob3N0X2JsYWNrbGlzdDogW11cbn07XG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnRyb2wtcmVnZXggKi9cblxudmFyIHNwbGl0TmFtZUFkZHJlc3MgPSAvXihbXlxceDAwLVxceDFGXFx4N0YtXFx4OUZcXGNYXSspPC9pO1xudmFyIGVtYWlsVXNlclBhcnQgPSAvXlthLXpcXGQhI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl0rJC9pO1xudmFyIGdtYWlsVXNlclBhcnQgPSAvXlthLXpcXGRdKyQvO1xudmFyIHF1b3RlZEVtYWlsVXNlciA9IC9eKFtcXHNcXHgwMS1cXHgwOFxceDBiXFx4MGNcXHgwZS1cXHgxZlxceDdmXFx4MjFcXHgyMy1cXHg1YlxceDVkLVxceDdlXXwoXFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZC1cXHg3Zl0pKSokL2k7XG52YXIgZW1haWxVc2VyVXRmOFBhcnQgPSAvXlthLXpcXGQhI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9flxcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0rJC9pO1xudmFyIHF1b3RlZEVtYWlsVXNlclV0ZjggPSAvXihbXFxzXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHg3ZlxceDIxXFx4MjMtXFx4NWJcXHg1ZC1cXHg3ZVxcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl18KFxcXFxbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGQtXFx4N2ZcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkqJC9pO1xudmFyIGRlZmF1bHRNYXhFbWFpbExlbmd0aCA9IDI1NDtcbi8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnRyb2wtcmVnZXggKi9cblxuLyoqXG4gKiBWYWxpZGF0ZSBkaXNwbGF5IG5hbWUgYWNjb3JkaW5nIHRvIHRoZSBSRkMyODIyOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNhcHBlbmRpeC1BLjEuMlxuICogQHBhcmFtIHtTdHJpbmd9IGRpc3BsYXlfbmFtZVxuICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGlzcGxheU5hbWUoZGlzcGxheV9uYW1lKSB7XG4gIHZhciBkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMgPSBkaXNwbGF5X25hbWUucmVwbGFjZSgvXlwiKC4rKVwiJC8sICckMScpOyAvLyBkaXNwbGF5IG5hbWUgd2l0aCBvbmx5IHNwYWNlcyBpcyBub3QgdmFsaWRcblxuICBpZiAoIWRpc3BsYXlfbmFtZV93aXRob3V0X3F1b3Rlcy50cmltKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gY2hlY2sgd2hldGhlciBkaXNwbGF5IG5hbWUgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJcblxuXG4gIHZhciBjb250YWluc19pbGxlZ2FsID0gL1tcXC5cIjs8Pl0vLnRlc3QoZGlzcGxheV9uYW1lX3dpdGhvdXRfcXVvdGVzKTtcblxuICBpZiAoY29udGFpbnNfaWxsZWdhbCkge1xuICAgIC8vIGlmIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyxcbiAgICAvLyBtdXN0IHRvIGJlIGVuY2xvc2VkIGluIGRvdWJsZS1xdW90ZXMsIG90aGVyd2lzZSBpdCdzIG5vdCBhIHZhbGlkIGRpc3BsYXkgbmFtZVxuICAgIGlmIChkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMgPT09IGRpc3BsYXlfbmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gdGhlIHF1b3RlcyBpbiBkaXNwbGF5IG5hbWUgbXVzdCBzdGFydCB3aXRoIGNoYXJhY3RlciBzeW1ib2wgXFxcblxuXG4gICAgdmFyIGFsbF9zdGFydF93aXRoX2JhY2tfc2xhc2ggPSBkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMuc3BsaXQoJ1wiJykubGVuZ3RoID09PSBkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMuc3BsaXQoJ1xcXFxcIicpLmxlbmd0aDtcblxuICAgIGlmICghYWxsX3N0YXJ0X3dpdGhfYmFja19zbGFzaCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc0VtYWlsKHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0X2VtYWlsX29wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zLnJlcXVpcmVfZGlzcGxheV9uYW1lIHx8IG9wdGlvbnMuYWxsb3dfZGlzcGxheV9uYW1lKSB7XG4gICAgdmFyIGRpc3BsYXlfZW1haWwgPSBzdHIubWF0Y2goc3BsaXROYW1lQWRkcmVzcyk7XG5cbiAgICBpZiAoZGlzcGxheV9lbWFpbCkge1xuICAgICAgdmFyIGRpc3BsYXlfbmFtZSA9IGRpc3BsYXlfZW1haWxbMV07IC8vIFJlbW92ZSBkaXNwbGF5IG5hbWUgYW5kIGFuZ2xlIGJyYWNrZXRzIHRvIGdldCBlbWFpbCBhZGRyZXNzXG4gICAgICAvLyBDYW4gYmUgZG9uZSBpbiB0aGUgcmVnZXggYnV0IHdpbGwgaW50cm9kdWNlIGEgUmVET1MgKFNlZSAgIzE1OTcgZm9yIG1vcmUgaW5mbylcblxuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoZGlzcGxheV9uYW1lLCAnJykucmVwbGFjZSgvKF48fD4kKS9nLCAnJyk7IC8vIHNvbWV0aW1lcyBuZWVkIHRvIHRyaW0gdGhlIGxhc3Qgc3BhY2UgdG8gZ2V0IHRoZSBkaXNwbGF5IG5hbWVcbiAgICAgIC8vIGJlY2F1c2UgdGhlcmUgbWF5IGJlIGEgc3BhY2UgYmV0d2VlbiBkaXNwbGF5IG5hbWUgYW5kIGVtYWlsIGFkZHJlc3NcbiAgICAgIC8vIGVnLiBteW5hbWUgPGFkZHJlc3NAZ21haWwuY29tPlxuICAgICAgLy8gdGhlIGRpc3BsYXkgbmFtZSBpcyBgbXluYW1lYCBpbnN0ZWFkIG9mIGBteW5hbWUgYCwgc28gbmVlZCB0byB0cmltIHRoZSBsYXN0IHNwYWNlXG5cbiAgICAgIGlmIChkaXNwbGF5X25hbWUuZW5kc1dpdGgoJyAnKSkge1xuICAgICAgICBkaXNwbGF5X25hbWUgPSBkaXNwbGF5X25hbWUuc3Vic3RyKDAsIGRpc3BsYXlfbmFtZS5sZW5ndGggLSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF2YWxpZGF0ZURpc3BsYXlOYW1lKGRpc3BsYXlfbmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5yZXF1aXJlX2Rpc3BsYXlfbmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9ucy5pZ25vcmVfbWF4X2xlbmd0aCAmJiBzdHIubGVuZ3RoID4gZGVmYXVsdE1heEVtYWlsTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KCdAJyk7XG4gIHZhciBkb21haW4gPSBwYXJ0cy5wb3AoKTtcbiAgdmFyIGxvd2VyX2RvbWFpbiA9IGRvbWFpbi50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChvcHRpb25zLmhvc3RfYmxhY2tsaXN0LmluY2x1ZGVzKGxvd2VyX2RvbWFpbikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgdXNlciA9IHBhcnRzLmpvaW4oJ0AnKTtcblxuICBpZiAob3B0aW9ucy5kb21haW5fc3BlY2lmaWNfdmFsaWRhdGlvbiAmJiAobG93ZXJfZG9tYWluID09PSAnZ21haWwuY29tJyB8fCBsb3dlcl9kb21haW4gPT09ICdnb29nbGVtYWlsLmNvbScpKSB7XG4gICAgLypcbiAgICAgIFByZXZpb3VzbHkgd2UgcmVtb3ZlZCBkb3RzIGZvciBnbWFpbCBhZGRyZXNzZXMgYmVmb3JlIHZhbGlkYXRpbmcuXG4gICAgICBUaGlzIHdhcyByZW1vdmVkIGJlY2F1c2UgaXQgYWxsb3dzIGBtdWx0aXBsZS4uZG90c0BnbWFpbC5jb21gXG4gICAgICB0byBiZSByZXBvcnRlZCBhcyB2YWxpZCwgYnV0IGl0IGlzIG5vdC5cbiAgICAgIEdtYWlsIG9ubHkgbm9ybWFsaXplcyBzaW5nbGUgZG90cywgcmVtb3ZpbmcgdGhlbSBmcm9tIGhlcmUgaXMgcG9pbnRsZXNzLFxuICAgICAgc2hvdWxkIGJlIGRvbmUgaW4gbm9ybWFsaXplRW1haWxcbiAgICAqL1xuICAgIHVzZXIgPSB1c2VyLnRvTG93ZXJDYXNlKCk7IC8vIFJlbW92aW5nIHN1Yi1hZGRyZXNzIGZyb20gdXNlcm5hbWUgYmVmb3JlIGdtYWlsIHZhbGlkYXRpb25cblxuICAgIHZhciB1c2VybmFtZSA9IHVzZXIuc3BsaXQoJysnKVswXTsgLy8gRG90cyBhcmUgbm90IGluY2x1ZGVkIGluIGdtYWlsIGxlbmd0aCByZXN0cmljdGlvblxuXG4gICAgaWYgKCEoMCwgX2lzQnl0ZUxlbmd0aC5kZWZhdWx0KSh1c2VybmFtZS5yZXBsYWNlKC9cXC4vZywgJycpLCB7XG4gICAgICBtaW46IDYsXG4gICAgICBtYXg6IDMwXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZXJfcGFydHMgPSB1c2VybmFtZS5zcGxpdCgnLicpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdXNlcl9wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFnbWFpbFVzZXJQYXJ0LnRlc3QoX3VzZXJfcGFydHNbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAob3B0aW9ucy5pZ25vcmVfbWF4X2xlbmd0aCA9PT0gZmFsc2UgJiYgKCEoMCwgX2lzQnl0ZUxlbmd0aC5kZWZhdWx0KSh1c2VyLCB7XG4gICAgbWF4OiA2NFxuICB9KSB8fCAhKDAsIF9pc0J5dGVMZW5ndGguZGVmYXVsdCkoZG9tYWluLCB7XG4gICAgbWF4OiAyNTRcbiAgfSkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCEoMCwgX2lzRlFETi5kZWZhdWx0KShkb21haW4sIHtcbiAgICByZXF1aXJlX3RsZDogb3B0aW9ucy5yZXF1aXJlX3RsZFxuICB9KSkge1xuICAgIGlmICghb3B0aW9ucy5hbGxvd19pcF9kb21haW4pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoISgwLCBfaXNJUC5kZWZhdWx0KShkb21haW4pKSB7XG4gICAgICBpZiAoIWRvbWFpbi5zdGFydHNXaXRoKCdbJykgfHwgIWRvbWFpbi5lbmRzV2l0aCgnXScpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5vQnJhY2tldGRvbWFpbiA9IGRvbWFpbi5zdWJzdHIoMSwgZG9tYWluLmxlbmd0aCAtIDIpO1xuXG4gICAgICBpZiAobm9CcmFja2V0ZG9tYWluLmxlbmd0aCA9PT0gMCB8fCAhKDAsIF9pc0lQLmRlZmF1bHQpKG5vQnJhY2tldGRvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh1c2VyWzBdID09PSAnXCInKSB7XG4gICAgdXNlciA9IHVzZXIuc2xpY2UoMSwgdXNlci5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gb3B0aW9ucy5hbGxvd191dGY4X2xvY2FsX3BhcnQgPyBxdW90ZWRFbWFpbFVzZXJVdGY4LnRlc3QodXNlcikgOiBxdW90ZWRFbWFpbFVzZXIudGVzdCh1c2VyKTtcbiAgfVxuXG4gIHZhciBwYXR0ZXJuID0gb3B0aW9ucy5hbGxvd191dGY4X2xvY2FsX3BhcnQgPyBlbWFpbFVzZXJVdGY4UGFydCA6IGVtYWlsVXNlclBhcnQ7XG4gIHZhciB1c2VyX3BhcnRzID0gdXNlci5zcGxpdCgnLicpO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCB1c2VyX3BhcnRzLmxlbmd0aDsgX2krKykge1xuICAgIGlmICghcGF0dGVybi50ZXN0KHVzZXJfcGFydHNbX2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLmJsYWNrbGlzdGVkX2NoYXJzKSB7XG4gICAgaWYgKHVzZXIuc2VhcmNoKG5ldyBSZWdFeHAoXCJbXCIuY29uY2F0KG9wdGlvbnMuYmxhY2tsaXN0ZWRfY2hhcnMsIFwiXStcIiksICdnJykpICE9PSAtMSkgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRW1wdHk7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGVmYXVsdF9pc19lbXB0eV9vcHRpb25zID0ge1xuICBpZ25vcmVfd2hpdGVzcGFjZTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGlzRW1wdHkoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIG9wdGlvbnMgPSAoMCwgX21lcmdlLmRlZmF1bHQpKG9wdGlvbnMsIGRlZmF1bHRfaXNfZW1wdHlfb3B0aW9ucyk7XG4gIHJldHVybiAob3B0aW9ucy5pZ25vcmVfd2hpdGVzcGFjZSA/IHN0ci50cmltKCkubGVuZ3RoIDogc3RyLmxlbmd0aCkgPT09IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRXRoZXJldW1BZGRyZXNzO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZXRoID0gL14oMHgpWzAtOWEtZl17NDB9JC9pO1xuXG5mdW5jdGlvbiBpc0V0aGVyZXVtQWRkcmVzcyhzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGV0aC50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRlFETjtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxudmFyIF9tZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9tZXJnZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBkZWZhdWx0X2ZxZG5fb3B0aW9ucyA9IHtcbiAgcmVxdWlyZV90bGQ6IHRydWUsXG4gIGFsbG93X3VuZGVyc2NvcmVzOiBmYWxzZSxcbiAgYWxsb3dfdHJhaWxpbmdfZG90OiBmYWxzZSxcbiAgYWxsb3dfbnVtZXJpY190bGQ6IGZhbHNlLFxuICBhbGxvd193aWxkY2FyZDogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGlzRlFETihzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UuZGVmYXVsdCkob3B0aW9ucywgZGVmYXVsdF9mcWRuX29wdGlvbnMpO1xuICAvKiBSZW1vdmUgdGhlIG9wdGlvbmFsIHRyYWlsaW5nIGRvdCBiZWZvcmUgY2hlY2tpbmcgdmFsaWRpdHkgKi9cblxuICBpZiAob3B0aW9ucy5hbGxvd190cmFpbGluZ19kb3QgJiYgc3RyW3N0ci5sZW5ndGggLSAxXSA9PT0gJy4nKSB7XG4gICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XG4gIH1cbiAgLyogUmVtb3ZlIHRoZSBvcHRpb25hbCB3aWxkY2FyZCBiZWZvcmUgY2hlY2tpbmcgdmFsaWRpdHkgKi9cblxuXG4gIGlmIChvcHRpb25zLmFsbG93X3dpbGRjYXJkID09PSB0cnVlICYmIHN0ci5pbmRleE9mKCcqLicpID09PSAwKSB7XG4gICAgc3RyID0gc3RyLnN1YnN0cmluZygyKTtcbiAgfVxuXG4gIHZhciBwYXJ0cyA9IHN0ci5zcGxpdCgnLicpO1xuICB2YXIgdGxkID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG5cbiAgaWYgKG9wdGlvbnMucmVxdWlyZV90bGQpIHtcbiAgICAvLyBkaXNhbGxvdyBmcWRucyB3aXRob3V0IHRsZFxuICAgIGlmIChwYXJ0cy5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCEvXihbYS16XFx1MDBBMS1cXHUwMEE4XFx1MDBBQS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXXsyLH18eG5bYS16MC05LV17Mix9KSQvaS50ZXN0KHRsZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIGRpc2FsbG93IHNwYWNlc1xuXG5cbiAgICBpZiAoL1xccy8udGVzdCh0bGQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIHJlamVjdCBudW1lcmljIFRMRHNcblxuXG4gIGlmICghb3B0aW9ucy5hbGxvd19udW1lcmljX3RsZCAmJiAvXlxcZCskLy50ZXN0KHRsZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcGFydHMuZXZlcnkoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICBpZiAocGFydC5sZW5ndGggPiA2Mykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghL15bYS16X1xcdTAwYTEtXFx1ZmZmZjAtOS1dKyQvaS50ZXN0KHBhcnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBkaXNhbGxvdyBmdWxsLXdpZHRoIGNoYXJzXG5cblxuICAgIGlmICgvW1xcdWZmMDEtXFx1ZmY1ZV0vLnRlc3QocGFydCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIGRpc2FsbG93IHBhcnRzIHN0YXJ0aW5nIG9yIGVuZGluZyB3aXRoIGh5cGhlblxuXG5cbiAgICBpZiAoL14tfC0kLy50ZXN0KHBhcnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLmFsbG93X3VuZGVyc2NvcmVzICYmIC9fLy50ZXN0KHBhcnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Zsb2F0O1xuZXhwb3J0cy5sb2NhbGVzID0gdm9pZCAwO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgX2FscGhhID0gcmVxdWlyZShcIi4vYWxwaGFcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzRmxvYXQoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgZmxvYXQgPSBuZXcgUmVnRXhwKFwiXig/OlstK10pPyg/OlswLTldKyk/KD86XFxcXFwiLmNvbmNhdChvcHRpb25zLmxvY2FsZSA/IF9hbHBoYS5kZWNpbWFsW29wdGlvbnMubG9jYWxlXSA6ICcuJywgXCJbMC05XSopPyg/OltlRV1bXFxcXCtcXFxcLV0/KD86WzAtOV0rKSk/JFwiKSk7XG5cbiAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSAnLicgfHwgc3RyID09PSAnLScgfHwgc3RyID09PSAnKycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KHN0ci5yZXBsYWNlKCcsJywgJy4nKSk7XG4gIHJldHVybiBmbG9hdC50ZXN0KHN0cikgJiYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdtaW4nKSB8fCB2YWx1ZSA+PSBvcHRpb25zLm1pbikgJiYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdtYXgnKSB8fCB2YWx1ZSA8PSBvcHRpb25zLm1heCkgJiYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdsdCcpIHx8IHZhbHVlIDwgb3B0aW9ucy5sdCkgJiYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdndCcpIHx8IHZhbHVlID4gb3B0aW9ucy5ndCk7XG59XG5cbnZhciBsb2NhbGVzID0gT2JqZWN0LmtleXMoX2FscGhhLmRlY2ltYWwpO1xuZXhwb3J0cy5sb2NhbGVzID0gbG9jYWxlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRnVsbFdpZHRoO1xuZXhwb3J0cy5mdWxsV2lkdGggPSB2b2lkIDA7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBmdWxsV2lkdGggPSAvW15cXHUwMDIwLVxcdTAwN0VcXHVGRjYxLVxcdUZGOUZcXHVGRkEwLVxcdUZGRENcXHVGRkU4LVxcdUZGRUUwLTlhLXpBLVpdLztcbmV4cG9ydHMuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xuXG5mdW5jdGlvbiBpc0Z1bGxXaWR0aChzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGZ1bGxXaWR0aC50ZXN0KHN0cik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0hTTDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGhzbENvbW1hID0gL15oc2xhP1xcKCgoXFwrfFxcLSk/KFswLTldKyhcXC5bMC05XSspPyhlKFxcK3xcXC0pP1swLTldKyk/fFxcLlswLTldKyhlKFxcK3xcXC0pP1swLTldKyk/KSkoZGVnfGdyYWR8cmFkfHR1cm4pPygsKFxcK3xcXC0pPyhbMC05XSsoXFwuWzAtOV0rKT8oZShcXCt8XFwtKT9bMC05XSspP3xcXC5bMC05XSsoZShcXCt8XFwtKT9bMC05XSspPyklKXsyfSgsKChcXCt8XFwtKT8oWzAtOV0rKFxcLlswLTldKyk/KGUoXFwrfFxcLSk/WzAtOV0rKT98XFwuWzAtOV0rKGUoXFwrfFxcLSk/WzAtOV0rKT8pJT8pKT9cXCkkL2k7XG52YXIgaHNsU3BhY2UgPSAvXmhzbGE/XFwoKChcXCt8XFwtKT8oWzAtOV0rKFxcLlswLTldKyk/KGUoXFwrfFxcLSk/WzAtOV0rKT98XFwuWzAtOV0rKGUoXFwrfFxcLSk/WzAtOV0rKT8pKShkZWd8Z3JhZHxyYWR8dHVybik/KFxccyhcXCt8XFwtKT8oWzAtOV0rKFxcLlswLTldKyk/KGUoXFwrfFxcLSk/WzAtOV0rKT98XFwuWzAtOV0rKGUoXFwrfFxcLSk/WzAtOV0rKT8pJSl7Mn1cXHM/KFxcL1xccygoXFwrfFxcLSk/KFswLTldKyhcXC5bMC05XSspPyhlKFxcK3xcXC0pP1swLTldKyk/fFxcLlswLTldKyhlKFxcK3xcXC0pP1swLTldKyk/KSU/KVxccz8pP1xcKSQvaTtcblxuZnVuY3Rpb24gaXNIU0woc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7IC8vIFN0cmlwIGR1cGxpY2F0ZSBzcGFjZXMgYmVmb3JlIGNhbGxpbmcgdGhlIHZhbGlkYXRpb24gcmVnZXggKFNlZSAgIzE1OTggZm9yIG1vcmUgaW5mbylcblxuICB2YXIgc3RyaXBwZWRTdHIgPSBzdHIucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL1xccz8oaHNsYT9cXCh8XFwpfCwpXFxzPy9pZywgJyQxJyk7XG5cbiAgaWYgKHN0cmlwcGVkU3RyLmluZGV4T2YoJywnKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gaHNsQ29tbWEudGVzdChzdHJpcHBlZFN0cik7XG4gIH1cblxuICByZXR1cm4gaHNsU3BhY2UudGVzdChzdHJpcHBlZFN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSGFsZldpZHRoO1xuZXhwb3J0cy5oYWxmV2lkdGggPSB2b2lkIDA7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBoYWxmV2lkdGggPSAvW1xcdTAwMjAtXFx1MDA3RVxcdUZGNjEtXFx1RkY5RlxcdUZGQTAtXFx1RkZEQ1xcdUZGRTgtXFx1RkZFRTAtOWEtekEtWl0vO1xuZXhwb3J0cy5oYWxmV2lkdGggPSBoYWxmV2lkdGg7XG5cbmZ1bmN0aW9uIGlzSGFsZldpZHRoKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gaGFsZldpZHRoLnRlc3Qoc3RyKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSGFzaDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGxlbmd0aHMgPSB7XG4gIG1kNTogMzIsXG4gIG1kNDogMzIsXG4gIHNoYTE6IDQwLFxuICBzaGEyNTY6IDY0LFxuICBzaGEzODQ6IDk2LFxuICBzaGE1MTI6IDEyOCxcbiAgcmlwZW1kMTI4OiAzMixcbiAgcmlwZW1kMTYwOiA0MCxcbiAgdGlnZXIxMjg6IDMyLFxuICB0aWdlcjE2MDogNDAsXG4gIHRpZ2VyMTkyOiA0OCxcbiAgY3JjMzI6IDgsXG4gIGNyYzMyYjogOFxufTtcblxuZnVuY3Rpb24gaXNIYXNoKHN0ciwgYWxnb3JpdGhtKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBoYXNoID0gbmV3IFJlZ0V4cChcIl5bYS1mQS1GMC05XXtcIi5jb25jYXQobGVuZ3Roc1thbGdvcml0aG1dLCBcIn0kXCIpKTtcbiAgcmV0dXJuIGhhc2gudGVzdChzdHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0hleENvbG9yO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgaGV4Y29sb3IgPSAvXiM/KFswLTlBLUZdezN9fFswLTlBLUZdezR9fFswLTlBLUZdezZ9fFswLTlBLUZdezh9KSQvaTtcblxuZnVuY3Rpb24gaXNIZXhDb2xvcihzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGhleGNvbG9yLnRlc3Qoc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNIZXhhZGVjaW1hbDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGhleGFkZWNpbWFsID0gL14oMHh8MGgpP1swLTlBLUZdKyQvaTtcblxuZnVuY3Rpb24gaXNIZXhhZGVjaW1hbChzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGhleGFkZWNpbWFsLnRlc3Qoc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJQkFOO1xuZXhwb3J0cy5sb2NhbGVzID0gdm9pZCAwO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIExpc3Qgb2YgY291bnRyeSBjb2RlcyB3aXRoXG4gKiBjb3JyZXNwb25kaW5nIElCQU4gcmVndWxhciBleHByZXNzaW9uXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVybmF0aW9uYWxfQmFua19BY2NvdW50X051bWJlclxuICovXG52YXIgaWJhblJlZ2V4VGhyb3VnaENvdW50cnlDb2RlID0ge1xuICBBRDogL14oQURbMC05XXsyfSlcXGR7OH1bQS1aMC05XXsxMn0kLyxcbiAgQUU6IC9eKEFFWzAtOV17Mn0pXFxkezN9XFxkezE2fSQvLFxuICBBTDogL14oQUxbMC05XXsyfSlcXGR7OH1bQS1aMC05XXsxNn0kLyxcbiAgQVQ6IC9eKEFUWzAtOV17Mn0pXFxkezE2fSQvLFxuICBBWjogL14oQVpbMC05XXsyfSlbQS1aMC05XXs0fVxcZHsyMH0kLyxcbiAgQkE6IC9eKEJBWzAtOV17Mn0pXFxkezE2fSQvLFxuICBCRTogL14oQkVbMC05XXsyfSlcXGR7MTJ9JC8sXG4gIEJHOiAvXihCR1swLTldezJ9KVtBLVpdezR9XFxkezZ9W0EtWjAtOV17OH0kLyxcbiAgQkg6IC9eKEJIWzAtOV17Mn0pW0EtWl17NH1bQS1aMC05XXsxNH0kLyxcbiAgQlI6IC9eKEJSWzAtOV17Mn0pXFxkezIzfVtBLVpdezF9W0EtWjAtOV17MX0kLyxcbiAgQlk6IC9eKEJZWzAtOV17Mn0pW0EtWjAtOV17NH1cXGR7MjB9JC8sXG4gIENIOiAvXihDSFswLTldezJ9KVxcZHs1fVtBLVowLTldezEyfSQvLFxuICBDUjogL14oQ1JbMC05XXsyfSlcXGR7MTh9JC8sXG4gIENZOiAvXihDWVswLTldezJ9KVxcZHs4fVtBLVowLTldezE2fSQvLFxuICBDWjogL14oQ1pbMC05XXsyfSlcXGR7MjB9JC8sXG4gIERFOiAvXihERVswLTldezJ9KVxcZHsxOH0kLyxcbiAgREs6IC9eKERLWzAtOV17Mn0pXFxkezE0fSQvLFxuICBETzogL14oRE9bMC05XXsyfSlbQS1aXXs0fVxcZHsyMH0kLyxcbiAgRUU6IC9eKEVFWzAtOV17Mn0pXFxkezE2fSQvLFxuICBFRzogL14oRUdbMC05XXsyfSlcXGR7MjV9JC8sXG4gIEVTOiAvXihFU1swLTldezJ9KVxcZHsyMH0kLyxcbiAgRkk6IC9eKEZJWzAtOV17Mn0pXFxkezE0fSQvLFxuICBGTzogL14oRk9bMC05XXsyfSlcXGR7MTR9JC8sXG4gIEZSOiAvXihGUlswLTldezJ9KVxcZHsxMH1bQS1aMC05XXsxMX1cXGR7Mn0kLyxcbiAgR0I6IC9eKEdCWzAtOV17Mn0pW0EtWl17NH1cXGR7MTR9JC8sXG4gIEdFOiAvXihHRVswLTldezJ9KVtBLVowLTldezJ9XFxkezE2fSQvLFxuICBHSTogL14oR0lbMC05XXsyfSlbQS1aXXs0fVtBLVowLTldezE1fSQvLFxuICBHTDogL14oR0xbMC05XXsyfSlcXGR7MTR9JC8sXG4gIEdSOiAvXihHUlswLTldezJ9KVxcZHs3fVtBLVowLTldezE2fSQvLFxuICBHVDogL14oR1RbMC05XXsyfSlbQS1aMC05XXs0fVtBLVowLTldezIwfSQvLFxuICBIUjogL14oSFJbMC05XXsyfSlcXGR7MTd9JC8sXG4gIEhVOiAvXihIVVswLTldezJ9KVxcZHsyNH0kLyxcbiAgSUU6IC9eKElFWzAtOV17Mn0pW0EtWjAtOV17NH1cXGR7MTR9JC8sXG4gIElMOiAvXihJTFswLTldezJ9KVxcZHsxOX0kLyxcbiAgSVE6IC9eKElRWzAtOV17Mn0pW0EtWl17NH1cXGR7MTV9JC8sXG4gIElSOiAvXihJUlswLTldezJ9KTBcXGR7Mn0wXFxkezE4fSQvLFxuICBJUzogL14oSVNbMC05XXsyfSlcXGR7MjJ9JC8sXG4gIElUOiAvXihJVFswLTldezJ9KVtBLVpdezF9XFxkezEwfVtBLVowLTldezEyfSQvLFxuICBKTzogL14oSk9bMC05XXsyfSlbQS1aXXs0fVxcZHsyMn0kLyxcbiAgS1c6IC9eKEtXWzAtOV17Mn0pW0EtWl17NH1bQS1aMC05XXsyMn0kLyxcbiAgS1o6IC9eKEtaWzAtOV17Mn0pXFxkezN9W0EtWjAtOV17MTN9JC8sXG4gIExCOiAvXihMQlswLTldezJ9KVxcZHs0fVtBLVowLTldezIwfSQvLFxuICBMQzogL14oTENbMC05XXsyfSlbQS1aXXs0fVtBLVowLTldezI0fSQvLFxuICBMSTogL14oTElbMC05XXsyfSlcXGR7NX1bQS1aMC05XXsxMn0kLyxcbiAgTFQ6IC9eKExUWzAtOV17Mn0pXFxkezE2fSQvLFxuICBMVTogL14oTFVbMC05XXsyfSlcXGR7M31bQS1aMC05XXsxM30kLyxcbiAgTFY6IC9eKExWWzAtOV17Mn0pW0EtWl17NH1bQS1aMC05XXsxM30kLyxcbiAgTUM6IC9eKE1DWzAtOV17Mn0pXFxkezEwfVtBLVowLTldezExfVxcZHsyfSQvLFxuICBNRDogL14oTURbMC05XXsyfSlbQS1aMC05XXsyMH0kLyxcbiAgTUU6IC9eKE1FWzAtOV17Mn0pXFxkezE4fSQvLFxuICBNSzogL14oTUtbMC05XXsyfSlcXGR7M31bQS1aMC05XXsxMH1cXGR7Mn0kLyxcbiAgTVI6IC9eKE1SWzAtOV17Mn0pXFxkezIzfSQvLFxuICBNVDogL14oTVRbMC05XXsyfSlbQS1aXXs0fVxcZHs1fVtBLVowLTldezE4fSQvLFxuICBNVTogL14oTVVbMC05XXsyfSlbQS1aXXs0fVxcZHsxOX1bQS1aXXszfSQvLFxuICBNWjogL14oTVpbMC05XXsyfSlcXGR7MjF9JC8sXG4gIE5MOiAvXihOTFswLTldezJ9KVtBLVpdezR9XFxkezEwfSQvLFxuICBOTzogL14oTk9bMC05XXsyfSlcXGR7MTF9JC8sXG4gIFBLOiAvXihQS1swLTldezJ9KVtBLVowLTldezR9XFxkezE2fSQvLFxuICBQTDogL14oUExbMC05XXsyfSlcXGR7MjR9JC8sXG4gIFBTOiAvXihQU1swLTldezJ9KVtBLVowLTldezR9XFxkezIxfSQvLFxuICBQVDogL14oUFRbMC05XXsyfSlcXGR7MjF9JC8sXG4gIFFBOiAvXihRQVswLTldezJ9KVtBLVpdezR9W0EtWjAtOV17MjF9JC8sXG4gIFJPOiAvXihST1swLTldezJ9KVtBLVpdezR9W0EtWjAtOV17MTZ9JC8sXG4gIFJTOiAvXihSU1swLTldezJ9KVxcZHsxOH0kLyxcbiAgU0E6IC9eKFNBWzAtOV17Mn0pXFxkezJ9W0EtWjAtOV17MTh9JC8sXG4gIFNDOiAvXihTQ1swLTldezJ9KVtBLVpdezR9XFxkezIwfVtBLVpdezN9JC8sXG4gIFNFOiAvXihTRVswLTldezJ9KVxcZHsyMH0kLyxcbiAgU0k6IC9eKFNJWzAtOV17Mn0pXFxkezE1fSQvLFxuICBTSzogL14oU0tbMC05XXsyfSlcXGR7MjB9JC8sXG4gIFNNOiAvXihTTVswLTldezJ9KVtBLVpdezF9XFxkezEwfVtBLVowLTldezEyfSQvLFxuICBTVjogL14oU1ZbMC05XXsyfSlbQS1aMC05XXs0fVxcZHsyMH0kLyxcbiAgVEw6IC9eKFRMWzAtOV17Mn0pXFxkezE5fSQvLFxuICBUTjogL14oVE5bMC05XXsyfSlcXGR7MjB9JC8sXG4gIFRSOiAvXihUUlswLTldezJ9KVxcZHs1fVtBLVowLTldezE3fSQvLFxuICBVQTogL14oVUFbMC05XXsyfSlcXGR7Nn1bQS1aMC05XXsxOX0kLyxcbiAgVkE6IC9eKFZBWzAtOV17Mn0pXFxkezE4fSQvLFxuICBWRzogL14oVkdbMC05XXsyfSlbQS1aMC05XXs0fVxcZHsxNn0kLyxcbiAgWEs6IC9eKFhLWzAtOV17Mn0pXFxkezE2fSQvXG59O1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHN0cmluZyBoYXMgY29ycmVjdCB1bml2ZXJzYWwgSUJBTiBmb3JtYXRcbiAqIFRoZSBJQkFOIGNvbnNpc3RzIG9mIHVwIHRvIDM0IGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBhcyBmb2xsb3dzOlxuICogQ291bnRyeSBDb2RlIHVzaW5nIElTTyAzMTY2LTEgYWxwaGEtMiwgdHdvIGxldHRlcnNcbiAqIGNoZWNrIGRpZ2l0cywgdHdvIGRpZ2l0cyBhbmRcbiAqIEJhc2ljIEJhbmsgQWNjb3VudCBOdW1iZXIgKEJCQU4pLCB1cCB0byAzMCBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy5cbiAqIE5PVEU6IFBlcm1pdHRlZCBJQkFOIGNoYXJhY3RlcnMgYXJlOiBkaWdpdHMgWzAtOV0gYW5kIHRoZSAyNiBsYXRpbiBhbHBoYWJldGljIFtBLVpdXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIHN0cmluZyB1bmRlciB2YWxpZGF0aW9uXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGhhc1ZhbGlkSWJhbkZvcm1hdChzdHIpIHtcbiAgLy8gU3RyaXAgd2hpdGUgc3BhY2VzIGFuZCBoeXBoZW5zXG4gIHZhciBzdHJpcHBlZFN0ciA9IHN0ci5yZXBsYWNlKC9bXFxzXFwtXSsvZ2ksICcnKS50b1VwcGVyQ2FzZSgpO1xuICB2YXIgaXNvQ291bnRyeUNvZGUgPSBzdHJpcHBlZFN0ci5zbGljZSgwLCAyKS50b1VwcGVyQ2FzZSgpO1xuICByZXR1cm4gaXNvQ291bnRyeUNvZGUgaW4gaWJhblJlZ2V4VGhyb3VnaENvdW50cnlDb2RlICYmIGliYW5SZWdleFRocm91Z2hDb3VudHJ5Q29kZVtpc29Db3VudHJ5Q29kZV0udGVzdChzdHJpcHBlZFN0cik7XG59XG4vKipcbiAgICogQ2hlY2sgd2hldGhlciBzdHJpbmcgaGFzIHZhbGlkIElCQU4gQ2hlY2tzdW1cbiAgICogYnkgcGVyZm9ybWluZyBiYXNpYyBtb2QtOTcgb3BlcmF0aW9uIGFuZFxuICAgKiB0aGUgcmVtYWluZGVyIHNob3VsZCBlcXVhbCAxXG4gICAqIC0tIFN0YXJ0IGJ5IHJlYXJyYW5naW5nIHRoZSBJQkFOIGJ5IG1vdmluZyB0aGUgZm91ciBpbml0aWFsIGNoYXJhY3RlcnMgdG8gdGhlIGVuZCBvZiB0aGUgc3RyaW5nXG4gICAqIC0tIFJlcGxhY2UgZWFjaCBsZXR0ZXIgaW4gdGhlIHN0cmluZyB3aXRoIHR3byBkaWdpdHMsIEEgLT4gMTAsIEIgPSAxMSwgWiA9IDM1XG4gICAqIC0tIEludGVycHJldCB0aGUgc3RyaW5nIGFzIGEgZGVjaW1hbCBpbnRlZ2VyIGFuZFxuICAgKiAtLSBjb21wdXRlIHRoZSByZW1haW5kZXIgb24gZGl2aXNpb24gYnkgOTcgKG1vZCA5NylcbiAgICogUmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnRlcm5hdGlvbmFsX0JhbmtfQWNjb3VudF9OdW1iZXJcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG5mdW5jdGlvbiBoYXNWYWxpZEliYW5DaGVja3N1bShzdHIpIHtcbiAgdmFyIHN0cmlwcGVkU3RyID0gc3RyLnJlcGxhY2UoL1teQS1aMC05XSsvZ2ksICcnKS50b1VwcGVyQ2FzZSgpOyAvLyBLZWVwIG9ubHkgZGlnaXRzIGFuZCBBLVogbGF0aW4gYWxwaGFiZXRpY1xuXG4gIHZhciByZWFycmFuZ2VkID0gc3RyaXBwZWRTdHIuc2xpY2UoNCkgKyBzdHJpcHBlZFN0ci5zbGljZSgwLCA0KTtcbiAgdmFyIGFscGhhQ2Fwc1JlcGxhY2VkV2l0aERpZ2l0cyA9IHJlYXJyYW5nZWQucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24gKGNoYXIpIHtcbiAgICByZXR1cm4gY2hhci5jaGFyQ29kZUF0KDApIC0gNTU7XG4gIH0pO1xuICB2YXIgcmVtYWluZGVyID0gYWxwaGFDYXBzUmVwbGFjZWRXaXRoRGlnaXRzLm1hdGNoKC9cXGR7MSw3fS9nKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdmFsdWUpIHtcbiAgICByZXR1cm4gTnVtYmVyKGFjYyArIHZhbHVlKSAlIDk3O1xuICB9LCAnJyk7XG4gIHJldHVybiByZW1haW5kZXIgPT09IDE7XG59XG5cbmZ1bmN0aW9uIGlzSUJBTihzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGhhc1ZhbGlkSWJhbkZvcm1hdChzdHIpICYmIGhhc1ZhbGlkSWJhbkNoZWNrc3VtKHN0cik7XG59XG5cbnZhciBsb2NhbGVzID0gT2JqZWN0LmtleXMoaWJhblJlZ2V4VGhyb3VnaENvdW50cnlDb2RlKTtcbmV4cG9ydHMubG9jYWxlcyA9IGxvY2FsZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lNRUk7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBpbWVpUmVnZXhXaXRob3V0SHlwZW5zID0gL15bMC05XXsxNX0kLztcbnZhciBpbWVpUmVnZXhXaXRoSHlwZW5zID0gL15cXGR7Mn0tXFxkezZ9LVxcZHs2fS1cXGR7MX0kLztcblxuZnVuY3Rpb24gaXNJTUVJKHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gZGVmYXVsdCByZWdleCBmb3IgY2hlY2tpbmcgaW1laSBpcyB0aGUgb25lIHdpdGhvdXQgaHlwaGVuc1xuXG4gIHZhciBpbWVpUmVnZXggPSBpbWVpUmVnZXhXaXRob3V0SHlwZW5zO1xuXG4gIGlmIChvcHRpb25zLmFsbG93X2h5cGhlbnMpIHtcbiAgICBpbWVpUmVnZXggPSBpbWVpUmVnZXhXaXRoSHlwZW5zO1xuICB9XG5cbiAgaWYgKCFpbWVpUmVnZXgudGVzdChzdHIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RyID0gc3RyLnJlcGxhY2UoLy0vZywgJycpO1xuICB2YXIgc3VtID0gMCxcbiAgICAgIG11bCA9IDIsXG4gICAgICBsID0gMTQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgZGlnaXQgPSBzdHIuc3Vic3RyaW5nKGwgLSBpIC0gMSwgbCAtIGkpO1xuICAgIHZhciB0cCA9IHBhcnNlSW50KGRpZ2l0LCAxMCkgKiBtdWw7XG5cbiAgICBpZiAodHAgPj0gMTApIHtcbiAgICAgIHN1bSArPSB0cCAlIDEwICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VtICs9IHRwO1xuICAgIH1cblxuICAgIGlmIChtdWwgPT09IDEpIHtcbiAgICAgIG11bCArPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBtdWwgLT0gMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY2hrID0gKDEwIC0gc3VtICUgMTApICUgMTA7XG5cbiAgaWYgKGNoayAhPT0gcGFyc2VJbnQoc3RyLnN1YnN0cmluZygxNCwgMTUpLCAxMCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJUDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4xMS4zLiAgRXhhbXBsZXNcblxuICAgVGhlIGZvbGxvd2luZyBhZGRyZXNzZXNcblxuICAgICAgICAgICAgIGZlODA6OjEyMzQgKG9uIHRoZSAxc3QgbGluayBvZiB0aGUgbm9kZSlcbiAgICAgICAgICAgICBmZjAyOjo1Njc4IChvbiB0aGUgNXRoIGxpbmsgb2YgdGhlIG5vZGUpXG4gICAgICAgICAgICAgZmYwODo6OWFiYyAob24gdGhlIDEwdGggb3JnYW5pemF0aW9uIG9mIHRoZSBub2RlKVxuXG4gICB3b3VsZCBiZSByZXByZXNlbnRlZCBhcyBmb2xsb3dzOlxuXG4gICAgICAgICAgICAgZmU4MDo6MTIzNCUxXG4gICAgICAgICAgICAgZmYwMjo6NTY3OCU1XG4gICAgICAgICAgICAgZmYwODo6OWFiYyUxMFxuXG4gICAoSGVyZSB3ZSBhc3N1bWUgYSBuYXR1cmFsIHRyYW5zbGF0aW9uIGZyb20gYSB6b25lIGluZGV4IHRvIHRoZVxuICAgPHpvbmVfaWQ+IHBhcnQsIHdoZXJlIHRoZSBOdGggem9uZSBvZiBhbnkgc2NvcGUgaXMgdHJhbnNsYXRlZCBpbnRvXG4gICBcIk5cIi4pXG5cbiAgIElmIHdlIHVzZSBpbnRlcmZhY2UgbmFtZXMgYXMgPHpvbmVfaWQ+LCB0aG9zZSBhZGRyZXNzZXMgY291bGQgYWxzbyBiZVxuICAgcmVwcmVzZW50ZWQgYXMgZm9sbG93czpcblxuICAgICAgICAgICAgZmU4MDo6MTIzNCVuZTBcbiAgICAgICAgICAgIGZmMDI6OjU2NzglcHZjMS4zXG4gICAgICAgICAgICBmZjA4Ojo5YWJjJWludGVyZmFjZTEwXG5cbiAgIHdoZXJlIHRoZSBpbnRlcmZhY2UgXCJuZTBcIiBiZWxvbmdzIHRvIHRoZSAxc3QgbGluaywgXCJwdmMxLjNcIiBiZWxvbmdzXG4gICB0byB0aGUgNXRoIGxpbmssIGFuZCBcImludGVyZmFjZTEwXCIgYmVsb25ncyB0byB0aGUgMTB0aCBvcmdhbml6YXRpb24uXG4gKiAqICovXG52YXIgSVB2NFNlZ21lbnRGb3JtYXQgPSAnKD86WzAtOV18WzEtOV1bMC05XXwxWzAtOV1bMC05XXwyWzAtNF1bMC05XXwyNVswLTVdKSc7XG52YXIgSVB2NEFkZHJlc3NGb3JtYXQgPSBcIihcIi5jb25jYXQoSVB2NFNlZ21lbnRGb3JtYXQsIFwiWy5dKXszfVwiKS5jb25jYXQoSVB2NFNlZ21lbnRGb3JtYXQpO1xudmFyIElQdjRBZGRyZXNzUmVnRXhwID0gbmV3IFJlZ0V4cChcIl5cIi5jb25jYXQoSVB2NEFkZHJlc3NGb3JtYXQsIFwiJFwiKSk7XG52YXIgSVB2NlNlZ21lbnRGb3JtYXQgPSAnKD86WzAtOWEtZkEtRl17MSw0fSknO1xudmFyIElQdjZBZGRyZXNzUmVnRXhwID0gbmV3IFJlZ0V4cCgnXignICsgXCIoPzpcIi5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiOil7N30oPzpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcInw6KXxcIikgKyBcIig/OlwiLmNvbmNhdChJUHY2U2VnbWVudEZvcm1hdCwgXCI6KXs2fSg/OlwiKS5jb25jYXQoSVB2NEFkZHJlc3NGb3JtYXQsIFwifDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcInw6KXxcIikgKyBcIig/OlwiLmNvbmNhdChJUHY2U2VnbWVudEZvcm1hdCwgXCI6KXs1fSg/OjpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDJ9fDopfFwiKSArIFwiKD86XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIjopezR9KD86KDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCwxfTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDN9fDopfFwiKSArIFwiKD86XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIjopezN9KD86KDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCwyfTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDR9fDopfFwiKSArIFwiKD86XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIjopezJ9KD86KDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCwzfTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDV9fDopfFwiKSArIFwiKD86XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIjopezF9KD86KDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCw0fTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDZ9fDopfFwiKSArIFwiKD86OigoPzo6XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCw1fTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoPzo6XCIpLmNvbmNhdChJUHY2U2VnbWVudEZvcm1hdCwgXCIpezEsN318OikpXCIpICsgJykoJVswLTlhLXpBLVotLjpdezEsfSk/JCcpO1xuXG5mdW5jdGlvbiBpc0lQKHN0cikge1xuICB2YXIgdmVyc2lvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZlcnNpb24gPSBTdHJpbmcodmVyc2lvbik7XG5cbiAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIGlzSVAoc3RyLCA0KSB8fCBpc0lQKHN0ciwgNik7XG4gIH1cblxuICBpZiAodmVyc2lvbiA9PT0gJzQnKSB7XG4gICAgaWYgKCFJUHY0QWRkcmVzc1JlZ0V4cC50ZXN0KHN0cikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcGFydHMgPSBzdHIuc3BsaXQoJy4nKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYSAtIGI7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnRzWzNdIDw9IDI1NTtcbiAgfVxuXG4gIGlmICh2ZXJzaW9uID09PSAnNicpIHtcbiAgICByZXR1cm4gISFJUHY2QWRkcmVzc1JlZ0V4cC50ZXN0KHN0cik7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSVBSYW5nZTtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxudmFyIF9pc0lQID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0lQXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHN1Ym5ldE1heWJlID0gL15cXGR7MSwzfSQvO1xudmFyIHY0U3VibmV0ID0gMzI7XG52YXIgdjZTdWJuZXQgPSAxMjg7XG5cbmZ1bmN0aW9uIGlzSVBSYW5nZShzdHIpIHtcbiAgdmFyIHZlcnNpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgcGFydHMgPSBzdHIuc3BsaXQoJy8nKTsgLy8gcGFydHNbMF0gLT4gaXAsIHBhcnRzWzFdIC0+IHN1Ym5ldFxuXG4gIGlmIChwYXJ0cy5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXN1Ym5ldE1heWJlLnRlc3QocGFydHNbMV0pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIERpc2FsbG93IHByZWNlZGluZyAwIGkuZS4gMDEsIDAyLCAuLi5cblxuXG4gIGlmIChwYXJ0c1sxXS5sZW5ndGggPiAxICYmIHBhcnRzWzFdLnN0YXJ0c1dpdGgoJzAnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBpc1ZhbGlkSVAgPSAoMCwgX2lzSVAuZGVmYXVsdCkocGFydHNbMF0sIHZlcnNpb24pO1xuXG4gIGlmICghaXNWYWxpZElQKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIERlZmluZSB2YWxpZCBzdWJuZXQgYWNjb3JkaW5nIHRvIElQJ3MgdmVyc2lvblxuXG5cbiAgdmFyIGV4cGVjdGVkU3VibmV0ID0gbnVsbDtcblxuICBzd2l0Y2ggKFN0cmluZyh2ZXJzaW9uKSkge1xuICAgIGNhc2UgJzQnOlxuICAgICAgZXhwZWN0ZWRTdWJuZXQgPSB2NFN1Ym5ldDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnNic6XG4gICAgICBleHBlY3RlZFN1Ym5ldCA9IHY2U3VibmV0O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgZXhwZWN0ZWRTdWJuZXQgPSAoMCwgX2lzSVAuZGVmYXVsdCkocGFydHNbMF0sICc2JykgPyB2NlN1Ym5ldCA6IHY0U3VibmV0O1xuICB9XG5cbiAgcmV0dXJuIHBhcnRzWzFdIDw9IGV4cGVjdGVkU3VibmV0ICYmIHBhcnRzWzFdID49IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSVNCTjtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGlzYm4xME1heWJlID0gL14oPzpbMC05XXs5fVh8WzAtOV17MTB9KSQvO1xudmFyIGlzYm4xM01heWJlID0gL14oPzpbMC05XXsxM30pJC87XG52YXIgZmFjdG9yID0gWzEsIDNdO1xuXG5mdW5jdGlvbiBpc0lTQk4oc3RyKSB7XG4gIHZhciB2ZXJzaW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgdmVyc2lvbiA9IFN0cmluZyh2ZXJzaW9uKTtcblxuICBpZiAoIXZlcnNpb24pIHtcbiAgICByZXR1cm4gaXNJU0JOKHN0ciwgMTApIHx8IGlzSVNCTihzdHIsIDEzKTtcbiAgfVxuXG4gIHZhciBzYW5pdGl6ZWQgPSBzdHIucmVwbGFjZSgvW1xccy1dKy9nLCAnJyk7XG4gIHZhciBjaGVja3N1bSA9IDA7XG4gIHZhciBpO1xuXG4gIGlmICh2ZXJzaW9uID09PSAnMTAnKSB7XG4gICAgaWYgKCFpc2JuMTBNYXliZS50ZXN0KHNhbml0aXplZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgOTsgaSsrKSB7XG4gICAgICBjaGVja3N1bSArPSAoaSArIDEpICogc2FuaXRpemVkLmNoYXJBdChpKTtcbiAgICB9XG5cbiAgICBpZiAoc2FuaXRpemVkLmNoYXJBdCg5KSA9PT0gJ1gnKSB7XG4gICAgICBjaGVja3N1bSArPSAxMCAqIDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGVja3N1bSArPSAxMCAqIHNhbml0aXplZC5jaGFyQXQoOSk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrc3VtICUgMTEgPT09IDApIHtcbiAgICAgIHJldHVybiAhIXNhbml0aXplZDtcbiAgICB9XG4gIH0gZWxzZSBpZiAodmVyc2lvbiA9PT0gJzEzJykge1xuICAgIGlmICghaXNibjEzTWF5YmUudGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgIGNoZWNrc3VtICs9IGZhY3RvcltpICUgMl0gKiBzYW5pdGl6ZWQuY2hhckF0KGkpO1xuICAgIH1cblxuICAgIGlmIChzYW5pdGl6ZWQuY2hhckF0KDEyKSAtICgxMCAtIGNoZWNrc3VtICUgMTApICUgMTAgPT09IDApIHtcbiAgICAgIHJldHVybiAhIXNhbml0aXplZDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSVNJTjtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGlzaW4gPSAvXltBLVpdezJ9WzAtOUEtWl17OX1bMC05XSQvOyAvLyB0aGlzIGxpbmsgZGV0YWlscyBob3cgdGhlIGNoZWNrIGRpZ2l0IGlzIGNhbGN1bGF0ZWQ6XG4vLyBodHRwczovL3d3dy5pc2luLm9yZy9pc2luLWZvcm1hdC8uIGl0IGlzIGEgbGl0dGxlIGJpdFxuLy8gb2RkIGluIHRoYXQgaXQgd29ya3Mgd2l0aCBkaWdpdHMsIG5vdCBudW1iZXJzLiBpbiBvcmRlclxuLy8gdG8gbWFrZSBvbmx5IG9uZSBwYXNzIHRocm91Z2ggdGhlIElTSU4gY2hhcmFjdGVycywgdGhlXG4vLyBlYWNoIGFscGhhIGNoYXJhY3RlciBpcyBoYW5kbGVkIGFzIDIgY2hhcmFjdGVycyB3aXRoaW5cbi8vIHRoZSBsb29wLlxuXG5mdW5jdGlvbiBpc0lTSU4oc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG5cbiAgaWYgKCFpc2luLnRlc3Qoc3RyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBkb3VibGUgPSB0cnVlO1xuICB2YXIgc3VtID0gMDsgLy8gY29udmVydCB2YWx1ZXNcblxuICBmb3IgKHZhciBpID0gc3RyLmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKHN0cltpXSA+PSAnQScgJiYgc3RyW2ldIDw9ICdaJykge1xuICAgICAgdmFyIHZhbHVlID0gc3RyW2ldLmNoYXJDb2RlQXQoMCkgLSA1NTtcbiAgICAgIHZhciBsbyA9IHZhbHVlICUgMTA7XG4gICAgICB2YXIgaGkgPSBNYXRoLnRydW5jKHZhbHVlIC8gMTApOyAvLyBsZXR0ZXJzIGhhdmUgdHdvIGRpZ2l0cywgc28gaGFuZGxlIHRoZSBsb3cgb3JkZXJcbiAgICAgIC8vIGFuZCBoaWdoIG9yZGVyIGRpZ2l0cyBzZXBhcmF0ZWx5LlxuXG4gICAgICBmb3IgKHZhciBfaSA9IDAsIF9hcnIgPSBbbG8sIGhpXTsgX2kgPCBfYXJyLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgZGlnaXQgPSBfYXJyW19pXTtcblxuICAgICAgICBpZiAoZG91YmxlKSB7XG4gICAgICAgICAgaWYgKGRpZ2l0ID49IDUpIHtcbiAgICAgICAgICAgIHN1bSArPSAxICsgKGRpZ2l0IC0gNSkgKiAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdW0gKz0gZGlnaXQgKiAyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdW0gKz0gZGlnaXQ7XG4gICAgICAgIH1cblxuICAgICAgICBkb3VibGUgPSAhZG91YmxlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RpZ2l0ID0gc3RyW2ldLmNoYXJDb2RlQXQoMCkgLSAnMCcuY2hhckNvZGVBdCgwKTtcblxuICAgICAgaWYgKGRvdWJsZSkge1xuICAgICAgICBpZiAoX2RpZ2l0ID49IDUpIHtcbiAgICAgICAgICBzdW0gKz0gMSArIChfZGlnaXQgLSA1KSAqIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3VtICs9IF9kaWdpdCAqIDI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1bSArPSBfZGlnaXQ7XG4gICAgICB9XG5cbiAgICAgIGRvdWJsZSA9ICFkb3VibGU7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNoZWNrID0gTWF0aC50cnVuYygoc3VtICsgOSkgLyAxMCkgKiAxMCAtIHN1bTtcbiAgcmV0dXJuICtzdHJbc3RyLmxlbmd0aCAtIDFdID09PSBjaGVjaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJU08zMTY2MUFscGhhMjtcbmV4cG9ydHMuQ291bnRyeUNvZGVzID0gdm9pZCAwO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT18zMTY2LTFfYWxwaGEtMlxudmFyIHZhbGlkSVNPMzE2NjFBbHBoYTJDb3VudHJpZXNDb2RlcyA9IG5ldyBTZXQoWydBRCcsICdBRScsICdBRicsICdBRycsICdBSScsICdBTCcsICdBTScsICdBTycsICdBUScsICdBUicsICdBUycsICdBVCcsICdBVScsICdBVycsICdBWCcsICdBWicsICdCQScsICdCQicsICdCRCcsICdCRScsICdCRicsICdCRycsICdCSCcsICdCSScsICdCSicsICdCTCcsICdCTScsICdCTicsICdCTycsICdCUScsICdCUicsICdCUycsICdCVCcsICdCVicsICdCVycsICdCWScsICdCWicsICdDQScsICdDQycsICdDRCcsICdDRicsICdDRycsICdDSCcsICdDSScsICdDSycsICdDTCcsICdDTScsICdDTicsICdDTycsICdDUicsICdDVScsICdDVicsICdDVycsICdDWCcsICdDWScsICdDWicsICdERScsICdESicsICdESycsICdETScsICdETycsICdEWicsICdFQycsICdFRScsICdFRycsICdFSCcsICdFUicsICdFUycsICdFVCcsICdGSScsICdGSicsICdGSycsICdGTScsICdGTycsICdGUicsICdHQScsICdHQicsICdHRCcsICdHRScsICdHRicsICdHRycsICdHSCcsICdHSScsICdHTCcsICdHTScsICdHTicsICdHUCcsICdHUScsICdHUicsICdHUycsICdHVCcsICdHVScsICdHVycsICdHWScsICdISycsICdITScsICdITicsICdIUicsICdIVCcsICdIVScsICdJRCcsICdJRScsICdJTCcsICdJTScsICdJTicsICdJTycsICdJUScsICdJUicsICdJUycsICdJVCcsICdKRScsICdKTScsICdKTycsICdKUCcsICdLRScsICdLRycsICdLSCcsICdLSScsICdLTScsICdLTicsICdLUCcsICdLUicsICdLVycsICdLWScsICdLWicsICdMQScsICdMQicsICdMQycsICdMSScsICdMSycsICdMUicsICdMUycsICdMVCcsICdMVScsICdMVicsICdMWScsICdNQScsICdNQycsICdNRCcsICdNRScsICdNRicsICdNRycsICdNSCcsICdNSycsICdNTCcsICdNTScsICdNTicsICdNTycsICdNUCcsICdNUScsICdNUicsICdNUycsICdNVCcsICdNVScsICdNVicsICdNVycsICdNWCcsICdNWScsICdNWicsICdOQScsICdOQycsICdORScsICdORicsICdORycsICdOSScsICdOTCcsICdOTycsICdOUCcsICdOUicsICdOVScsICdOWicsICdPTScsICdQQScsICdQRScsICdQRicsICdQRycsICdQSCcsICdQSycsICdQTCcsICdQTScsICdQTicsICdQUicsICdQUycsICdQVCcsICdQVycsICdQWScsICdRQScsICdSRScsICdSTycsICdSUycsICdSVScsICdSVycsICdTQScsICdTQicsICdTQycsICdTRCcsICdTRScsICdTRycsICdTSCcsICdTSScsICdTSicsICdTSycsICdTTCcsICdTTScsICdTTicsICdTTycsICdTUicsICdTUycsICdTVCcsICdTVicsICdTWCcsICdTWScsICdTWicsICdUQycsICdURCcsICdURicsICdURycsICdUSCcsICdUSicsICdUSycsICdUTCcsICdUTScsICdUTicsICdUTycsICdUUicsICdUVCcsICdUVicsICdUVycsICdUWicsICdVQScsICdVRycsICdVTScsICdVUycsICdVWScsICdVWicsICdWQScsICdWQycsICdWRScsICdWRycsICdWSScsICdWTicsICdWVScsICdXRicsICdXUycsICdZRScsICdZVCcsICdaQScsICdaTScsICdaVyddKTtcblxuZnVuY3Rpb24gaXNJU08zMTY2MUFscGhhMihzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIHZhbGlkSVNPMzE2NjFBbHBoYTJDb3VudHJpZXNDb2Rlcy5oYXMoc3RyLnRvVXBwZXJDYXNlKCkpO1xufVxuXG52YXIgQ291bnRyeUNvZGVzID0gdmFsaWRJU08zMTY2MUFscGhhMkNvdW50cmllc0NvZGVzO1xuZXhwb3J0cy5Db3VudHJ5Q29kZXMgPSBDb3VudHJ5Q29kZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lTTzMxNjYxQWxwaGEzO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT18zMTY2LTFfYWxwaGEtM1xudmFyIHZhbGlkSVNPMzE2NjFBbHBoYTNDb3VudHJpZXNDb2RlcyA9IG5ldyBTZXQoWydBRkcnLCAnQUxBJywgJ0FMQicsICdEWkEnLCAnQVNNJywgJ0FORCcsICdBR08nLCAnQUlBJywgJ0FUQScsICdBVEcnLCAnQVJHJywgJ0FSTScsICdBQlcnLCAnQVVTJywgJ0FVVCcsICdBWkUnLCAnQkhTJywgJ0JIUicsICdCR0QnLCAnQlJCJywgJ0JMUicsICdCRUwnLCAnQkxaJywgJ0JFTicsICdCTVUnLCAnQlROJywgJ0JPTCcsICdCRVMnLCAnQklIJywgJ0JXQScsICdCVlQnLCAnQlJBJywgJ0lPVCcsICdCUk4nLCAnQkdSJywgJ0JGQScsICdCREknLCAnS0hNJywgJ0NNUicsICdDQU4nLCAnQ1BWJywgJ0NZTScsICdDQUYnLCAnVENEJywgJ0NITCcsICdDSE4nLCAnQ1hSJywgJ0NDSycsICdDT0wnLCAnQ09NJywgJ0NPRycsICdDT0QnLCAnQ09LJywgJ0NSSScsICdDSVYnLCAnSFJWJywgJ0NVQicsICdDVVcnLCAnQ1lQJywgJ0NaRScsICdETksnLCAnREpJJywgJ0RNQScsICdET00nLCAnRUNVJywgJ0VHWScsICdTTFYnLCAnR05RJywgJ0VSSScsICdFU1QnLCAnRVRIJywgJ0ZMSycsICdGUk8nLCAnRkpJJywgJ0ZJTicsICdGUkEnLCAnR1VGJywgJ1BZRicsICdBVEYnLCAnR0FCJywgJ0dNQicsICdHRU8nLCAnREVVJywgJ0dIQScsICdHSUInLCAnR1JDJywgJ0dSTCcsICdHUkQnLCAnR0xQJywgJ0dVTScsICdHVE0nLCAnR0dZJywgJ0dJTicsICdHTkInLCAnR1VZJywgJ0hUSScsICdITUQnLCAnVkFUJywgJ0hORCcsICdIS0cnLCAnSFVOJywgJ0lTTCcsICdJTkQnLCAnSUROJywgJ0lSTicsICdJUlEnLCAnSVJMJywgJ0lNTicsICdJU1InLCAnSVRBJywgJ0pBTScsICdKUE4nLCAnSkVZJywgJ0pPUicsICdLQVonLCAnS0VOJywgJ0tJUicsICdQUksnLCAnS09SJywgJ0tXVCcsICdLR1onLCAnTEFPJywgJ0xWQScsICdMQk4nLCAnTFNPJywgJ0xCUicsICdMQlknLCAnTElFJywgJ0xUVScsICdMVVgnLCAnTUFDJywgJ01LRCcsICdNREcnLCAnTVdJJywgJ01ZUycsICdNRFYnLCAnTUxJJywgJ01MVCcsICdNSEwnLCAnTVRRJywgJ01SVCcsICdNVVMnLCAnTVlUJywgJ01FWCcsICdGU00nLCAnTURBJywgJ01DTycsICdNTkcnLCAnTU5FJywgJ01TUicsICdNQVInLCAnTU9aJywgJ01NUicsICdOQU0nLCAnTlJVJywgJ05QTCcsICdOTEQnLCAnTkNMJywgJ05aTCcsICdOSUMnLCAnTkVSJywgJ05HQScsICdOSVUnLCAnTkZLJywgJ01OUCcsICdOT1InLCAnT01OJywgJ1BBSycsICdQTFcnLCAnUFNFJywgJ1BBTicsICdQTkcnLCAnUFJZJywgJ1BFUicsICdQSEwnLCAnUENOJywgJ1BPTCcsICdQUlQnLCAnUFJJJywgJ1FBVCcsICdSRVUnLCAnUk9VJywgJ1JVUycsICdSV0EnLCAnQkxNJywgJ1NITicsICdLTkEnLCAnTENBJywgJ01BRicsICdTUE0nLCAnVkNUJywgJ1dTTScsICdTTVInLCAnU1RQJywgJ1NBVScsICdTRU4nLCAnU1JCJywgJ1NZQycsICdTTEUnLCAnU0dQJywgJ1NYTScsICdTVksnLCAnU1ZOJywgJ1NMQicsICdTT00nLCAnWkFGJywgJ1NHUycsICdTU0QnLCAnRVNQJywgJ0xLQScsICdTRE4nLCAnU1VSJywgJ1NKTScsICdTV1onLCAnU1dFJywgJ0NIRScsICdTWVInLCAnVFdOJywgJ1RKSycsICdUWkEnLCAnVEhBJywgJ1RMUycsICdUR08nLCAnVEtMJywgJ1RPTicsICdUVE8nLCAnVFVOJywgJ1RVUicsICdUS00nLCAnVENBJywgJ1RVVicsICdVR0EnLCAnVUtSJywgJ0FSRScsICdHQlInLCAnVVNBJywgJ1VNSScsICdVUlknLCAnVVpCJywgJ1ZVVCcsICdWRU4nLCAnVk5NJywgJ1ZHQicsICdWSVInLCAnV0xGJywgJ0VTSCcsICdZRU0nLCAnWk1CJywgJ1pXRSddKTtcblxuZnVuY3Rpb24gaXNJU08zMTY2MUFscGhhMyhzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIHZhbGlkSVNPMzE2NjFBbHBoYTNDb3VudHJpZXNDb2Rlcy5oYXMoc3RyLnRvVXBwZXJDYXNlKCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lTTzQyMTc7XG5leHBvcnRzLkN1cnJlbmN5Q29kZXMgPSB2b2lkIDA7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGZyb20gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzQyMTdcbnZhciB2YWxpZElTTzQyMTdDdXJyZW5jeUNvZGVzID0gbmV3IFNldChbJ0FFRCcsICdBRk4nLCAnQUxMJywgJ0FNRCcsICdBTkcnLCAnQU9BJywgJ0FSUycsICdBVUQnLCAnQVdHJywgJ0FaTicsICdCQU0nLCAnQkJEJywgJ0JEVCcsICdCR04nLCAnQkhEJywgJ0JJRicsICdCTUQnLCAnQk5EJywgJ0JPQicsICdCT1YnLCAnQlJMJywgJ0JTRCcsICdCVE4nLCAnQldQJywgJ0JZTicsICdCWkQnLCAnQ0FEJywgJ0NERicsICdDSEUnLCAnQ0hGJywgJ0NIVycsICdDTEYnLCAnQ0xQJywgJ0NOWScsICdDT1AnLCAnQ09VJywgJ0NSQycsICdDVUMnLCAnQ1VQJywgJ0NWRScsICdDWksnLCAnREpGJywgJ0RLSycsICdET1AnLCAnRFpEJywgJ0VHUCcsICdFUk4nLCAnRVRCJywgJ0VVUicsICdGSkQnLCAnRktQJywgJ0dCUCcsICdHRUwnLCAnR0hTJywgJ0dJUCcsICdHTUQnLCAnR05GJywgJ0dUUScsICdHWUQnLCAnSEtEJywgJ0hOTCcsICdIUksnLCAnSFRHJywgJ0hVRicsICdJRFInLCAnSUxTJywgJ0lOUicsICdJUUQnLCAnSVJSJywgJ0lTSycsICdKTUQnLCAnSk9EJywgJ0pQWScsICdLRVMnLCAnS0dTJywgJ0tIUicsICdLTUYnLCAnS1BXJywgJ0tSVycsICdLV0QnLCAnS1lEJywgJ0taVCcsICdMQUsnLCAnTEJQJywgJ0xLUicsICdMUkQnLCAnTFNMJywgJ0xZRCcsICdNQUQnLCAnTURMJywgJ01HQScsICdNS0QnLCAnTU1LJywgJ01OVCcsICdNT1AnLCAnTVJVJywgJ01VUicsICdNVlInLCAnTVdLJywgJ01YTicsICdNWFYnLCAnTVlSJywgJ01aTicsICdOQUQnLCAnTkdOJywgJ05JTycsICdOT0snLCAnTlBSJywgJ05aRCcsICdPTVInLCAnUEFCJywgJ1BFTicsICdQR0snLCAnUEhQJywgJ1BLUicsICdQTE4nLCAnUFlHJywgJ1FBUicsICdST04nLCAnUlNEJywgJ1JVQicsICdSV0YnLCAnU0FSJywgJ1NCRCcsICdTQ1InLCAnU0RHJywgJ1NFSycsICdTR0QnLCAnU0hQJywgJ1NMTCcsICdTT1MnLCAnU1JEJywgJ1NTUCcsICdTVE4nLCAnU1ZDJywgJ1NZUCcsICdTWkwnLCAnVEhCJywgJ1RKUycsICdUTVQnLCAnVE5EJywgJ1RPUCcsICdUUlknLCAnVFREJywgJ1RXRCcsICdUWlMnLCAnVUFIJywgJ1VHWCcsICdVU0QnLCAnVVNOJywgJ1VZSScsICdVWVUnLCAnVVlXJywgJ1VaUycsICdWRVMnLCAnVk5EJywgJ1ZVVicsICdXU1QnLCAnWEFGJywgJ1hBRycsICdYQVUnLCAnWEJBJywgJ1hCQicsICdYQkMnLCAnWEJEJywgJ1hDRCcsICdYRFInLCAnWE9GJywgJ1hQRCcsICdYUEYnLCAnWFBUJywgJ1hTVScsICdYVFMnLCAnWFVBJywgJ1hYWCcsICdZRVInLCAnWkFSJywgJ1pNVycsICdaV0wnXSk7XG5cbmZ1bmN0aW9uIGlzSVNPNDIxNyhzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIHZhbGlkSVNPNDIxN0N1cnJlbmN5Q29kZXMuaGFzKHN0ci50b1VwcGVyQ2FzZSgpKTtcbn1cblxudmFyIEN1cnJlbmN5Q29kZXMgPSB2YWxpZElTTzQyMTdDdXJyZW5jeUNvZGVzO1xuZXhwb3J0cy5DdXJyZW5jeUNvZGVzID0gQ3VycmVuY3lDb2RlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSVNPODYwMTtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuLy8gZnJvbSBodHRwOi8vZ29vLmdsLzBlakhIV1xudmFyIGlzbzg2MDEgPSAvXihbXFwrLV0/XFxkezR9KD8hXFxkezJ9XFxiKSkoKC0/KSgoMFsxLTldfDFbMC0yXSkoXFwzKFsxMl1cXGR8MFsxLTldfDNbMDFdKSk/fFcoWzAtNF1cXGR8NVswLTNdKSgtP1sxLTddKT98KDAwWzEtOV18MFsxLTldXFxkfFsxMl1cXGR7Mn18MyhbMC01XVxcZHw2WzEtNl0pKSkoW1RcXHNdKCgoWzAxXVxcZHwyWzAtM10pKCg6PylbMC01XVxcZCk/fDI0Oj8wMCkoW1xcLixdXFxkKyg/ITopKT8pPyhcXDE3WzAtNV1cXGQoW1xcLixdXFxkKyk/KT8oW3paXXwoW1xcKy1dKShbMDFdXFxkfDJbMC0zXSk6PyhbMC01XVxcZCk/KT8pPyk/JC87IC8vIHNhbWUgYXMgYWJvdmUsIGV4Y2VwdCB3aXRoIGEgc3RyaWN0ICdUJyBzZXBhcmF0b3IgYmV0d2VlbiBkYXRlIGFuZCB0aW1lXG5cbnZhciBpc284NjAxU3RyaWN0U2VwYXJhdG9yID0gL14oW1xcKy1dP1xcZHs0fSg/IVxcZHsyfVxcYikpKCgtPykoKDBbMS05XXwxWzAtMl0pKFxcMyhbMTJdXFxkfDBbMS05XXwzWzAxXSkpP3xXKFswLTRdXFxkfDVbMC0zXSkoLT9bMS03XSk/fCgwMFsxLTldfDBbMS05XVxcZHxbMTJdXFxkezJ9fDMoWzAtNV1cXGR8NlsxLTZdKSkpKFtUXSgoKFswMV1cXGR8MlswLTNdKSgoOj8pWzAtNV1cXGQpP3wyNDo/MDApKFtcXC4sXVxcZCsoPyE6KSk/KT8oXFwxN1swLTVdXFxkKFtcXC4sXVxcZCspPyk/KFt6Wl18KFtcXCstXSkoWzAxXVxcZHwyWzAtM10pOj8oWzAtNV1cXGQpPyk/KT8pPyQvO1xuLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cbnZhciBpc1ZhbGlkRGF0ZSA9IGZ1bmN0aW9uIGlzVmFsaWREYXRlKHN0cikge1xuICAvLyBzdHIgbXVzdCBoYXZlIHBhc3NlZCB0aGUgSVNPODYwMSBjaGVja1xuICAvLyB0aGlzIGNoZWNrIGlzIG1lYW50IHRvIGNhdGNoIGludmFsaWQgZGF0ZXNcbiAgLy8gbGlrZSAyMDA5LTAyLTMxXG4gIC8vIGZpcnN0IGNoZWNrIGZvciBvcmRpbmFsIGRhdGVzXG4gIHZhciBvcmRpbmFsTWF0Y2ggPSBzdHIubWF0Y2goL14oXFxkezR9KS0/KFxcZHszfSkoWyBUXXsxfVxcLip8JCkvKTtcblxuICBpZiAob3JkaW5hbE1hdGNoKSB7XG4gICAgdmFyIG9ZZWFyID0gTnVtYmVyKG9yZGluYWxNYXRjaFsxXSk7XG4gICAgdmFyIG9EYXkgPSBOdW1iZXIob3JkaW5hbE1hdGNoWzJdKTsgLy8gaWYgaXMgbGVhcCB5ZWFyXG5cbiAgICBpZiAob1llYXIgJSA0ID09PSAwICYmIG9ZZWFyICUgMTAwICE9PSAwIHx8IG9ZZWFyICUgNDAwID09PSAwKSByZXR1cm4gb0RheSA8PSAzNjY7XG4gICAgcmV0dXJuIG9EYXkgPD0gMzY1O1xuICB9XG5cbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKC8oXFxkezR9KS0/KFxcZHswLDJ9KS0/KFxcZCopLykubWFwKE51bWJlcik7XG4gIHZhciB5ZWFyID0gbWF0Y2hbMV07XG4gIHZhciBtb250aCA9IG1hdGNoWzJdO1xuICB2YXIgZGF5ID0gbWF0Y2hbM107XG4gIHZhciBtb250aFN0cmluZyA9IG1vbnRoID8gXCIwXCIuY29uY2F0KG1vbnRoKS5zbGljZSgtMikgOiBtb250aDtcbiAgdmFyIGRheVN0cmluZyA9IGRheSA/IFwiMFwiLmNvbmNhdChkYXkpLnNsaWNlKC0yKSA6IGRheTsgLy8gY3JlYXRlIGEgZGF0ZSBvYmplY3QgYW5kIGNvbXBhcmVcblxuICB2YXIgZCA9IG5ldyBEYXRlKFwiXCIuY29uY2F0KHllYXIsIFwiLVwiKS5jb25jYXQobW9udGhTdHJpbmcgfHwgJzAxJywgXCItXCIpLmNvbmNhdChkYXlTdHJpbmcgfHwgJzAxJykpO1xuXG4gIGlmIChtb250aCAmJiBkYXkpIHtcbiAgICByZXR1cm4gZC5nZXRVVENGdWxsWWVhcigpID09PSB5ZWFyICYmIGQuZ2V0VVRDTW9udGgoKSArIDEgPT09IG1vbnRoICYmIGQuZ2V0VVRDRGF0ZSgpID09PSBkYXk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGlzSVNPODYwMShzdHIpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgY2hlY2sgPSBvcHRpb25zLnN0cmljdFNlcGFyYXRvciA/IGlzbzg2MDFTdHJpY3RTZXBhcmF0b3IudGVzdChzdHIpIDogaXNvODYwMS50ZXN0KHN0cik7XG4gIGlmIChjaGVjayAmJiBvcHRpb25zLnN0cmljdCkgcmV0dXJuIGlzVmFsaWREYXRlKHN0cik7XG4gIHJldHVybiBjaGVjaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJU1JDO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBzZWUgaHR0cDovL2lzcmMuaWZwaS5vcmcvZW4vaXNyYy1zdGFuZGFyZC9jb2RlLXN5bnRheFxudmFyIGlzcmMgPSAvXltBLVpdezJ9WzAtOUEtWl17M31cXGR7Mn1cXGR7NX0kLztcblxuZnVuY3Rpb24gaXNJU1JDKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gaXNyYy50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSVNTTjtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGlzc24gPSAnXlxcXFxkezR9LT9cXFxcZHszfVtcXFxcZFhdJCc7XG5cbmZ1bmN0aW9uIGlzSVNTTihzdHIpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgdGVzdElzc24gPSBpc3NuO1xuICB0ZXN0SXNzbiA9IG9wdGlvbnMucmVxdWlyZV9oeXBoZW4gPyB0ZXN0SXNzbi5yZXBsYWNlKCc/JywgJycpIDogdGVzdElzc247XG4gIHRlc3RJc3NuID0gb3B0aW9ucy5jYXNlX3NlbnNpdGl2ZSA/IG5ldyBSZWdFeHAodGVzdElzc24pIDogbmV3IFJlZ0V4cCh0ZXN0SXNzbiwgJ2knKTtcblxuICBpZiAoIXRlc3RJc3NuLnRlc3Qoc3RyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBkaWdpdHMgPSBzdHIucmVwbGFjZSgnLScsICcnKS50b1VwcGVyQ2FzZSgpO1xuICB2YXIgY2hlY2tzdW0gPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGlnaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRpZ2l0ID0gZGlnaXRzW2ldO1xuICAgIGNoZWNrc3VtICs9IChkaWdpdCA9PT0gJ1gnID8gMTAgOiArZGlnaXQpICogKDggLSBpKTtcbiAgfVxuXG4gIHJldHVybiBjaGVja3N1bSAlIDExID09PSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lkZW50aXR5Q2FyZDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxudmFyIF9pc0ludCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNJbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdmFsaWRhdG9ycyA9IHtcbiAgUEw6IGZ1bmN0aW9uIFBMKHN0cikge1xuICAgICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gICAgdmFyIHdlaWdodE9mRGlnaXRzID0ge1xuICAgICAgMTogMSxcbiAgICAgIDI6IDMsXG4gICAgICAzOiA3LFxuICAgICAgNDogOSxcbiAgICAgIDU6IDEsXG4gICAgICA2OiAzLFxuICAgICAgNzogNyxcbiAgICAgIDg6IDksXG4gICAgICA5OiAxLFxuICAgICAgMTA6IDMsXG4gICAgICAxMTogMFxuICAgIH07XG5cbiAgICBpZiAoc3RyICE9IG51bGwgJiYgc3RyLmxlbmd0aCA9PT0gMTEgJiYgKDAsIF9pc0ludC5kZWZhdWx0KShzdHIsIHtcbiAgICAgIGFsbG93X2xlYWRpbmdfemVyb2VzOiB0cnVlXG4gICAgfSkpIHtcbiAgICAgIHZhciBkaWdpdHMgPSBzdHIuc3BsaXQoJycpLnNsaWNlKDAsIC0xKTtcbiAgICAgIHZhciBzdW0gPSBkaWdpdHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGRpZ2l0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gYWNjICsgTnVtYmVyKGRpZ2l0KSAqIHdlaWdodE9mRGlnaXRzW2luZGV4ICsgMV07XG4gICAgICB9LCAwKTtcbiAgICAgIHZhciBtb2R1bG8gPSBzdW0gJSAxMDtcbiAgICAgIHZhciBsYXN0RGlnaXQgPSBOdW1iZXIoc3RyLmNoYXJBdChzdHIubGVuZ3RoIC0gMSkpO1xuXG4gICAgICBpZiAobW9kdWxvID09PSAwICYmIGxhc3REaWdpdCA9PT0gMCB8fCBsYXN0RGlnaXQgPT09IDEwIC0gbW9kdWxvKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgRVM6IGZ1bmN0aW9uIEVTKHN0cikge1xuICAgICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gICAgdmFyIEROSSA9IC9eWzAtOVgtWl1bMC05XXs3fVtUUldBR01ZRlBEWEJOSlpTUVZITENLRV0kLztcbiAgICB2YXIgY2hhcnNWYWx1ZSA9IHtcbiAgICAgIFg6IDAsXG4gICAgICBZOiAxLFxuICAgICAgWjogMlxuICAgIH07XG4gICAgdmFyIGNvbnRyb2xEaWdpdHMgPSBbJ1QnLCAnUicsICdXJywgJ0EnLCAnRycsICdNJywgJ1knLCAnRicsICdQJywgJ0QnLCAnWCcsICdCJywgJ04nLCAnSicsICdaJywgJ1MnLCAnUScsICdWJywgJ0gnLCAnTCcsICdDJywgJ0snLCAnRSddOyAvLyBzYW5pdGl6ZSB1c2VyIGlucHV0XG5cbiAgICB2YXIgc2FuaXRpemVkID0gc3RyLnRyaW0oKS50b1VwcGVyQ2FzZSgpOyAvLyB2YWxpZGF0ZSB0aGUgZGF0YSBzdHJ1Y3R1cmVcblxuICAgIGlmICghRE5JLnRlc3Qoc2FuaXRpemVkKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gdmFsaWRhdGUgdGhlIGNvbnRyb2wgZGlnaXRcblxuXG4gICAgdmFyIG51bWJlciA9IHNhbml0aXplZC5zbGljZSgwLCAtMSkucmVwbGFjZSgvW1gsWSxaXS9nLCBmdW5jdGlvbiAoY2hhcikge1xuICAgICAgcmV0dXJuIGNoYXJzVmFsdWVbY2hhcl07XG4gICAgfSk7XG4gICAgcmV0dXJuIHNhbml0aXplZC5lbmRzV2l0aChjb250cm9sRGlnaXRzW251bWJlciAlIDIzXSk7XG4gIH0sXG4gIEZJOiBmdW5jdGlvbiBGSShzdHIpIHtcbiAgICAvLyBodHRwczovL2R2di5maS9lbi9wZXJzb25hbC1pZGVudGl0eS1jb2RlIzp+OnRleHQ9Y29udHJvbCUyMGNoYXJhY3RlciUyMGZvciUyMGEtLHBlcnNvbmFsLC1pZGVudGl0eSUyMGNvZGUlMjBjYWxjdWxhdGVkXG4gICAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcblxuICAgIGlmIChzdHIubGVuZ3RoICE9PSAxMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghc3RyLm1hdGNoKC9eXFxkezZ9W1xcLUFcXCtdXFxkezN9WzAtOUFCQ0RFRkhKS0xNTlBSU1RVVldYWV17MX0kLykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgY2hlY2tEaWdpdHMgPSAnMDEyMzQ1Njc4OUFCQ0RFRkhKS0xNTlBSU1RVVldYWSc7XG4gICAgdmFyIGlkQXNOdW1iZXIgPSBwYXJzZUludChzdHIuc2xpY2UoMCwgNiksIDEwKSAqIDEwMDAgKyBwYXJzZUludChzdHIuc2xpY2UoNywgMTApLCAxMCk7XG4gICAgdmFyIHJlbWFpbmRlciA9IGlkQXNOdW1iZXIgJSAzMTtcbiAgICB2YXIgY2hlY2tEaWdpdCA9IGNoZWNrRGlnaXRzW3JlbWFpbmRlcl07XG4gICAgcmV0dXJuIGNoZWNrRGlnaXQgPT09IHN0ci5zbGljZSgxMCwgMTEpO1xuICB9LFxuICBJTjogZnVuY3Rpb24gSU4oc3RyKSB7XG4gICAgdmFyIEROSSA9IC9eWzEtOV1cXGR7M31cXHM/XFxkezR9XFxzP1xcZHs0fSQvOyAvLyBtdWx0aXBsaWNhdGlvbiB0YWJsZVxuXG4gICAgdmFyIGQgPSBbWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDldLCBbMSwgMiwgMywgNCwgMCwgNiwgNywgOCwgOSwgNV0sIFsyLCAzLCA0LCAwLCAxLCA3LCA4LCA5LCA1LCA2XSwgWzMsIDQsIDAsIDEsIDIsIDgsIDksIDUsIDYsIDddLCBbNCwgMCwgMSwgMiwgMywgOSwgNSwgNiwgNywgOF0sIFs1LCA5LCA4LCA3LCA2LCAwLCA0LCAzLCAyLCAxXSwgWzYsIDUsIDksIDgsIDcsIDEsIDAsIDQsIDMsIDJdLCBbNywgNiwgNSwgOSwgOCwgMiwgMSwgMCwgNCwgM10sIFs4LCA3LCA2LCA1LCA5LCAzLCAyLCAxLCAwLCA0XSwgWzksIDgsIDcsIDYsIDUsIDQsIDMsIDIsIDEsIDBdXTsgLy8gcGVybXV0YXRpb24gdGFibGVcblxuICAgIHZhciBwID0gW1swLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5XSwgWzEsIDUsIDcsIDYsIDIsIDgsIDMsIDAsIDksIDRdLCBbNSwgOCwgMCwgMywgNywgOSwgNiwgMSwgNCwgMl0sIFs4LCA5LCAxLCA2LCAwLCA0LCAzLCA1LCAyLCA3XSwgWzksIDQsIDUsIDMsIDEsIDIsIDYsIDgsIDcsIDBdLCBbNCwgMiwgOCwgNiwgNSwgNywgMywgOSwgMCwgMV0sIFsyLCA3LCA5LCAzLCA4LCAwLCA2LCA0LCAxLCA1XSwgWzcsIDAsIDQsIDYsIDksIDEsIDMsIDIsIDUsIDhdXTsgLy8gc2FuaXRpemUgdXNlciBpbnB1dFxuXG4gICAgdmFyIHNhbml0aXplZCA9IHN0ci50cmltKCk7IC8vIHZhbGlkYXRlIHRoZSBkYXRhIHN0cnVjdHVyZVxuXG4gICAgaWYgKCFETkkudGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBpbnZlcnRlZEFycmF5ID0gc2FuaXRpemVkLnJlcGxhY2UoL1xccy9nLCAnJykuc3BsaXQoJycpLm1hcChOdW1iZXIpLnJldmVyc2UoKTtcbiAgICBpbnZlcnRlZEFycmF5LmZvckVhY2goZnVuY3Rpb24gKHZhbCwgaSkge1xuICAgICAgYyA9IGRbY11bcFtpICUgOF1bdmFsXV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGMgPT09IDA7XG4gIH0sXG4gIElSOiBmdW5jdGlvbiBJUihzdHIpIHtcbiAgICBpZiAoIXN0ci5tYXRjaCgvXlxcZHsxMH0kLykpIHJldHVybiBmYWxzZTtcbiAgICBzdHIgPSBcIjAwMDBcIi5jb25jYXQoc3RyKS5zdWJzdHIoc3RyLmxlbmd0aCAtIDYpO1xuICAgIGlmIChwYXJzZUludChzdHIuc3Vic3RyKDMsIDYpLCAxMCkgPT09IDApIHJldHVybiBmYWxzZTtcbiAgICB2YXIgbGFzdE51bWJlciA9IHBhcnNlSW50KHN0ci5zdWJzdHIoOSwgMSksIDEwKTtcbiAgICB2YXIgc3VtID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgOTsgaSsrKSB7XG4gICAgICBzdW0gKz0gcGFyc2VJbnQoc3RyLnN1YnN0cihpLCAxKSwgMTApICogKDEwIC0gaSk7XG4gICAgfVxuXG4gICAgc3VtICU9IDExO1xuICAgIHJldHVybiBzdW0gPCAyICYmIGxhc3ROdW1iZXIgPT09IHN1bSB8fCBzdW0gPj0gMiAmJiBsYXN0TnVtYmVyID09PSAxMSAtIHN1bTtcbiAgfSxcbiAgSVQ6IGZ1bmN0aW9uIElUKHN0cikge1xuICAgIGlmIChzdHIubGVuZ3RoICE9PSA5KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHN0ciA9PT0gJ0NBMDAwMDBBQScpIHJldHVybiBmYWxzZTsgLy8gaHR0cHM6Ly9pdC53aWtpcGVkaWEub3JnL3dpa2kvQ2FydGFfZCUyN2lkZW50aXQlQzMlQTBfZWxldHRyb25pY2FfaXRhbGlhbmFcblxuICAgIHJldHVybiBzdHIuc2VhcmNoKC9DW0EtWl1bMC05XXs1fVtBLVpdezJ9L2kpID4gLTE7XG4gIH0sXG4gIE5POiBmdW5jdGlvbiBOTyhzdHIpIHtcbiAgICB2YXIgc2FuaXRpemVkID0gc3RyLnRyaW0oKTtcbiAgICBpZiAoaXNOYU4oTnVtYmVyKHNhbml0aXplZCkpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHNhbml0aXplZC5sZW5ndGggIT09IDExKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHNhbml0aXplZCA9PT0gJzAwMDAwMDAwMDAwJykgcmV0dXJuIGZhbHNlOyAvLyBodHRwczovL25vLndpa2lwZWRpYS5vcmcvd2lraS9GJUMzJUI4ZHNlbHNudW1tZXJcblxuICAgIHZhciBmID0gc2FuaXRpemVkLnNwbGl0KCcnKS5tYXAoTnVtYmVyKTtcbiAgICB2YXIgazEgPSAoMTEgLSAoMyAqIGZbMF0gKyA3ICogZlsxXSArIDYgKiBmWzJdICsgMSAqIGZbM10gKyA4ICogZls0XSArIDkgKiBmWzVdICsgNCAqIGZbNl0gKyA1ICogZls3XSArIDIgKiBmWzhdKSAlIDExKSAlIDExO1xuICAgIHZhciBrMiA9ICgxMSAtICg1ICogZlswXSArIDQgKiBmWzFdICsgMyAqIGZbMl0gKyAyICogZlszXSArIDcgKiBmWzRdICsgNiAqIGZbNV0gKyA1ICogZls2XSArIDQgKiBmWzddICsgMyAqIGZbOF0gKyAyICogazEpICUgMTEpICUgMTE7XG4gICAgaWYgKGsxICE9PSBmWzldIHx8IGsyICE9PSBmWzEwXSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBUSDogZnVuY3Rpb24gVEgoc3RyKSB7XG4gICAgaWYgKCFzdHIubWF0Y2goL15bMS04XVxcZHsxMn0kLykpIHJldHVybiBmYWxzZTsgLy8gdmFsaWRhdGUgY2hlY2sgZGlnaXRcblxuICAgIHZhciBzdW0gPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICBzdW0gKz0gcGFyc2VJbnQoc3RyW2ldLCAxMCkgKiAoMTMgLSBpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyWzEyXSA9PT0gKCgxMSAtIHN1bSAlIDExKSAlIDEwKS50b1N0cmluZygpO1xuICB9LFxuICBMSzogZnVuY3Rpb24gTEsoc3RyKSB7XG4gICAgdmFyIG9sZF9uaWMgPSAvXlsxLTldXFxkezh9W3Z4XSQvaTtcbiAgICB2YXIgbmV3X25pYyA9IC9eWzEtOV1cXGR7MTF9JC9pO1xuICAgIGlmIChzdHIubGVuZ3RoID09PSAxMCAmJiBvbGRfbmljLnRlc3Qoc3RyKSkgcmV0dXJuIHRydWU7ZWxzZSBpZiAoc3RyLmxlbmd0aCA9PT0gMTIgJiYgbmV3X25pYy50ZXN0KHN0cikpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgJ2hlLUlMJzogZnVuY3Rpb24gaGVJTChzdHIpIHtcbiAgICB2YXIgRE5JID0gL15cXGR7OX0kLzsgLy8gc2FuaXRpemUgdXNlciBpbnB1dFxuXG4gICAgdmFyIHNhbml0aXplZCA9IHN0ci50cmltKCk7IC8vIHZhbGlkYXRlIHRoZSBkYXRhIHN0cnVjdHVyZVxuXG4gICAgaWYgKCFETkkudGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGlkID0gc2FuaXRpemVkO1xuICAgIHZhciBzdW0gPSAwLFxuICAgICAgICBpbmNOdW07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbmNOdW0gPSBOdW1iZXIoaWRbaV0pICogKGkgJSAyICsgMSk7IC8vIE11bHRpcGx5IG51bWJlciBieSAxIG9yIDJcblxuICAgICAgc3VtICs9IGluY051bSA+IDkgPyBpbmNOdW0gLSA5IDogaW5jTnVtOyAvLyBTdW0gdGhlIGRpZ2l0cyB1cCBhbmQgYWRkIHRvIHRvdGFsXG4gICAgfVxuXG4gICAgcmV0dXJuIHN1bSAlIDEwID09PSAwO1xuICB9LFxuICAnYXItTFknOiBmdW5jdGlvbiBhckxZKHN0cikge1xuICAgIC8vIExpYnlhIE5hdGlvbmFsIElkZW50aXR5IE51bWJlciBOSU4gaXMgMTIgZGlnaXRzLCB0aGUgZmlyc3QgZGlnaXQgaXMgZWl0aGVyIDEgb3IgMlxuICAgIHZhciBOSU4gPSAvXigxfDIpXFxkezExfSQvOyAvLyBzYW5pdGl6ZSB1c2VyIGlucHV0XG5cbiAgICB2YXIgc2FuaXRpemVkID0gc3RyLnRyaW0oKTsgLy8gdmFsaWRhdGUgdGhlIGRhdGEgc3RydWN0dXJlXG5cbiAgICBpZiAoIU5JTi50ZXN0KHNhbml0aXplZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgJ2FyLVROJzogZnVuY3Rpb24gYXJUTihzdHIpIHtcbiAgICB2YXIgRE5JID0gL15cXGR7OH0kLzsgLy8gc2FuaXRpemUgdXNlciBpbnB1dFxuXG4gICAgdmFyIHNhbml0aXplZCA9IHN0ci50cmltKCk7IC8vIHZhbGlkYXRlIHRoZSBkYXRhIHN0cnVjdHVyZVxuXG4gICAgaWYgKCFETkkudGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gICd6aC1DTic6IGZ1bmN0aW9uIHpoQ04oc3RyKSB7XG4gICAgdmFyIHByb3ZpbmNlc0FuZENpdGllcyA9IFsnMTEnLCAvLyDljJfkuqxcbiAgICAnMTInLCAvLyDlpKnmtKVcbiAgICAnMTMnLCAvLyDmsrPljJdcbiAgICAnMTQnLCAvLyDlsbHopb9cbiAgICAnMTUnLCAvLyDlhoXokpnlj6RcbiAgICAnMjEnLCAvLyDovr3lroFcbiAgICAnMjInLCAvLyDlkInmnpdcbiAgICAnMjMnLCAvLyDpu5HpvpnmsZ9cbiAgICAnMzEnLCAvLyDkuIrmtbdcbiAgICAnMzInLCAvLyDmsZ/oi49cbiAgICAnMzMnLCAvLyDmtZnmsZ9cbiAgICAnMzQnLCAvLyDlronlvr1cbiAgICAnMzUnLCAvLyDnpo/lu7pcbiAgICAnMzYnLCAvLyDmsZ/opb9cbiAgICAnMzcnLCAvLyDlsbHkuJxcbiAgICAnNDEnLCAvLyDmsrPljZdcbiAgICAnNDInLCAvLyDmuZbljJdcbiAgICAnNDMnLCAvLyDmuZbljZdcbiAgICAnNDQnLCAvLyDlub/kuJxcbiAgICAnNDUnLCAvLyDlub/opb9cbiAgICAnNDYnLCAvLyDmtbfljZdcbiAgICAnNTAnLCAvLyDph43luoZcbiAgICAnNTEnLCAvLyDlm5vlt51cbiAgICAnNTInLCAvLyDotLXlt55cbiAgICAnNTMnLCAvLyDkupHljZdcbiAgICAnNTQnLCAvLyDopb/ol49cbiAgICAnNjEnLCAvLyDpmZXopb9cbiAgICAnNjInLCAvLyDnlJjogoNcbiAgICAnNjMnLCAvLyDpnZLmtbdcbiAgICAnNjQnLCAvLyDlroHlpI9cbiAgICAnNjUnLCAvLyDmlrDnloZcbiAgICAnNzEnLCAvLyDlj7Dmub5cbiAgICAnODEnLCAvLyDpppnmuK9cbiAgICAnODInLCAvLyDmvrPpl6hcbiAgICAnOTEnIC8vIOWbveWkllxuICAgIF07XG4gICAgdmFyIHBvd2VycyA9IFsnNycsICc5JywgJzEwJywgJzUnLCAnOCcsICc0JywgJzInLCAnMScsICc2JywgJzMnLCAnNycsICc5JywgJzEwJywgJzUnLCAnOCcsICc0JywgJzInXTtcbiAgICB2YXIgcGFyaXR5Qml0ID0gWycxJywgJzAnLCAnWCcsICc5JywgJzgnLCAnNycsICc2JywgJzUnLCAnNCcsICczJywgJzInXTtcblxuICAgIHZhciBjaGVja0FkZHJlc3NDb2RlID0gZnVuY3Rpb24gY2hlY2tBZGRyZXNzQ29kZShhZGRyZXNzQ29kZSkge1xuICAgICAgcmV0dXJuIHByb3ZpbmNlc0FuZENpdGllcy5pbmNsdWRlcyhhZGRyZXNzQ29kZSk7XG4gICAgfTtcblxuICAgIHZhciBjaGVja0JpcnRoRGF5Q29kZSA9IGZ1bmN0aW9uIGNoZWNrQmlydGhEYXlDb2RlKGJpckRheUNvZGUpIHtcbiAgICAgIHZhciB5eXl5ID0gcGFyc2VJbnQoYmlyRGF5Q29kZS5zdWJzdHJpbmcoMCwgNCksIDEwKTtcbiAgICAgIHZhciBtbSA9IHBhcnNlSW50KGJpckRheUNvZGUuc3Vic3RyaW5nKDQsIDYpLCAxMCk7XG4gICAgICB2YXIgZGQgPSBwYXJzZUludChiaXJEYXlDb2RlLnN1YnN0cmluZyg2KSwgMTApO1xuICAgICAgdmFyIHhkYXRhID0gbmV3IERhdGUoeXl5eSwgbW0gLSAxLCBkZCk7XG5cbiAgICAgIGlmICh4ZGF0YSA+IG5ldyBEYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgfSBlbHNlIGlmICh4ZGF0YS5nZXRGdWxsWWVhcigpID09PSB5eXl5ICYmIHhkYXRhLmdldE1vbnRoKCkgPT09IG1tIC0gMSAmJiB4ZGF0YS5nZXREYXRlKCkgPT09IGRkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHZhciBnZXRQYXJpdHlCaXQgPSBmdW5jdGlvbiBnZXRQYXJpdHlCaXQoaWRDYXJkTm8pIHtcbiAgICAgIHZhciBpZDE3ID0gaWRDYXJkTm8uc3Vic3RyaW5nKDAsIDE3KTtcbiAgICAgIHZhciBwb3dlciA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTc7IGkrKykge1xuICAgICAgICBwb3dlciArPSBwYXJzZUludChpZDE3LmNoYXJBdChpKSwgMTApICogcGFyc2VJbnQocG93ZXJzW2ldLCAxMCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtb2QgPSBwb3dlciAlIDExO1xuICAgICAgcmV0dXJuIHBhcml0eUJpdFttb2RdO1xuICAgIH07XG5cbiAgICB2YXIgY2hlY2tQYXJpdHlCaXQgPSBmdW5jdGlvbiBjaGVja1Bhcml0eUJpdChpZENhcmRObykge1xuICAgICAgcmV0dXJuIGdldFBhcml0eUJpdChpZENhcmRObykgPT09IGlkQ2FyZE5vLmNoYXJBdCgxNykudG9VcHBlckNhc2UoKTtcbiAgICB9O1xuXG4gICAgdmFyIGNoZWNrMTVJZENhcmRObyA9IGZ1bmN0aW9uIGNoZWNrMTVJZENhcmRObyhpZENhcmRObykge1xuICAgICAgdmFyIGNoZWNrID0gL15bMS05XVxcZHs3fSgoMFsxLTldKXwoMVswLTJdKSkoKDBbMS05XSl8KFsxLTJdWzAtOV0pfCgzWzAtMV0pKVxcZHszfSQvLnRlc3QoaWRDYXJkTm8pO1xuICAgICAgaWYgKCFjaGVjaykgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIGFkZHJlc3NDb2RlID0gaWRDYXJkTm8uc3Vic3RyaW5nKDAsIDIpO1xuICAgICAgY2hlY2sgPSBjaGVja0FkZHJlc3NDb2RlKGFkZHJlc3NDb2RlKTtcbiAgICAgIGlmICghY2hlY2spIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBiaXJEYXlDb2RlID0gXCIxOVwiLmNvbmNhdChpZENhcmROby5zdWJzdHJpbmcoNiwgMTIpKTtcbiAgICAgIGNoZWNrID0gY2hlY2tCaXJ0aERheUNvZGUoYmlyRGF5Q29kZSk7XG4gICAgICBpZiAoIWNoZWNrKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdmFyIGNoZWNrMThJZENhcmRObyA9IGZ1bmN0aW9uIGNoZWNrMThJZENhcmRObyhpZENhcmRObykge1xuICAgICAgdmFyIGNoZWNrID0gL15bMS05XVxcZHs1fVsxLTldXFxkezN9KCgwWzEtOV0pfCgxWzAtMl0pKSgoMFsxLTldKXwoWzEtMl1bMC05XSl8KDNbMC0xXSkpXFxkezN9KFxcZHx4fFgpJC8udGVzdChpZENhcmRObyk7XG4gICAgICBpZiAoIWNoZWNrKSByZXR1cm4gZmFsc2U7XG4gICAgICB2YXIgYWRkcmVzc0NvZGUgPSBpZENhcmROby5zdWJzdHJpbmcoMCwgMik7XG4gICAgICBjaGVjayA9IGNoZWNrQWRkcmVzc0NvZGUoYWRkcmVzc0NvZGUpO1xuICAgICAgaWYgKCFjaGVjaykgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIGJpckRheUNvZGUgPSBpZENhcmROby5zdWJzdHJpbmcoNiwgMTQpO1xuICAgICAgY2hlY2sgPSBjaGVja0JpcnRoRGF5Q29kZShiaXJEYXlDb2RlKTtcbiAgICAgIGlmICghY2hlY2spIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBjaGVja1Bhcml0eUJpdChpZENhcmRObyk7XG4gICAgfTtcblxuICAgIHZhciBjaGVja0lkQ2FyZE5vID0gZnVuY3Rpb24gY2hlY2tJZENhcmRObyhpZENhcmRObykge1xuICAgICAgdmFyIGNoZWNrID0gL15cXGR7MTV9fChcXGR7MTd9KFxcZHx4fFgpKSQvLnRlc3QoaWRDYXJkTm8pO1xuICAgICAgaWYgKCFjaGVjaykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBpZiAoaWRDYXJkTm8ubGVuZ3RoID09PSAxNSkge1xuICAgICAgICByZXR1cm4gY2hlY2sxNUlkQ2FyZE5vKGlkQ2FyZE5vKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoZWNrMThJZENhcmRObyhpZENhcmRObyk7XG4gICAgfTtcblxuICAgIHJldHVybiBjaGVja0lkQ2FyZE5vKHN0cik7XG4gIH0sXG4gICd6aC1UVyc6IGZ1bmN0aW9uIHpoVFcoc3RyKSB7XG4gICAgdmFyIEFMUEhBQkVUX0NPREVTID0ge1xuICAgICAgQTogMTAsXG4gICAgICBCOiAxMSxcbiAgICAgIEM6IDEyLFxuICAgICAgRDogMTMsXG4gICAgICBFOiAxNCxcbiAgICAgIEY6IDE1LFxuICAgICAgRzogMTYsXG4gICAgICBIOiAxNyxcbiAgICAgIEk6IDM0LFxuICAgICAgSjogMTgsXG4gICAgICBLOiAxOSxcbiAgICAgIEw6IDIwLFxuICAgICAgTTogMjEsXG4gICAgICBOOiAyMixcbiAgICAgIE86IDM1LFxuICAgICAgUDogMjMsXG4gICAgICBROiAyNCxcbiAgICAgIFI6IDI1LFxuICAgICAgUzogMjYsXG4gICAgICBUOiAyNyxcbiAgICAgIFU6IDI4LFxuICAgICAgVjogMjksXG4gICAgICBXOiAzMixcbiAgICAgIFg6IDMwLFxuICAgICAgWTogMzEsXG4gICAgICBaOiAzM1xuICAgIH07XG4gICAgdmFyIHNhbml0aXplZCA9IHN0ci50cmltKCkudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoIS9eW0EtWl1bMC05XXs5fSQvLnRlc3Qoc2FuaXRpemVkKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHNhbml0aXplZCkucmVkdWNlKGZ1bmN0aW9uIChzdW0sIG51bWJlciwgaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICB2YXIgY29kZSA9IEFMUEhBQkVUX0NPREVTW251bWJlcl07XG4gICAgICAgIHJldHVybiBjb2RlICUgMTAgKiA5ICsgTWF0aC5mbG9vcihjb2RlIC8gMTApO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPT09IDkpIHtcbiAgICAgICAgcmV0dXJuICgxMCAtIHN1bSAlIDEwIC0gTnVtYmVyKG51bWJlcikpICUgMTAgPT09IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdW0gKyBOdW1iZXIobnVtYmVyKSAqICg5IC0gaW5kZXgpO1xuICAgIH0sIDApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBpc0lkZW50aXR5Q2FyZChzdHIsIGxvY2FsZSkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuXG4gIGlmIChsb2NhbGUgaW4gdmFsaWRhdG9ycykge1xuICAgIHJldHVybiB2YWxpZGF0b3JzW2xvY2FsZV0oc3RyKTtcbiAgfSBlbHNlIGlmIChsb2NhbGUgPT09ICdhbnknKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHZhbGlkYXRvcnMpIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb3R3YXJsb3N0L2lzdGFuYnVsL2Jsb2IvbWFzdGVyL2lnbm9yaW5nLWNvZGUtZm9yLWNvdmVyYWdlLm1kI2lnbm9yaW5nLWNvZGUtZm9yLWNvdmVyYWdlLXB1cnBvc2VzXG4gICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZVxuICAgICAgaWYgKHZhbGlkYXRvcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YXIgdmFsaWRhdG9yID0gdmFsaWRhdG9yc1trZXldO1xuXG4gICAgICAgIGlmICh2YWxpZGF0b3Ioc3RyKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2NhbGUgJ1wiLmNvbmNhdChsb2NhbGUsIFwiJ1wiKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSW47XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbnZhciBfdG9TdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvdG9TdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIGlzSW4oc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBpO1xuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob3B0aW9ucykgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcblxuICAgIGZvciAoaSBpbiBvcHRpb25zKSB7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ290d2FybG9zdC9pc3RhbmJ1bC9ibG9iL21hc3Rlci9pZ25vcmluZy1jb2RlLWZvci1jb3ZlcmFnZS5tZCNpZ25vcmluZy1jb2RlLWZvci1jb3ZlcmFnZS1wdXJwb3Nlc1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIGkpKSB7XG4gICAgICAgIGFycmF5W2ldID0gKDAsIF90b1N0cmluZy5kZWZhdWx0KShvcHRpb25zW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXkuaW5kZXhPZihzdHIpID49IDA7XG4gIH0gZWxzZSBpZiAoX3R5cGVvZihvcHRpb25zKSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShzdHIpO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvcHRpb25zLmluZGV4T2Yoc3RyKSA+PSAwO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0ludDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGludCA9IC9eKD86Wy0rXT8oPzowfFsxLTldWzAtOV0qKSkkLztcbnZhciBpbnRMZWFkaW5nWmVyb2VzID0gL15bLStdP1swLTldKyQvO1xuXG5mdW5jdGlvbiBpc0ludChzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEdldCB0aGUgcmVnZXggdG8gdXNlIGZvciB0ZXN0aW5nLCBiYXNlZCBvbiB3aGV0aGVyXG4gIC8vIGxlYWRpbmcgemVyb2VzIGFyZSBhbGxvd2VkIG9yIG5vdC5cblxuICB2YXIgcmVnZXggPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdhbGxvd19sZWFkaW5nX3plcm9lcycpICYmICFvcHRpb25zLmFsbG93X2xlYWRpbmdfemVyb2VzID8gaW50IDogaW50TGVhZGluZ1plcm9lczsgLy8gQ2hlY2sgbWluL21heC9sdC9ndFxuXG4gIHZhciBtaW5DaGVja1Bhc3NlZCA9ICFvcHRpb25zLmhhc093blByb3BlcnR5KCdtaW4nKSB8fCBzdHIgPj0gb3B0aW9ucy5taW47XG4gIHZhciBtYXhDaGVja1Bhc3NlZCA9ICFvcHRpb25zLmhhc093blByb3BlcnR5KCdtYXgnKSB8fCBzdHIgPD0gb3B0aW9ucy5tYXg7XG4gIHZhciBsdENoZWNrUGFzc2VkID0gIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2x0JykgfHwgc3RyIDwgb3B0aW9ucy5sdDtcbiAgdmFyIGd0Q2hlY2tQYXNzZWQgPSAhb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZ3QnKSB8fCBzdHIgPiBvcHRpb25zLmd0O1xuICByZXR1cm4gcmVnZXgudGVzdChzdHIpICYmIG1pbkNoZWNrUGFzc2VkICYmIG1heENoZWNrUGFzc2VkICYmIGx0Q2hlY2tQYXNzZWQgJiYgZ3RDaGVja1Bhc3NlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNKU09OO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG52YXIgZGVmYXVsdF9qc29uX29wdGlvbnMgPSB7XG4gIGFsbG93X3ByaW1pdGl2ZXM6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBpc0pTT04oc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG5cbiAgdHJ5IHtcbiAgICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0X2pzb25fb3B0aW9ucyk7XG4gICAgdmFyIHByaW1pdGl2ZXMgPSBbXTtcblxuICAgIGlmIChvcHRpb25zLmFsbG93X3ByaW1pdGl2ZXMpIHtcbiAgICAgIHByaW1pdGl2ZXMgPSBbbnVsbCwgZmFsc2UsIHRydWVdO1xuICAgIH1cblxuICAgIHZhciBvYmogPSBKU09OLnBhcnNlKHN0cik7XG4gICAgcmV0dXJuIHByaW1pdGl2ZXMuaW5jbHVkZXMob2JqKSB8fCAhIW9iaiAmJiBfdHlwZW9mKG9iaikgPT09ICdvYmplY3QnO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLyogaWdub3JlICovXG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSldUO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgX2lzQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNCYXNlNjRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc0pXVChzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgdmFyIGRvdFNwbGl0ID0gc3RyLnNwbGl0KCcuJyk7XG4gIHZhciBsZW4gPSBkb3RTcGxpdC5sZW5ndGg7XG5cbiAgaWYgKGxlbiA+IDMgfHwgbGVuIDwgMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkb3RTcGxpdC5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VyckVsZW0pIHtcbiAgICByZXR1cm4gYWNjICYmICgwLCBfaXNCYXNlLmRlZmF1bHQpKGN1cnJFbGVtLCB7XG4gICAgICB1cmxTYWZlOiB0cnVlXG4gICAgfSk7XG4gIH0sIHRydWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0xhdExvbmc7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgbGF0ID0gL15cXCg/WystXT8oOTAoXFwuMCspP3xbMS04XT9cXGQoXFwuXFxkKyk/KSQvO1xudmFyIGxvbmcgPSAvXlxccz9bKy1dPygxODAoXFwuMCspP3wxWzAtN11cXGQoXFwuXFxkKyk/fFxcZHsxLDJ9KFxcLlxcZCspPylcXCk/JC87XG52YXIgbGF0RE1TID0gL14oKFsxLThdP1xcZClcXEQrKFsxLTVdP1xcZHw2MClcXEQrKFsxLTVdP1xcZHw2MCkoXFwuXFxkKyk/fDkwXFxEKzBcXEQrMClcXEQrW05TbnNdPyQvaTtcbnZhciBsb25nRE1TID0gL15cXHMqKFsxLTddP1xcZHsxLDJ9XFxEKyhbMS01XT9cXGR8NjApXFxEKyhbMS01XT9cXGR8NjApKFxcLlxcZCspP3wxODBcXEQrMFxcRCswKVxcRCtbRVdld10/JC9pO1xudmFyIGRlZmF1bHRMYXRMb25nT3B0aW9ucyA9IHtcbiAgY2hlY2tETVM6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBpc0xhdExvbmcoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIG9wdGlvbnMgPSAoMCwgX21lcmdlLmRlZmF1bHQpKG9wdGlvbnMsIGRlZmF1bHRMYXRMb25nT3B0aW9ucyk7XG4gIGlmICghc3RyLmluY2x1ZGVzKCcsJykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHBhaXIgPSBzdHIuc3BsaXQoJywnKTtcbiAgaWYgKHBhaXJbMF0uc3RhcnRzV2l0aCgnKCcpICYmICFwYWlyWzFdLmVuZHNXaXRoKCcpJykgfHwgcGFpclsxXS5lbmRzV2l0aCgnKScpICYmICFwYWlyWzBdLnN0YXJ0c1dpdGgoJygnKSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChvcHRpb25zLmNoZWNrRE1TKSB7XG4gICAgcmV0dXJuIGxhdERNUy50ZXN0KHBhaXJbMF0pICYmIGxvbmdETVMudGVzdChwYWlyWzFdKTtcbiAgfVxuXG4gIHJldHVybiBsYXQudGVzdChwYWlyWzBdKSAmJiBsb25nLnRlc3QocGFpclsxXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTGVuZ3RoO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbi8qIGVzbGludC1kaXNhYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuZnVuY3Rpb24gaXNMZW5ndGgoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBtaW47XG4gIHZhciBtYXg7XG5cbiAgaWYgKF90eXBlb2Yob3B0aW9ucykgPT09ICdvYmplY3QnKSB7XG4gICAgbWluID0gb3B0aW9ucy5taW4gfHwgMDtcbiAgICBtYXggPSBvcHRpb25zLm1heDtcbiAgfSBlbHNlIHtcbiAgICAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eTogaXNMZW5ndGgoc3RyLCBtaW4gWywgbWF4XSlcbiAgICBtaW4gPSBhcmd1bWVudHNbMV0gfHwgMDtcbiAgICBtYXggPSBhcmd1bWVudHNbMl07XG4gIH1cblxuICB2YXIgc3Vycm9nYXRlUGFpcnMgPSBzdHIubWF0Y2goL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZykgfHwgW107XG4gIHZhciBsZW4gPSBzdHIubGVuZ3RoIC0gc3Vycm9nYXRlUGFpcnMubGVuZ3RoO1xuICByZXR1cm4gbGVuID49IG1pbiAmJiAodHlwZW9mIG1heCA9PT0gJ3VuZGVmaW5lZCcgfHwgbGVuIDw9IG1heCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTGljZW5zZVBsYXRlO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdmFsaWRhdG9ycyA9IHtcbiAgJ2NzLUNaJzogZnVuY3Rpb24gY3NDWihzdHIpIHtcbiAgICByZXR1cm4gL14oKFtBQkNERUZIS0lKS0xNTlBSU1RVVlhZWl18WzAtOV0pLT8pezUsOH0kLy50ZXN0KHN0cik7XG4gIH0sXG4gICdkZS1ERSc6IGZ1bmN0aW9uIGRlREUoc3RyKSB7XG4gICAgcmV0dXJuIC9eKChBV3xVTHxBS3xHQXxBw5Z8TEZ8QVp8QU18QVN8WkV8QU58QUJ8QXxLR3xLSHxCQXxFV3xCWnxIWXxLTXxCVHxIUHxCfEJDfEJJfEJPfEZOfFRUfMOcQnxCTnxBSHxCU3xGUnxIQnxaWnxCQnxCS3xCw5Z8T0N8T0t8Q1d8Q0V8Q3xDT3xMSHxDQnxLV3xMQ3xMTnxEQXxESXxERXxESHxTWXxOw5Z8RE98RER8RFV8RE58RHxFSXxFQXxFRXxGSXxFTXxFTHxFTnxQRnxFRHxFRnxFUnxBVXxaUHxFfEVTfE5UfEVVfEZMfEZPfEZUfEZGfEZ8RlN8RkR8RsOcfEdFfEd8R0l8R0Z8R1N8WlJ8R0d8R1B8R1J8Tll8Wkl8R8OWfEdafEdUfEhBfEhIfEhNfEhVfFdMfEhafFdSfFJOfEhLfEhEfEhOfEhTfEdLfEhFfEhGfFJafEhJfEhHfEhPfEhYfElLfElMfElOfEp8Skx8S0x8S0F8S1N8S0Z8S0V8S0l8S1R8S098S058S1J8S0N8S1V8S3xMRHxMTHxMQXxMfE9QfExNfExJfExCfExVfEzDlnxITHxMR3xNRHxHTnxNWnxNQXxNTHxNUnxNWXxBVHxETXxNQ3xOWnxSTXxSR3xNTXxNRXxNQnxNSXxGR3xETHxIQ3xNV3xSTHxNS3xNR3xNw5x8V1N8TUh8TXxNU3xOVXxOQnxORHxOTXxOS3xOV3xOUnxOSXxORnxEWnxFQnxPWnxUR3xUT3xOfE9BfEdNfE9CfENBfEVIfEZXfE9GfE9MfE9FfE9HfEJIfExSfE9TfEFBfEdEfE9IfEtZfE5QfFdLfFBCfFBBfFBFfFBJfFBTfFB8UE18UFJ8UkF8UlZ8UkV8UnxIfFNCfFdOfFJTfFJEfFJUfEJNfE5FfEdWfFJQfFNVfEdMfFJPfEfDnHxSSHxFR3xSV3xQTnxTS3xNUXxSVXxTWnxSSXxTTHxTTXxTQ3xIUnxGWnxWU3xTV3xTTnxDUnxTRXxTSXxTT3xMUHxTR3xOSHxTUHxJWnxTVHxCRnxURXxIVnxPRHxTUnxTfEFDfERXfFpXfFRGfFRTfFRSfFTDnHxVTXxQWnxUUHxVRXxVTnxVSHxNTnxLS3xWQnxWfEFFfFBMfFJDfFZHfEdXfFBXfFZSfFZLfEtCfFdBfFdUfEJFfFdNfFdFfEFQfE1PfFdXfEZCfFdafFdJfFdCfEpFfFdGfFdPfFd8V8OcfEJMfFp8R0MpWy0gXT9bQS1aXXsxLDJ9Wy0gXT9cXGR7MSw0fXwoQUlDfEZEQnxBQkd8U0xOfFNBV3xLTFp8QlVMfEVTQnxOQUJ8U1VMfFdTVHxBQkl8QVpFfEJURnxLw5ZUfERLQnxGRVV8Uk9UfEFMWnxTTcOcfFdFUnxBVVJ8Tk9SfETDnFd8QlJLfEhBQnxUw5ZMfFdPUnxCQUR8QkFSfEJFUnxCSVd8RUJTfEtFTXxNw5xCfFBFR3xCR0x8QkdEfFJFSXxXSUx8QktTfEJJUnxXQVR8Qk9SfEJPSHxCT1R8QlJCfEJMS3xISE18TkVCfE5NQnxXU0Z8TEVPfEhETHxXTVN8V1pMfELDnFN8Q0hBfEvDllp8Uk9EfFfDnE18Q0xQfE5FQ3xDT0N8WkVMfENPRXxDVVh8REFIfExEU3xERUd8REVMfFJTTHxETEd8REdGfExBTnxIRUl8TUVEfERPTnxLSUJ8Uk9LfErDnEx8TU9OfFNMRXxFQkV8RUlDfEhJR3xXQlN8QklUfFBSw5x8TElCfEVNRHxXSVR8RVJIfEjDllN8RVJafEFOQXxBU1p8TUFCfE1FS3xTVEx8U1pCfEZEU3xIQ0h8SE9SfFdPTHxGUkd8R1JBfFdPU3xGUkl8RkZCfEdBUHxHRVJ8QlJMfENMWnxHVEh8Tk9IfEhHV3xHUlp8TMOWQnxOT0x8V1NXfERVRHxITcOcfE9IQXxLUlV8SEFMfEhBTXxIQlN8UUxCfEhWTHxOQVV8SEFTfEVCTnxHRU98SE9IfEhESHxFUkt8SEVSfFdBTnxIRUZ8Uk9GfEhCTnxBTEZ8SFNLfFVTSXxOQUl8UkVIfFNBTnxLw5xOfMOWSFJ8SE9MfFdBUnxBUk58QlJHfEdOVHxIT0d8V09IfEtFSHxNQUl8UEFSfFJJRHxST0x8S0xFfEdFTHxLVVN8S1lGfEFSVHxTREh8TERLfERJTHxNQUx8VklCfExFUnxCTkF8R0hBfEdSTXxNVEx8V1VSfExFVnxMSUZ8U1RFfFdFTHxMSVB8VkFJfExVUHxIR058TEJafExXTHxQQ0h8U1RCfERBTnxNS0t8U0zDnHxNU1B8VEJCfE1HSHxNVEt8QklOfE1TSHxFSUx8SEVUfFNHSHxCSUR8TVlLfE1TRXxNU1R8TcOcUnxXUk58TUVJfEdSSHxSSUV8TVpHfE1JTHxPQkJ8QkVEfEZMw5Z8TU9MfEZSV3xTRUV8U1JCfEFJQnxNT1N8QkNIfElMTHxTT0J8Tk1TfE5FQXxTRUZ8VUZGfE5FV3xWT0h8TkRIfFRET3xOV018R0RCfEdWTXxXSVN8Tk9NfEVJTnxHQU58TEFVfEhFQnxPSFZ8T1NMfFNGQnxFUkJ8TE9TfEJTS3xLRUx8QlNCfE1FTHxXVEx8T0FMfEbDnFN8TU9EfE9IWnxPUFJ8QsOcUnxQQUZ8UEzDlnxDQVN8R0xBfFJFR3xWSVR8RUNLfFNJTXxHT0F8RU1TfERJWnxHT0h8UsOcRHxTV0F8TkVTfEvDlk58TUVUfExST3xCw5xafERCUnxST1N8VEVUfEhST3xST1d8QlJWfEhJUHxQQU58R1JJfFNIS3xFSVN8U1JPfFNPS3xMQlN8U0NafE1FUnxRRlR8U0xGfFNMU3xIT018U0xLfEFTTHxCQkd8U0JLfFNGVHxTSEd8TUdOfE1FR3xaSUd8U0FEfE5FTnxPVkl8U0hBfEJMQnxTSUd8U09OfFNQTnxGT1J8R1VCfFNQQnxJR0J8V05EfFNURHxTVEF8U0RMfE9CR3xIU1R8Qk9HfFNITHxQSVJ8RlRMfFNFQnxTw5ZNfFPDnFd8VElSfFNBQnxUVVR8QU5HfFNEVHxMw5xOfExTWnxNSEx8VkVDfFZFUnxWSUV8T1ZMfEFOS3xPVlB8U0JHfFVFTXxVRVJ8V0xHfEdNTnxOVlB8UkRHfFLDnEd8REFVfEZLQnxXQUZ8V0FLfFNMWnxXRU58U09HfEFQRHxXVUd8R1VOfEVTV3xXSVp8V0VTfERJTnxCUkF8QsOcRHxXSFZ8SFdJfEdIQ3xXVE18V09CfFdVTnxNQUt8U0VMfE9DSHxIT1R8V0RBKVstIF0/KChbQS1aXVstIF0/XFxkezEsNH0pfChbQS1aXXsyfVstIF0/XFxkezEsM30pKSlbLSBdPyhFfEgpPyQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgJ2RlLUxJJzogZnVuY3Rpb24gZGVMSShzdHIpIHtcbiAgICByZXR1cm4gL15GTFstIF0/XFxkezEsNX1bVVpdPyQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgJ2ZpLUZJJzogZnVuY3Rpb24gZmlGSShzdHIpIHtcbiAgICByZXR1cm4gL14oPz0uezQsN30pKChbQS1aXXsxLDN9fFswLTldezEsM30pW1xccy1dPyhbQS1aXXsxLDN9fFswLTldezEsNX0pKSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgJ3B0LVBUJzogZnVuY3Rpb24gcHRQVChzdHIpIHtcbiAgICByZXR1cm4gL14oW0EtWl17Mn18WzAtOV17Mn0pWyAtwrddPyhbQS1aXXsyfXxbMC05XXsyfSlbIC3Ct10/KFtBLVpdezJ9fFswLTldezJ9KSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgJ3NxLUFMJzogZnVuY3Rpb24gc3FBTChzdHIpIHtcbiAgICByZXR1cm4gL15bQS1aXXsyfVstIF0/KChcXGR7M31bLSBdPygoW0EtWl17Mn0pfFQpKXwoUlstIF0/XFxkezN9KSkkLy50ZXN0KHN0cik7XG4gIH0sXG4gICdwdC1CUic6IGZ1bmN0aW9uIHB0QlIoc3RyKSB7XG4gICAgcmV0dXJuIC9eW0EtWl17M31bIC1dP1swLTldW0EtWl1bMC05XXsyfXxbQS1aXXszfVsgLV0/WzAtOV17NH0kLy50ZXN0KHN0cik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzTGljZW5zZVBsYXRlKHN0ciwgbG9jYWxlKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG5cbiAgaWYgKGxvY2FsZSBpbiB2YWxpZGF0b3JzKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRvcnNbbG9jYWxlXShzdHIpO1xuICB9IGVsc2UgaWYgKGxvY2FsZSA9PT0gJ2FueScpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsaWRhdG9ycykge1xuICAgICAgLyogZXNsaW50IGd1YXJkLWZvci1pbjogMCAqL1xuICAgICAgdmFyIHZhbGlkYXRvciA9IHZhbGlkYXRvcnNba2V5XTtcblxuICAgICAgaWYgKHZhbGlkYXRvcihzdHIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9jYWxlICdcIi5jb25jYXQobG9jYWxlLCBcIidcIikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0xvY2FsZTtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGxvY2FsZVJlZyA9IC9eW0EtWmEtel17Miw0fShbXy1dKFtBLVphLXpdezR9fFtcXGRdezN9KSk/KFtfLV0oW0EtWmEtel17Mn18W1xcZF17M30pKT8kLztcblxuZnVuY3Rpb24gaXNMb2NhbGUoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG5cbiAgaWYgKHN0ciA9PT0gJ2VuX1VTX1BPU0lYJyB8fCBzdHIgPT09ICdjYV9FU19WQUxFTkNJQScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBsb2NhbGVSZWcudGVzdChzdHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0xvd2VyY2FzZTtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaXNMb3dlcmNhc2Uoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdHIgPT09IHN0ci50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc01BQ0FkZHJlc3M7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBtYWNBZGRyZXNzID0gL14oPzpbMC05YS1mQS1GXXsyfShbLTpcXHNdKSkoWzAtOWEtZkEtRl17Mn1cXDEpezR9KFswLTlhLWZBLUZdezJ9KSQvO1xudmFyIG1hY0FkZHJlc3NOb1NlcGFyYXRvcnMgPSAvXihbMC05YS1mQS1GXSl7MTJ9JC87XG52YXIgbWFjQWRkcmVzc1dpdGhEb3RzID0gL14oWzAtOWEtZkEtRl17NH1cXC4pezJ9KFswLTlhLWZBLUZdezR9KSQvO1xuXG5mdW5jdGlvbiBpc01BQ0FkZHJlc3Moc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBgbm9fY29sb25zYCBUT0RPOiByZW1vdmUgaXQgaW4gdGhlIG5leHQgbWFqb3JcbiAgKi9cblxuICBpZiAob3B0aW9ucyAmJiAob3B0aW9ucy5ub19jb2xvbnMgfHwgb3B0aW9ucy5ub19zZXBhcmF0b3JzKSkge1xuICAgIHJldHVybiBtYWNBZGRyZXNzTm9TZXBhcmF0b3JzLnRlc3Qoc3RyKTtcbiAgfVxuXG4gIHJldHVybiBtYWNBZGRyZXNzLnRlc3Qoc3RyKSB8fCBtYWNBZGRyZXNzV2l0aERvdHMudGVzdChzdHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc01ENTtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG1kNSA9IC9eW2EtZjAtOV17MzJ9JC87XG5cbmZ1bmN0aW9uIGlzTUQ1KHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gbWQ1LnRlc3Qoc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNNYWduZXRVUkk7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBtYWduZXRVUkkgPSAvXm1hZ25ldDpcXD94dCg/OlxcLjEpPz11cm46KD86YWljaHxiaXRwcmludHxidGlofGVkMmt8ZWQya2hhc2h8a3poYXNofG1kNXxzaGExfHRyZWU6dGlnZXIpOlthLXowLTldezMyfSg/OlthLXowLTldezh9KT8oJHwmKS9pO1xuXG5mdW5jdGlvbiBpc01hZ25ldFVSSSh1cmwpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkodXJsKTtcbiAgcmV0dXJuIG1hZ25ldFVSSS50ZXN0KHVybC50cmltKCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc01pbWVUeXBlO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKlxuICBDaGVja3MgaWYgdGhlIHByb3ZpZGVkIHN0cmluZyBtYXRjaGVzIHRvIGEgY29ycmVjdCBNZWRpYSB0eXBlIGZvcm1hdCAoTUlNRSB0eXBlKVxuXG4gIFRoaXMgZnVuY3Rpb24gb25seSBjaGVja3MgaXMgdGhlIHN0cmluZyBmb3JtYXQgZm9sbG93cyB0aGVcbiAgZXRhYmxpc2hlZCBydWxlcyBieSB0aGUgYWNjb3JkaW5nIFJGQyBzcGVjaWZpY2F0aW9ucy5cbiAgVGhpcyBmdW5jdGlvbiBzdXBwb3J0cyAnY2hhcnNldCcgaW4gdGV4dHVhbCBtZWRpYSB0eXBlc1xuICAoaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY2NTcpLlxuXG4gIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgY2hlY2sgYWdhaW5zdCBhbGwgdGhlIG1lZGlhIHR5cGVzIGxpc3RlZFxuICBieSB0aGUgSUFOQSAoaHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWwpXG4gIGJlY2F1c2Ugb2YgbGlnaHRuZXNzIHB1cnBvc2VzIDogaXQgd291bGQgcmVxdWlyZSB0byBpbmNsdWRlXG4gIGFsbCB0aGVzZSBNSU1FIHR5cGVzIGluIHRoaXMgbGlicmFpcnksIHdoaWNoIHdvdWxkIHdlaWdoIGl0XG4gIHNpZ25pZmljYW50bHkuIFRoaXMga2luZCBvZiBlZmZvcnQgbWF5YmUgaXMgbm90IHdvcnRoIGZvciB0aGUgdXNlIHRoYXRcbiAgdGhpcyBmdW5jdGlvbiBoYXMgaW4gdGhpcyBlbnRpcmUgbGlicmFpcnkuXG5cbiAgTW9yZSBpbmZvcm1hdGlvbnMgaW4gdGhlIFJGQyBzcGVjaWZpY2F0aW9ucyA6XG4gIC0gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIwNDVcbiAgLSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjA0NlxuICAtIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMxI3NlY3Rpb24tMy4xLjEuMVxuICAtIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMxI3NlY3Rpb24tMy4xLjEuNVxuKi9cbi8vIE1hdGNoIHNpbXBsZSBNSU1FIHR5cGVzXG4vLyBOQiA6XG4vLyAgIFN1YnR5cGUgbGVuZ3RoIG11c3Qgbm90IGV4Y2VlZCAxMDAgY2hhcmFjdGVycy5cbi8vICAgVGhpcyBydWxlIGRvZXMgbm90IGNvbXBseSB0byB0aGUgUkZDIHNwZWNzICh3aGF0IGlzIHRoZSBtYXggbGVuZ3RoID8pLlxudmFyIG1pbWVUeXBlU2ltcGxlID0gL14oYXBwbGljYXRpb258YXVkaW98Zm9udHxpbWFnZXxtZXNzYWdlfG1vZGVsfG11bHRpcGFydHx0ZXh0fHZpZGVvKVxcL1thLXpBLVowLTlcXC5cXC1cXCtdezEsMTAwfSQvaTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtbGVuXG4vLyBIYW5kbGUgXCJjaGFyc2V0XCIgaW4gXCJ0ZXh0LypcIlxuXG52YXIgbWltZVR5cGVUZXh0ID0gL150ZXh0XFwvW2EtekEtWjAtOVxcLlxcLVxcK117MSwxMDB9O1xccz9jaGFyc2V0PShcIlthLXpBLVowLTlcXC5cXC1cXCtcXHNdezAsNzB9XCJ8W2EtekEtWjAtOVxcLlxcLVxcK117MCw3MH0pKFxccz9cXChbYS16QS1aMC05XFwuXFwtXFwrXFxzXXsxLDIwfVxcKSk/JC9pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW5cbi8vIEhhbmRsZSBcImJvdW5kYXJ5XCIgaW4gXCJtdWx0aXBhcnQvKlwiXG5cbnZhciBtaW1lVHlwZU11bHRpcGFydCA9IC9ebXVsdGlwYXJ0XFwvW2EtekEtWjAtOVxcLlxcLVxcK117MSwxMDB9KDtcXHM/KGJvdW5kYXJ5fGNoYXJzZXQpPShcIlthLXpBLVowLTlcXC5cXC1cXCtcXHNdezAsNzB9XCJ8W2EtekEtWjAtOVxcLlxcLVxcK117MCw3MH0pKFxccz9cXChbYS16QS1aMC05XFwuXFwtXFwrXFxzXXsxLDIwfVxcKSk/KXswLDJ9JC9pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW5cblxuZnVuY3Rpb24gaXNNaW1lVHlwZShzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIG1pbWVUeXBlU2ltcGxlLnRlc3Qoc3RyKSB8fCBtaW1lVHlwZVRleHQudGVzdChzdHIpIHx8IG1pbWVUeXBlTXVsdGlwYXJ0LnRlc3Qoc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNNb2JpbGVQaG9uZTtcbmV4cG9ydHMubG9jYWxlcyA9IHZvaWQgMDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xudmFyIHBob25lcyA9IHtcbiAgJ2FtLUFNJzogL14oXFwrPzM3NHwwKSgoMTB8Wzl8N11bMC05XSlcXGR7Nn0kfFsyLTRdXFxkezd9JCkvLFxuICAnYXItQUUnOiAvXigoXFwrPzk3MSl8MCk/NVswMjQ1NjhdXFxkezd9JC8sXG4gICdhci1CSCc6IC9eKFxcKz85NzMpPygzfDYpXFxkezd9JC8sXG4gICdhci1EWic6IC9eKFxcKz8yMTN8MCkoNXw2fDcpXFxkezh9JC8sXG4gICdhci1MQic6IC9eKFxcKz85NjEpPygoM3w4MSlcXGR7Nn18N1xcZHs3fSkkLyxcbiAgJ2FyLUVHJzogL14oKFxcKz8yMCl8MCk/MVswMTI1XVxcZHs4fSQvLFxuICAnYXItSVEnOiAvXihcXCs/OTY0fDApPzdbMC05XVxcZHs4fSQvLFxuICAnYXItSk8nOiAvXihcXCs/OTYyfDApPzdbNzg5XVxcZHs3fSQvLFxuICAnYXItS1cnOiAvXihcXCs/OTY1KVs1NjldXFxkezd9JC8sXG4gICdhci1MWSc6IC9eKChcXCs/MjE4KXwwKT8oOVsxLTZdXFxkezd9fFsxLThdXFxkezcsOX0pJC8sXG4gICdhci1NQSc6IC9eKD86KD86XFwrfDAwKTIxMnwwKVs1LTddXFxkezh9JC8sXG4gICdhci1PTSc6IC9eKChcXCt8MDApOTY4KT8oOVsxLTldKVxcZHs2fSQvLFxuICAnYXItUFMnOiAvXihcXCs/OTcwfDApNVs2fDldKFxcZHs3fSkkLyxcbiAgJ2FyLVNBJzogL14oIT8oXFwrPzk2Nil8MCk/NVxcZHs4fSQvLFxuICAnYXItU1knOiAvXighPyhcXCs/OTYzKXwwKT85XFxkezh9JC8sXG4gICdhci1UTic6IC9eKFxcKz8yMTYpP1syNDU5XVxcZHs3fSQvLFxuICAnYXotQVonOiAvXihcXCs5OTR8MCkoNVswMTVdfDdbMDddfDk5KVxcZHs3fSQvLFxuICAnYnMtQkEnOiAvXigoKChcXCt8MDApMzg3Nil8MDYpKSgoKFswLTNdfFs1LTZdKVxcZHs2fSl8KDRcXGR7N30pKSQvLFxuICAnYmUtQlknOiAvXihcXCs/Mzc1KT8oMjR8MjV8Mjl8MzN8NDQpXFxkezd9JC8sXG4gICdiZy1CRyc6IC9eKFxcKz8zNTl8MCk/OFs3ODldXFxkezd9JC8sXG4gICdibi1CRCc6IC9eKFxcKz84ODB8MCkxWzEzNDU2Nzg5XVswLTldezh9JC8sXG4gICdjYS1BRCc6IC9eKFxcKzM3Nik/WzM0Nl1cXGR7NX0kLyxcbiAgJ2NzLUNaJzogL14oXFwrPzQyMCk/ID9bMS05XVswLTldezJ9ID9bMC05XXszfSA/WzAtOV17M30kLyxcbiAgJ2RhLURLJzogL14oXFwrPzQ1KT9cXHM/XFxkezJ9XFxzP1xcZHsyfVxccz9cXGR7Mn1cXHM/XFxkezJ9JC8sXG4gICdkZS1ERSc6IC9eKChcXCs0OXwwKVsxfDNdKShbMHw1XVswLTQ1LTldXFxkfDYoWzIzXXwwXFxkPyl8NyhbMC01Ny05XXw2XFxkKSlcXGR7Nyw5fSQvLFxuICAnZGUtQVQnOiAvXihcXCs0M3wwKVxcZHsxLDR9XFxkezMsMTJ9JC8sXG4gICdkZS1DSCc6IC9eKFxcKzQxfDApKFsxLTldKVxcZHsxLDl9JC8sXG4gICdkZS1MVSc6IC9eKFxcKzM1Mik/KCg2XFxkMSlcXGR7Nn0pJC8sXG4gICdkdi1NVic6IC9eKFxcKz85NjApPyg3WzItOV18OTF8OVszLTldKVxcZHs3fSQvLFxuICAnZWwtR1InOiAvXihcXCs/MzB8MCk/KDY5XFxkezh9KSQvLFxuICAnZW4tQVUnOiAvXihcXCs/NjF8MCk0XFxkezh9JC8sXG4gICdlbi1CTSc6IC9eKFxcKz8xKT80NDEoKCgzfDcpXFxkezZ9JCl8KDVbMC0zXVswLTldXFxkezR9JCl8KDU5XFxkezV9KSkvLFxuICAnZW4tR0InOiAvXihcXCs/NDR8MCk3XFxkezl9JC8sXG4gICdlbi1HRyc6IC9eKFxcKz80NHwwKTE0ODFcXGR7Nn0kLyxcbiAgJ2VuLUdIJzogL14oXFwrMjMzfDApKDIwfDUwfDI0fDU0fDI3fDU3fDI2fDU2fDIzfDI4fDU1fDU5KVxcZHs3fSQvLFxuICAnZW4tR1knOiAvXihcXCs1OTJ8MCk2XFxkezZ9JC8sXG4gICdlbi1ISyc6IC9eKFxcKz84NTJbLVxcc10/KT9bNDU2Nzg5XVxcZHszfVstXFxzXT9cXGR7NH0kLyxcbiAgJ2VuLU1PJzogL14oXFwrPzg1M1stXFxzXT8pP1s2XVxcZHszfVstXFxzXT9cXGR7NH0kLyxcbiAgJ2VuLUlFJzogL14oXFwrPzM1M3wwKThbMzU2Nzg5XVxcZHs3fSQvLFxuICAnZW4tSU4nOiAvXihcXCs/OTF8MCk/WzY3ODldXFxkezl9JC8sXG4gICdlbi1LRSc6IC9eKFxcKz8yNTR8MCkoN3wxKVxcZHs4fSQvLFxuICAnZW4tS0knOiAvXigoXFwrNjg2fDY4Nik/KT8oICk/KCg2fDcpKDJ8M3w4KVswLTldezZ9KSQvLFxuICAnZW4tTVQnOiAvXihcXCs/MzU2fDApPyg5OXw3OXw3N3wyMXwyN3wyMnwyNSlbMC05XXs2fSQvLFxuICAnZW4tTVUnOiAvXihcXCs/MjMwfDApP1xcZHs4fSQvLFxuICAnZW4tTkEnOiAvXihcXCs/MjY0fDApKDZ8OClcXGR7N30kLyxcbiAgJ2VuLU5HJzogL14oXFwrPzIzNHwwKT9bNzg5XVxcZHs5fSQvLFxuICAnZW4tTlonOiAvXihcXCs/NjR8MClbMjhdXFxkezcsOX0kLyxcbiAgJ2VuLVBLJzogL14oKDAwfFxcKyk/OTJ8MCkzWzAtNl1cXGR7OH0kLyxcbiAgJ2VuLVBIJzogL14oMDl8XFwrNjM5KVxcZHs5fSQvLFxuICAnZW4tUlcnOiAvXihcXCs/MjUwfDApP1s3XVxcZHs4fSQvLFxuICAnZW4tU0cnOiAvXihcXCs2NSk/WzM2ODldXFxkezd9JC8sXG4gICdlbi1TTCc6IC9eKFxcKz8yMzJ8MClcXGR7OH0kLyxcbiAgJ2VuLVRaJzogL14oXFwrPzI1NXwwKT9bNjddXFxkezh9JC8sXG4gICdlbi1VRyc6IC9eKFxcKz8yNTZ8MCk/WzddXFxkezh9JC8sXG4gICdlbi1VUyc6IC9eKChcXCsxfDEpPyggfC0pPyk/KFxcKFsyLTldWzAtOV17Mn1cXCl8WzItOV1bMC05XXsyfSkoIHwtKT8oWzItOV1bMC05XXsyfSggfC0pP1swLTldezR9KSQvLFxuICAnZW4tWkEnOiAvXihcXCs/Mjd8MClcXGR7OX0kLyxcbiAgJ2VuLVpNJzogL14oXFwrPzI2KT8wOVs1NjddXFxkezd9JC8sXG4gICdlbi1aVyc6IC9eKFxcKzI2MylbMC05XXs5fSQvLFxuICAnZW4tQlcnOiAvXihcXCs/MjY3KT8oN1sxLThdezF9KVxcZHs2fSQvLFxuICAnZXMtQVInOiAvXlxcKz81NDkoMTF8WzIzNjhdXFxkKVxcZHs4fSQvLFxuICAnZXMtQk8nOiAvXihcXCs/NTkxKT8oNnw3KVxcZHs3fSQvLFxuICAnZXMtQ08nOiAvXihcXCs/NTcpPzMoMCgwfDF8Mnw0fDUpfDFcXGR8MlswLTRdfDUoMHwxKSlcXGR7N30kLyxcbiAgJ2VzLUNMJzogL14oXFwrPzU2fDApWzItOV1cXGR7MX1cXGR7N30kLyxcbiAgJ2VzLUNSJzogL14oXFwrNTA2KT9bMi04XVxcZHs3fSQvLFxuICAnZXMtQ1UnOiAvXihcXCs1M3wwMDUzKT81XFxkezd9LyxcbiAgJ2VzLURPJzogL14oXFwrPzEpPzhbMDI0XTlcXGR7N30kLyxcbiAgJ2VzLUhOJzogL14oXFwrPzUwNCk/Wzl8OF1cXGR7N30kLyxcbiAgJ2VzLUVDJzogL14oXFwrPzU5M3wwKShbMi03XXw5WzItOV0pXFxkezd9JC8sXG4gICdlcy1FUyc6IC9eKFxcKz8zNCk/WzZ8N11cXGR7OH0kLyxcbiAgJ2VzLVBFJzogL14oXFwrPzUxKT85XFxkezh9JC8sXG4gICdlcy1NWCc6IC9eKFxcKz81Mik/KDF8MDEpP1xcZHsxMCwxMX0kLyxcbiAgJ2VzLVBBJzogL14oXFwrPzUwNylcXGR7Nyw4fSQvLFxuICAnZXMtUFknOiAvXihcXCs/NTk1fDApOVs5ODc2XVxcZHs3fSQvLFxuICAnZXMtU1YnOiAvXihcXCs/NTAzKT9bNjddXFxkezd9JC8sXG4gICdlcy1VWSc6IC9eKFxcKzU5OHwwKTlbMS05XVtcXGRdezZ9JC8sXG4gICdlcy1WRSc6IC9eKFxcKz81OCk/KDJ8NClcXGR7OX0kLyxcbiAgJ2V0LUVFJzogL14oXFwrPzM3Mik/XFxzPyg1fDhbMS00XSlcXHM/KFswLTldXFxzPyl7Niw3fSQvLFxuICAnZmEtSVInOiAvXihcXCs/OThbXFwtXFxzXT98MCk5WzAtMzldXFxkW1xcLVxcc10/XFxkezN9W1xcLVxcc10/XFxkezR9JC8sXG4gICdmaS1GSSc6IC9eKFxcKz8zNTh8MClcXHM/KDQoMHwxfDJ8NHw1fDYpP3w1MClcXHM/KFxcZFxccz8pezQsOH1cXGQkLyxcbiAgJ2ZqLUZKJzogL14oXFwrPzY3OSk/XFxzP1xcZHszfVxccz9cXGR7NH0kLyxcbiAgJ2ZvLUZPJzogL14oXFwrPzI5OCk/XFxzP1xcZHsyfVxccz9cXGR7Mn1cXHM/XFxkezJ9JC8sXG4gICdmci1CRic6IC9eKFxcKzIyNnwwKVs2N11cXGR7N30kLyxcbiAgJ2ZyLUNNJzogL14oXFwrPzIzNyk2WzAtOV17OH0kLyxcbiAgJ2ZyLUZSJzogL14oXFwrPzMzfDApWzY3XVxcZHs4fSQvLFxuICAnZnItR0YnOiAvXihcXCs/NTk0fDB8MDA1OTQpWzY3XVxcZHs4fSQvLFxuICAnZnItR1AnOiAvXihcXCs/NTkwfDB8MDA1OTApWzY3XVxcZHs4fSQvLFxuICAnZnItTVEnOiAvXihcXCs/NTk2fDB8MDA1OTYpWzY3XVxcZHs4fSQvLFxuICAnZnItUEYnOiAvXihcXCs/Njg5KT84Wzc4OV1cXGR7Nn0kLyxcbiAgJ2ZyLVJFJzogL14oXFwrPzI2MnwwfDAwMjYyKVs2N11cXGR7OH0kLyxcbiAgJ2hlLUlMJzogL14oXFwrOTcyfDApKFsyMzQ4OV18NVswMTIzNDU2ODldfDc3KVsxLTldXFxkezZ9JC8sXG4gICdodS1IVSc6IC9eKFxcKz8zNnwwNikoMjB8MzB8MzF8NTB8NzApXFxkezd9JC8sXG4gICdpZC1JRCc6IC9eKFxcKz82MnwwKTgoMVsxMjM0NTY3ODldfDJbMTIzOF18M1sxMjM4XXw1WzEyMzU2Nzg5XXw3Wzc4XXw5WzU2Nzg5XXw4WzEyMzQ1Njc4OV0pKFtcXHM/fFxcZF17NSwxMX0pJC8sXG4gICdpdC1JVCc6IC9eKFxcKz8zOSk/XFxzPzNcXGR7Mn0gP1xcZHs2LDd9JC8sXG4gICdpdC1TTSc6IC9eKChcXCszNzgpfCgwNTQ5KXwoXFwrMzkwNTQ5KXwoXFwrMzc4MDU0OSkpPzZcXGR7NSw5fSQvLFxuICAnamEtSlAnOiAvXihcXCs4MVsgXFwtXT8oXFwoMFxcKSk/fDApWzY3ODldMFsgXFwtXT9cXGR7NH1bIFxcLV0/XFxkezR9JC8sXG4gICdrYS1HRSc6IC9eKFxcKz85OTUpPyg1fDc5KVxcZHs3fSQvLFxuICAna2stS1onOiAvXihcXCs/N3w4KT83XFxkezl9JC8sXG4gICdrbC1HTCc6IC9eKFxcKz8yOTkpP1xccz9cXGR7Mn1cXHM/XFxkezJ9XFxzP1xcZHsyfSQvLFxuICAna28tS1InOiAvXigoXFwrPzgyKVsgXFwtXT8pPzA/MShbMHwxfDZ8N3w4fDldezF9KVsgXFwtXT9cXGR7Myw0fVsgXFwtXT9cXGR7NH0kLyxcbiAgJ2x0LUxUJzogL14oXFwrMzcwfDgpXFxkezh9JC8sXG4gICdsdi1MVic6IC9eKFxcKz8zNzEpMlxcZHs3fSQvLFxuICAnbXMtTVknOiAvXihcXCs/Nj8wMSl7MX0oKFswMTQ1XXsxfShcXC18XFxzKT9cXGR7Nyw4fSl8KFsyMzY3ODldezF9KFxcc3xcXC0pP1xcZHs3fSkpJC8sXG4gICdtei1NWic6IC9eKFxcKz8yNTgpPzhbMjM0NTY3XVxcZHs3fSQvLFxuICAnbmItTk8nOiAvXihcXCs/NDcpP1s0OV1cXGR7N30kLyxcbiAgJ25lLU5QJzogL14oXFwrPzk3Nyk/OVs3OF1cXGR7OH0kLyxcbiAgJ25sLUJFJzogL14oXFwrPzMyfDApNFxcZHs4fSQvLFxuICAnbmwtTkwnOiAvXigoKFxcK3wwMCk/MzFcXCgwXFwpKXwoKFxcK3wwMCk/MzEpfDApNnsxfVxcZHs4fSQvLFxuICAnbm4tTk8nOiAvXihcXCs/NDcpP1s0OV1cXGR7N30kLyxcbiAgJ3BsLVBMJzogL14oXFwrPzQ4KT8gP1s1LThdXFxkID9cXGR7M30gP1xcZHsyfSA/XFxkezJ9JC8sXG4gICdwdC1CUic6IC9eKChcXCs/NTVcXCA/WzEtOV17Mn1cXCA/KXwoXFwrPzU1XFwgP1xcKFsxLTldezJ9XFwpXFwgPyl8KDBbMS05XXsyfVxcID8pfChcXChbMS05XXsyfVxcKVxcID8pfChbMS05XXsyfVxcID8pKSgoXFxkezR9XFwtP1xcZHs0fSl8KDlbMi05XXsxfVxcZHszfVxcLT9cXGR7NH0pKSQvLFxuICAncHQtUFQnOiAvXihcXCs/MzUxKT85WzEyMzZdXFxkezd9JC8sXG4gICdwdC1BTyc6IC9eKFxcKzI0NClcXGR7OX0kLyxcbiAgJ3JvLVJPJzogL14oXFwrPzQ/MClcXHM/N1xcZHsyfShcXC98XFxzfFxcLnxcXC0pP1xcZHszfShcXHN8XFwufFxcLSk/XFxkezN9JC8sXG4gICdydS1SVSc6IC9eKFxcKz83fDgpPzlcXGR7OX0kLyxcbiAgJ3NpLUxLJzogL14oPzowfDk0fFxcKzk0KT8oNygwfDF8Mnw0fDV8Nnw3fDgpKCB8LSk/KVxcZHs3fSQvLFxuICAnc2wtU0knOiAvXihcXCszODZcXHM/fDApKFxcZHsxfVxccz9cXGR7M31cXHM/XFxkezJ9XFxzP1xcZHsyfXxcXGR7Mn1cXHM/XFxkezN9XFxzP1xcZHszfSkkLyxcbiAgJ3NrLVNLJzogL14oXFwrPzQyMSk/ID9bMS05XVswLTldezJ9ID9bMC05XXszfSA/WzAtOV17M30kLyxcbiAgJ3NxLUFMJzogL14oXFwrMzU1fDApNls3ODldXFxkezZ9JC8sXG4gICdzci1SUyc6IC9eKFxcKzM4MTZ8MDYpWy0gXFxkXXs1LDl9JC8sXG4gICdzdi1TRSc6IC9eKFxcKz80NnwwKVtcXHNcXC1dPzdbXFxzXFwtXT9bMDIzNjldKFtcXHNcXC1dP1xcZCl7N30kLyxcbiAgJ3RnLVRKJzogL14oXFwrPzk5Mik/WzVdWzVdXFxkezd9JC8sXG4gICd0aC1USCc6IC9eKFxcKzY2fDY2fDApXFxkezl9JC8sXG4gICd0ci1UUic6IC9eKFxcKz85MHwwKT81XFxkezl9JC8sXG4gICd0ay1UTSc6IC9eKFxcKzk5M3w5OTN8OClcXGR7OH0kLyxcbiAgJ3VrLVVBJzogL14oXFwrPzM4fDgpPzBcXGR7OX0kLyxcbiAgJ3V6LVVaJzogL14oXFwrPzk5OCk/KDZbMTI1LTc5XXw3WzEtNjldfDg4fDlcXGQpXFxkezd9JC8sXG4gICd2aS1WTic6IC9eKChcXCs/ODQpfDApKCgzKFsyLTldKSl8KDUoWzI1Njg5XSkpfCg3KFswfDYtOV0pKXwoOChbMS05XSkpfCg5KFswLTldKSkpKFswLTldezd9KSQvLFxuICAnemgtQ04nOiAvXigoXFwrfDAwKTg2KT8oMVszLTldfDlbMjhdKVxcZHs5fSQvLFxuICAnemgtVFcnOiAvXihcXCs/ODg2XFwtP3wwKT85XFxkezh9JC8sXG4gICdkei1CVCc6IC9eKFxcKz85NzV8MCk/KDE3fDE2fDc3fDAyKVxcZHs2fSQvXG59O1xuLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG4vLyBhbGlhc2VzXG5cbnBob25lc1snZW4tQ0EnXSA9IHBob25lc1snZW4tVVMnXTtcbnBob25lc1snZnItQ0EnXSA9IHBob25lc1snZW4tQ0EnXTtcbnBob25lc1snZnItQkUnXSA9IHBob25lc1snbmwtQkUnXTtcbnBob25lc1snemgtSEsnXSA9IHBob25lc1snZW4tSEsnXTtcbnBob25lc1snemgtTU8nXSA9IHBob25lc1snZW4tTU8nXTtcbnBob25lc1snZ2EtSUUnXSA9IHBob25lc1snZW4tSUUnXTtcbnBob25lc1snZnItQ0gnXSA9IHBob25lc1snZGUtQ0gnXTtcbnBob25lc1snaXQtQ0gnXSA9IHBob25lc1snZnItQ0gnXTtcblxuZnVuY3Rpb24gaXNNb2JpbGVQaG9uZShzdHIsIGxvY2FsZSwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc3RyaWN0TW9kZSAmJiAhc3RyLnN0YXJ0c1dpdGgoJysnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGxvY2FsZSkpIHtcbiAgICByZXR1cm4gbG9jYWxlLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvdHdhcmxvc3QvaXN0YW5idWwvYmxvYi9tYXN0ZXIvaWdub3JpbmctY29kZS1mb3ItY292ZXJhZ2UubWQjaWdub3JpbmctY29kZS1mb3ItY292ZXJhZ2UtcHVycG9zZXNcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlXG4gICAgICBpZiAocGhvbmVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIHBob25lID0gcGhvbmVzW2tleV07XG5cbiAgICAgICAgaWYgKHBob25lLnRlc3Qoc3RyKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChsb2NhbGUgaW4gcGhvbmVzKSB7XG4gICAgcmV0dXJuIHBob25lc1tsb2NhbGVdLnRlc3Qoc3RyKTsgLy8gYWxpYXMgZmFsc2V5IGxvY2FsZSBhcyAnYW55J1xuICB9IGVsc2UgaWYgKCFsb2NhbGUgfHwgbG9jYWxlID09PSAnYW55Jykge1xuICAgIGZvciAodmFyIGtleSBpbiBwaG9uZXMpIHtcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlXG4gICAgICBpZiAocGhvbmVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIHBob25lID0gcGhvbmVzW2tleV07XG5cbiAgICAgICAgaWYgKHBob25lLnRlc3Qoc3RyKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2NhbGUgJ1wiLmNvbmNhdChsb2NhbGUsIFwiJ1wiKSk7XG59XG5cbnZhciBsb2NhbGVzID0gT2JqZWN0LmtleXMocGhvbmVzKTtcbmV4cG9ydHMubG9jYWxlcyA9IGxvY2FsZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc01vbmdvSWQ7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbnZhciBfaXNIZXhhZGVjaW1hbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNIZXhhZGVjaW1hbFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzTW9uZ29JZChzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuICgwLCBfaXNIZXhhZGVjaW1hbC5kZWZhdWx0KShzdHIpICYmIHN0ci5sZW5ndGggPT09IDI0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc011bHRpYnl0ZTtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29udHJvbC1yZWdleCAqL1xudmFyIG11bHRpYnl0ZSA9IC9bXlxceDAwLVxceDdGXS87XG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnRyb2wtcmVnZXggKi9cblxuZnVuY3Rpb24gaXNNdWx0aWJ5dGUoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBtdWx0aWJ5dGUudGVzdChzdHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc051bWVyaWM7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbnZhciBfYWxwaGEgPSByZXF1aXJlKFwiLi9hbHBoYVwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG51bWVyaWNOb1N5bWJvbHMgPSAvXlswLTldKyQvO1xuXG5mdW5jdGlvbiBpc051bWVyaWMoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5ub19zeW1ib2xzKSB7XG4gICAgcmV0dXJuIG51bWVyaWNOb1N5bWJvbHMudGVzdChzdHIpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeWystXT8oWzAtOV0qW1wiLmNvbmNhdCgob3B0aW9ucyB8fCB7fSkubG9jYWxlID8gX2FscGhhLmRlY2ltYWxbb3B0aW9ucy5sb2NhbGVdIDogJy4nLCBcIl0pP1swLTldKyRcIikpLnRlc3Qoc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNPY3RhbDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG9jdGFsID0gL14oMG8pP1swLTddKyQvaTtcblxuZnVuY3Rpb24gaXNPY3RhbChzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIG9jdGFsLnRlc3Qoc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNQYXNzcG9ydE51bWJlcjtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBSZWZlcmVuY2U6XG4gKiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvIC0tIFdpa2lwZWRpYVxuICogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LTM2NS9jb21wbGlhbmNlL2V1LXBhc3Nwb3J0LW51bWJlciAtLSBFVSBQYXNzcG9ydCBOdW1iZXJcbiAqIGh0dHBzOi8vY291bnRyeWNvZGUub3JnLyAtLSBDb3VudHJ5IENvZGVzXG4gKi9cbnZhciBwYXNzcG9ydFJlZ2V4QnlDb3VudHJ5Q29kZSA9IHtcbiAgQU06IC9eW0EtWl17Mn1cXGR7N30kLyxcbiAgLy8gQVJNRU5JQVxuICBBUjogL15bQS1aXXszfVxcZHs2fSQvLFxuICAvLyBBUkdFTlRJTkFcbiAgQVQ6IC9eW0EtWl1cXGR7N30kLyxcbiAgLy8gQVVTVFJJQVxuICBBVTogL15bQS1aXVxcZHs3fSQvLFxuICAvLyBBVVNUUkFMSUFcbiAgQkU6IC9eW0EtWl17Mn1cXGR7Nn0kLyxcbiAgLy8gQkVMR0lVTVxuICBCRzogL15cXGR7OX0kLyxcbiAgLy8gQlVMR0FSSUFcbiAgQlI6IC9eW0EtWl17Mn1cXGR7Nn0kLyxcbiAgLy8gQlJBWklMXG4gIEJZOiAvXltBLVpdezJ9XFxkezd9JC8sXG4gIC8vIEJFTEFSVVNcbiAgQ0E6IC9eW0EtWl17Mn1cXGR7Nn0kLyxcbiAgLy8gQ0FOQURBXG4gIENIOiAvXltBLVpdXFxkezd9JC8sXG4gIC8vIFNXSVRaRVJMQU5EXG4gIENOOiAvXkdcXGR7OH0kfF5FKD8hW0lPXSlbQS1aMC05XVxcZHs3fSQvLFxuICAvLyBDSElOQSBbRz1PcmRpbmFyeSwgRT1FbGVjdHJvbmljXSBmb2xsb3dlZCBieSA4LWRpZ2l0cywgb3IgRSBmb2xsb3dlZCBieSBhbnkgVVBQRVJDQVNFIGxldHRlciAoZXhjZXB0IEkgYW5kIE8pIGZvbGxvd2VkIGJ5IDcgZGlnaXRzXG4gIENZOiAvXltBLVpdKFxcZHs2fXxcXGR7OH0pJC8sXG4gIC8vIENZUFJVU1xuICBDWjogL15cXGR7OH0kLyxcbiAgLy8gQ1pFQ0ggUkVQVUJMSUNcbiAgREU6IC9eW0NGR0hKS0xNTlBSVFZXWFlaMC05XXs5fSQvLFxuICAvLyBHRVJNQU5ZXG4gIERLOiAvXlxcZHs5fSQvLFxuICAvLyBERU5NQVJLXG4gIERaOiAvXlxcZHs5fSQvLFxuICAvLyBBTEdFUklBXG4gIEVFOiAvXihbQS1aXVxcZHs3fXxbQS1aXXsyfVxcZHs3fSkkLyxcbiAgLy8gRVNUT05JQSAoSyBmb2xsb3dlZCBieSA3LWRpZ2l0cyksIGUtcGFzc3BvcnRzIGhhdmUgMiBVUFBFUkNBU0UgZm9sbG93ZWQgYnkgNyBkaWdpdHNcbiAgRVM6IC9eW0EtWjAtOV17Mn0oW0EtWjAtOV0/KVxcZHs2fSQvLFxuICAvLyBTUEFJTlxuICBGSTogL15bQS1aXXsyfVxcZHs3fSQvLFxuICAvLyBGSU5MQU5EXG4gIEZSOiAvXlxcZHsyfVtBLVpdezJ9XFxkezV9JC8sXG4gIC8vIEZSQU5DRVxuICBHQjogL15cXGR7OX0kLyxcbiAgLy8gVU5JVEVEIEtJTkdET01cbiAgR1I6IC9eW0EtWl17Mn1cXGR7N30kLyxcbiAgLy8gR1JFRUNFXG4gIEhSOiAvXlxcZHs5fSQvLFxuICAvLyBDUk9BVElBXG4gIEhVOiAvXltBLVpdezJ9KFxcZHs2fXxcXGR7N30pJC8sXG4gIC8vIEhVTkdBUllcbiAgSUU6IC9eW0EtWjAtOV17Mn1cXGR7N30kLyxcbiAgLy8gSVJFTEFORFxuICBJTjogL15bQS1aXXsxfS0/XFxkezd9JC8sXG4gIC8vIElORElBXG4gIElEOiAvXltBLUNdXFxkezd9JC8sXG4gIC8vIElORE9ORVNJQVxuICBJUjogL15bQS1aXVxcZHs4fSQvLFxuICAvLyBJUkFOXG4gIElTOiAvXihBKVxcZHs3fSQvLFxuICAvLyBJQ0VMQU5EXG4gIElUOiAvXltBLVowLTldezJ9XFxkezd9JC8sXG4gIC8vIElUQUxZXG4gIEpQOiAvXltBLVpdezJ9XFxkezd9JC8sXG4gIC8vIEpBUEFOXG4gIEtSOiAvXltNU11cXGR7OH0kLyxcbiAgLy8gU09VVEggS09SRUEsIFJFUFVCTElDIE9GIEtPUkVBLCBbUz1QUyBQYXNzcG9ydHMsIE09UE0gUGFzc3BvcnRzXVxuICBMVDogL15bQS1aMC05XXs4fSQvLFxuICAvLyBMSVRIVUFOSUFcbiAgTFU6IC9eW0EtWjAtOV17OH0kLyxcbiAgLy8gTFVYRU1CVVJHXG4gIExWOiAvXltBLVowLTldezJ9XFxkezd9JC8sXG4gIC8vIExBVFZJQVxuICBMWTogL15bQS1aMC05XXs4fSQvLFxuICAvLyBMSUJZQVxuICBNVDogL15cXGR7N30kLyxcbiAgLy8gTUFMVEFcbiAgTVo6IC9eKFtBLVpdezJ9XFxkezd9KXwoXFxkezJ9W0EtWl17Mn1cXGR7NX0pJC8sXG4gIC8vIE1PWkFNQklRVUVcbiAgTVk6IC9eW0FIS11cXGR7OH0kLyxcbiAgLy8gTUFMQVlTSUFcbiAgTkw6IC9eW0EtWl17Mn1bQS1aMC05XXs2fVxcZCQvLFxuICAvLyBORVRIRVJMQU5EU1xuICBQTDogL15bQS1aXXsyfVxcZHs3fSQvLFxuICAvLyBQT0xBTkRcbiAgUFQ6IC9eW0EtWl1cXGR7Nn0kLyxcbiAgLy8gUE9SVFVHQUxcbiAgUk86IC9eXFxkezgsOX0kLyxcbiAgLy8gUk9NQU5JQVxuICBSVTogL15cXGR7OX0kLyxcbiAgLy8gUlVTU0lBTiBGRURFUkFUSU9OXG4gIFNFOiAvXlxcZHs4fSQvLFxuICAvLyBTV0VERU5cbiAgU0w6IC9eKFApW0EtWl1cXGR7N30kLyxcbiAgLy8gU0xPVkFOSUFcbiAgU0s6IC9eWzAtOUEtWl1cXGR7N30kLyxcbiAgLy8gU0xPVkFLSUFcbiAgVFI6IC9eW0EtWl1cXGR7OH0kLyxcbiAgLy8gVFVSS0VZXG4gIFVBOiAvXltBLVpdezJ9XFxkezZ9JC8sXG4gIC8vIFVLUkFJTkVcbiAgVVM6IC9eXFxkezl9JC8gLy8gVU5JVEVEIFNUQVRFU1xuXG59O1xuLyoqXG4gKiBDaGVjayBpZiBzdHIgaXMgYSB2YWxpZCBwYXNzcG9ydCBudW1iZXJcbiAqIHJlbGF0aXZlIHRvIHByb3ZpZGVkIElTTyBDb3VudHJ5IENvZGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtzdHJpbmd9IGNvdW50cnlDb2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzUGFzc3BvcnROdW1iZXIoc3RyLCBjb3VudHJ5Q29kZSkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICAvKiogUmVtb3ZlIEFsbCBXaGl0ZXNwYWNlcywgQ29udmVydCB0byBVUFBFUkNBU0UgKi9cblxuICB2YXIgbm9ybWFsaXplZFN0ciA9IHN0ci5yZXBsYWNlKC9cXHMvZywgJycpLnRvVXBwZXJDYXNlKCk7XG4gIHJldHVybiBjb3VudHJ5Q29kZS50b1VwcGVyQ2FzZSgpIGluIHBhc3Nwb3J0UmVnZXhCeUNvdW50cnlDb2RlICYmIHBhc3Nwb3J0UmVnZXhCeUNvdW50cnlDb2RlW2NvdW50cnlDb2RlXS50ZXN0KG5vcm1hbGl6ZWRTdHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1BvcnQ7XG5cbnZhciBfaXNJbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzSW50XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaXNQb3J0KHN0cikge1xuICByZXR1cm4gKDAsIF9pc0ludC5kZWZhdWx0KShzdHIsIHtcbiAgICBtaW46IDAsXG4gICAgbWF4OiA2NTUzNVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNQb3N0YWxDb2RlO1xuZXhwb3J0cy5sb2NhbGVzID0gdm9pZCAwO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBjb21tb24gcGF0dGVybnNcbnZhciB0aHJlZURpZ2l0ID0gL15cXGR7M30kLztcbnZhciBmb3VyRGlnaXQgPSAvXlxcZHs0fSQvO1xudmFyIGZpdmVEaWdpdCA9IC9eXFxkezV9JC87XG52YXIgc2l4RGlnaXQgPSAvXlxcZHs2fSQvO1xudmFyIHBhdHRlcm5zID0ge1xuICBBRDogL15BRFxcZHszfSQvLFxuICBBVDogZm91ckRpZ2l0LFxuICBBVTogZm91ckRpZ2l0LFxuICBBWjogL15BWlxcZHs0fSQvLFxuICBCRTogZm91ckRpZ2l0LFxuICBCRzogZm91ckRpZ2l0LFxuICBCUjogL15cXGR7NX0tXFxkezN9JC8sXG4gIEJZOiAvMlsxLTRdezF9XFxkezR9JC8sXG4gIENBOiAvXltBQkNFR0hKS0xNTlBSU1RWWFldXFxkW0FCQ0VHSEotTlBSU1RWLVpdW1xcc1xcLV0/XFxkW0FCQ0VHSEotTlBSU1RWLVpdXFxkJC9pLFxuICBDSDogZm91ckRpZ2l0LFxuICBDTjogL14oMFsxLTddfDFbMDEyMzU2XXwyWzAtN118M1swLTZdfDRbMC03XXw1WzEtN118NlsxLTddfDdbMS01XXw4WzEzNDVdfDlbMDldKVxcZHs0fSQvLFxuICBDWjogL15cXGR7M31cXHM/XFxkezJ9JC8sXG4gIERFOiBmaXZlRGlnaXQsXG4gIERLOiBmb3VyRGlnaXQsXG4gIERPOiBmaXZlRGlnaXQsXG4gIERaOiBmaXZlRGlnaXQsXG4gIEVFOiBmaXZlRGlnaXQsXG4gIEVTOiAvXig1WzAtMl17MX18WzAtNF17MX1cXGR7MX0pXFxkezN9JC8sXG4gIEZJOiBmaXZlRGlnaXQsXG4gIEZSOiAvXlxcZHsyfVxccz9cXGR7M30kLyxcbiAgR0I6IC9eKGdpclxccz8wYWF8W2Etel17MSwyfVxcZFtcXGRhLXpdP1xccz8oXFxkW2Etel17Mn0pPykkL2ksXG4gIEdSOiAvXlxcZHszfVxccz9cXGR7Mn0kLyxcbiAgSFI6IC9eKFsxLTVdXFxkezR9JCkvLFxuICBIVDogL15IVFxcZHs0fSQvLFxuICBIVTogZm91ckRpZ2l0LFxuICBJRDogZml2ZURpZ2l0LFxuICBJRTogL14oPyEuKig/Om8pKVtBLVphLXpdXFxkW1xcZHddXFxzXFx3ezR9JC9pLFxuICBJTDogL14oXFxkezV9fFxcZHs3fSkkLyxcbiAgSU46IC9eKCg/ITEwfDI5fDM1fDU0fDU1fDY1fDY2fDg2fDg3fDg4fDg5KVsxLTldWzAtOV17NX0pJC8sXG4gIElSOiAvXFxiKD8hKFxcZClcXDF7M30pWzEzLTldezR9WzEzNDYtOV1bMDEzLTldezV9XFxiLyxcbiAgSVM6IHRocmVlRGlnaXQsXG4gIElUOiBmaXZlRGlnaXQsXG4gIEpQOiAvXlxcZHszfVxcLVxcZHs0fSQvLFxuICBLRTogZml2ZURpZ2l0LFxuICBLUjogL14oXFxkezV9fFxcZHs2fSkkLyxcbiAgTEk6IC9eKDk0OFs1LTldfDk0OVswLTddKSQvLFxuICBMVDogL15MVFxcLVxcZHs1fSQvLFxuICBMVTogZm91ckRpZ2l0LFxuICBMVjogL15MVlxcLVxcZHs0fSQvLFxuICBMSzogZml2ZURpZ2l0LFxuICBNWDogZml2ZURpZ2l0LFxuICBNVDogL15bQS1aYS16XXszfVxcc3swLDF9XFxkezR9JC8sXG4gIE1ZOiBmaXZlRGlnaXQsXG4gIE5MOiAvXlxcZHs0fVxccz9bYS16XXsyfSQvaSxcbiAgTk86IGZvdXJEaWdpdCxcbiAgTlA6IC9eKDEwfDIxfDIyfDMyfDMzfDM0fDQ0fDQ1fDU2fDU3KVxcZHszfSR8Xig5NzcpJC9pLFxuICBOWjogZm91ckRpZ2l0LFxuICBQTDogL15cXGR7Mn1cXC1cXGR7M30kLyxcbiAgUFI6IC9eMDBbNjc5XVxcZHsyfShbIC1dXFxkezR9KT8kLyxcbiAgUFQ6IC9eXFxkezR9XFwtXFxkezN9PyQvLFxuICBSTzogc2l4RGlnaXQsXG4gIFJVOiBzaXhEaWdpdCxcbiAgU0E6IGZpdmVEaWdpdCxcbiAgU0U6IC9eWzEtOV1cXGR7Mn1cXHM/XFxkezJ9JC8sXG4gIFNHOiBzaXhEaWdpdCxcbiAgU0k6IGZvdXJEaWdpdCxcbiAgU0s6IC9eXFxkezN9XFxzP1xcZHsyfSQvLFxuICBUSDogZml2ZURpZ2l0LFxuICBUTjogZm91ckRpZ2l0LFxuICBUVzogL15cXGR7M30oXFxkezJ9KT8kLyxcbiAgVUE6IGZpdmVEaWdpdCxcbiAgVVM6IC9eXFxkezV9KC1cXGR7NH0pPyQvLFxuICBaQTogZm91ckRpZ2l0LFxuICBaTTogZml2ZURpZ2l0XG59O1xudmFyIGxvY2FsZXMgPSBPYmplY3Qua2V5cyhwYXR0ZXJucyk7XG5leHBvcnRzLmxvY2FsZXMgPSBsb2NhbGVzO1xuXG5mdW5jdGlvbiBpc1Bvc3RhbENvZGUoc3RyLCBsb2NhbGUpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcblxuICBpZiAobG9jYWxlIGluIHBhdHRlcm5zKSB7XG4gICAgcmV0dXJuIHBhdHRlcm5zW2xvY2FsZV0udGVzdChzdHIpO1xuICB9IGVsc2UgaWYgKGxvY2FsZSA9PT0gJ2FueScpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcGF0dGVybnMpIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb3R3YXJsb3N0L2lzdGFuYnVsL2Jsb2IvbWFzdGVyL2lnbm9yaW5nLWNvZGUtZm9yLWNvdmVyYWdlLm1kI2lnbm9yaW5nLWNvZGUtZm9yLWNvdmVyYWdlLXB1cnBvc2VzXG4gICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZVxuICAgICAgaWYgKHBhdHRlcm5zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSBwYXR0ZXJuc1trZXldO1xuXG4gICAgICAgIGlmIChwYXR0ZXJuLnRlc3Qoc3RyKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2NhbGUgJ1wiLmNvbmNhdChsb2NhbGUsIFwiJ1wiKSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1JGQzMzMzk7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qIEJhc2VkIG9uIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzMzM5I3NlY3Rpb24tNS42ICovXG52YXIgZGF0ZUZ1bGxZZWFyID0gL1swLTldezR9LztcbnZhciBkYXRlTW9udGggPSAvKDBbMS05XXwxWzAtMl0pLztcbnZhciBkYXRlTURheSA9IC8oWzEyXVxcZHwwWzEtOV18M1swMV0pLztcbnZhciB0aW1lSG91ciA9IC8oWzAxXVswLTldfDJbMC0zXSkvO1xudmFyIHRpbWVNaW51dGUgPSAvWzAtNV1bMC05XS87XG52YXIgdGltZVNlY29uZCA9IC8oWzAtNV1bMC05XXw2MCkvO1xudmFyIHRpbWVTZWNGcmFjID0gLyhcXC5bMC05XSspPy87XG52YXIgdGltZU51bU9mZnNldCA9IG5ldyBSZWdFeHAoXCJbLStdXCIuY29uY2F0KHRpbWVIb3VyLnNvdXJjZSwgXCI6XCIpLmNvbmNhdCh0aW1lTWludXRlLnNvdXJjZSkpO1xudmFyIHRpbWVPZmZzZXQgPSBuZXcgUmVnRXhwKFwiKFt6Wl18XCIuY29uY2F0KHRpbWVOdW1PZmZzZXQuc291cmNlLCBcIilcIikpO1xudmFyIHBhcnRpYWxUaW1lID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdCh0aW1lSG91ci5zb3VyY2UsIFwiOlwiKS5jb25jYXQodGltZU1pbnV0ZS5zb3VyY2UsIFwiOlwiKS5jb25jYXQodGltZVNlY29uZC5zb3VyY2UpLmNvbmNhdCh0aW1lU2VjRnJhYy5zb3VyY2UpKTtcbnZhciBmdWxsRGF0ZSA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoZGF0ZUZ1bGxZZWFyLnNvdXJjZSwgXCItXCIpLmNvbmNhdChkYXRlTW9udGguc291cmNlLCBcIi1cIikuY29uY2F0KGRhdGVNRGF5LnNvdXJjZSkpO1xudmFyIGZ1bGxUaW1lID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChwYXJ0aWFsVGltZS5zb3VyY2UpLmNvbmNhdCh0aW1lT2Zmc2V0LnNvdXJjZSkpO1xudmFyIHJmYzMzMzkgPSBuZXcgUmVnRXhwKFwiXlwiLmNvbmNhdChmdWxsRGF0ZS5zb3VyY2UsIFwiWyB0VF1cIikuY29uY2F0KGZ1bGxUaW1lLnNvdXJjZSwgXCIkXCIpKTtcblxuZnVuY3Rpb24gaXNSRkMzMzM5KHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gcmZjMzMzOS50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzUmdiQ29sb3I7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciByZ2JDb2xvciA9IC9ecmdiXFwoKChbMC05XXxbMS05XVswLTldfDFbMC05XVswLTldfDJbMC00XVswLTldfDI1WzAtNV0pLCl7Mn0oWzAtOV18WzEtOV1bMC05XXwxWzAtOV1bMC05XXwyWzAtNF1bMC05XXwyNVswLTVdKVxcKSQvO1xudmFyIHJnYmFDb2xvciA9IC9ecmdiYVxcKCgoWzAtOV18WzEtOV1bMC05XXwxWzAtOV1bMC05XXwyWzAtNF1bMC05XXwyNVswLTVdKSwpezN9KDA/XFwuXFxkfDEoXFwuMCk/fDAoXFwuMCk/KVxcKSQvO1xudmFyIHJnYkNvbG9yUGVyY2VudCA9IC9ecmdiXFwoKChbMC05XSV8WzEtOV1bMC05XSV8MTAwJSksKXsyfShbMC05XSV8WzEtOV1bMC05XSV8MTAwJSlcXCkvO1xudmFyIHJnYmFDb2xvclBlcmNlbnQgPSAvXnJnYmFcXCgoKFswLTldJXxbMS05XVswLTldJXwxMDAlKSwpezN9KDA/XFwuXFxkfDEoXFwuMCk/fDAoXFwuMCk/KVxcKS87XG5cbmZ1bmN0aW9uIGlzUmdiQ29sb3Ioc3RyKSB7XG4gIHZhciBpbmNsdWRlUGVyY2VudFZhbHVlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcblxuICBpZiAoIWluY2x1ZGVQZXJjZW50VmFsdWVzKSB7XG4gICAgcmV0dXJuIHJnYkNvbG9yLnRlc3Qoc3RyKSB8fCByZ2JhQ29sb3IudGVzdChzdHIpO1xuICB9XG5cbiAgcmV0dXJuIHJnYkNvbG9yLnRlc3Qoc3RyKSB8fCByZ2JhQ29sb3IudGVzdChzdHIpIHx8IHJnYkNvbG9yUGVyY2VudC50ZXN0KHN0cikgfHwgcmdiYUNvbG9yUGVyY2VudC50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzU2VtVmVyO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgX211bHRpbGluZVJlZ2V4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL211bHRpbGluZVJlZ2V4XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBSZWd1bGFyIEV4cHJlc3Npb24gdG8gbWF0Y2hcbiAqIHNlbWFudGljIHZlcnNpb25pbmcgKFNlbVZlcilcbiAqIGJ1aWx0IGZyb20gbXVsdGktbGluZSwgbXVsdGktcGFydHMgcmVnZXhwXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vc2VtdmVyLm9yZy9cbiAqL1xudmFyIHNlbWFudGljVmVyc2lvbmluZ1JlZ2V4ID0gKDAsIF9tdWx0aWxpbmVSZWdleC5kZWZhdWx0KShbJ14oMHxbMS05XVxcXFxkKilcXFxcLigwfFsxLTldXFxcXGQqKVxcXFwuKDB8WzEtOV1cXFxcZCopJywgJyg/Oi0oKD86MHxbMS05XVxcXFxkKnxcXFxcZCpbYS16LV1bMC05YS16LV0qKSg/OlxcXFwuKD86MHxbMS05XVxcXFxkKnxcXFxcZCpbYS16LV1bMC05YS16LV0qKSkqKSknLCAnPyg/OlxcXFwrKFswLTlhLXotXSsoPzpcXFxcLlswLTlhLXotXSspKikpPyQnXSwgJ2knKTtcblxuZnVuY3Rpb24gaXNTZW1WZXIoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzZW1hbnRpY1ZlcnNpb25pbmdSZWdleC50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzU2x1ZztcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNoYXJzZXRSZWdleCA9IC9eW15cXHMtX10oPyEuKj9bLV9dezIsfSlbYS16MC05LVxcXFxdW15cXHNdKlteLV9cXHNdJC87XG5cbmZ1bmN0aW9uIGlzU2x1ZyhzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGNoYXJzZXRSZWdleC50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzU3Ryb25nUGFzc3dvcmQ7XG5cbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdXBwZXJDYXNlUmVnZXggPSAvXltBLVpdJC87XG52YXIgbG93ZXJDYXNlUmVnZXggPSAvXlthLXpdJC87XG52YXIgbnVtYmVyUmVnZXggPSAvXlswLTldJC87XG52YXIgc3ltYm9sUmVnZXggPSAvXlstIyEkQCVeJiooKV8rfH49YHt9XFxbXFxdOlwiOyc8Pj8sLlxcLyBdJC87XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIG1pbkxlbmd0aDogOCxcbiAgbWluTG93ZXJjYXNlOiAxLFxuICBtaW5VcHBlcmNhc2U6IDEsXG4gIG1pbk51bWJlcnM6IDEsXG4gIG1pblN5bWJvbHM6IDEsXG4gIHJldHVyblNjb3JlOiBmYWxzZSxcbiAgcG9pbnRzUGVyVW5pcXVlOiAxLFxuICBwb2ludHNQZXJSZXBlYXQ6IDAuNSxcbiAgcG9pbnRzRm9yQ29udGFpbmluZ0xvd2VyOiAxMCxcbiAgcG9pbnRzRm9yQ29udGFpbmluZ1VwcGVyOiAxMCxcbiAgcG9pbnRzRm9yQ29udGFpbmluZ051bWJlcjogMTAsXG4gIHBvaW50c0ZvckNvbnRhaW5pbmdTeW1ib2w6IDEwXG59O1xuLyogQ291bnRzIG51bWJlciBvZiBvY2N1cnJlbmNlcyBvZiBlYWNoIGNoYXIgaW4gYSBzdHJpbmdcbiAqIGNvdWxkIGJlIG1vdmVkIHRvIHV0aWwvID9cbiovXG5cbmZ1bmN0aW9uIGNvdW50Q2hhcnMoc3RyKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgQXJyYXkuZnJvbShzdHIpLmZvckVhY2goZnVuY3Rpb24gKGNoYXIpIHtcbiAgICB2YXIgY3VyVmFsID0gcmVzdWx0W2NoYXJdO1xuXG4gICAgaWYgKGN1clZhbCkge1xuICAgICAgcmVzdWx0W2NoYXJdICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtjaGFyXSA9IDE7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qIFJldHVybiBpbmZvcm1hdGlvbiBhYm91dCBhIHBhc3N3b3JkICovXG5cblxuZnVuY3Rpb24gYW5hbHl6ZVBhc3N3b3JkKHBhc3N3b3JkKSB7XG4gIHZhciBjaGFyTWFwID0gY291bnRDaGFycyhwYXNzd29yZCk7XG4gIHZhciBhbmFseXNpcyA9IHtcbiAgICBsZW5ndGg6IHBhc3N3b3JkLmxlbmd0aCxcbiAgICB1bmlxdWVDaGFyczogT2JqZWN0LmtleXMoY2hhck1hcCkubGVuZ3RoLFxuICAgIHVwcGVyY2FzZUNvdW50OiAwLFxuICAgIGxvd2VyY2FzZUNvdW50OiAwLFxuICAgIG51bWJlckNvdW50OiAwLFxuICAgIHN5bWJvbENvdW50OiAwXG4gIH07XG4gIE9iamVjdC5rZXlzKGNoYXJNYXApLmZvckVhY2goZnVuY3Rpb24gKGNoYXIpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh1cHBlckNhc2VSZWdleC50ZXN0KGNoYXIpKSB7XG4gICAgICBhbmFseXNpcy51cHBlcmNhc2VDb3VudCArPSBjaGFyTWFwW2NoYXJdO1xuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlUmVnZXgudGVzdChjaGFyKSkge1xuICAgICAgYW5hbHlzaXMubG93ZXJjYXNlQ291bnQgKz0gY2hhck1hcFtjaGFyXTtcbiAgICB9IGVsc2UgaWYgKG51bWJlclJlZ2V4LnRlc3QoY2hhcikpIHtcbiAgICAgIGFuYWx5c2lzLm51bWJlckNvdW50ICs9IGNoYXJNYXBbY2hhcl07XG4gICAgfSBlbHNlIGlmIChzeW1ib2xSZWdleC50ZXN0KGNoYXIpKSB7XG4gICAgICBhbmFseXNpcy5zeW1ib2xDb3VudCArPSBjaGFyTWFwW2NoYXJdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhbmFseXNpcztcbn1cblxuZnVuY3Rpb24gc2NvcmVQYXNzd29yZChhbmFseXNpcywgc2NvcmluZ09wdGlvbnMpIHtcbiAgdmFyIHBvaW50cyA9IDA7XG4gIHBvaW50cyArPSBhbmFseXNpcy51bmlxdWVDaGFycyAqIHNjb3JpbmdPcHRpb25zLnBvaW50c1BlclVuaXF1ZTtcbiAgcG9pbnRzICs9IChhbmFseXNpcy5sZW5ndGggLSBhbmFseXNpcy51bmlxdWVDaGFycykgKiBzY29yaW5nT3B0aW9ucy5wb2ludHNQZXJSZXBlYXQ7XG5cbiAgaWYgKGFuYWx5c2lzLmxvd2VyY2FzZUNvdW50ID4gMCkge1xuICAgIHBvaW50cyArPSBzY29yaW5nT3B0aW9ucy5wb2ludHNGb3JDb250YWluaW5nTG93ZXI7XG4gIH1cblxuICBpZiAoYW5hbHlzaXMudXBwZXJjYXNlQ291bnQgPiAwKSB7XG4gICAgcG9pbnRzICs9IHNjb3JpbmdPcHRpb25zLnBvaW50c0ZvckNvbnRhaW5pbmdVcHBlcjtcbiAgfVxuXG4gIGlmIChhbmFseXNpcy5udW1iZXJDb3VudCA+IDApIHtcbiAgICBwb2ludHMgKz0gc2NvcmluZ09wdGlvbnMucG9pbnRzRm9yQ29udGFpbmluZ051bWJlcjtcbiAgfVxuXG4gIGlmIChhbmFseXNpcy5zeW1ib2xDb3VudCA+IDApIHtcbiAgICBwb2ludHMgKz0gc2NvcmluZ09wdGlvbnMucG9pbnRzRm9yQ29udGFpbmluZ1N5bWJvbDtcbiAgfVxuXG4gIHJldHVybiBwb2ludHM7XG59XG5cbmZ1bmN0aW9uIGlzU3Ryb25nUGFzc3dvcmQoc3RyKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgYW5hbHlzaXMgPSBhbmFseXplUGFzc3dvcmQoc3RyKTtcbiAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UuZGVmYXVsdCkob3B0aW9ucyB8fCB7fSwgZGVmYXVsdE9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zLnJldHVyblNjb3JlKSB7XG4gICAgcmV0dXJuIHNjb3JlUGFzc3dvcmQoYW5hbHlzaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIGFuYWx5c2lzLmxlbmd0aCA+PSBvcHRpb25zLm1pbkxlbmd0aCAmJiBhbmFseXNpcy5sb3dlcmNhc2VDb3VudCA+PSBvcHRpb25zLm1pbkxvd2VyY2FzZSAmJiBhbmFseXNpcy51cHBlcmNhc2VDb3VudCA+PSBvcHRpb25zLm1pblVwcGVyY2FzZSAmJiBhbmFseXNpcy5udW1iZXJDb3VudCA+PSBvcHRpb25zLm1pbk51bWJlcnMgJiYgYW5hbHlzaXMuc3ltYm9sQ291bnQgPj0gb3B0aW9ucy5taW5TeW1ib2xzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1N1cnJvZ2F0ZVBhaXI7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzdXJyb2dhdGVQYWlyID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vO1xuXG5mdW5jdGlvbiBpc1N1cnJvZ2F0ZVBhaXIoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdXJyb2dhdGVQYWlyLnRlc3Qoc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1RheElEO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG52YXIgYWxnb3JpdGhtcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3V0aWwvYWxnb3JpdGhtc1wiKSk7XG5cbnZhciBfaXNEYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0RhdGVcIikpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbi8qKlxuICogVElOIFZhbGlkYXRpb25cbiAqIFZhbGlkYXRlcyBUYXggSWRlbnRpZmljYXRpb24gTnVtYmVycyAoVElOcykgZnJvbSB0aGUgVVMsIEVVIG1lbWJlciBzdGF0ZXMgYW5kIHRoZSBVbml0ZWQgS2luZ2RvbS5cbiAqXG4gKiBFVS1VSzpcbiAqIE5hdGlvbmFsIFRJTiB2YWxpZGl0eSBpcyBjYWxjdWxhdGVkIHVzaW5nIHB1YmxpYyBhbGdvcml0aG1zIGFzIG1hZGUgYXZhaWxhYmxlIGJ5IERHIFRBWFVELlxuICpcbiAqIFNlZSBgaHR0cHM6Ly9lYy5ldXJvcGEuZXUvdGF4YXRpb25fY3VzdG9tcy90aW4vc3BlY3MvRlMtVElOJTIwQWxnb3JpdGhtcy1QdWJsaWMuZG9jeGAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogVVM6XG4gKiBBbiBFbXBsb3llciBJZGVudGlmaWNhdGlvbiBOdW1iZXIgKEVJTiksIGFsc28ga25vd24gYXMgYSBGZWRlcmFsIFRheCBJZGVudGlmaWNhdGlvbiBOdW1iZXIsXG4gKiAgaXMgdXNlZCB0byBpZGVudGlmeSBhIGJ1c2luZXNzIGVudGl0eS5cbiAqXG4gKiBOT1RFUzpcbiAqICAtIFByZWZpeCA0NyBpcyBiZWluZyByZXNlcnZlZCBmb3IgZnV0dXJlIHVzZVxuICogIC0gUHJlZml4ZXMgMjYsIDI3LCA0NSwgNDYgYW5kIDQ3IHdlcmUgcHJldmlvdXNseSBhc3NpZ25lZCBieSB0aGUgUGhpbGFkZWxwaGlhIGNhbXB1cy5cbiAqXG4gKiBTZWUgYGh0dHA6Ly93d3cuaXJzLmdvdi9CdXNpbmVzc2VzL1NtYWxsLUJ1c2luZXNzZXMtJi1TZWxmLUVtcGxveWVkL0hvdy1FSU5zLWFyZS1Bc3NpZ25lZC1hbmQtVmFsaWQtRUlOLVByZWZpeGVzYFxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKi9cbi8vIExvY2FsZSBmdW5jdGlvbnNcblxuLypcbiAqIGJnLUJHIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChFZGluZW4gZ3Jhxb5kYW5za2kgbm9tZXIgKEVHTi/QldCT0J0pLCBwZXJzb25zIG9ubHkpXG4gKiBDaGVja3MgaWYgYmlydGggZGF0ZSAoZmlyc3Qgc2l4IGRpZ2l0cykgaXMgdmFsaWQgYW5kIGNhbGN1bGF0ZXMgY2hlY2sgKGxhc3QpIGRpZ2l0XG4gKi9cbmZ1bmN0aW9uIGJnQmdDaGVjayh0aW4pIHtcbiAgLy8gRXh0cmFjdCBmdWxsIHllYXIsIG5vcm1hbGl6ZSBtb250aCBhbmQgY2hlY2sgYmlydGggZGF0ZSB2YWxpZGl0eVxuICB2YXIgY2VudHVyeV95ZWFyID0gdGluLnNsaWNlKDAsIDIpO1xuICB2YXIgbW9udGggPSBwYXJzZUludCh0aW4uc2xpY2UoMiwgNCksIDEwKTtcblxuICBpZiAobW9udGggPiA0MCkge1xuICAgIG1vbnRoIC09IDQwO1xuICAgIGNlbnR1cnlfeWVhciA9IFwiMjBcIi5jb25jYXQoY2VudHVyeV95ZWFyKTtcbiAgfSBlbHNlIGlmIChtb250aCA+IDIwKSB7XG4gICAgbW9udGggLT0gMjA7XG4gICAgY2VudHVyeV95ZWFyID0gXCIxOFwiLmNvbmNhdChjZW50dXJ5X3llYXIpO1xuICB9IGVsc2Uge1xuICAgIGNlbnR1cnlfeWVhciA9IFwiMTlcIi5jb25jYXQoY2VudHVyeV95ZWFyKTtcbiAgfVxuXG4gIGlmIChtb250aCA8IDEwKSB7XG4gICAgbW9udGggPSBcIjBcIi5jb25jYXQobW9udGgpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChjZW50dXJ5X3llYXIsIFwiL1wiKS5jb25jYXQobW9udGgsIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDQsIDYpKTtcblxuICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gc3BsaXQgZGlnaXRzIGludG8gYW4gYXJyYXkgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZ1xuXG5cbiAgdmFyIGRpZ2l0cyA9IHRpbi5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKTtcbiAgfSk7IC8vIENhbGN1bGF0ZSBjaGVja3N1bSBieSBtdWx0aXBseWluZyBkaWdpdHMgd2l0aCBmaXhlZCB2YWx1ZXNcblxuICB2YXIgbXVsdGlwX2xvb2t1cCA9IFsyLCA0LCA4LCA1LCAxMCwgOSwgNywgMywgNl07XG4gIHZhciBjaGVja3N1bSA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdWx0aXBfbG9va3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hlY2tzdW0gKz0gZGlnaXRzW2ldICogbXVsdGlwX2xvb2t1cFtpXTtcbiAgfVxuXG4gIGNoZWNrc3VtID0gY2hlY2tzdW0gJSAxMSA9PT0gMTAgPyAwIDogY2hlY2tzdW0gJSAxMTtcbiAgcmV0dXJuIGNoZWNrc3VtID09PSBkaWdpdHNbOV07XG59XG4vKlxuICogY3MtQ1ogdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKFJvZG7DqSDEjcOtc2xvIChSxIwpLCBwZXJzb25zIG9ubHkpXG4gKiBDaGVja3MgaWYgYmlydGggZGF0ZSAoZmlyc3Qgc2l4IGRpZ2l0cykgaXMgdmFsaWQgYW5kIGRpdmlzaWJpbGl0eSBieSAxMVxuICogTWF0ZXJpYWwgbm90IGluIERHIFRBWFVEIGRvY3VtZW50IHNvdXJjZWQgZnJvbTpcbiAqIC1gaHR0cHM6Ly9sb3JlbmMuaW5mby8zTUEzODEvb3ZlcmVuaS1zcHJhdm5vc3RpLXJvZG5laG8tY2lzbGEuaHRtYFxuICogLWBodHRwczovL3d3dy5tdmNyLmN6L2NsYW5lay9yYWR5LWEtc2x1emJ5LWRva3VtZW50eS1yb2RuZS1jaXNsby5hc3B4YFxuICovXG5cblxuZnVuY3Rpb24gY3NDekNoZWNrKHRpbikge1xuICB0aW4gPSB0aW4ucmVwbGFjZSgvXFxXLywgJycpOyAvLyBFeHRyYWN0IGZ1bGwgeWVhciBmcm9tIFRJTiBsZW5ndGhcblxuICB2YXIgZnVsbF95ZWFyID0gcGFyc2VJbnQodGluLnNsaWNlKDAsIDIpLCAxMCk7XG5cbiAgaWYgKHRpbi5sZW5ndGggPT09IDEwKSB7XG4gICAgaWYgKGZ1bGxfeWVhciA8IDU0KSB7XG4gICAgICBmdWxsX3llYXIgPSBcIjIwXCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGxfeWVhciA9IFwiMTlcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRpbi5zbGljZSg2KSA9PT0gJzAwMCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIFRocmVlLXplcm8gc2VyaWFsIG5vdCBhc3NpZ25lZCBiZWZvcmUgMTk1NFxuXG5cbiAgICBpZiAoZnVsbF95ZWFyIDwgNTQpIHtcbiAgICAgIGZ1bGxfeWVhciA9IFwiMTlcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlOyAvLyBObyAxOFhYIHllYXJzIHNlZW4gaW4gYW55IG9mIHRoZSByZXNvdXJjZXNcbiAgICB9XG4gIH0gLy8gQWRkIG1pc3NpbmcgemVybyBpZiBuZWVkZWRcblxuXG4gIGlmIChmdWxsX3llYXIubGVuZ3RoID09PSAzKSB7XG4gICAgZnVsbF95ZWFyID0gW2Z1bGxfeWVhci5zbGljZSgwLCAyKSwgJzAnLCBmdWxsX3llYXIuc2xpY2UoMildLmpvaW4oJycpO1xuICB9IC8vIEV4dHJhY3QgbW9udGggZnJvbSBUSU4gYW5kIG5vcm1hbGl6ZVxuXG5cbiAgdmFyIG1vbnRoID0gcGFyc2VJbnQodGluLnNsaWNlKDIsIDQpLCAxMCk7XG5cbiAgaWYgKG1vbnRoID4gNTApIHtcbiAgICBtb250aCAtPSA1MDtcbiAgfVxuXG4gIGlmIChtb250aCA+IDIwKSB7XG4gICAgLy8gTW9udGgtcGx1cy10d2VudHkgd2FzIG9ubHkgaW50cm9kdWNlZCBpbiAyMDA0XG4gICAgaWYgKHBhcnNlSW50KGZ1bGxfeWVhciwgMTApIDwgMjAwNCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG1vbnRoIC09IDIwO1xuICB9XG5cbiAgaWYgKG1vbnRoIDwgMTApIHtcbiAgICBtb250aCA9IFwiMFwiLmNvbmNhdChtb250aCk7XG4gIH0gLy8gQ2hlY2sgZGF0ZSB2YWxpZGl0eVxuXG5cbiAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChmdWxsX3llYXIsIFwiL1wiKS5jb25jYXQobW9udGgsIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDQsIDYpKTtcblxuICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gVmVyaWZ5IGRpdmlzaWJpbGl0eSBieSAxMVxuXG5cbiAgaWYgKHRpbi5sZW5ndGggPT09IDEwKSB7XG4gICAgaWYgKHBhcnNlSW50KHRpbiwgMTApICUgMTEgIT09IDApIHtcbiAgICAgIC8vIFNvbWUgbnVtYmVycyB1cCB0byBhbmQgaW5jbHVkaW5nIDE5ODUgYXJlIHN0aWxsIHZhbGlkIGlmXG4gICAgICAvLyBjaGVjayAobGFzdCkgZGlnaXQgZXF1YWxzIDAgYW5kIG1vZHVsbyBvZiBmaXJzdCA5IGRpZ2l0cyBlcXVhbHMgMTBcbiAgICAgIHZhciBjaGVja2RpZ2l0ID0gcGFyc2VJbnQodGluLnNsaWNlKDAsIDkpLCAxMCkgJSAxMTtcblxuICAgICAgaWYgKHBhcnNlSW50KGZ1bGxfeWVhciwgMTApIDwgMTk4NiAmJiBjaGVja2RpZ2l0ID09PSAxMCkge1xuICAgICAgICBpZiAocGFyc2VJbnQodGluLnNsaWNlKDkpLCAxMCkgIT09IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qXG4gKiBkZS1BVCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoQWJnYWJlbmtvbnRvbnVtbWVyLCBwZXJzb25zL2VudGl0aWVzKVxuICogVmVyaWZ5IFRJTiB2YWxpZGl0eSBieSBjYWxsaW5nIGx1aG5DaGVjaygpXG4gKi9cblxuXG5mdW5jdGlvbiBkZUF0Q2hlY2sodGluKSB7XG4gIHJldHVybiBhbGdvcml0aG1zLmx1aG5DaGVjayh0aW4pO1xufVxuLypcbiAqIGRlLURFIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChTdGV1ZXJpZGVudGlmaWthdGlvbnNudW1tZXIgKFN0ZXVlci1JZE5yLiksIHBlcnNvbnMgb25seSlcbiAqIFRlc3RzIGZvciBzaW5nbGUgZHVwbGljYXRlL3RyaXBsaWNhdGUgdmFsdWUsIHRoZW4gY2FsY3VsYXRlcyBJU08gNzA2NCBjaGVjayAobGFzdCkgZGlnaXRcbiAqIFBhcnRpYWwgaW1wbGVtZW50YXRpb24gb2Ygc3BlYyAoc2FtZSByZXN1bHQgd2l0aCBib3RoIGFsZ29yaXRobXMgYWx3YXlzKVxuICovXG5cblxuZnVuY3Rpb24gZGVEZUNoZWNrKHRpbikge1xuICAvLyBTcGxpdCBkaWdpdHMgaW50byBhbiBhcnJheSBmb3IgZnVydGhlciBwcm9jZXNzaW5nXG4gIHZhciBkaWdpdHMgPSB0aW4uc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gIH0pOyAvLyBGaWxsIGFycmF5IHdpdGggc3RyaW5ncyBvZiBudW1iZXIgcG9zaXRpb25zXG5cbiAgdmFyIG9jY3VyZW5jZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZ2l0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBvY2N1cmVuY2VzLnB1c2goJycpO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBkaWdpdHMubGVuZ3RoIC0gMTsgaisrKSB7XG4gICAgICBpZiAoZGlnaXRzW2ldID09PSBkaWdpdHNbal0pIHtcbiAgICAgICAgb2NjdXJlbmNlc1tpXSArPSBqO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBSZW1vdmUgZGlnaXRzIHdpdGggb25lIG9jY3VyZW5jZSBhbmQgdGVzdCBmb3Igb25seSBvbmUgZHVwbGljYXRlL3RyaXBsaWNhdGVcblxuXG4gIG9jY3VyZW5jZXMgPSBvY2N1cmVuY2VzLmZpbHRlcihmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBhLmxlbmd0aCA+IDE7XG4gIH0pO1xuXG4gIGlmIChvY2N1cmVuY2VzLmxlbmd0aCAhPT0gMiAmJiBvY2N1cmVuY2VzLmxlbmd0aCAhPT0gMykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJbiBjYXNlIG9mIHRyaXBsaWNhdGUgdmFsdWUgb25seSB0d28gZGlnaXRzIGFyZSBhbGxvd2VkIG5leHQgdG8gZWFjaCBvdGhlclxuXG5cbiAgaWYgKG9jY3VyZW5jZXNbMF0ubGVuZ3RoID09PSAzKSB7XG4gICAgdmFyIHRyaXBfbG9jYXRpb25zID0gb2NjdXJlbmNlc1swXS5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICAgIH0pO1xuICAgIHZhciByZWN1cnJlbnQgPSAwOyAvLyBBbW91bnQgb2YgbmVpZ2hib3VyIG9jY3VyZW5jZXNcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0cmlwX2xvY2F0aW9ucy5sZW5ndGggLSAxOyBfaSsrKSB7XG4gICAgICBpZiAodHJpcF9sb2NhdGlvbnNbX2ldICsgMSA9PT0gdHJpcF9sb2NhdGlvbnNbX2kgKyAxXSkge1xuICAgICAgICByZWN1cnJlbnQgKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVjdXJyZW50ID09PSAyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFsZ29yaXRobXMuaXNvNzA2NENoZWNrKHRpbik7XG59XG4vKlxuICogZGstREsgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKENQUi1udW1tZXIgKHBlcnNvbm51bW1lciksIHBlcnNvbnMgb25seSlcbiAqIENoZWNrcyBpZiBiaXJ0aCBkYXRlIChmaXJzdCBzaXggZGlnaXRzKSBpcyB2YWxpZCBhbmQgYXNzaWduZWQgdG8gY2VudHVyeSAoc2V2ZW50aCkgZGlnaXQsXG4gKiBhbmQgY2FsY3VsYXRlcyBjaGVjayAobGFzdCkgZGlnaXRcbiAqL1xuXG5cbmZ1bmN0aW9uIGRrRGtDaGVjayh0aW4pIHtcbiAgdGluID0gdGluLnJlcGxhY2UoL1xcVy8sICcnKTsgLy8gRXh0cmFjdCB5ZWFyLCBjaGVjayBpZiB2YWxpZCBmb3IgZ2l2ZW4gY2VudHVyeSBkaWdpdCBhbmQgYWRkIGNlbnR1cnlcblxuICB2YXIgeWVhciA9IHBhcnNlSW50KHRpbi5zbGljZSg0LCA2KSwgMTApO1xuICB2YXIgY2VudHVyeV9kaWdpdCA9IHRpbi5zbGljZSg2LCA3KTtcblxuICBzd2l0Y2ggKGNlbnR1cnlfZGlnaXQpIHtcbiAgICBjYXNlICcwJzpcbiAgICBjYXNlICcxJzpcbiAgICBjYXNlICcyJzpcbiAgICBjYXNlICczJzpcbiAgICAgIHllYXIgPSBcIjE5XCIuY29uY2F0KHllYXIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICc0JzpcbiAgICBjYXNlICc5JzpcbiAgICAgIGlmICh5ZWFyIDwgMzcpIHtcbiAgICAgICAgeWVhciA9IFwiMjBcIi5jb25jYXQoeWVhcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5ZWFyID0gXCIxOVwiLmNvbmNhdCh5ZWFyKTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHllYXIgPCAzNykge1xuICAgICAgICB5ZWFyID0gXCIyMFwiLmNvbmNhdCh5ZWFyKTtcbiAgICAgIH0gZWxzZSBpZiAoeWVhciA+IDU4KSB7XG4gICAgICAgIHllYXIgPSBcIjE4XCIuY29uY2F0KHllYXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfSAvLyBBZGQgbWlzc2luZyB6ZXJvIGlmIG5lZWRlZFxuXG5cbiAgaWYgKHllYXIubGVuZ3RoID09PSAzKSB7XG4gICAgeWVhciA9IFt5ZWFyLnNsaWNlKDAsIDIpLCAnMCcsIHllYXIuc2xpY2UoMildLmpvaW4oJycpO1xuICB9IC8vIENoZWNrIGRhdGUgdmFsaWRpdHlcblxuXG4gIHZhciBkYXRlID0gXCJcIi5jb25jYXQoeWVhciwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoMiwgNCksIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDAsIDIpKTtcblxuICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gU3BsaXQgZGlnaXRzIGludG8gYW4gYXJyYXkgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZ1xuXG5cbiAgdmFyIGRpZ2l0cyA9IHRpbi5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKTtcbiAgfSk7XG4gIHZhciBjaGVja3N1bSA9IDA7XG4gIHZhciB3ZWlnaHQgPSA0OyAvLyBNdWx0aXBseSBieSB3ZWlnaHQgYW5kIGFkZCB0byBjaGVja3N1bVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgOTsgaSsrKSB7XG4gICAgY2hlY2tzdW0gKz0gZGlnaXRzW2ldICogd2VpZ2h0O1xuICAgIHdlaWdodCAtPSAxO1xuXG4gICAgaWYgKHdlaWdodCA9PT0gMSkge1xuICAgICAgd2VpZ2h0ID0gNztcbiAgICB9XG4gIH1cblxuICBjaGVja3N1bSAlPSAxMTtcblxuICBpZiAoY2hlY2tzdW0gPT09IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY2hlY2tzdW0gPT09IDAgPyBkaWdpdHNbOV0gPT09IDAgOiBkaWdpdHNbOV0gPT09IDExIC0gY2hlY2tzdW07XG59XG4vKlxuICogZWwtQ1kgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKEFyaXRobW9zIEZvcm9sb2dpa291IE1pdHJvb3UgKEFGTS/Okc6mzpwpLCBwZXJzb25zIG9ubHkpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIEFTQ0lJIHZhbHVlIG9mIGNoZWNrIChsYXN0KSBjaGFyYWN0ZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIGVsQ3lDaGVjayh0aW4pIHtcbiAgLy8gc3BsaXQgZGlnaXRzIGludG8gYW4gYXJyYXkgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZ1xuICB2YXIgZGlnaXRzID0gdGluLnNsaWNlKDAsIDgpLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICB9KTtcbiAgdmFyIGNoZWNrc3VtID0gMDsgLy8gYWRkIGRpZ2l0cyBpbiBldmVuIHBsYWNlc1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgZGlnaXRzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgY2hlY2tzdW0gKz0gZGlnaXRzW2ldO1xuICB9IC8vIGFkZCBkaWdpdHMgaW4gb2RkIHBsYWNlc1xuXG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZGlnaXRzLmxlbmd0aDsgX2kyICs9IDIpIHtcbiAgICBpZiAoZGlnaXRzW19pMl0gPCAyKSB7XG4gICAgICBjaGVja3N1bSArPSAxIC0gZGlnaXRzW19pMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrc3VtICs9IDIgKiAoZGlnaXRzW19pMl0gLSAyKSArIDU7XG5cbiAgICAgIGlmIChkaWdpdHNbX2kyXSA+IDQpIHtcbiAgICAgICAgY2hlY2tzdW0gKz0gMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaGVja3N1bSAlIDI2ICsgNjUpID09PSB0aW4uY2hhckF0KDgpO1xufVxuLypcbiAqIGVsLUdSIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChBcml0aG1vcyBGb3JvbG9naWtvdSBNaXRyb291IChBRk0vzpHOps6cKSwgcGVyc29ucy9lbnRpdGllcylcbiAqIFZlcmlmeSBUSU4gdmFsaWRpdHkgYnkgY2FsY3VsYXRpbmcgY2hlY2sgKGxhc3QpIGRpZ2l0XG4gKiBBbGdvcml0aG0gbm90IGluIERHIFRBWFVEIGRvY3VtZW50LSBzb3VyY2VkIGZyb206XG4gKiAtIGBodHRwOi8vZXBpeGVpcmlzaS5nci8lQ0UlOUElQ0UlQTElQ0UlOTklQ0UlQTMlQ0UlOTklQ0UlOUMlQ0UlOTEtJUNFJTk4JUNFJTk1JUNFJTlDJUNFJTkxJUNFJUE0JUNFJTkxLSVDRSVBNiVDRSU5RiVDRSVBMSVDRSU5RiVDRSU5QiVDRSU5RiVDRSU5MyVDRSU5OSVDRSU5MSVDRSVBMy0lQ0UlOUElQ0UlOTElQ0UlOTktJUNFJTlCJUNFJTlGJUNFJTkzJUNFJTk5JUNFJUEzJUNFJUE0JUNFJTk5JUNFJTlBJUNFJTk3JUNFJUEzLzIzNzkxLyVDRSU5MSVDRiU4MSVDRSVCOSVDRSVCOCVDRSVCQyVDRiU4QyVDRiU4Mi0lQ0UlQTYlQ0UlQkYlQ0YlODElQ0UlQkYlQ0UlQkIlQ0UlQkYlQ0UlQjMlQ0UlQjklQ0UlQkElQ0UlQkYlQ0YlOEQtJUNFJTlDJUNFJUI3JUNGJTg0JUNGJTgxJUNGJThFJUNFJUJGJUNGJTg1YFxuICovXG5cblxuZnVuY3Rpb24gZWxHckNoZWNrKHRpbikge1xuICAvLyBzcGxpdCBkaWdpdHMgaW50byBhbiBhcnJheSBmb3IgZnVydGhlciBwcm9jZXNzaW5nXG4gIHZhciBkaWdpdHMgPSB0aW4uc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gIH0pO1xuICB2YXIgY2hlY2tzdW0gPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgY2hlY2tzdW0gKz0gZGlnaXRzW2ldICogTWF0aC5wb3coMiwgOCAtIGkpO1xuICB9XG5cbiAgcmV0dXJuIGNoZWNrc3VtICUgMTEgJSAxMCA9PT0gZGlnaXRzWzhdO1xufVxuLypcbiAqIGVuLUdCIHZhbGlkYXRpb24gZnVuY3Rpb24gKHNob3VsZCBnbyBoZXJlIGlmIG5lZWRlZClcbiAqIChOYXRpb25hbCBJbnN1cmFuY2UgTnVtYmVyIChOSU5PKSBvciBVbmlxdWUgVGF4cGF5ZXIgUmVmZXJlbmNlIChVVFIpLFxuICogcGVyc29ucy9lbnRpdGllcyByZXNwZWN0aXZlbHkpXG4gKi9cblxuLypcbiAqIGVuLUlFIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChQZXJzb25hbCBQdWJsaWMgU2VydmljZSBOdW1iZXIgKFBQUyBObyksIHBlcnNvbnMgb25seSlcbiAqIFZlcmlmeSBUSU4gdmFsaWRpdHkgYnkgY2FsY3VsYXRpbmcgY2hlY2sgKHNlY29uZCB0byBsYXN0KSBjaGFyYWN0ZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIGVuSWVDaGVjayh0aW4pIHtcbiAgdmFyIGNoZWNrc3VtID0gYWxnb3JpdGhtcy5yZXZlcnNlTXVsdGlwbHlBbmRTdW0odGluLnNwbGl0KCcnKS5zbGljZSgwLCA3KS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICB9KSwgOCk7XG5cbiAgaWYgKHRpbi5sZW5ndGggPT09IDkgJiYgdGluWzhdICE9PSAnVycpIHtcbiAgICBjaGVja3N1bSArPSAodGluWzhdLmNoYXJDb2RlQXQoMCkgLSA2NCkgKiA5O1xuICB9XG5cbiAgY2hlY2tzdW0gJT0gMjM7XG5cbiAgaWYgKGNoZWNrc3VtID09PSAwKSB7XG4gICAgcmV0dXJuIHRpbls3XS50b1VwcGVyQ2FzZSgpID09PSAnVyc7XG4gIH1cblxuICByZXR1cm4gdGluWzddLnRvVXBwZXJDYXNlKCkgPT09IFN0cmluZy5mcm9tQ2hhckNvZGUoNjQgKyBjaGVja3N1bSk7XG59IC8vIFZhbGlkIFVTIElSUyBjYW1wdXMgcHJlZml4ZXNcblxuXG52YXIgZW5Vc0NhbXB1c1ByZWZpeCA9IHtcbiAgYW5kb3ZlcjogWycxMCcsICcxMiddLFxuICBhdGxhbnRhOiBbJzYwJywgJzY3J10sXG4gIGF1c3RpbjogWyc1MCcsICc1MyddLFxuICBicm9va2hhdmVuOiBbJzAxJywgJzAyJywgJzAzJywgJzA0JywgJzA1JywgJzA2JywgJzExJywgJzEzJywgJzE0JywgJzE2JywgJzIxJywgJzIyJywgJzIzJywgJzI1JywgJzM0JywgJzUxJywgJzUyJywgJzU0JywgJzU1JywgJzU2JywgJzU3JywgJzU4JywgJzU5JywgJzY1J10sXG4gIGNpbmNpbm5hdGk6IFsnMzAnLCAnMzInLCAnMzUnLCAnMzYnLCAnMzcnLCAnMzgnLCAnNjEnXSxcbiAgZnJlc25vOiBbJzE1JywgJzI0J10sXG4gIGludGVybmV0OiBbJzIwJywgJzI2JywgJzI3JywgJzQ1JywgJzQ2JywgJzQ3J10sXG4gIGthbnNhczogWyc0MCcsICc0NCddLFxuICBtZW1waGlzOiBbJzk0JywgJzk1J10sXG4gIG9nZGVuOiBbJzgwJywgJzkwJ10sXG4gIHBoaWxhZGVscGhpYTogWyczMycsICczOScsICc0MScsICc0MicsICc0MycsICc0NicsICc0OCcsICc2MicsICc2MycsICc2NCcsICc2NicsICc2OCcsICc3MScsICc3MicsICc3MycsICc3NCcsICc3NScsICc3NicsICc3NycsICc4MScsICc4MicsICc4MycsICc4NCcsICc4NScsICc4NicsICc4NycsICc4OCcsICc5MScsICc5MicsICc5MycsICc5OCcsICc5OSddLFxuICBzYmE6IFsnMzEnXVxufTsgLy8gUmV0dXJuIGFuIGFycmF5IG9mIGFsbCBVUyBJUlMgY2FtcHVzIHByZWZpeGVzXG5cbmZ1bmN0aW9uIGVuVXNHZXRQcmVmaXhlcygpIHtcbiAgdmFyIHByZWZpeGVzID0gW107XG5cbiAgZm9yICh2YXIgbG9jYXRpb24gaW4gZW5Vc0NhbXB1c1ByZWZpeCkge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb3R3YXJsb3N0L2lzdGFuYnVsL2Jsb2IvbWFzdGVyL2lnbm9yaW5nLWNvZGUtZm9yLWNvdmVyYWdlLm1kI2lnbm9yaW5nLWNvZGUtZm9yLWNvdmVyYWdlLXB1cnBvc2VzXG4gICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgICBpZiAoZW5Vc0NhbXB1c1ByZWZpeC5oYXNPd25Qcm9wZXJ0eShsb2NhdGlvbikpIHtcbiAgICAgIHByZWZpeGVzLnB1c2guYXBwbHkocHJlZml4ZXMsIF90b0NvbnN1bWFibGVBcnJheShlblVzQ2FtcHVzUHJlZml4W2xvY2F0aW9uXSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcmVmaXhlcztcbn1cbi8qXG4gKiBlbi1VUyB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiBWZXJpZnkgdGhhdCB0aGUgVElOIHN0YXJ0cyB3aXRoIGEgdmFsaWQgSVJTIGNhbXB1cyBwcmVmaXhcbiAqL1xuXG5cbmZ1bmN0aW9uIGVuVXNDaGVjayh0aW4pIHtcbiAgcmV0dXJuIGVuVXNHZXRQcmVmaXhlcygpLmluZGV4T2YodGluLnN1YnN0cigwLCAyKSkgIT09IC0xO1xufVxuLypcbiAqIGVzLUVTIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChEb2N1bWVudG8gTmFjaW9uYWwgZGUgSWRlbnRpZGFkIChETkkpXG4gKiBvciBOw7ptZXJvIGRlIElkZW50aWZpY2FjacOzbiBkZSBFeHRyYW5qZXJvIChOSUUpLCBwZXJzb25zIG9ubHkpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBjaGFyYWN0ZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIGVzRXNDaGVjayh0aW4pIHtcbiAgLy8gU3BsaXQgY2hhcmFjdGVycyBpbnRvIGFuIGFycmF5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmdcbiAgdmFyIGNoYXJzID0gdGluLnRvVXBwZXJDYXNlKCkuc3BsaXQoJycpOyAvLyBSZXBsYWNlIGluaXRpYWwgbGV0dGVyIGlmIG5lZWRlZFxuXG4gIGlmIChpc05hTihwYXJzZUludChjaGFyc1swXSwgMTApKSAmJiBjaGFycy5sZW5ndGggPiAxKSB7XG4gICAgdmFyIGxlYWRfcmVwbGFjZSA9IDA7XG5cbiAgICBzd2l0Y2ggKGNoYXJzWzBdKSB7XG4gICAgICBjYXNlICdZJzpcbiAgICAgICAgbGVhZF9yZXBsYWNlID0gMTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ1onOlxuICAgICAgICBsZWFkX3JlcGxhY2UgPSAyO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG5cbiAgICBjaGFycy5zcGxpY2UoMCwgMSwgbGVhZF9yZXBsYWNlKTsgLy8gRmlsbCB3aXRoIHplcm9zIGlmIHNtYWxsZXIgdGhhbiBwcm9wZXJcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2hhcnMubGVuZ3RoIDwgOSkge1xuICAgICAgY2hhcnMudW5zaGlmdCgwKTtcbiAgICB9XG4gIH0gLy8gQ2FsY3VsYXRlIGNoZWNrc3VtIGFuZCBjaGVjayBhY2NvcmRpbmcgdG8gbG9va3VwXG5cblxuICB2YXIgbG9va3VwID0gWydUJywgJ1InLCAnVycsICdBJywgJ0cnLCAnTScsICdZJywgJ0YnLCAnUCcsICdEJywgJ1gnLCAnQicsICdOJywgJ0onLCAnWicsICdTJywgJ1EnLCAnVicsICdIJywgJ0wnLCAnQycsICdLJywgJ0UnXTtcbiAgY2hhcnMgPSBjaGFycy5qb2luKCcnKTtcbiAgdmFyIGNoZWNrc3VtID0gcGFyc2VJbnQoY2hhcnMuc2xpY2UoMCwgOCksIDEwKSAlIDIzO1xuICByZXR1cm4gY2hhcnNbOF0gPT09IGxvb2t1cFtjaGVja3N1bV07XG59XG4vKlxuICogZXQtRUUgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKElzaWt1a29vZCAoSUspLCBwZXJzb25zIG9ubHkpXG4gKiBDaGVja3MgaWYgYmlydGggZGF0ZSAoY2VudHVyeSBkaWdpdCBhbmQgc2l4IGZvbGxvd2luZykgaXMgdmFsaWQgYW5kIGNhbGN1bGF0ZXMgY2hlY2sgKGxhc3QpIGRpZ2l0XG4gKiBNYXRlcmlhbCBub3QgaW4gREcgVEFYVUQgZG9jdW1lbnQgc291cmNlZCBmcm9tOlxuICogLSBgaHR0cHM6Ly93d3cub2VjZC5vcmcvdGF4L2F1dG9tYXRpYy1leGNoYW5nZS9jcnMtaW1wbGVtZW50YXRpb24tYW5kLWFzc2lzdGFuY2UvdGF4LWlkZW50aWZpY2F0aW9uLW51bWJlcnMvRXN0b25pYS1USU4ucGRmYFxuICovXG5cblxuZnVuY3Rpb24gZXRFZUNoZWNrKHRpbikge1xuICAvLyBFeHRyYWN0IHllYXIgYW5kIGFkZCBjZW50dXJ5XG4gIHZhciBmdWxsX3llYXIgPSB0aW4uc2xpY2UoMSwgMyk7XG4gIHZhciBjZW50dXJ5X2RpZ2l0ID0gdGluLnNsaWNlKDAsIDEpO1xuXG4gIHN3aXRjaCAoY2VudHVyeV9kaWdpdCkge1xuICAgIGNhc2UgJzEnOlxuICAgIGNhc2UgJzInOlxuICAgICAgZnVsbF95ZWFyID0gXCIxOFwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICczJzpcbiAgICBjYXNlICc0JzpcbiAgICAgIGZ1bGxfeWVhciA9IFwiMTlcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGZ1bGxfeWVhciA9IFwiMjBcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgIGJyZWFrO1xuICB9IC8vIENoZWNrIGRhdGUgdmFsaWRpdHlcblxuXG4gIHZhciBkYXRlID0gXCJcIi5jb25jYXQoZnVsbF95ZWFyLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSgzLCA1KSwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoNSwgNykpO1xuXG4gIGlmICghKDAsIF9pc0RhdGUuZGVmYXVsdCkoZGF0ZSwgJ1lZWVkvTU0vREQnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBTcGxpdCBkaWdpdHMgaW50byBhbiBhcnJheSBmb3IgZnVydGhlciBwcm9jZXNzaW5nXG5cblxuICB2YXIgZGlnaXRzID0gdGluLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICB9KTtcbiAgdmFyIGNoZWNrc3VtID0gMDtcbiAgdmFyIHdlaWdodCA9IDE7IC8vIE11bHRpcGx5IGJ5IHdlaWdodCBhbmQgYWRkIHRvIGNoZWNrc3VtXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgY2hlY2tzdW0gKz0gZGlnaXRzW2ldICogd2VpZ2h0O1xuICAgIHdlaWdodCArPSAxO1xuXG4gICAgaWYgKHdlaWdodCA9PT0gMTApIHtcbiAgICAgIHdlaWdodCA9IDE7XG4gICAgfVxuICB9IC8vIERvIGFnYWluIGlmIG1vZHVsbyAxMSBvZiBjaGVja3N1bSBpcyAxMFxuXG5cbiAgaWYgKGNoZWNrc3VtICUgMTEgPT09IDEwKSB7XG4gICAgY2hlY2tzdW0gPSAwO1xuICAgIHdlaWdodCA9IDM7XG5cbiAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCAxMDsgX2kzKyspIHtcbiAgICAgIGNoZWNrc3VtICs9IGRpZ2l0c1tfaTNdICogd2VpZ2h0O1xuICAgICAgd2VpZ2h0ICs9IDE7XG5cbiAgICAgIGlmICh3ZWlnaHQgPT09IDEwKSB7XG4gICAgICAgIHdlaWdodCA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrc3VtICUgMTEgPT09IDEwKSB7XG4gICAgICByZXR1cm4gZGlnaXRzWzEwXSA9PT0gMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2hlY2tzdW0gJSAxMSA9PT0gZGlnaXRzWzEwXTtcbn1cbi8qXG4gKiBmaS1GSSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoSGVua2lsw7Z0dW5udXMgKEhFVFUpLCBwZXJzb25zIG9ubHkpXG4gKiBDaGVja3MgaWYgYmlydGggZGF0ZSAoZmlyc3Qgc2l4IGRpZ2l0cyBwbHVzIGNlbnR1cnkgc3ltYm9sKSBpcyB2YWxpZFxuICogYW5kIGNhbGN1bGF0ZXMgY2hlY2sgKGxhc3QpIGRpZ2l0XG4gKi9cblxuXG5mdW5jdGlvbiBmaUZpQ2hlY2sodGluKSB7XG4gIC8vIEV4dHJhY3QgeWVhciBhbmQgYWRkIGNlbnR1cnlcbiAgdmFyIGZ1bGxfeWVhciA9IHRpbi5zbGljZSg0LCA2KTtcbiAgdmFyIGNlbnR1cnlfc3ltYm9sID0gdGluLnNsaWNlKDYsIDcpO1xuXG4gIHN3aXRjaCAoY2VudHVyeV9zeW1ib2wpIHtcbiAgICBjYXNlICcrJzpcbiAgICAgIGZ1bGxfeWVhciA9IFwiMThcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnLSc6XG4gICAgICBmdWxsX3llYXIgPSBcIjE5XCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBmdWxsX3llYXIgPSBcIjIwXCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICBicmVhaztcbiAgfSAvLyBDaGVjayBkYXRlIHZhbGlkaXR5XG5cblxuICB2YXIgZGF0ZSA9IFwiXCIuY29uY2F0KGZ1bGxfeWVhciwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoMiwgNCksIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDAsIDIpKTtcblxuICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gQ2FsY3VsYXRlIGNoZWNrIGNoYXJhY3RlclxuXG5cbiAgdmFyIGNoZWNrc3VtID0gcGFyc2VJbnQodGluLnNsaWNlKDAsIDYpICsgdGluLnNsaWNlKDcsIDEwKSwgMTApICUgMzE7XG5cbiAgaWYgKGNoZWNrc3VtIDwgMTApIHtcbiAgICByZXR1cm4gY2hlY2tzdW0gPT09IHBhcnNlSW50KHRpbi5zbGljZSgxMCksIDEwKTtcbiAgfVxuXG4gIGNoZWNrc3VtIC09IDEwO1xuICB2YXIgbGV0dGVyc19sb29rdXAgPSBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0gnLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ1AnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJ107XG4gIHJldHVybiBsZXR0ZXJzX2xvb2t1cFtjaGVja3N1bV0gPT09IHRpbi5zbGljZSgxMCk7XG59XG4vKlxuICogZnIvbmwtQkUgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKE51bcOpcm8gbmF0aW9uYWwgKE4uTi4pLCBwZXJzb25zIG9ubHkpXG4gKiBDaGVja3MgaWYgYmlydGggZGF0ZSAoZmlyc3Qgc2l4IGRpZ2l0cykgaXMgdmFsaWQgYW5kIGNhbGN1bGF0ZXMgY2hlY2sgKGxhc3QgdHdvKSBkaWdpdHNcbiAqL1xuXG5cbmZ1bmN0aW9uIGZyQmVDaGVjayh0aW4pIHtcbiAgLy8gWmVybyBtb250aC9kYXkgdmFsdWUgaXMgYWNjZXB0YWJsZVxuICBpZiAodGluLnNsaWNlKDIsIDQpICE9PSAnMDAnIHx8IHRpbi5zbGljZSg0LCA2KSAhPT0gJzAwJykge1xuICAgIC8vIEV4dHJhY3QgZGF0ZSBmcm9tIGZpcnN0IHNpeCBkaWdpdHMgb2YgVElOXG4gICAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdCh0aW4uc2xpY2UoMCwgMiksIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDIsIDQpLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSg0LCA2KSk7XG5cbiAgICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWS9NTS9ERCcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNoZWNrc3VtID0gOTcgLSBwYXJzZUludCh0aW4uc2xpY2UoMCwgOSksIDEwKSAlIDk3O1xuICB2YXIgY2hlY2tkaWdpdHMgPSBwYXJzZUludCh0aW4uc2xpY2UoOSwgMTEpLCAxMCk7XG5cbiAgaWYgKGNoZWNrc3VtICE9PSBjaGVja2RpZ2l0cykge1xuICAgIGNoZWNrc3VtID0gOTcgLSBwYXJzZUludChcIjJcIi5jb25jYXQodGluLnNsaWNlKDAsIDkpKSwgMTApICUgOTc7XG5cbiAgICBpZiAoY2hlY2tzdW0gIT09IGNoZWNrZGlnaXRzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKlxuICogZnItRlIgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKE51bcOpcm8gZmlzY2FsIGRlIHLDqWbDqXJlbmNlIChudW3DqXJvIFNQSSksIHBlcnNvbnMgb25seSlcbiAqIFZlcmlmeSBUSU4gdmFsaWRpdHkgYnkgY2FsY3VsYXRpbmcgY2hlY2sgKGxhc3QgdGhyZWUpIGRpZ2l0c1xuICovXG5cblxuZnVuY3Rpb24gZnJGckNoZWNrKHRpbikge1xuICB0aW4gPSB0aW4ucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgdmFyIGNoZWNrc3VtID0gcGFyc2VJbnQodGluLnNsaWNlKDAsIDEwKSwgMTApICUgNTExO1xuICB2YXIgY2hlY2tkaWdpdHMgPSBwYXJzZUludCh0aW4uc2xpY2UoMTAsIDEzKSwgMTApO1xuICByZXR1cm4gY2hlY2tzdW0gPT09IGNoZWNrZGlnaXRzO1xufVxuLypcbiAqIGZyL2xiLUxVIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChudW3DqXJvIGTigJlpZGVudGlmaWNhdGlvbiBwZXJzb25uZWxsZSwgcGVyc29ucyBvbmx5KVxuICogVmVyaWZ5IGJpcnRoIGRhdGUgdmFsaWRpdHkgYW5kIHJ1biBMdWhuIGFuZCBWZXJob2VmZiBjaGVja3NcbiAqL1xuXG5cbmZ1bmN0aW9uIGZyTHVDaGVjayh0aW4pIHtcbiAgLy8gRXh0cmFjdCBkYXRlIGFuZCBjaGVjayB2YWxpZGl0eVxuICB2YXIgZGF0ZSA9IFwiXCIuY29uY2F0KHRpbi5zbGljZSgwLCA0KSwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoNCwgNiksIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDYsIDgpKTtcblxuICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gUnVuIEx1aG4gY2hlY2tcblxuXG4gIGlmICghYWxnb3JpdGhtcy5sdWhuQ2hlY2sodGluLnNsaWNlKDAsIDEyKSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gUmVtb3ZlIEx1aG4gY2hlY2sgZGlnaXQgYW5kIHJ1biBWZXJob2VmZiBjaGVja1xuXG5cbiAgcmV0dXJuIGFsZ29yaXRobXMudmVyaG9lZmZDaGVjayhcIlwiLmNvbmNhdCh0aW4uc2xpY2UoMCwgMTEpKS5jb25jYXQodGluWzEyXSkpO1xufVxuLypcbiAqIGhyLUhSIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChPc29ibmkgaWRlbnRpZmlrYWNpanNraSBicm9qIChPSUIpLCBwZXJzb25zL2VudGl0aWVzKVxuICogVmVyaWZ5IFRJTiB2YWxpZGl0eSBieSBjYWxsaW5nIGlzbzcwNjRDaGVjayhkaWdpdHMpXG4gKi9cblxuXG5mdW5jdGlvbiBockhyQ2hlY2sodGluKSB7XG4gIHJldHVybiBhbGdvcml0aG1zLmlzbzcwNjRDaGVjayh0aW4pO1xufVxuLypcbiAqIGh1LUhVIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChBZMOzYXpvbm9zw610w7MgamVsLCBwZXJzb25zIG9ubHkpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdFxuICovXG5cblxuZnVuY3Rpb24gaHVIdUNoZWNrKHRpbikge1xuICAvLyBzcGxpdCBkaWdpdHMgaW50byBhbiBhcnJheSBmb3IgZnVydGhlciBwcm9jZXNzaW5nXG4gIHZhciBkaWdpdHMgPSB0aW4uc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gIH0pO1xuICB2YXIgY2hlY2tzdW0gPSA4O1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgOTsgaSsrKSB7XG4gICAgY2hlY2tzdW0gKz0gZGlnaXRzW2ldICogKGkgKyAxKTtcbiAgfVxuXG4gIHJldHVybiBjaGVja3N1bSAlIDExID09PSBkaWdpdHNbOV07XG59XG4vKlxuICogbHQtTFQgdmFsaWRhdGlvbiBmdW5jdGlvbiAoc2hvdWxkIGdvIGhlcmUgaWYgbmVlZGVkKVxuICogKEFzbWVucyBrb2RhcywgcGVyc29ucy9lbnRpdGllcyByZXNwZWN0aXZlbHkpXG4gKiBDdXJyZW50IHZhbGlkYXRpb24gY2hlY2sgaXMgYWxpYXMgb2YgZXRFZUNoZWNrLSBzYW1lIGZvcm1hdCBhcHBsaWVzXG4gKi9cblxuLypcbiAqIGl0LUlUIGZpcnN0L2xhc3QgbmFtZSB2YWxpZGl0eSBjaGVja1xuICogQWNjZXB0cyBpdC1JVCBUSU4tZW5jb2RlZCBuYW1lcyBhcyBhIHRocmVlLWVsZW1lbnQgY2hhcmFjdGVyIGFycmF5IGFuZCBjaGVja3MgdGhlaXIgdmFsaWRpdHlcbiAqIER1ZSB0byBsYWNrIG9mIGNsYXJpdHkgYmV0d2VlbiByZXNvdXJjZXMgKFwiQXJlIG9ubHkgSXRhbGlhbiBjb25zb25hbnRzIHVzZWQ/XG4gKiBXaGF0IGhhcHBlbnMgaWYgYSBwZXJzb24gaGFzIFggaW4gdGhlaXIgbmFtZT9cIiBldGMuKSBvbmx5IHR3byB0ZXN0IGNvbmRpdGlvbnNcbiAqIGhhdmUgYmVlbiBpbXBsZW1lbnRlZDpcbiAqIFZvd2VscyBtYXkgb25seSBiZSBmb2xsb3dlZCBieSBvdGhlciB2b3dlbHMgb3IgYW4gWCBjaGFyYWN0ZXJcbiAqIGFuZCBYIGNoYXJhY3RlcnMgYWZ0ZXIgdm93ZWxzIG1heSBvbmx5IGJlIGZvbGxvd2VkIGJ5IG90aGVyIFggY2hhcmFjdGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGl0SXROYW1lQ2hlY2sobmFtZSkge1xuICAvLyB0cnVlIGF0IHRoZSBmaXJzdCBvY2N1cmVuY2Ugb2YgYSB2b3dlbFxuICB2YXIgdm93ZWxmbGFnID0gZmFsc2U7IC8vIHRydWUgYXQgdGhlIGZpcnN0IG9jY3VyZW5jZSBvZiBhbiBYIEFGVEVSIHZvd2VsXG4gIC8vICh0byBwcm9wZXJseSBoYW5kbGUgbGFzdCBuYW1lcyB3aXRoIFggYXMgY29uc29uYW50KVxuXG4gIHZhciB4ZmxhZyA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgaWYgKCF2b3dlbGZsYWcgJiYgL1tBRUlPVV0vLnRlc3QobmFtZVtpXSkpIHtcbiAgICAgIHZvd2VsZmxhZyA9IHRydWU7XG4gICAgfSBlbHNlIGlmICgheGZsYWcgJiYgdm93ZWxmbGFnICYmIG5hbWVbaV0gPT09ICdYJykge1xuICAgICAgeGZsYWcgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaSA+IDApIHtcbiAgICAgIGlmICh2b3dlbGZsYWcgJiYgIXhmbGFnKSB7XG4gICAgICAgIGlmICghL1tBRUlPVV0vLnRlc3QobmFtZVtpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHhmbGFnKSB7XG4gICAgICAgIGlmICghL1gvLnRlc3QobmFtZVtpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qXG4gKiBpdC1JVCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoQ29kaWNlIGZpc2NhbGUgKFRJTi1JVCksIHBlcnNvbnMgb25seSlcbiAqIFZlcmlmeSBuYW1lLCBiaXJ0aCBkYXRlIGFuZCBjb2RpY2UgY2F0YXN0YWxlIHZhbGlkaXR5XG4gKiBhbmQgY2FsY3VsYXRlIGNoZWNrIGNoYXJhY3Rlci5cbiAqIE1hdGVyaWFsIG5vdCBpbiBERy1UQVhVRCBkb2N1bWVudCBzb3VyY2VkIGZyb206XG4gKiBgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSXRhbGlhbl9maXNjYWxfY29kZWBcbiAqL1xuXG5cbmZ1bmN0aW9uIGl0SXRDaGVjayh0aW4pIHtcbiAgLy8gQ2FwaXRhbGl6ZSBhbmQgc3BsaXQgY2hhcmFjdGVycyBpbnRvIGFuIGFycmF5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmdcbiAgdmFyIGNoYXJzID0gdGluLnRvVXBwZXJDYXNlKCkuc3BsaXQoJycpOyAvLyBDaGVjayBmaXJzdCBhbmQgbGFzdCBuYW1lIHZhbGlkaXR5IGNhbGxpbmcgaXRJdE5hbWVDaGVjaygpXG5cbiAgaWYgKCFpdEl0TmFtZUNoZWNrKGNoYXJzLnNsaWNlKDAsIDMpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghaXRJdE5hbWVDaGVjayhjaGFycy5zbGljZSgzLCA2KSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gQ29udmVydCBsZXR0ZXJzIGluIG51bWJlciBzcGFjZXMgYmFjayB0byBudW1iZXJzIGlmIGFueVxuXG5cbiAgdmFyIG51bWJlcl9sb2NhdGlvbnMgPSBbNiwgNywgOSwgMTAsIDEyLCAxMywgMTRdO1xuICB2YXIgbnVtYmVyX3JlcGxhY2UgPSB7XG4gICAgTDogJzAnLFxuICAgIE06ICcxJyxcbiAgICBOOiAnMicsXG4gICAgUDogJzMnLFxuICAgIFE6ICc0JyxcbiAgICBSOiAnNScsXG4gICAgUzogJzYnLFxuICAgIFQ6ICc3JyxcbiAgICBVOiAnOCcsXG4gICAgVjogJzknXG4gIH07XG5cbiAgZm9yICh2YXIgX2k0ID0gMCwgX251bWJlcl9sb2NhdGlvbnMgPSBudW1iZXJfbG9jYXRpb25zOyBfaTQgPCBfbnVtYmVyX2xvY2F0aW9ucy5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGkgPSBfbnVtYmVyX2xvY2F0aW9uc1tfaTRdO1xuXG4gICAgaWYgKGNoYXJzW2ldIGluIG51bWJlcl9yZXBsYWNlKSB7XG4gICAgICBjaGFycy5zcGxpY2UoaSwgMSwgbnVtYmVyX3JlcGxhY2VbY2hhcnNbaV1dKTtcbiAgICB9XG4gIH0gLy8gRXh0cmFjdCBtb250aCBhbmQgZGF5LCBhbmQgY2hlY2sgZGF0ZSB2YWxpZGl0eVxuXG5cbiAgdmFyIG1vbnRoX3JlcGxhY2UgPSB7XG4gICAgQTogJzAxJyxcbiAgICBCOiAnMDInLFxuICAgIEM6ICcwMycsXG4gICAgRDogJzA0JyxcbiAgICBFOiAnMDUnLFxuICAgIEg6ICcwNicsXG4gICAgTDogJzA3JyxcbiAgICBNOiAnMDgnLFxuICAgIFA6ICcwOScsXG4gICAgUjogJzEwJyxcbiAgICBTOiAnMTEnLFxuICAgIFQ6ICcxMidcbiAgfTtcbiAgdmFyIG1vbnRoID0gbW9udGhfcmVwbGFjZVtjaGFyc1s4XV07XG4gIHZhciBkYXkgPSBwYXJzZUludChjaGFyc1s5XSArIGNoYXJzWzEwXSwgMTApO1xuXG4gIGlmIChkYXkgPiA0MCkge1xuICAgIGRheSAtPSA0MDtcbiAgfVxuXG4gIGlmIChkYXkgPCAxMCkge1xuICAgIGRheSA9IFwiMFwiLmNvbmNhdChkYXkpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChjaGFyc1s2XSkuY29uY2F0KGNoYXJzWzddLCBcIi9cIikuY29uY2F0KG1vbnRoLCBcIi9cIikuY29uY2F0KGRheSk7XG5cbiAgaWYgKCEoMCwgX2lzRGF0ZS5kZWZhdWx0KShkYXRlLCAnWVkvTU0vREQnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBDYWxjdWxhdGUgY2hlY2sgY2hhcmFjdGVyIGJ5IGFkZGluZyB1cCBldmVuIGFuZCBvZGQgY2hhcmFjdGVycyBhcyBudW1iZXJzXG5cblxuICB2YXIgY2hlY2tzdW0gPSAwO1xuXG4gIGZvciAodmFyIF9pNSA9IDE7IF9pNSA8IGNoYXJzLmxlbmd0aCAtIDE7IF9pNSArPSAyKSB7XG4gICAgdmFyIGNoYXJfdG9faW50ID0gcGFyc2VJbnQoY2hhcnNbX2k1XSwgMTApO1xuXG4gICAgaWYgKGlzTmFOKGNoYXJfdG9faW50KSkge1xuICAgICAgY2hhcl90b19pbnQgPSBjaGFyc1tfaTVdLmNoYXJDb2RlQXQoMCkgLSA2NTtcbiAgICB9XG5cbiAgICBjaGVja3N1bSArPSBjaGFyX3RvX2ludDtcbiAgfVxuXG4gIHZhciBvZGRfY29udmVydCA9IHtcbiAgICAvLyBNYXBzIG9mIGNoYXJhY3RlcnMgYXQgb2RkIHBsYWNlc1xuICAgIEE6IDEsXG4gICAgQjogMCxcbiAgICBDOiA1LFxuICAgIEQ6IDcsXG4gICAgRTogOSxcbiAgICBGOiAxMyxcbiAgICBHOiAxNSxcbiAgICBIOiAxNyxcbiAgICBJOiAxOSxcbiAgICBKOiAyMSxcbiAgICBLOiAyLFxuICAgIEw6IDQsXG4gICAgTTogMTgsXG4gICAgTjogMjAsXG4gICAgTzogMTEsXG4gICAgUDogMyxcbiAgICBROiA2LFxuICAgIFI6IDgsXG4gICAgUzogMTIsXG4gICAgVDogMTQsXG4gICAgVTogMTYsXG4gICAgVjogMTAsXG4gICAgVzogMjIsXG4gICAgWDogMjUsXG4gICAgWTogMjQsXG4gICAgWjogMjMsXG4gICAgMDogMSxcbiAgICAxOiAwXG4gIH07XG5cbiAgZm9yICh2YXIgX2k2ID0gMDsgX2k2IDwgY2hhcnMubGVuZ3RoIC0gMTsgX2k2ICs9IDIpIHtcbiAgICB2YXIgX2NoYXJfdG9faW50ID0gMDtcblxuICAgIGlmIChjaGFyc1tfaTZdIGluIG9kZF9jb252ZXJ0KSB7XG4gICAgICBfY2hhcl90b19pbnQgPSBvZGRfY29udmVydFtjaGFyc1tfaTZdXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG11bHRpcGxpZXIgPSBwYXJzZUludChjaGFyc1tfaTZdLCAxMCk7XG4gICAgICBfY2hhcl90b19pbnQgPSAyICogbXVsdGlwbGllciArIDE7XG5cbiAgICAgIGlmIChtdWx0aXBsaWVyID4gNCkge1xuICAgICAgICBfY2hhcl90b19pbnQgKz0gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja3N1bSArPSBfY2hhcl90b19pbnQ7XG4gIH1cblxuICBpZiAoU3RyaW5nLmZyb21DaGFyQ29kZSg2NSArIGNoZWNrc3VtICUgMjYpICE9PSBjaGFyc1sxNV0pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qXG4gKiBsdi1MViB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoUGVyc29uYXMga29kcyAoUEspLCBwZXJzb25zIG9ubHkpXG4gKiBDaGVjayB2YWxpZGl0eSBvZiBiaXJ0aCBkYXRlIGFuZCBjYWxjdWxhdGUgY2hlY2sgKGxhc3QpIGRpZ2l0XG4gKiBTdXBwb3J0IG9ubHkgZm9yIG9sZCBmb3JtYXQgbnVtYmVycyAobm90IHN0YXJ0aW5nIHdpdGggJzMyJywgaXNzdWVkIGJlZm9yZSAyMDE3LzA3LzAxKVxuICogTWF0ZXJpYWwgbm90IGluIERHIFRBWFVEIGRvY3VtZW50IHNvdXJjZWQgZnJvbTpcbiAqIGBodHRwczovL2Jvb3Qucml0YWthZmlqYS5sdi9mb3J1bXMvaW5kZXgucGhwPy90b3BpYy84ODMxNC1wZXJzb25hcy1rb2RhLWFsZ29yaXRtcy0lQzQlOERla3N1bW1hL2BcbiAqL1xuXG5cbmZ1bmN0aW9uIGx2THZDaGVjayh0aW4pIHtcbiAgdGluID0gdGluLnJlcGxhY2UoL1xcVy8sICcnKTsgLy8gRXh0cmFjdCBkYXRlIGZyb20gVElOXG5cbiAgdmFyIGRheSA9IHRpbi5zbGljZSgwLCAyKTtcblxuICBpZiAoZGF5ICE9PSAnMzInKSB7XG4gICAgLy8gTm8gZGF0ZS9jaGVja3N1bSBjaGVjayBpZiBuZXcgZm9ybWF0XG4gICAgdmFyIG1vbnRoID0gdGluLnNsaWNlKDIsIDQpO1xuXG4gICAgaWYgKG1vbnRoICE9PSAnMDAnKSB7XG4gICAgICAvLyBObyBkYXRlIGNoZWNrIGlmIHVua25vd24gbW9udGhcbiAgICAgIHZhciBmdWxsX3llYXIgPSB0aW4uc2xpY2UoNCwgNik7XG5cbiAgICAgIHN3aXRjaCAodGluWzZdKSB7XG4gICAgICAgIGNhc2UgJzAnOlxuICAgICAgICAgIGZ1bGxfeWVhciA9IFwiMThcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICBmdWxsX3llYXIgPSBcIjE5XCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmdWxsX3llYXIgPSBcIjIwXCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9IC8vIENoZWNrIGRhdGUgdmFsaWRpdHlcblxuXG4gICAgICB2YXIgZGF0ZSA9IFwiXCIuY29uY2F0KGZ1bGxfeWVhciwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoMiwgNCksIFwiL1wiKS5jb25jYXQoZGF5KTtcblxuICAgICAgaWYgKCEoMCwgX2lzRGF0ZS5kZWZhdWx0KShkYXRlLCAnWVlZWS9NTS9ERCcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IC8vIENhbGN1bGF0ZSBjaGVjayBkaWdpdFxuXG5cbiAgICB2YXIgY2hlY2tzdW0gPSAxMTAxO1xuICAgIHZhciBtdWx0aXBfbG9va3VwID0gWzEsIDYsIDMsIDcsIDksIDEwLCA1LCA4LCA0LCAyXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGluLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgY2hlY2tzdW0gLT0gcGFyc2VJbnQodGluW2ldLCAxMCkgKiBtdWx0aXBfbG9va3VwW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZUludCh0aW5bMTBdLCAxMCkgPT09IGNoZWNrc3VtICUgMTE7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qXG4gKiBtdC1NVCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoSWRlbnRpdHkgQ2FyZCBOdW1iZXIgb3IgVW5pcXVlIFRheHBheWVyIFJlZmVyZW5jZSwgcGVyc29ucy9lbnRpdGllcylcbiAqIFZlcmlmeSBJZGVudGl0eSBDYXJkIE51bWJlciBzdHJ1Y3R1cmUgKG5vIG90aGVyIHRlc3RzIGZvdW5kKVxuICovXG5cblxuZnVuY3Rpb24gbXRNdENoZWNrKHRpbikge1xuICBpZiAodGluLmxlbmd0aCAhPT0gOSkge1xuICAgIC8vIE5vIHRlc3RzIGZvciBVVFJcbiAgICB2YXIgY2hhcnMgPSB0aW4udG9VcHBlckNhc2UoKS5zcGxpdCgnJyk7IC8vIEZpbGwgd2l0aCB6ZXJvcyBpZiBzbWFsbGVyIHRoYW4gcHJvcGVyXG5cbiAgICB3aGlsZSAoY2hhcnMubGVuZ3RoIDwgOCkge1xuICAgICAgY2hhcnMudW5zaGlmdCgwKTtcbiAgICB9IC8vIFZhbGlkYXRlIGZvcm1hdCBhY2NvcmRpbmcgdG8gbGFzdCBjaGFyYWN0ZXJcblxuXG4gICAgc3dpdGNoICh0aW5bN10pIHtcbiAgICAgIGNhc2UgJ0EnOlxuICAgICAgY2FzZSAnUCc6XG4gICAgICAgIGlmIChwYXJzZUludChjaGFyc1s2XSwgMTApID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgZmlyc3RfcGFydCA9IHBhcnNlSW50KGNoYXJzLmpvaW4oJycpLnNsaWNlKDAsIDUpLCAxMCk7XG5cbiAgICAgICAgICBpZiAoZmlyc3RfcGFydCA+IDMyMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNlY29uZF9wYXJ0ID0gcGFyc2VJbnQoY2hhcnMuam9pbignJykuc2xpY2UoNSwgNyksIDEwKTtcblxuICAgICAgICAgIGlmIChmaXJzdF9wYXJ0ID09PSBzZWNvbmRfcGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLypcbiAqIG5sLU5MIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChCdXJnZXJzZXJ2aWNlbnVtbWVyIChCU04pIG9yIFJlY2h0c3BlcnNvbmVuIFNhbWVud2Vya2luZ3N2ZXJiYW5kZW4gSW5mb3JtYXRpZSBOdW1tZXIgKFJTSU4pLFxuICogcGVyc29ucy9lbnRpdGllcyByZXNwZWN0aXZlbHkpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdCAodmFyaWFudCBvZiBNT0QgMTEpXG4gKi9cblxuXG5mdW5jdGlvbiBubE5sQ2hlY2sodGluKSB7XG4gIHJldHVybiBhbGdvcml0aG1zLnJldmVyc2VNdWx0aXBseUFuZFN1bSh0aW4uc3BsaXQoJycpLnNsaWNlKDAsIDgpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gIH0pLCA5KSAlIDExID09PSBwYXJzZUludCh0aW5bOF0sIDEwKTtcbn1cbi8qXG4gKiBwbC1QTCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoUG93c3plY2hueSBFbGVrdHJvbmljem55IFN5c3RlbSBFd2lkZW5jamkgTHVkbm/Fm2NpIChQRVNFTClcbiAqIG9yIE51bWVyIGlkZW50eWZpa2FjamkgcG9kYXRrb3dlaiAoTklQKSwgcGVyc29ucy9lbnRpdGllcylcbiAqIFZlcmlmeSBUSU4gdmFsaWRpdHkgYnkgdmFsaWRhdGluZyBiaXJ0aCBkYXRlIChQRVNFTCkgYW5kIGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdFxuICovXG5cblxuZnVuY3Rpb24gcGxQbENoZWNrKHRpbikge1xuICAvLyBOSVBcbiAgaWYgKHRpbi5sZW5ndGggPT09IDEwKSB7XG4gICAgLy8gQ2FsY3VsYXRlIGxhc3QgZGlnaXQgYnkgbXVsdGlwbHlpbmcgd2l0aCBsb29rdXBcbiAgICB2YXIgbG9va3VwID0gWzYsIDUsIDcsIDIsIDMsIDQsIDUsIDYsIDddO1xuICAgIHZhciBfY2hlY2tzdW0gPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb29rdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIF9jaGVja3N1bSArPSBwYXJzZUludCh0aW5baV0sIDEwKSAqIGxvb2t1cFtpXTtcbiAgICB9XG5cbiAgICBfY2hlY2tzdW0gJT0gMTE7XG5cbiAgICBpZiAoX2NoZWNrc3VtID09PSAxMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBfY2hlY2tzdW0gPT09IHBhcnNlSW50KHRpbls5XSwgMTApO1xuICB9IC8vIFBFU0VMXG4gIC8vIEV4dHJhY3QgZnVsbCB5ZWFyIHVzaW5nIG1vbnRoXG5cblxuICB2YXIgZnVsbF95ZWFyID0gdGluLnNsaWNlKDAsIDIpO1xuICB2YXIgbW9udGggPSBwYXJzZUludCh0aW4uc2xpY2UoMiwgNCksIDEwKTtcblxuICBpZiAobW9udGggPiA4MCkge1xuICAgIGZ1bGxfeWVhciA9IFwiMThcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICBtb250aCAtPSA4MDtcbiAgfSBlbHNlIGlmIChtb250aCA+IDYwKSB7XG4gICAgZnVsbF95ZWFyID0gXCIyMlwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgIG1vbnRoIC09IDYwO1xuICB9IGVsc2UgaWYgKG1vbnRoID4gNDApIHtcbiAgICBmdWxsX3llYXIgPSBcIjIxXCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgbW9udGggLT0gNDA7XG4gIH0gZWxzZSBpZiAobW9udGggPiAyMCkge1xuICAgIGZ1bGxfeWVhciA9IFwiMjBcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICBtb250aCAtPSAyMDtcbiAgfSBlbHNlIHtcbiAgICBmdWxsX3llYXIgPSBcIjE5XCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gIH0gLy8gQWRkIGxlYWRpbmcgemVybyB0byBtb250aCBpZiBuZWVkZWRcblxuXG4gIGlmIChtb250aCA8IDEwKSB7XG4gICAgbW9udGggPSBcIjBcIi5jb25jYXQobW9udGgpO1xuICB9IC8vIENoZWNrIGRhdGUgdmFsaWRpdHlcblxuXG4gIHZhciBkYXRlID0gXCJcIi5jb25jYXQoZnVsbF95ZWFyLCBcIi9cIikuY29uY2F0KG1vbnRoLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSg0LCA2KSk7XG5cbiAgaWYgKCEoMCwgX2lzRGF0ZS5kZWZhdWx0KShkYXRlLCAnWVlZWS9NTS9ERCcpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIENhbGN1bGF0ZSBsYXN0IGRpZ2l0IGJ5IG11bGl0cGx5aW5nIHdpdGggb2RkIG9uZS1kaWdpdCBudW1iZXJzIGV4Y2VwdCA1XG5cblxuICB2YXIgY2hlY2tzdW0gPSAwO1xuICB2YXIgbXVsdGlwbGllciA9IDE7XG5cbiAgZm9yICh2YXIgX2k3ID0gMDsgX2k3IDwgdGluLmxlbmd0aCAtIDE7IF9pNysrKSB7XG4gICAgY2hlY2tzdW0gKz0gcGFyc2VJbnQodGluW19pN10sIDEwKSAqIG11bHRpcGxpZXIgJSAxMDtcbiAgICBtdWx0aXBsaWVyICs9IDI7XG5cbiAgICBpZiAobXVsdGlwbGllciA+IDEwKSB7XG4gICAgICBtdWx0aXBsaWVyID0gMTtcbiAgICB9IGVsc2UgaWYgKG11bHRpcGxpZXIgPT09IDUpIHtcbiAgICAgIG11bHRpcGxpZXIgKz0gMjtcbiAgICB9XG4gIH1cblxuICBjaGVja3N1bSA9IDEwIC0gY2hlY2tzdW0gJSAxMDtcbiAgcmV0dXJuIGNoZWNrc3VtID09PSBwYXJzZUludCh0aW5bMTBdLCAxMCk7XG59XG4vKlxuKiBwdC1CUiB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4qIChDYWRhc3RybyBkZSBQZXNzb2FzIEbDrXNpY2FzIChDUEYsIHBlcnNvbnMpXG4qIENhZGFzdHJvIE5hY2lvbmFsIGRlIFBlc3NvYXMgSnVyw61kaWNhcyAoQ05QSiwgZW50aXRpZXMpXG4qIEJvdGggaW5wdXRzIHdpbGwgYmUgdmFsaWRhdGVkXG4qL1xuXG5cbmZ1bmN0aW9uIHB0QnJDaGVjayh0aW4pIHtcbiAgaWYgKHRpbi5sZW5ndGggPT09IDExKSB7XG4gICAgdmFyIF9zdW07XG5cbiAgICB2YXIgcmVtYWluZGVyO1xuICAgIF9zdW0gPSAwO1xuICAgIGlmICggLy8gUmVqZWN0IGtub3duIGludmFsaWQgQ1BGc1xuICAgIHRpbiA9PT0gJzExMTExMTExMTExJyB8fCB0aW4gPT09ICcyMjIyMjIyMjIyMicgfHwgdGluID09PSAnMzMzMzMzMzMzMzMnIHx8IHRpbiA9PT0gJzQ0NDQ0NDQ0NDQ0JyB8fCB0aW4gPT09ICc1NTU1NTU1NTU1NScgfHwgdGluID09PSAnNjY2NjY2NjY2NjYnIHx8IHRpbiA9PT0gJzc3Nzc3Nzc3Nzc3JyB8fCB0aW4gPT09ICc4ODg4ODg4ODg4OCcgfHwgdGluID09PSAnOTk5OTk5OTk5OTknIHx8IHRpbiA9PT0gJzAwMDAwMDAwMDAwJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gOTsgaSsrKSB7XG4gICAgICBfc3VtICs9IHBhcnNlSW50KHRpbi5zdWJzdHJpbmcoaSAtIDEsIGkpLCAxMCkgKiAoMTEgLSBpKTtcbiAgICB9XG5cbiAgICByZW1haW5kZXIgPSBfc3VtICogMTAgJSAxMTtcbiAgICBpZiAocmVtYWluZGVyID09PSAxMCkgcmVtYWluZGVyID0gMDtcbiAgICBpZiAocmVtYWluZGVyICE9PSBwYXJzZUludCh0aW4uc3Vic3RyaW5nKDksIDEwKSwgMTApKSByZXR1cm4gZmFsc2U7XG4gICAgX3N1bSA9IDA7XG5cbiAgICBmb3IgKHZhciBfaTggPSAxOyBfaTggPD0gMTA7IF9pOCsrKSB7XG4gICAgICBfc3VtICs9IHBhcnNlSW50KHRpbi5zdWJzdHJpbmcoX2k4IC0gMSwgX2k4KSwgMTApICogKDEyIC0gX2k4KTtcbiAgICB9XG5cbiAgICByZW1haW5kZXIgPSBfc3VtICogMTAgJSAxMTtcbiAgICBpZiAocmVtYWluZGVyID09PSAxMCkgcmVtYWluZGVyID0gMDtcbiAgICBpZiAocmVtYWluZGVyICE9PSBwYXJzZUludCh0aW4uc3Vic3RyaW5nKDEwLCAxMSksIDEwKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKCAvLyBSZWplY3Qga25vdyBpbnZhbGlkIENOUEpzXG4gIHRpbiA9PT0gJzAwMDAwMDAwMDAwMDAwJyB8fCB0aW4gPT09ICcxMTExMTExMTExMTExMScgfHwgdGluID09PSAnMjIyMjIyMjIyMjIyMjInIHx8IHRpbiA9PT0gJzMzMzMzMzMzMzMzMzMzJyB8fCB0aW4gPT09ICc0NDQ0NDQ0NDQ0NDQ0NCcgfHwgdGluID09PSAnNTU1NTU1NTU1NTU1NTUnIHx8IHRpbiA9PT0gJzY2NjY2NjY2NjY2NjY2JyB8fCB0aW4gPT09ICc3Nzc3Nzc3Nzc3Nzc3NycgfHwgdGluID09PSAnODg4ODg4ODg4ODg4ODgnIHx8IHRpbiA9PT0gJzk5OTk5OTk5OTk5OTk5Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSB0aW4ubGVuZ3RoIC0gMjtcbiAgdmFyIGlkZW50aWZpZXJzID0gdGluLnN1YnN0cmluZygwLCBsZW5ndGgpO1xuICB2YXIgdmVyaWZpY2F0b3JzID0gdGluLnN1YnN0cmluZyhsZW5ndGgpO1xuICB2YXIgc3VtID0gMDtcbiAgdmFyIHBvcyA9IGxlbmd0aCAtIDc7XG5cbiAgZm9yICh2YXIgX2k5ID0gbGVuZ3RoOyBfaTkgPj0gMTsgX2k5LS0pIHtcbiAgICBzdW0gKz0gaWRlbnRpZmllcnMuY2hhckF0KGxlbmd0aCAtIF9pOSkgKiBwb3M7XG4gICAgcG9zIC09IDE7XG5cbiAgICBpZiAocG9zIDwgMikge1xuICAgICAgcG9zID0gOTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gc3VtICUgMTEgPCAyID8gMCA6IDExIC0gc3VtICUgMTE7XG5cbiAgaWYgKHJlc3VsdCAhPT0gcGFyc2VJbnQodmVyaWZpY2F0b3JzLmNoYXJBdCgwKSwgMTApKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGVuZ3RoICs9IDE7XG4gIGlkZW50aWZpZXJzID0gdGluLnN1YnN0cmluZygwLCBsZW5ndGgpO1xuICBzdW0gPSAwO1xuICBwb3MgPSBsZW5ndGggLSA3O1xuXG4gIGZvciAodmFyIF9pMTAgPSBsZW5ndGg7IF9pMTAgPj0gMTsgX2kxMC0tKSB7XG4gICAgc3VtICs9IGlkZW50aWZpZXJzLmNoYXJBdChsZW5ndGggLSBfaTEwKSAqIHBvcztcbiAgICBwb3MgLT0gMTtcblxuICAgIGlmIChwb3MgPCAyKSB7XG4gICAgICBwb3MgPSA5O1xuICAgIH1cbiAgfVxuXG4gIHJlc3VsdCA9IHN1bSAlIDExIDwgMiA/IDAgOiAxMSAtIHN1bSAlIDExO1xuXG4gIGlmIChyZXN1bHQgIT09IHBhcnNlSW50KHZlcmlmaWNhdG9ycy5jaGFyQXQoMSksIDEwKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLypcbiAqIHB0LVBUIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChOw7ptZXJvIGRlIGlkZW50aWZpY2HDp8OjbyBmaXNjYWwgKE5JRiksIHBlcnNvbnMvZW50aXRpZXMpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdCAodmFyaWFudCBvZiBNT0QgMTEpXG4gKi9cblxuXG5mdW5jdGlvbiBwdFB0Q2hlY2sodGluKSB7XG4gIHZhciBjaGVja3N1bSA9IDExIC0gYWxnb3JpdGhtcy5yZXZlcnNlTXVsdGlwbHlBbmRTdW0odGluLnNwbGl0KCcnKS5zbGljZSgwLCA4KS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICB9KSwgOSkgJSAxMTtcblxuICBpZiAoY2hlY2tzdW0gPiA5KSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRpbls4XSwgMTApID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIGNoZWNrc3VtID09PSBwYXJzZUludCh0aW5bOF0sIDEwKTtcbn1cbi8qXG4gKiByby1STyB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoQ29kIE51bWVyaWMgUGVyc29uYWwgKENOUCkgb3IgQ29kIGRlIMOubnJlZ2lzdHJhcmUgZmlzY2FsxIMgKENJRiksXG4gKiBwZXJzb25zIG9ubHkpXG4gKiBWZXJpZnkgQ05QIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdCAodGVzdCBub3QgZm91bmQgZm9yIENJRilcbiAqIE1hdGVyaWFsIG5vdCBpbiBERyBUQVhVRCBkb2N1bWVudCBzb3VyY2VkIGZyb206XG4gKiBgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmF0aW9uYWxfaWRlbnRpZmljYXRpb25fbnVtYmVyI1JvbWFuaWFgXG4gKi9cblxuXG5mdW5jdGlvbiByb1JvQ2hlY2sodGluKSB7XG4gIGlmICh0aW4uc2xpY2UoMCwgNCkgIT09ICc5MDAwJykge1xuICAgIC8vIE5vIHRlc3QgZm91bmQgZm9yIHRoaXMgZm9ybWF0XG4gICAgLy8gRXh0cmFjdCBmdWxsIHllYXIgdXNpbmcgY2VudHVyeSBkaWdpdCBpZiBwb3NzaWJsZVxuICAgIHZhciBmdWxsX3llYXIgPSB0aW4uc2xpY2UoMSwgMyk7XG5cbiAgICBzd2l0Y2ggKHRpblswXSkge1xuICAgICAgY2FzZSAnMSc6XG4gICAgICBjYXNlICcyJzpcbiAgICAgICAgZnVsbF95ZWFyID0gXCIxOVwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnMyc6XG4gICAgICBjYXNlICc0JzpcbiAgICAgICAgZnVsbF95ZWFyID0gXCIxOFwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnNSc6XG4gICAgICBjYXNlICc2JzpcbiAgICAgICAgZnVsbF95ZWFyID0gXCIyMFwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9IC8vIENoZWNrIGRhdGUgdmFsaWRpdHlcblxuXG4gICAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChmdWxsX3llYXIsIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDMsIDUpLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSg1LCA3KSk7XG5cbiAgICBpZiAoZGF0ZS5sZW5ndGggPT09IDgpIHtcbiAgICAgIGlmICghKDAsIF9pc0RhdGUuZGVmYXVsdCkoZGF0ZSwgJ1lZL01NL0REJykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIENhbGN1bGF0ZSBjaGVjayBkaWdpdFxuXG5cbiAgICB2YXIgZGlnaXRzID0gdGluLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gICAgfSk7XG4gICAgdmFyIG11bHRpcGxpZXJzID0gWzIsIDcsIDksIDEsIDQsIDYsIDMsIDUsIDgsIDIsIDcsIDldO1xuICAgIHZhciBjaGVja3N1bSA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG11bHRpcGxpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGVja3N1bSArPSBkaWdpdHNbaV0gKiBtdWx0aXBsaWVyc1tpXTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzdW0gJSAxMSA9PT0gMTApIHtcbiAgICAgIHJldHVybiBkaWdpdHNbMTJdID09PSAxO1xuICAgIH1cblxuICAgIHJldHVybiBkaWdpdHNbMTJdID09PSBjaGVja3N1bSAlIDExO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKlxuICogc2stU0sgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKFJvZG7DqSDEjcOtc2xvIChSxIwpIG9yIGJlenbDvXpuYW1vdsOpIGlkZW50aWZpa2HEjW7DqSDEjcOtc2xvIChCScSMKSwgcGVyc29ucyBvbmx5KVxuICogQ2hlY2tzIHZhbGlkaXR5IG9mIHByZS0xOTU0IGJpcnRoIG51bWJlcnMgKHJvZG7DqSDEjcOtc2xvKSBvbmx5XG4gKiBEdWUgdG8gdGhlIGludHJvZHVjdGlvbiBvZiB0aGUgcHNldWRvLXJhbmRvbSBCScSMIGl0IGlzIG5vdCBwb3NzaWJsZSB0byB0ZXN0XG4gKiBwb3N0LTE5NTQgYmlydGggbnVtYmVycyB3aXRob3V0IGtub3dpbmcgd2hldGhlciB0aGV5IGFyZSBCScSMIG9yIFLEjCBiZWZvcmVoYW5kXG4gKi9cblxuXG5mdW5jdGlvbiBza1NrQ2hlY2sodGluKSB7XG4gIGlmICh0aW4ubGVuZ3RoID09PSA5KSB7XG4gICAgdGluID0gdGluLnJlcGxhY2UoL1xcVy8sICcnKTtcblxuICAgIGlmICh0aW4uc2xpY2UoNikgPT09ICcwMDAnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBUaHJlZS16ZXJvIHNlcmlhbCBub3QgYXNzaWduZWQgYmVmb3JlIDE5NTRcbiAgICAvLyBFeHRyYWN0IGZ1bGwgeWVhciBmcm9tIFRJTiBsZW5ndGhcblxuXG4gICAgdmFyIGZ1bGxfeWVhciA9IHBhcnNlSW50KHRpbi5zbGljZSgwLCAyKSwgMTApO1xuXG4gICAgaWYgKGZ1bGxfeWVhciA+IDUzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGZ1bGxfeWVhciA8IDEwKSB7XG4gICAgICBmdWxsX3llYXIgPSBcIjE5MFwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxsX3llYXIgPSBcIjE5XCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgfSAvLyBFeHRyYWN0IG1vbnRoIGZyb20gVElOIGFuZCBub3JtYWxpemVcblxuXG4gICAgdmFyIG1vbnRoID0gcGFyc2VJbnQodGluLnNsaWNlKDIsIDQpLCAxMCk7XG5cbiAgICBpZiAobW9udGggPiA1MCkge1xuICAgICAgbW9udGggLT0gNTA7XG4gICAgfVxuXG4gICAgaWYgKG1vbnRoIDwgMTApIHtcbiAgICAgIG1vbnRoID0gXCIwXCIuY29uY2F0KG1vbnRoKTtcbiAgICB9IC8vIENoZWNrIGRhdGUgdmFsaWRpdHlcblxuXG4gICAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChmdWxsX3llYXIsIFwiL1wiKS5jb25jYXQobW9udGgsIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDQsIDYpKTtcblxuICAgIGlmICghKDAsIF9pc0RhdGUuZGVmYXVsdCkoZGF0ZSwgJ1lZWVkvTU0vREQnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLypcbiAqIHNsLVNJIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChEYXbEjW5hIMWhdGV2aWxrYSwgcGVyc29ucy9lbnRpdGllcylcbiAqIFZlcmlmeSBUSU4gdmFsaWRpdHkgYnkgY2FsY3VsYXRpbmcgY2hlY2sgKGxhc3QpIGRpZ2l0ICh2YXJpYW50IG9mIE1PRCAxMSlcbiAqL1xuXG5cbmZ1bmN0aW9uIHNsU2lDaGVjayh0aW4pIHtcbiAgdmFyIGNoZWNrc3VtID0gMTEgLSBhbGdvcml0aG1zLnJldmVyc2VNdWx0aXBseUFuZFN1bSh0aW4uc3BsaXQoJycpLnNsaWNlKDAsIDcpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gIH0pLCA4KSAlIDExO1xuXG4gIGlmIChjaGVja3N1bSA9PT0gMTApIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGluWzddLCAxMCkgPT09IDA7XG4gIH1cblxuICByZXR1cm4gY2hlY2tzdW0gPT09IHBhcnNlSW50KHRpbls3XSwgMTApO1xufVxuLypcbiAqIHN2LVNFIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChQZXJzb25udW1tZXIgb3Igc2Ftb3JkbmluZ3NudW1tZXIsIHBlcnNvbnMgb25seSlcbiAqIENoZWNrcyB2YWxpZGl0eSBvZiBiaXJ0aCBkYXRlIGFuZCBjYWxscyBsdWhuQ2hlY2soKSB0byB2YWxpZGF0ZSBjaGVjayAobGFzdCkgZGlnaXRcbiAqL1xuXG5cbmZ1bmN0aW9uIHN2U2VDaGVjayh0aW4pIHtcbiAgLy8gTWFrZSBjb3B5IG9mIFRJTiBhbmQgbm9ybWFsaXplIHRvIHR3by1kaWdpdCB5ZWFyIGZvcm1cbiAgdmFyIHRpbl9jb3B5ID0gdGluLnNsaWNlKDApO1xuXG4gIGlmICh0aW4ubGVuZ3RoID4gMTEpIHtcbiAgICB0aW5fY29weSA9IHRpbl9jb3B5LnNsaWNlKDIpO1xuICB9IC8vIEV4dHJhY3QgZGF0ZSBvZiBiaXJ0aFxuXG5cbiAgdmFyIGZ1bGxfeWVhciA9ICcnO1xuICB2YXIgbW9udGggPSB0aW5fY29weS5zbGljZSgyLCA0KTtcbiAgdmFyIGRheSA9IHBhcnNlSW50KHRpbl9jb3B5LnNsaWNlKDQsIDYpLCAxMCk7XG5cbiAgaWYgKHRpbi5sZW5ndGggPiAxMSkge1xuICAgIGZ1bGxfeWVhciA9IHRpbi5zbGljZSgwLCA0KTtcbiAgfSBlbHNlIHtcbiAgICBmdWxsX3llYXIgPSB0aW4uc2xpY2UoMCwgMik7XG5cbiAgICBpZiAodGluLmxlbmd0aCA9PT0gMTEgJiYgZGF5IDwgNjApIHtcbiAgICAgIC8vIEV4dHJhY3QgZnVsbCB5ZWFyIGZyb20gY2VudGVuYXJpYW4gc3ltYm9sXG4gICAgICAvLyBTaG91bGQgd29yayBqdXN0IGZpbmUgdW50aWwgeWVhciAxMDAwMCBvciBzb1xuICAgICAgdmFyIGN1cnJlbnRfeWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpO1xuICAgICAgdmFyIGN1cnJlbnRfY2VudHVyeSA9IHBhcnNlSW50KGN1cnJlbnRfeWVhci5zbGljZSgwLCAyKSwgMTApO1xuICAgICAgY3VycmVudF95ZWFyID0gcGFyc2VJbnQoY3VycmVudF95ZWFyLCAxMCk7XG5cbiAgICAgIGlmICh0aW5bNl0gPT09ICctJykge1xuICAgICAgICBpZiAocGFyc2VJbnQoXCJcIi5jb25jYXQoY3VycmVudF9jZW50dXJ5KS5jb25jYXQoZnVsbF95ZWFyKSwgMTApID4gY3VycmVudF95ZWFyKSB7XG4gICAgICAgICAgZnVsbF95ZWFyID0gXCJcIi5jb25jYXQoY3VycmVudF9jZW50dXJ5IC0gMSkuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnVsbF95ZWFyID0gXCJcIi5jb25jYXQoY3VycmVudF9jZW50dXJ5KS5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnVsbF95ZWFyID0gXCJcIi5jb25jYXQoY3VycmVudF9jZW50dXJ5IC0gMSkuY29uY2F0KGZ1bGxfeWVhcik7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRfeWVhciAtIHBhcnNlSW50KGZ1bGxfeWVhciwgMTApIDwgMTAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IC8vIE5vcm1hbGl6ZSBkYXkgYW5kIGNoZWNrIGRhdGUgdmFsaWRpdHlcblxuXG4gIGlmIChkYXkgPiA2MCkge1xuICAgIGRheSAtPSA2MDtcbiAgfVxuXG4gIGlmIChkYXkgPCAxMCkge1xuICAgIGRheSA9IFwiMFwiLmNvbmNhdChkYXkpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChmdWxsX3llYXIsIFwiL1wiKS5jb25jYXQobW9udGgsIFwiL1wiKS5jb25jYXQoZGF5KTtcblxuICBpZiAoZGF0ZS5sZW5ndGggPT09IDgpIHtcbiAgICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWS9NTS9ERCcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKCEoMCwgX2lzRGF0ZS5kZWZhdWx0KShkYXRlLCAnWVlZWS9NTS9ERCcpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGFsZ29yaXRobXMubHVobkNoZWNrKHRpbi5yZXBsYWNlKC9cXFcvLCAnJykpO1xufSAvLyBMb2NhbGUgbG9va3VwIG9iamVjdHNcblxuLypcbiAqIFRheCBpZCByZWdleCBmb3JtYXRzIGZvciB2YXJpb3VzIGxvY2FsZXNcbiAqXG4gKiBXaGVyZSBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQgaW4gREctVEFYVUQgZG9jdW1lbnQgYm90aFxuICogdXBwZXJjYXNlIGFuZCBsb3dlcmNhc2UgbGV0dGVycyBhcmUgYWNjZXB0YWJsZS5cbiAqL1xuXG5cbnZhciB0YXhJZEZvcm1hdCA9IHtcbiAgJ2JnLUJHJzogL15cXGR7MTB9JC8sXG4gICdjcy1DWic6IC9eXFxkezZ9XFwvezAsMX1cXGR7Myw0fSQvLFxuICAnZGUtQVQnOiAvXlxcZHs5fSQvLFxuICAnZGUtREUnOiAvXlsxLTldXFxkezEwfSQvLFxuICAnZGstREsnOiAvXlxcZHs2fS17MCwxfVxcZHs0fSQvLFxuICAnZWwtQ1knOiAvXlswOV1cXGR7N31bQS1aXSQvLFxuICAnZWwtR1InOiAvXihbMC00XXxbNy05XSlcXGR7OH0kLyxcbiAgJ2VuLUdCJzogL15cXGR7MTB9JHxeKD8hR0J8Tkt8VE58WlopKD8hW0RGSVFVVl0pW0EtWl0oPyFbREZJUVVWT10pW0EtWl1cXGR7Nn1bQUJDRCBdJC9pLFxuICAnZW4tSUUnOiAvXlxcZHs3fVtBLVddW0EtSVddezAsMX0kL2ksXG4gICdlbi1VUyc6IC9eXFxkezJ9Wy0gXXswLDF9XFxkezd9JC8sXG4gICdlcy1FUyc6IC9eKFxcZHswLDh9fFtYWVpLTE1dXFxkezd9KVtBLUhKLU5QLVRWLVpdJC9pLFxuICAnZXQtRUUnOiAvXlsxLTZdXFxkezZ9KDAwWzEtOV18MFsxLTldWzAtOV18WzEtNl1bMC05XXsyfXw3MFswLTldfDcxMClcXGQkLyxcbiAgJ2ZpLUZJJzogL15cXGR7Nn1bLStBXVxcZHszfVswLTlBLUZISi1OUFItWV0kL2ksXG4gICdmci1CRSc6IC9eXFxkezExfSQvLFxuICAnZnItRlInOiAvXlswLTNdXFxkezEyfSR8XlswLTNdXFxkXFxzXFxkezJ9KFxcc1xcZHszfSl7M30kLyxcbiAgLy8gQ29uZm9ybXMgYm90aCB0byBvZmZpY2lhbCBzcGVjIGFuZCBwcm92aWRlZCBleGFtcGxlXG4gICdmci1MVSc6IC9eXFxkezEzfSQvLFxuICAnaHItSFInOiAvXlxcZHsxMX0kLyxcbiAgJ2h1LUhVJzogL144XFxkezl9JC8sXG4gICdpdC1JVCc6IC9eW0EtWl17Nn1bTC1OUC1WMC05XXsyfVtBLUVITE1QUlNUXVtMLU5QLVYwLTldezJ9W0EtSUxNWl1bTC1OUC1WMC05XXszfVtBLVpdJC9pLFxuICAnbHYtTFYnOiAvXlxcZHs2fS17MCwxfVxcZHs1fSQvLFxuICAvLyBDb25mb3JtcyBib3RoIHRvIERHIFRBWFVEIHNwZWMgYW5kIG9yaWdpbmFsIHJlc2VhcmNoXG4gICdtdC1NVCc6IC9eXFxkezMsN31bQVBNR0xIQlpdJHxeKFsxLThdKVxcMVxcZHs3fSQvaSxcbiAgJ25sLU5MJzogL15cXGR7OX0kLyxcbiAgJ3BsLVBMJzogL15cXGR7MTAsMTF9JC8sXG4gICdwdC1CUic6IC8oPzpeXFxkezExfSQpfCg/Ol5cXGR7MTR9JCkvLFxuICAncHQtUFQnOiAvXlxcZHs5fSQvLFxuICAncm8tUk8nOiAvXlxcZHsxM30kLyxcbiAgJ3NrLVNLJzogL15cXGR7Nn1cXC97MCwxfVxcZHszLDR9JC8sXG4gICdzbC1TSSc6IC9eWzEtOV1cXGR7N30kLyxcbiAgJ3N2LVNFJzogL14oXFxkezZ9Wy0rXXswLDF9XFxkezR9fCgxOHwxOXwyMClcXGR7Nn1bLStdezAsMX1cXGR7NH0pJC9cbn07IC8vIHRheElkRm9ybWF0IGxvY2FsZSBhbGlhc2VzXG5cbnRheElkRm9ybWF0WydsYi1MVSddID0gdGF4SWRGb3JtYXRbJ2ZyLUxVJ107XG50YXhJZEZvcm1hdFsnbHQtTFQnXSA9IHRheElkRm9ybWF0WydldC1FRSddO1xudGF4SWRGb3JtYXRbJ25sLUJFJ10gPSB0YXhJZEZvcm1hdFsnZnItQkUnXTsgLy8gQWxnb3JpdGhtaWMgdGF4IGlkIGNoZWNrIGZ1bmN0aW9ucyBmb3IgdmFyaW91cyBsb2NhbGVzXG5cbnZhciB0YXhJZENoZWNrID0ge1xuICAnYmctQkcnOiBiZ0JnQ2hlY2ssXG4gICdjcy1DWic6IGNzQ3pDaGVjayxcbiAgJ2RlLUFUJzogZGVBdENoZWNrLFxuICAnZGUtREUnOiBkZURlQ2hlY2ssXG4gICdkay1ESyc6IGRrRGtDaGVjayxcbiAgJ2VsLUNZJzogZWxDeUNoZWNrLFxuICAnZWwtR1InOiBlbEdyQ2hlY2ssXG4gICdlbi1JRSc6IGVuSWVDaGVjayxcbiAgJ2VuLVVTJzogZW5Vc0NoZWNrLFxuICAnZXMtRVMnOiBlc0VzQ2hlY2ssXG4gICdldC1FRSc6IGV0RWVDaGVjayxcbiAgJ2ZpLUZJJzogZmlGaUNoZWNrLFxuICAnZnItQkUnOiBmckJlQ2hlY2ssXG4gICdmci1GUic6IGZyRnJDaGVjayxcbiAgJ2ZyLUxVJzogZnJMdUNoZWNrLFxuICAnaHItSFInOiBockhyQ2hlY2ssXG4gICdodS1IVSc6IGh1SHVDaGVjayxcbiAgJ2l0LUlUJzogaXRJdENoZWNrLFxuICAnbHYtTFYnOiBsdkx2Q2hlY2ssXG4gICdtdC1NVCc6IG10TXRDaGVjayxcbiAgJ25sLU5MJzogbmxObENoZWNrLFxuICAncGwtUEwnOiBwbFBsQ2hlY2ssXG4gICdwdC1CUic6IHB0QnJDaGVjayxcbiAgJ3B0LVBUJzogcHRQdENoZWNrLFxuICAncm8tUk8nOiByb1JvQ2hlY2ssXG4gICdzay1TSyc6IHNrU2tDaGVjayxcbiAgJ3NsLVNJJzogc2xTaUNoZWNrLFxuICAnc3YtU0UnOiBzdlNlQ2hlY2tcbn07IC8vIHRheElkQ2hlY2sgbG9jYWxlIGFsaWFzZXNcblxudGF4SWRDaGVja1snbGItTFUnXSA9IHRheElkQ2hlY2tbJ2ZyLUxVJ107XG50YXhJZENoZWNrWydsdC1MVCddID0gdGF4SWRDaGVja1snZXQtRUUnXTtcbnRheElkQ2hlY2tbJ25sLUJFJ10gPSB0YXhJZENoZWNrWydmci1CRSddOyAvLyBSZWdleGVzIGZvciBsb2NhbGVzIHdoZXJlIGNoYXJhY3RlcnMgc2hvdWxkIGJlIG9taXR0ZWQgYmVmb3JlIGNoZWNraW5nIGZvcm1hdFxuXG52YXIgYWxsc3ltYm9scyA9IC9bLVxcXFxcXC8hQCMkJVxcXiZcXCpcXChcXClcXCtcXD1cXFtcXF1dKy9nO1xudmFyIHNhbml0aXplUmVnZXhlcyA9IHtcbiAgJ2RlLUFUJzogYWxsc3ltYm9scyxcbiAgJ2RlLURFJzogL1tcXC9cXFxcXS9nLFxuICAnZnItQkUnOiBhbGxzeW1ib2xzXG59OyAvLyBzYW5pdGl6ZVJlZ2V4ZXMgbG9jYWxlIGFsaWFzZXNcblxuc2FuaXRpemVSZWdleGVzWydubC1CRSddID0gc2FuaXRpemVSZWdleGVzWydmci1CRSddO1xuLypcbiAqIFZhbGlkYXRvciBmdW5jdGlvblxuICogUmV0dXJuIHRydWUgaWYgdGhlIHBhc3NlZCBzdHJpbmcgaXMgYSB2YWxpZCB0YXggaWRlbnRpZmljYXRpb24gbnVtYmVyXG4gKiBmb3IgdGhlIHNwZWNpZmllZCBsb2NhbGUuXG4gKiBUaHJvdyBhbiBlcnJvciBleGNlcHRpb24gaWYgdGhlIGxvY2FsZSBpcyBub3Qgc3VwcG9ydGVkLlxuICovXG5cbmZ1bmN0aW9uIGlzVGF4SUQoc3RyKSB7XG4gIHZhciBsb2NhbGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdlbi1VUyc7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7IC8vIENvcHkgVElOIHRvIGF2b2lkIHJlcGxhY2VtZW50IGlmIHNhbml0aXplZFxuXG4gIHZhciBzdHJjb3B5ID0gc3RyLnNsaWNlKDApO1xuXG4gIGlmIChsb2NhbGUgaW4gdGF4SWRGb3JtYXQpIHtcbiAgICBpZiAobG9jYWxlIGluIHNhbml0aXplUmVnZXhlcykge1xuICAgICAgc3RyY29weSA9IHN0cmNvcHkucmVwbGFjZShzYW5pdGl6ZVJlZ2V4ZXNbbG9jYWxlXSwgJycpO1xuICAgIH1cblxuICAgIGlmICghdGF4SWRGb3JtYXRbbG9jYWxlXS50ZXN0KHN0cmNvcHkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGxvY2FsZSBpbiB0YXhJZENoZWNrKSB7XG4gICAgICByZXR1cm4gdGF4SWRDaGVja1tsb2NhbGVdKHN0cmNvcHkpO1xuICAgIH0gLy8gRmFsbHRocm91Z2g7IG5vdCBhbGwgbG9jYWxlcyBoYXZlIGFsZ29yaXRobWljIGNoZWNrc1xuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9jYWxlICdcIi5jb25jYXQobG9jYWxlLCBcIidcIikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1VSTDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxudmFyIF9pc0ZRRE4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzRlFETlwiKSk7XG5cbnZhciBfaXNJUCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNJUFwiKSk7XG5cbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG4vKlxub3B0aW9ucyBmb3IgaXNVUkwgbWV0aG9kXG5cbnJlcXVpcmVfcHJvdG9jb2wgLSBpZiBzZXQgYXMgdHJ1ZSBpc1VSTCB3aWxsIHJldHVybiBmYWxzZSBpZiBwcm90b2NvbCBpcyBub3QgcHJlc2VudCBpbiB0aGUgVVJMXG5yZXF1aXJlX3ZhbGlkX3Byb3RvY29sIC0gaXNVUkwgd2lsbCBjaGVjayBpZiB0aGUgVVJMJ3MgcHJvdG9jb2wgaXMgcHJlc2VudCBpbiB0aGUgcHJvdG9jb2xzIG9wdGlvblxucHJvdG9jb2xzIC0gdmFsaWQgcHJvdG9jb2xzIGNhbiBiZSBtb2RpZmllZCB3aXRoIHRoaXMgb3B0aW9uXG5yZXF1aXJlX2hvc3QgLSBpZiBzZXQgYXMgZmFsc2UgaXNVUkwgd2lsbCBub3QgY2hlY2sgaWYgaG9zdCBpcyBwcmVzZW50IGluIHRoZSBVUkxcbnJlcXVpcmVfcG9ydCAtIGlmIHNldCBhcyB0cnVlIGlzVVJMIHdpbGwgY2hlY2sgaWYgcG9ydCBpcyBwcmVzZW50IGluIHRoZSBVUkxcbmFsbG93X3Byb3RvY29sX3JlbGF0aXZlX3VybHMgLSBpZiBzZXQgYXMgdHJ1ZSBwcm90b2NvbCByZWxhdGl2ZSBVUkxzIHdpbGwgYmUgYWxsb3dlZFxudmFsaWRhdGVfbGVuZ3RoIC0gaWYgc2V0IGFzIGZhbHNlIGlzVVJMIHdpbGwgc2tpcCBzdHJpbmcgbGVuZ3RoIHZhbGlkYXRpb24gKElFIG1heGltdW0gaXMgMjA4MylcblxuKi9cbnZhciBkZWZhdWx0X3VybF9vcHRpb25zID0ge1xuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmdHAnXSxcbiAgcmVxdWlyZV90bGQ6IHRydWUsXG4gIHJlcXVpcmVfcHJvdG9jb2w6IGZhbHNlLFxuICByZXF1aXJlX2hvc3Q6IHRydWUsXG4gIHJlcXVpcmVfcG9ydDogZmFsc2UsXG4gIHJlcXVpcmVfdmFsaWRfcHJvdG9jb2w6IHRydWUsXG4gIGFsbG93X3VuZGVyc2NvcmVzOiBmYWxzZSxcbiAgYWxsb3dfdHJhaWxpbmdfZG90OiBmYWxzZSxcbiAgYWxsb3dfcHJvdG9jb2xfcmVsYXRpdmVfdXJsczogZmFsc2UsXG4gIGFsbG93X2ZyYWdtZW50czogdHJ1ZSxcbiAgYWxsb3dfcXVlcnlfY29tcG9uZW50czogdHJ1ZSxcbiAgdmFsaWRhdGVfbGVuZ3RoOiB0cnVlXG59O1xudmFyIHdyYXBwZWRfaXB2NiA9IC9eXFxbKFteXFxdXSspXFxdKD86OihbMC05XSspKT8kLztcblxuZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSG9zdChob3N0LCBtYXRjaGVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtYXRjaCA9IG1hdGNoZXNbaV07XG5cbiAgICBpZiAoaG9zdCA9PT0gbWF0Y2ggfHwgaXNSZWdFeHAobWF0Y2gpICYmIG1hdGNoLnRlc3QoaG9zdCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVUkwodXJsLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHVybCk7XG5cbiAgaWYgKCF1cmwgfHwgL1tcXHM8Pl0vLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh1cmwuaW5kZXhPZignbWFpbHRvOicpID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UuZGVmYXVsdCkob3B0aW9ucywgZGVmYXVsdF91cmxfb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMudmFsaWRhdGVfbGVuZ3RoICYmIHVybC5sZW5ndGggPj0gMjA4Mykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghb3B0aW9ucy5hbGxvd19mcmFnbWVudHMgJiYgdXJsLmluY2x1ZGVzKCcjJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMuYWxsb3dfcXVlcnlfY29tcG9uZW50cyAmJiAodXJsLmluY2x1ZGVzKCc/JykgfHwgdXJsLmluY2x1ZGVzKCcmJykpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvY29sLCBhdXRoLCBob3N0LCBob3N0bmFtZSwgcG9ydCwgcG9ydF9zdHIsIHNwbGl0LCBpcHY2O1xuICBzcGxpdCA9IHVybC5zcGxpdCgnIycpO1xuICB1cmwgPSBzcGxpdC5zaGlmdCgpO1xuICBzcGxpdCA9IHVybC5zcGxpdCgnPycpO1xuICB1cmwgPSBzcGxpdC5zaGlmdCgpO1xuICBzcGxpdCA9IHVybC5zcGxpdCgnOi8vJyk7XG5cbiAgaWYgKHNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICBwcm90b2NvbCA9IHNwbGl0LnNoaWZ0KCkudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChvcHRpb25zLnJlcXVpcmVfdmFsaWRfcHJvdG9jb2wgJiYgb3B0aW9ucy5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKG9wdGlvbnMucmVxdWlyZV9wcm90b2NvbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmICh1cmwuc3Vic3RyKDAsIDIpID09PSAnLy8nKSB7XG4gICAgaWYgKCFvcHRpb25zLmFsbG93X3Byb3RvY29sX3JlbGF0aXZlX3VybHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzcGxpdFswXSA9IHVybC5zdWJzdHIoMik7XG4gIH1cblxuICB1cmwgPSBzcGxpdC5qb2luKCc6Ly8nKTtcblxuICBpZiAodXJsID09PSAnJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNwbGl0ID0gdXJsLnNwbGl0KCcvJyk7XG4gIHVybCA9IHNwbGl0LnNoaWZ0KCk7XG5cbiAgaWYgKHVybCA9PT0gJycgJiYgIW9wdGlvbnMucmVxdWlyZV9ob3N0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzcGxpdCA9IHVybC5zcGxpdCgnQCcpO1xuXG4gIGlmIChzcGxpdC5sZW5ndGggPiAxKSB7XG4gICAgaWYgKG9wdGlvbnMuZGlzYWxsb3dfYXV0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzcGxpdFswXSA9PT0gJycpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBhdXRoID0gc3BsaXQuc2hpZnQoKTtcblxuICAgIGlmIChhdXRoLmluZGV4T2YoJzonKSA+PSAwICYmIGF1dGguc3BsaXQoJzonKS5sZW5ndGggPiAyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIF9hdXRoJHNwbGl0ID0gYXV0aC5zcGxpdCgnOicpLFxuICAgICAgICBfYXV0aCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfYXV0aCRzcGxpdCwgMiksXG4gICAgICAgIHVzZXIgPSBfYXV0aCRzcGxpdDJbMF0sXG4gICAgICAgIHBhc3N3b3JkID0gX2F1dGgkc3BsaXQyWzFdO1xuXG4gICAgaWYgKHVzZXIgPT09ICcnICYmIHBhc3N3b3JkID09PSAnJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGhvc3RuYW1lID0gc3BsaXQuam9pbignQCcpO1xuICBwb3J0X3N0ciA9IG51bGw7XG4gIGlwdjYgPSBudWxsO1xuICB2YXIgaXB2Nl9tYXRjaCA9IGhvc3RuYW1lLm1hdGNoKHdyYXBwZWRfaXB2Nik7XG5cbiAgaWYgKGlwdjZfbWF0Y2gpIHtcbiAgICBob3N0ID0gJyc7XG4gICAgaXB2NiA9IGlwdjZfbWF0Y2hbMV07XG4gICAgcG9ydF9zdHIgPSBpcHY2X21hdGNoWzJdIHx8IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgc3BsaXQgPSBob3N0bmFtZS5zcGxpdCgnOicpO1xuICAgIGhvc3QgPSBzcGxpdC5zaGlmdCgpO1xuXG4gICAgaWYgKHNwbGl0Lmxlbmd0aCkge1xuICAgICAgcG9ydF9zdHIgPSBzcGxpdC5qb2luKCc6Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBvcnRfc3RyICE9PSBudWxsICYmIHBvcnRfc3RyLmxlbmd0aCA+IDApIHtcbiAgICBwb3J0ID0gcGFyc2VJbnQocG9ydF9zdHIsIDEwKTtcblxuICAgIGlmICghL15bMC05XSskLy50ZXN0KHBvcnRfc3RyKSB8fCBwb3J0IDw9IDAgfHwgcG9ydCA+IDY1NTM1KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKG9wdGlvbnMucmVxdWlyZV9wb3J0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaG9zdF93aGl0ZWxpc3QpIHtcbiAgICByZXR1cm4gY2hlY2tIb3N0KGhvc3QsIG9wdGlvbnMuaG9zdF93aGl0ZWxpc3QpO1xuICB9XG5cbiAgaWYgKCEoMCwgX2lzSVAuZGVmYXVsdCkoaG9zdCkgJiYgISgwLCBfaXNGUUROLmRlZmF1bHQpKGhvc3QsIG9wdGlvbnMpICYmICghaXB2NiB8fCAhKDAsIF9pc0lQLmRlZmF1bHQpKGlwdjYsIDYpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhvc3QgPSBob3N0IHx8IGlwdjY7XG5cbiAgaWYgKG9wdGlvbnMuaG9zdF9ibGFja2xpc3QgJiYgY2hlY2tIb3N0KGhvc3QsIG9wdGlvbnMuaG9zdF9ibGFja2xpc3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVVVJRDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHV1aWQgPSB7XG4gIDE6IC9eWzAtOUEtRl17OH0tWzAtOUEtRl17NH0tMVswLTlBLUZdezN9LVswLTlBLUZdezR9LVswLTlBLUZdezEyfSQvaSxcbiAgMjogL15bMC05QS1GXXs4fS1bMC05QS1GXXs0fS0yWzAtOUEtRl17M30tWzAtOUEtRl17NH0tWzAtOUEtRl17MTJ9JC9pLFxuICAzOiAvXlswLTlBLUZdezh9LVswLTlBLUZdezR9LTNbMC05QS1GXXszfS1bMC05QS1GXXs0fS1bMC05QS1GXXsxMn0kL2ksXG4gIDQ6IC9eWzAtOUEtRl17OH0tWzAtOUEtRl17NH0tNFswLTlBLUZdezN9LVs4OUFCXVswLTlBLUZdezN9LVswLTlBLUZdezEyfSQvaSxcbiAgNTogL15bMC05QS1GXXs4fS1bMC05QS1GXXs0fS01WzAtOUEtRl17M30tWzg5QUJdWzAtOUEtRl17M30tWzAtOUEtRl17MTJ9JC9pLFxuICBhbGw6IC9eWzAtOUEtRl17OH0tWzAtOUEtRl17NH0tWzAtOUEtRl17NH0tWzAtOUEtRl17NH0tWzAtOUEtRl17MTJ9JC9pXG59O1xuXG5mdW5jdGlvbiBpc1VVSUQoc3RyLCB2ZXJzaW9uKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBwYXR0ZXJuID0gdXVpZFshW3VuZGVmaW5lZCwgbnVsbF0uaW5jbHVkZXModmVyc2lvbikgPyB2ZXJzaW9uIDogJ2FsbCddO1xuICByZXR1cm4gISFwYXR0ZXJuICYmIHBhdHRlcm4udGVzdChzdHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1VwcGVyY2FzZTtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaXNVcHBlcmNhc2Uoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdHIgPT09IHN0ci50b1VwcGVyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ZBVDtcbmV4cG9ydHMudmF0TWF0Y2hlcnMgPSB2b2lkIDA7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB2YXRNYXRjaGVycyA9IHtcbiAgR0I6IC9eR0IoKFxcZHszfSBcXGR7NH0gKFswLThdWzAtOV18OVswLTZdKSl8KFxcZHs5fSBcXGR7M30pfCgoKEdEWzAtNF0pfChIQVs1LTldKSlbMC05XXsyfSkpJC8sXG4gIElUOiAvXihJVCk/WzAtOV17MTF9JC8sXG4gIE5MOiAvXihOTCk/WzAtOV17OX1CWzAtOV17Mn0kL1xufTtcbmV4cG9ydHMudmF0TWF0Y2hlcnMgPSB2YXRNYXRjaGVycztcblxuZnVuY3Rpb24gaXNWQVQoc3RyLCBjb3VudHJ5Q29kZSkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShjb3VudHJ5Q29kZSk7XG5cbiAgaWYgKGNvdW50cnlDb2RlIGluIHZhdE1hdGNoZXJzKSB7XG4gICAgcmV0dXJuIHZhdE1hdGNoZXJzW2NvdW50cnlDb2RlXS50ZXN0KHN0cik7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvdW50cnkgY29kZTogJ1wiLmNvbmNhdChjb3VudHJ5Q29kZSwgXCInXCIpKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVmFyaWFibGVXaWR0aDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxudmFyIF9pc0Z1bGxXaWR0aCA9IHJlcXVpcmUoXCIuL2lzRnVsbFdpZHRoXCIpO1xuXG52YXIgX2lzSGFsZldpZHRoID0gcmVxdWlyZShcIi4vaXNIYWxmV2lkdGhcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzVmFyaWFibGVXaWR0aChzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIF9pc0Z1bGxXaWR0aC5mdWxsV2lkdGgudGVzdChzdHIpICYmIF9pc0hhbGZXaWR0aC5oYWxmV2lkdGgudGVzdChzdHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1doaXRlbGlzdGVkO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc1doaXRlbGlzdGVkKHN0ciwgY2hhcnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcblxuICBmb3IgKHZhciBpID0gc3RyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGNoYXJzLmluZGV4T2Yoc3RyW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbHRyaW07XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGx0cmltKHN0ciwgY2hhcnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTsgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9SZWd1bGFyX0V4cHJlc3Npb25zI0VzY2FwaW5nXG5cbiAgdmFyIHBhdHRlcm4gPSBjaGFycyA/IG5ldyBSZWdFeHAoXCJeW1wiLmNvbmNhdChjaGFycy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpLCBcIl0rXCIpLCAnZycpIDogL15cXHMrL2c7XG4gIHJldHVybiBzdHIucmVwbGFjZShwYXR0ZXJuLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1hdGNoZXM7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIG1hdGNoZXMoc3RyLCBwYXR0ZXJuLCBtb2RpZmllcnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHBhdHRlcm4pICE9PSAnW29iamVjdCBSZWdFeHBdJykge1xuICAgIHBhdHRlcm4gPSBuZXcgUmVnRXhwKHBhdHRlcm4sIG1vZGlmaWVycyk7XG4gIH1cblxuICByZXR1cm4gcGF0dGVybi50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG5vcm1hbGl6ZUVtYWlsO1xuXG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGRlZmF1bHRfbm9ybWFsaXplX2VtYWlsX29wdGlvbnMgPSB7XG4gIC8vIFRoZSBmb2xsb3dpbmcgb3B0aW9ucyBhcHBseSB0byBhbGwgZW1haWwgYWRkcmVzc2VzXG4gIC8vIExvd2VyY2FzZXMgdGhlIGxvY2FsIHBhcnQgb2YgdGhlIGVtYWlsIGFkZHJlc3MuXG4gIC8vIFBsZWFzZSBub3RlIHRoaXMgbWF5IHZpb2xhdGUgUkZDIDUzMjEgYXMgcGVyIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzk4MDgzMzIvMTkyMDI0KS5cbiAgLy8gVGhlIGRvbWFpbiBpcyBhbHdheXMgbG93ZXJjYXNlZCwgYXMgcGVyIFJGQyAxMDM1XG4gIGFsbF9sb3dlcmNhc2U6IHRydWUsXG4gIC8vIFRoZSBmb2xsb3dpbmcgY29udmVyc2lvbnMgYXJlIHNwZWNpZmljIHRvIEdNYWlsXG4gIC8vIExvd2VyY2FzZXMgdGhlIGxvY2FsIHBhcnQgb2YgdGhlIEdNYWlsIGFkZHJlc3MgKGtub3duIHRvIGJlIGNhc2UtaW5zZW5zaXRpdmUpXG4gIGdtYWlsX2xvd2VyY2FzZTogdHJ1ZSxcbiAgLy8gUmVtb3ZlcyBkb3RzIGZyb20gdGhlIGxvY2FsIHBhcnQgb2YgdGhlIGVtYWlsIGFkZHJlc3MsIGFzIHRoYXQncyBpZ25vcmVkIGJ5IEdNYWlsXG4gIGdtYWlsX3JlbW92ZV9kb3RzOiB0cnVlLFxuICAvLyBSZW1vdmVzIHRoZSBzdWJhZGRyZXNzIChlLmcuIFwiK2Zvb1wiKSBmcm9tIHRoZSBlbWFpbCBhZGRyZXNzXG4gIGdtYWlsX3JlbW92ZV9zdWJhZGRyZXNzOiB0cnVlLFxuICAvLyBDb252ZXJzdHMgdGhlIGdvb2dsZW1haWwuY29tIGRvbWFpbiB0byBnbWFpbC5jb21cbiAgZ21haWxfY29udmVydF9nb29nbGVtYWlsZG90Y29tOiB0cnVlLFxuICAvLyBUaGUgZm9sbG93aW5nIGNvbnZlcnNpb25zIGFyZSBzcGVjaWZpYyB0byBPdXRsb29rLmNvbSAvIFdpbmRvd3MgTGl2ZSAvIEhvdG1haWxcbiAgLy8gTG93ZXJjYXNlcyB0aGUgbG9jYWwgcGFydCBvZiB0aGUgT3V0bG9vay5jb20gYWRkcmVzcyAoa25vd24gdG8gYmUgY2FzZS1pbnNlbnNpdGl2ZSlcbiAgb3V0bG9va2RvdGNvbV9sb3dlcmNhc2U6IHRydWUsXG4gIC8vIFJlbW92ZXMgdGhlIHN1YmFkZHJlc3MgKGUuZy4gXCIrZm9vXCIpIGZyb20gdGhlIGVtYWlsIGFkZHJlc3NcbiAgb3V0bG9va2RvdGNvbV9yZW1vdmVfc3ViYWRkcmVzczogdHJ1ZSxcbiAgLy8gVGhlIGZvbGxvd2luZyBjb252ZXJzaW9ucyBhcmUgc3BlY2lmaWMgdG8gWWFob29cbiAgLy8gTG93ZXJjYXNlcyB0aGUgbG9jYWwgcGFydCBvZiB0aGUgWWFob28gYWRkcmVzcyAoa25vd24gdG8gYmUgY2FzZS1pbnNlbnNpdGl2ZSlcbiAgeWFob29fbG93ZXJjYXNlOiB0cnVlLFxuICAvLyBSZW1vdmVzIHRoZSBzdWJhZGRyZXNzIChlLmcuIFwiLWZvb1wiKSBmcm9tIHRoZSBlbWFpbCBhZGRyZXNzXG4gIHlhaG9vX3JlbW92ZV9zdWJhZGRyZXNzOiB0cnVlLFxuICAvLyBUaGUgZm9sbG93aW5nIGNvbnZlcnNpb25zIGFyZSBzcGVjaWZpYyB0byBZYW5kZXhcbiAgLy8gTG93ZXJjYXNlcyB0aGUgbG9jYWwgcGFydCBvZiB0aGUgWWFuZGV4IGFkZHJlc3MgKGtub3duIHRvIGJlIGNhc2UtaW5zZW5zaXRpdmUpXG4gIHlhbmRleF9sb3dlcmNhc2U6IHRydWUsXG4gIC8vIFRoZSBmb2xsb3dpbmcgY29udmVyc2lvbnMgYXJlIHNwZWNpZmljIHRvIGlDbG91ZFxuICAvLyBMb3dlcmNhc2VzIHRoZSBsb2NhbCBwYXJ0IG9mIHRoZSBpQ2xvdWQgYWRkcmVzcyAoa25vd24gdG8gYmUgY2FzZS1pbnNlbnNpdGl2ZSlcbiAgaWNsb3VkX2xvd2VyY2FzZTogdHJ1ZSxcbiAgLy8gUmVtb3ZlcyB0aGUgc3ViYWRkcmVzcyAoZS5nLiBcIitmb29cIikgZnJvbSB0aGUgZW1haWwgYWRkcmVzc1xuICBpY2xvdWRfcmVtb3ZlX3N1YmFkZHJlc3M6IHRydWVcbn07IC8vIExpc3Qgb2YgZG9tYWlucyB1c2VkIGJ5IGlDbG91ZFxuXG52YXIgaWNsb3VkX2RvbWFpbnMgPSBbJ2ljbG91ZC5jb20nLCAnbWUuY29tJ107IC8vIExpc3Qgb2YgZG9tYWlucyB1c2VkIGJ5IE91dGxvb2suY29tIGFuZCBpdHMgcHJlZGVjZXNzb3JzXG4vLyBUaGlzIGxpc3QgaXMgbGlrZWx5IGluY29tcGxldGUuXG4vLyBQYXJ0aWFsIHJlZmVyZW5jZTpcbi8vIGh0dHBzOi8vYmxvZ3Mub2ZmaWNlLmNvbS8yMDEzLzA0LzE3L291dGxvb2stY29tLWdldHMtdHdvLXN0ZXAtdmVyaWZpY2F0aW9uLXNpZ24taW4tYnktYWxpYXMtYW5kLW5ldy1pbnRlcm5hdGlvbmFsLWRvbWFpbnMvXG5cbnZhciBvdXRsb29rZG90Y29tX2RvbWFpbnMgPSBbJ2hvdG1haWwuYXQnLCAnaG90bWFpbC5iZScsICdob3RtYWlsLmNhJywgJ2hvdG1haWwuY2wnLCAnaG90bWFpbC5jby5pbCcsICdob3RtYWlsLmNvLm56JywgJ2hvdG1haWwuY28udGgnLCAnaG90bWFpbC5jby51aycsICdob3RtYWlsLmNvbScsICdob3RtYWlsLmNvbS5hcicsICdob3RtYWlsLmNvbS5hdScsICdob3RtYWlsLmNvbS5icicsICdob3RtYWlsLmNvbS5ncicsICdob3RtYWlsLmNvbS5teCcsICdob3RtYWlsLmNvbS5wZScsICdob3RtYWlsLmNvbS50cicsICdob3RtYWlsLmNvbS52bicsICdob3RtYWlsLmN6JywgJ2hvdG1haWwuZGUnLCAnaG90bWFpbC5kaycsICdob3RtYWlsLmVzJywgJ2hvdG1haWwuZnInLCAnaG90bWFpbC5odScsICdob3RtYWlsLmlkJywgJ2hvdG1haWwuaWUnLCAnaG90bWFpbC5pbicsICdob3RtYWlsLml0JywgJ2hvdG1haWwuanAnLCAnaG90bWFpbC5rcicsICdob3RtYWlsLmx2JywgJ2hvdG1haWwubXknLCAnaG90bWFpbC5waCcsICdob3RtYWlsLnB0JywgJ2hvdG1haWwuc2EnLCAnaG90bWFpbC5zZycsICdob3RtYWlsLnNrJywgJ2xpdmUuYmUnLCAnbGl2ZS5jby51aycsICdsaXZlLmNvbScsICdsaXZlLmNvbS5hcicsICdsaXZlLmNvbS5teCcsICdsaXZlLmRlJywgJ2xpdmUuZXMnLCAnbGl2ZS5ldScsICdsaXZlLmZyJywgJ2xpdmUuaXQnLCAnbGl2ZS5ubCcsICdtc24uY29tJywgJ291dGxvb2suYXQnLCAnb3V0bG9vay5iZScsICdvdXRsb29rLmNsJywgJ291dGxvb2suY28uaWwnLCAnb3V0bG9vay5jby5ueicsICdvdXRsb29rLmNvLnRoJywgJ291dGxvb2suY29tJywgJ291dGxvb2suY29tLmFyJywgJ291dGxvb2suY29tLmF1JywgJ291dGxvb2suY29tLmJyJywgJ291dGxvb2suY29tLmdyJywgJ291dGxvb2suY29tLnBlJywgJ291dGxvb2suY29tLnRyJywgJ291dGxvb2suY29tLnZuJywgJ291dGxvb2suY3onLCAnb3V0bG9vay5kZScsICdvdXRsb29rLmRrJywgJ291dGxvb2suZXMnLCAnb3V0bG9vay5mcicsICdvdXRsb29rLmh1JywgJ291dGxvb2suaWQnLCAnb3V0bG9vay5pZScsICdvdXRsb29rLmluJywgJ291dGxvb2suaXQnLCAnb3V0bG9vay5qcCcsICdvdXRsb29rLmtyJywgJ291dGxvb2subHYnLCAnb3V0bG9vay5teScsICdvdXRsb29rLnBoJywgJ291dGxvb2sucHQnLCAnb3V0bG9vay5zYScsICdvdXRsb29rLnNnJywgJ291dGxvb2suc2snLCAncGFzc3BvcnQuY29tJ107IC8vIExpc3Qgb2YgZG9tYWlucyB1c2VkIGJ5IFlhaG9vIE1haWxcbi8vIFRoaXMgbGlzdCBpcyBsaWtlbHkgaW5jb21wbGV0ZVxuXG52YXIgeWFob29fZG9tYWlucyA9IFsncm9ja2V0bWFpbC5jb20nLCAneWFob28uY2EnLCAneWFob28uY28udWsnLCAneWFob28uY29tJywgJ3lhaG9vLmRlJywgJ3lhaG9vLmZyJywgJ3lhaG9vLmluJywgJ3lhaG9vLml0JywgJ3ltYWlsLmNvbSddOyAvLyBMaXN0IG9mIGRvbWFpbnMgdXNlZCBieSB5YW5kZXgucnVcblxudmFyIHlhbmRleF9kb21haW5zID0gWyd5YW5kZXgucnUnLCAneWFuZGV4LnVhJywgJ3lhbmRleC5reicsICd5YW5kZXguY29tJywgJ3lhbmRleC5ieScsICd5YS5ydSddOyAvLyByZXBsYWNlIHNpbmdsZSBkb3RzLCBidXQgbm90IG11bHRpcGxlIGNvbnNlY3V0aXZlIGRvdHNcblxuZnVuY3Rpb24gZG90c1JlcGxhY2VyKG1hdGNoKSB7XG4gIGlmIChtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIG1hdGNoO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVFbWFpbChlbWFpbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0X25vcm1hbGl6ZV9lbWFpbF9vcHRpb25zKTtcbiAgdmFyIHJhd19wYXJ0cyA9IGVtYWlsLnNwbGl0KCdAJyk7XG4gIHZhciBkb21haW4gPSByYXdfcGFydHMucG9wKCk7XG4gIHZhciB1c2VyID0gcmF3X3BhcnRzLmpvaW4oJ0AnKTtcbiAgdmFyIHBhcnRzID0gW3VzZXIsIGRvbWFpbl07IC8vIFRoZSBkb21haW4gaXMgYWx3YXlzIGxvd2VyY2FzZWQsIGFzIGl0J3MgY2FzZS1pbnNlbnNpdGl2ZSBwZXIgUkZDIDEwMzVcblxuICBwYXJ0c1sxXSA9IHBhcnRzWzFdLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKHBhcnRzWzFdID09PSAnZ21haWwuY29tJyB8fCBwYXJ0c1sxXSA9PT0gJ2dvb2dsZW1haWwuY29tJykge1xuICAgIC8vIEFkZHJlc3MgaXMgR01haWxcbiAgICBpZiAob3B0aW9ucy5nbWFpbF9yZW1vdmVfc3ViYWRkcmVzcykge1xuICAgICAgcGFydHNbMF0gPSBwYXJ0c1swXS5zcGxpdCgnKycpWzBdO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdtYWlsX3JlbW92ZV9kb3RzKSB7XG4gICAgICAvLyB0aGlzIGRvZXMgbm90IHJlcGxhY2UgY29uc2VjdXRpdmUgZG90cyBsaWtlIGV4YW1wbGUuLmVtYWlsQGdtYWlsLmNvbVxuICAgICAgcGFydHNbMF0gPSBwYXJ0c1swXS5yZXBsYWNlKC9cXC4rL2csIGRvdHNSZXBsYWNlcik7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJ0c1swXS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hbGxfbG93ZXJjYXNlIHx8IG9wdGlvbnMuZ21haWxfbG93ZXJjYXNlKSB7XG4gICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgcGFydHNbMV0gPSBvcHRpb25zLmdtYWlsX2NvbnZlcnRfZ29vZ2xlbWFpbGRvdGNvbSA/ICdnbWFpbC5jb20nIDogcGFydHNbMV07XG4gIH0gZWxzZSBpZiAoaWNsb3VkX2RvbWFpbnMuaW5kZXhPZihwYXJ0c1sxXSkgPj0gMCkge1xuICAgIC8vIEFkZHJlc3MgaXMgaUNsb3VkXG4gICAgaWYgKG9wdGlvbnMuaWNsb3VkX3JlbW92ZV9zdWJhZGRyZXNzKSB7XG4gICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnNwbGl0KCcrJylbMF07XG4gICAgfVxuXG4gICAgaWYgKCFwYXJ0c1swXS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hbGxfbG93ZXJjYXNlIHx8IG9wdGlvbnMuaWNsb3VkX2xvd2VyY2FzZSkge1xuICAgICAgcGFydHNbMF0gPSBwYXJ0c1swXS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvdXRsb29rZG90Y29tX2RvbWFpbnMuaW5kZXhPZihwYXJ0c1sxXSkgPj0gMCkge1xuICAgIC8vIEFkZHJlc3MgaXMgT3V0bG9vay5jb21cbiAgICBpZiAob3B0aW9ucy5vdXRsb29rZG90Y29tX3JlbW92ZV9zdWJhZGRyZXNzKSB7XG4gICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnNwbGl0KCcrJylbMF07XG4gICAgfVxuXG4gICAgaWYgKCFwYXJ0c1swXS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hbGxfbG93ZXJjYXNlIHx8IG9wdGlvbnMub3V0bG9va2RvdGNvbV9sb3dlcmNhc2UpIHtcbiAgICAgIHBhcnRzWzBdID0gcGFydHNbMF0udG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoeWFob29fZG9tYWlucy5pbmRleE9mKHBhcnRzWzFdKSA+PSAwKSB7XG4gICAgLy8gQWRkcmVzcyBpcyBZYWhvb1xuICAgIGlmIChvcHRpb25zLnlhaG9vX3JlbW92ZV9zdWJhZGRyZXNzKSB7XG4gICAgICB2YXIgY29tcG9uZW50cyA9IHBhcnRzWzBdLnNwbGl0KCctJyk7XG4gICAgICBwYXJ0c1swXSA9IGNvbXBvbmVudHMubGVuZ3RoID4gMSA/IGNvbXBvbmVudHMuc2xpY2UoMCwgLTEpLmpvaW4oJy0nKSA6IGNvbXBvbmVudHNbMF07XG4gICAgfVxuXG4gICAgaWYgKCFwYXJ0c1swXS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hbGxfbG93ZXJjYXNlIHx8IG9wdGlvbnMueWFob29fbG93ZXJjYXNlKSB7XG4gICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHlhbmRleF9kb21haW5zLmluZGV4T2YocGFydHNbMV0pID49IDApIHtcbiAgICBpZiAob3B0aW9ucy5hbGxfbG93ZXJjYXNlIHx8IG9wdGlvbnMueWFuZGV4X2xvd2VyY2FzZSkge1xuICAgICAgcGFydHNbMF0gPSBwYXJ0c1swXS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIHBhcnRzWzFdID0gJ3lhbmRleC5ydSc7IC8vIGFsbCB5YW5kZXggZG9tYWlucyBhcmUgZXF1YWwsIDFzdCBwcmVmZXJyZWRcbiAgfSBlbHNlIGlmIChvcHRpb25zLmFsbF9sb3dlcmNhc2UpIHtcbiAgICAvLyBBbnkgb3RoZXIgYWRkcmVzc1xuICAgIHBhcnRzWzBdID0gcGFydHNbMF0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCdAJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJ0cmltO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBydHJpbShzdHIsIGNoYXJzKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG5cbiAgaWYgKGNoYXJzKSB7XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9SZWd1bGFyX0V4cHJlc3Npb25zI0VzY2FwaW5nXG4gICAgdmFyIHBhdHRlcm4gPSBuZXcgUmVnRXhwKFwiW1wiLmNvbmNhdChjaGFycy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpLCBcIl0rJFwiKSwgJ2cnKTtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UocGF0dGVybiwgJycpO1xuICB9IC8vIFVzZSBhIGZhc3RlciBhbmQgbW9yZSBzYWZlIHRoYW4gcmVnZXggdHJpbSBtZXRob2QgaHR0cHM6Ly9ibG9nLnN0ZXZlbmxldml0aGFuLmNvbS9hcmNoaXZlcy9mYXN0ZXItdHJpbS1qYXZhc2NyaXB0XG5cblxuICB2YXIgc3RySW5kZXggPSBzdHIubGVuZ3RoIC0gMTtcblxuICB3aGlsZSAoL1xccy8udGVzdChzdHIuY2hhckF0KHN0ckluZGV4KSkpIHtcbiAgICBzdHJJbmRleCAtPSAxO1xuICB9XG5cbiAgcmV0dXJuIHN0ci5zbGljZSgwLCBzdHJJbmRleCArIDEpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzdHJpcExvdztcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxudmFyIF9ibGFja2xpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2JsYWNrbGlzdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHN0cmlwTG93KHN0ciwga2VlcF9uZXdfbGluZXMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgdmFyIGNoYXJzID0ga2VlcF9uZXdfbGluZXMgPyAnXFxcXHgwMC1cXFxceDA5XFxcXHgwQlxcXFx4MENcXFxceDBFLVxcXFx4MUZcXFxceDdGJyA6ICdcXFxceDAwLVxcXFx4MUZcXFxceDdGJztcbiAgcmV0dXJuICgwLCBfYmxhY2tsaXN0LmRlZmF1bHQpKHN0ciwgY2hhcnMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b0Jvb2xlYW47XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRvQm9vbGVhbihzdHIsIHN0cmljdCkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuXG4gIGlmIChzdHJpY3QpIHtcbiAgICByZXR1cm4gc3RyID09PSAnMScgfHwgL150cnVlJC9pLnRlc3Qoc3RyKTtcbiAgfVxuXG4gIHJldHVybiBzdHIgIT09ICcwJyAmJiAhL15mYWxzZSQvaS50ZXN0KHN0cikgJiYgc3RyICE9PSAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9EYXRlO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0b0RhdGUoZGF0ZSkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShkYXRlKTtcbiAgZGF0ZSA9IERhdGUucGFyc2UoZGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oZGF0ZSkgPyBuZXcgRGF0ZShkYXRlKSA6IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvRmxvYXQ7XG5cbnZhciBfaXNGbG9hdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNGbG9hdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRvRmxvYXQoc3RyKSB7XG4gIGlmICghKDAsIF9pc0Zsb2F0LmRlZmF1bHQpKHN0cikpIHJldHVybiBOYU47XG4gIHJldHVybiBwYXJzZUZsb2F0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvSW50O1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0b0ludChzdHIsIHJhZGl4KSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBwYXJzZUludChzdHIsIHJhZGl4IHx8IDEwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdHJpbTtcblxudmFyIF9ydHJpbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcnRyaW1cIikpO1xuXG52YXIgX2x0cmltID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9sdHJpbVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRyaW0oc3RyLCBjaGFycykge1xuICByZXR1cm4gKDAsIF9ydHJpbS5kZWZhdWx0KSgoMCwgX2x0cmltLmRlZmF1bHQpKHN0ciwgY2hhcnMpLCBjaGFycyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZXNjYXBlO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB1bmVzY2FwZShzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mcXVvdDsvZywgJ1wiJykucmVwbGFjZSgvJiN4Mjc7L2csIFwiJ1wiKS5yZXBsYWNlKC8mbHQ7L2csICc8JykucmVwbGFjZSgvJmd0Oy9nLCAnPicpLnJlcGxhY2UoLyYjeDJGOy9nLCAnLycpLnJlcGxhY2UoLyYjeDVDOy9nLCAnXFxcXCcpLnJlcGxhY2UoLyYjOTY7L2csICdgJykucmVwbGFjZSgvJmFtcDsvZywgJyYnKTsgLy8gJmFtcDsgcmVwbGFjZW1lbnQgaGFzIHRvIGJlIHRoZSBsYXN0IG9uZSB0byBwcmV2ZW50XG4gIC8vIGJ1Z3Mgd2l0aCBpbnRlcm1lZGlhdGUgc3RyaW5ncyBjb250YWluaW5nIGVzY2FwZSBzZXF1ZW5jZXNcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdmFsaWRhdG9yanMvdmFsaWRhdG9yLmpzL2lzc3Vlcy8xODI3XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNvNzA2NENoZWNrID0gaXNvNzA2NENoZWNrO1xuZXhwb3J0cy5sdWhuQ2hlY2sgPSBsdWhuQ2hlY2s7XG5leHBvcnRzLnJldmVyc2VNdWx0aXBseUFuZFN1bSA9IHJldmVyc2VNdWx0aXBseUFuZFN1bTtcbmV4cG9ydHMudmVyaG9lZmZDaGVjayA9IHZlcmhvZWZmQ2hlY2s7XG5cbi8qKlxuICogQWxnb3JpdGhtaWMgdmFsaWRhdGlvbiBmdW5jdGlvbnNcbiAqIE1heSBiZSB1c2VkIGFzIGlzIG9yIGltcGxlbWVudGVkIGluIHRoZSB3b3JrZmxvdyBvZiBvdGhlciB2YWxpZGF0b3JzLlxuICovXG5cbi8qXG4gKiBJU08gNzA2NCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiBDYWxsZWQgd2l0aCBhIHN0cmluZyBvZiBudW1iZXJzIChpbmNsLiBjaGVjayBkaWdpdClcbiAqIHRvIHZhbGlkYXRlIGFjY29yZGluZyB0byBJU08gNzA2NCAoTU9EIDExLCAxMCkuXG4gKi9cbmZ1bmN0aW9uIGlzbzcwNjRDaGVjayhzdHIpIHtcbiAgdmFyIGNoZWNrdmFsdWUgPSAxMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBjaGVja3ZhbHVlID0gKHBhcnNlSW50KHN0cltpXSwgMTApICsgY2hlY2t2YWx1ZSkgJSAxMCA9PT0gMCA/IDEwICogMiAlIDExIDogKHBhcnNlSW50KHN0cltpXSwgMTApICsgY2hlY2t2YWx1ZSkgJSAxMCAqIDIgJSAxMTtcbiAgfVxuXG4gIGNoZWNrdmFsdWUgPSBjaGVja3ZhbHVlID09PSAxID8gMCA6IDExIC0gY2hlY2t2YWx1ZTtcbiAgcmV0dXJuIGNoZWNrdmFsdWUgPT09IHBhcnNlSW50KHN0clsxMF0sIDEwKTtcbn1cbi8qXG4gKiBMdWhuIChtb2QgMTApIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIENhbGxlZCB3aXRoIGEgc3RyaW5nIG9mIG51bWJlcnMgKGluY2wuIGNoZWNrIGRpZ2l0KVxuICogdG8gdmFsaWRhdGUgYWNjb3JkaW5nIHRvIHRoZSBMdWhuIGFsZ29yaXRobS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGx1aG5DaGVjayhzdHIpIHtcbiAgdmFyIGNoZWNrc3VtID0gMDtcbiAgdmFyIHNlY29uZCA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBzdHIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoc2Vjb25kKSB7XG4gICAgICB2YXIgcHJvZHVjdCA9IHBhcnNlSW50KHN0cltpXSwgMTApICogMjtcblxuICAgICAgaWYgKHByb2R1Y3QgPiA5KSB7XG4gICAgICAgIC8vIHN1bSBkaWdpdHMgb2YgcHJvZHVjdCBhbmQgYWRkIHRvIGNoZWNrc3VtXG4gICAgICAgIGNoZWNrc3VtICs9IHByb2R1Y3QudG9TdHJpbmcoKS5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKTtcbiAgICAgICAgfSkucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGEgKyBiO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoZWNrc3VtICs9IHByb2R1Y3Q7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrc3VtICs9IHBhcnNlSW50KHN0cltpXSwgMTApO1xuICAgIH1cblxuICAgIHNlY29uZCA9ICFzZWNvbmQ7XG4gIH1cblxuICByZXR1cm4gY2hlY2tzdW0gJSAxMCA9PT0gMDtcbn1cbi8qXG4gKiBSZXZlcnNlIFRJTiBtdWx0aXBsaWNhdGlvbiBhbmQgc3VtbWF0aW9uIGhlbHBlciBmdW5jdGlvblxuICogQ2FsbGVkIHdpdGggYW4gYXJyYXkgb2Ygc2luZ2xlLWRpZ2l0IGludGVnZXJzIGFuZCBhIGJhc2UgbXVsdGlwbGllclxuICogdG8gY2FsY3VsYXRlIHRoZSBzdW0gb2YgdGhlIGRpZ2l0cyBtdWx0aXBsaWVkIGluIHJldmVyc2UuXG4gKiBOb3JtYWxseSB1c2VkIGluIHZhcmlhdGlvbnMgb2YgTU9EIDExIGFsZ29yaXRobWljIGNoZWNrcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJldmVyc2VNdWx0aXBseUFuZFN1bShkaWdpdHMsIGJhc2UpIHtcbiAgdmFyIHRvdGFsID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZ2l0cy5sZW5ndGg7IGkrKykge1xuICAgIHRvdGFsICs9IGRpZ2l0c1tpXSAqIChiYXNlIC0gaSk7XG4gIH1cblxuICByZXR1cm4gdG90YWw7XG59XG4vKlxuICogVmVyaG9lZmYgdmFsaWRhdGlvbiBoZWxwZXIgZnVuY3Rpb25cbiAqIENhbGxlZCB3aXRoIGEgc3RyaW5nIG9mIG51bWJlcnNcbiAqIHRvIHZhbGlkYXRlIGFjY29yZGluZyB0byB0aGUgVmVyaG9lZmYgYWxnb3JpdGhtLlxuICovXG5cblxuZnVuY3Rpb24gdmVyaG9lZmZDaGVjayhzdHIpIHtcbiAgdmFyIGRfdGFibGUgPSBbWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDldLCBbMSwgMiwgMywgNCwgMCwgNiwgNywgOCwgOSwgNV0sIFsyLCAzLCA0LCAwLCAxLCA3LCA4LCA5LCA1LCA2XSwgWzMsIDQsIDAsIDEsIDIsIDgsIDksIDUsIDYsIDddLCBbNCwgMCwgMSwgMiwgMywgOSwgNSwgNiwgNywgOF0sIFs1LCA5LCA4LCA3LCA2LCAwLCA0LCAzLCAyLCAxXSwgWzYsIDUsIDksIDgsIDcsIDEsIDAsIDQsIDMsIDJdLCBbNywgNiwgNSwgOSwgOCwgMiwgMSwgMCwgNCwgM10sIFs4LCA3LCA2LCA1LCA5LCAzLCAyLCAxLCAwLCA0XSwgWzksIDgsIDcsIDYsIDUsIDQsIDMsIDIsIDEsIDBdXTtcbiAgdmFyIHBfdGFibGUgPSBbWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDldLCBbMSwgNSwgNywgNiwgMiwgOCwgMywgMCwgOSwgNF0sIFs1LCA4LCAwLCAzLCA3LCA5LCA2LCAxLCA0LCAyXSwgWzgsIDksIDEsIDYsIDAsIDQsIDMsIDUsIDIsIDddLCBbOSwgNCwgNSwgMywgMSwgMiwgNiwgOCwgNywgMF0sIFs0LCAyLCA4LCA2LCA1LCA3LCAzLCA5LCAwLCAxXSwgWzIsIDcsIDksIDMsIDgsIDAsIDYsIDQsIDEsIDVdLCBbNywgMCwgNCwgNiwgOSwgMSwgMywgMiwgNSwgOF1dOyAvLyBDb3B5ICh0byBwcmV2ZW50IHJlcGxhY2VtZW50KSBhbmQgcmV2ZXJzZVxuXG4gIHZhciBzdHJfY29weSA9IHN0ci5zcGxpdCgnJykucmV2ZXJzZSgpLmpvaW4oJycpO1xuICB2YXIgY2hlY2tzdW0gPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyX2NvcHkubGVuZ3RoOyBpKyspIHtcbiAgICBjaGVja3N1bSA9IGRfdGFibGVbY2hlY2tzdW1dW3BfdGFibGVbaSAlIDhdW3BhcnNlSW50KHN0cl9jb3B5W2ldLCAxMCldXTtcbiAgfVxuXG4gIHJldHVybiBjaGVja3N1bSA9PT0gMDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFzc2VydFN0cmluZztcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBhc3NlcnRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIGlzU3RyaW5nID0gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCBpbnB1dCBpbnN0YW5jZW9mIFN0cmluZztcblxuICBpZiAoIWlzU3RyaW5nKSB7XG4gICAgdmFyIGludmFsaWRUeXBlID0gX3R5cGVvZihpbnB1dCk7XG5cbiAgICBpZiAoaW5wdXQgPT09IG51bGwpIGludmFsaWRUeXBlID0gJ251bGwnO2Vsc2UgaWYgKGludmFsaWRUeXBlID09PSAnb2JqZWN0JykgaW52YWxpZFR5cGUgPSBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhIHN0cmluZyBidXQgcmVjZWl2ZWQgYSBcIi5jb25jYXQoaW52YWxpZFR5cGUpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBpbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzKGFyciwgdmFsKSB7XG4gIHJldHVybiBhcnIuc29tZShmdW5jdGlvbiAoYXJyVmFsKSB7XG4gICAgcmV0dXJuIHZhbCA9PT0gYXJyVmFsO1xuICB9KTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IGluY2x1ZGVzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBtZXJnZTtcblxuZnVuY3Rpb24gbWVyZ2UoKSB7XG4gIHZhciBvYmogPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZGVmYXVsdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICBmb3IgKHZhciBrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICBpZiAodHlwZW9mIG9ialtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgb2JqW2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG11bHRpbGluZVJlZ2V4cDtcblxuLyoqXG4gKiBCdWlsZCBSZWdFeHAgb2JqZWN0IGZyb20gYW4gYXJyYXlcbiAqIG9mIG11bHRpcGxlL211bHRpLWxpbmUgcmVnZXhwIHBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGFydHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmbGFnc1xuICogQHJldHVybiB7b2JqZWN0fSAtIFJlZ0V4cCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gbXVsdGlsaW5lUmVnZXhwKHBhcnRzLCBmbGFncykge1xuICB2YXIgcmVnZXhwQXNTdHJpbmdMaXRlcmFsID0gcGFydHMuam9pbignJyk7XG4gIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4cEFzU3RyaW5nTGl0ZXJhbCwgZmxhZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b1N0cmluZztcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiB0b1N0cmluZyhpbnB1dCkge1xuICBpZiAoX3R5cGVvZihpbnB1dCkgPT09ICdvYmplY3QnICYmIGlucHV0ICE9PSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dC50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5wdXQgPSBpbnB1dC50b1N0cmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dCA9ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpbnB1dCA9PT0gbnVsbCB8fCB0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnIHx8IGlzTmFOKGlucHV0KSAmJiAhaW5wdXQubGVuZ3RoKSB7XG4gICAgaW5wdXQgPSAnJztcbiAgfVxuXG4gIHJldHVybiBTdHJpbmcoaW5wdXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB3aGl0ZWxpc3Q7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHdoaXRlbGlzdChzdHIsIGNoYXJzKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiW15cIi5jb25jYXQoY2hhcnMsIFwiXStcIiksICdnJyksICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiY29uc3QgJGNvbXBvbmVudCA9IGNvbXBvbmVudE5hbWUgPT4gJChgW2RhdGEtY29tcG9uZW50PVwiJHtjb21wb25lbnROYW1lfVwiXWApO1xuXG5mdW5jdGlvbiAkYWN0aW9uKGFjdGlvbk5hbWUsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgdGhpcy4kdGFyZ2V0LmRlbGVnYXRlKGBbZGF0YS1hY3Rpb249XCIke2FjdGlvbk5hbWV9XCJdYCwgZXZlbnROYW1lLCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydCB7ICRjb21wb25lbnQsICRhY3Rpb24gfTtcbiIsIi8qKlxuICog7J6R7ISx7J6QOiDsnbTsl7DqtoxcbiAqIOyDneyEseydvDogMjAyMS4xMi4yMVxuICog7IiY7KCV7J28OiAyMDIxLjEyLjIxXG4gKiDshKTrqoU6IOynhO2WiSDsg4Htmansl5Ag65Sw66W4IOyDge2DnOqwkiDtkZzquLBcbiAqL1xuXG4vKipcbiAqIFVJIFtJTklUXVxuICogU2VsZWN0RmlsZTogT05cbiAqIFN0YXJ0Um93OiBPRkYgc2V0IDBcbiAqIENvbnRyb2xCb3g6IOy0iOq4sO2ZlCBPTiwg7ISk7KCVIE9OXG4gKiBEYXRhQ291bnQ6IHNldCAwXG4gKiBEYXRhR3JpZDogZGlzcGxheSBudWxsXG4gKiBSZXN1bHRHcmlkOiBkaXNwbGF5IG5vbmVcbiAqIFJlcGFpckdyaWQgOiBkaXNwbGF5IG5vbmVcbiAqL1xuY29uc3QgSU5JVCA9ICdpbml0JzsgLy8g7LSI6riw7ZmUXG4vKipcbiAqIFVJIFtMT0FEXVxuICogU2VsZWN0RmlsZTogT0ZGXG4gKiBTdGFydFJvdzogT05cbiAqIENvbnRyb2xCb3g6IOy0iOq4sO2ZlCBPTiwg7ISk7KCVIE9OXG4gKiBEYXRhQ291bnQ6IENPVU5UXG4gKiBEYXRhR3JpZDogU0hPVyAo6riw67O47Zek642UKVxuICogUmVzdWx0R3JpZDogZGlzcGxheSBub25lXG4gKiBSZXBhaXJHcmlkIDogZGlzcGxheSBub25lXG4gKi9cbmNvbnN0IExPQUQgPSAnbG9hZCc7IC8vIO2MjOydvOuhnOuTnFxuLyoqXG4gKiBVSSBbUkVBRFldXG4gKiBTZWxlY3RGaWxlOiBPRkZcbiAqIFN0YXJ0Um93OiBPRkZcbiAqIENvbnRyb2xCb3g6IOynhOuLqCBPTiwg7LSI6riw7ZmUIE9OLCDshKTsoJUgT05cbiAqIERhdGFDb3VudDogQ09VTlRcbiAqIERhdGFHcmlkOiBTSE9XICjsmLXshZjtl6TrjZQpXG4gKiBSZXN1bHRHcmlkOiBkaXNwbGF5IG5vbmVcbiAqIFJlcGFpckdyaWQgOiBkaXNwbGF5IG5vbmVcbiAqL1xuY29uc3QgUkVBRFkgPSAncmVhZHknOyAvLyDsp4Tri6gg64yA6riwXG4vKipcbiAqIFVJIFtESUFHXVxuICogU2VsZWN0RmlsZTogT0ZGXG4gKiBTdGFydFJvdzogT0ZGXG4gKiBDb250cm9sQm94OiDsp4Tri6ggT0ZGLCDsoJXruYQgT04sIOuztOqzoOyEnCBPTiwg7LSI6riw7ZmUIE9OLCDshKTsoJUgT05cbiAqIERhdGFDb3VudDogQ09VTlRcbiAqIERhdGFHcmlkOiBTSE9XICjsmLXshZjtl6TrjZQpXG4gKiBSZXN1bHRHcmlkOiBTSE9XXG4gKiBSZXBhaXJHcmlkIDogZGlzcGxheSBub25lXG4gKi9cbmNvbnN0IERJQUcgPSAnZGlhZyc7IC8vIOynhOuLqFxuLyoqXG4gKiBVSSBbUkVQQUlSXVxuICogU2VsZWN0RmlsZTogT0ZGXG4gKiBTdGFydFJvdzogT0ZGXG4gKiBDb250cm9sQm94OiDsp4Tri6ggT0ZGLCDsoJXruYQgT0ZGLCDrs7Tqs6DshJwgT04sIOy0iOq4sO2ZlCBPTiwg7ISk7KCVIE9OXG4gKiBEYXRhQ291bnQ6IENPVU5UXG4gKiBEYXRhR3JpZDogU0hPVyAo7Ji17IWY7Zek642UKVxuICogUmVzdWx0R3JpZDogZGlzcGxheSBub25lXG4gKiBSZXBhaXJHcmlkIDogU0hPVyAo6riw67O47Zek642UKVxuICovXG5jb25zdCBSRVBBSVIgPSAncmVwYWlyJzsgLy8g7KCV67mEXG5cbmNvbnN0IHByb2dyZXNzS1IgPSB7XG4gIGluaXQ6ICfstIjquLDtmZQnLFxuICBsb2FkOiAn66Gc65OcJyxcbiAgcmVhZHk6ICfspIDruYQnLFxuICBkaWFnOiAn7KeE64uoJyxcbiAgcmVwYWlyOiAn7KCV67mEJyxcbn07XG5cbmV4cG9ydCB7IElOSVQsIExPQUQsIFJFQURZLCBESUFHLCBSRVBBSVIsIHByb2dyZXNzS1IgfTtcbiIsImxldCBjdXJyZW50T2JzZXJ2ZXIgPSBudWxsO1xuXG5jb25zdCBkZWJvdW5jZUZyYW1lID0gY2FsbGJhY2sgPT4ge1xuICBsZXQgY3VycmVudENhbGxiYWNrID0gLTE7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoY3VycmVudENhbGxiYWNrKTtcbiAgICBjdXJyZW50Q2FsbGJhY2sgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spO1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IG9ic2VydmUgPSBmbiA9PiB7XG4gIGN1cnJlbnRPYnNlcnZlciA9IGRlYm91bmNlRnJhbWUoZm4pO1xuICBmbigpO1xuICBjdXJyZW50T2JzZXJ2ZXIgPSBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IG9ic2VydmFibGUgPSBvYmogPT4ge1xuICBjb25zdCBvYnNlcnZlck1hcCA9IE9iamVjdC5rZXlzKG9iaikucmVkdWNlKChtYXAsIGtleSkgPT4ge1xuICAgIG1hcFtrZXldID0gbmV3IFNldCgpO1xuICAgIHJldHVybiBtYXA7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gbmV3IFByb3h5KG9iaiwge1xuICAgIGdldDogKHRhcmdldCwgbmFtZSkgPT4ge1xuICAgICAgaWYgKGN1cnJlbnRPYnNlcnZlcikgb2JzZXJ2ZXJNYXBbbmFtZV0uYWRkKGN1cnJlbnRPYnNlcnZlcik7XG4gICAgICByZXR1cm4gdGFyZ2V0W25hbWVdO1xuICAgIH0sXG4gICAgc2V0OiAodGFyZ2V0LCBuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHRhcmdldFtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHRhcmdldFtuYW1lXSkgPT09IEpTT04uc3RyaW5naWZ5KHZhbHVlKSkgcmV0dXJuIHRydWU7XG4gICAgICB0YXJnZXRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIG9ic2VydmVyTWFwW25hbWVdLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICB9KTtcbn07XG4iLCJpbXBvcnQgeyBvYnNlcnZhYmxlLCBvYnNlcnZlIH0gZnJvbSAnLi9vYnNlcnZlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudCB7XG4gICR0YXJnZXQ7XG4gIHBhcmVudDtcbiAgc3RhdGU7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIE9iamVjdC5lbnRyaWVzKGNvbmZpZykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0dXAoKTtcbiAgfVxuXG4gIGluaXRTdGF0ZSgpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBzZXR1cCgpIHtcbiAgICB0aGlzLnN0YXRlID0gb2JzZXJ2YWJsZSh0aGlzLmluaXRTdGF0ZSgpKTtcbiAgICBvYnNlcnZlKCgpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB0aGlzLnNldEV2ZW50cygpO1xuICAgICAgdGhpcy5tb3VudGVkKCk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRFdmVudHMoKSB7fVxuXG4gIG1vdW50ZWQoKSB7fVxuXG4gIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIHRoaXMuc3RhdGUgPSB7IC4uLnRoaXMuc3RhdGUsIC4uLm5leHRTdGF0ZSB9O1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy4kdGFyZ2V0Lmh0bWwodGhpcy50ZW1wbGF0ZSgpKTtcbiAgfVxuXG4gIHRlbXBsYXRlKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuIiwiaW1wb3J0IHsgJGFjdGlvbiB9IGZyb20gJ0AvdXRpbHMvc2VsZWN0b3IuanMnO1xuaW1wb3J0IHsgSU5JVCB9IGZyb20gJ0AvY29uc3RhbnRzL3Byb2dyZXNzLmpzJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnQC9jb3JlL0NvbXBvbmVudC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdEZpbGUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBpbml0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2dyZXNzOiBJTklULFxuICAgIH07XG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG4gICAgLy8g7YyM7J28IOuhnOuTnFxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnZmlsZS1sb2FkJywgJ2NoYW5nZScsICh7IHRhcmdldDogeyBmaWxlcyB9IH0pID0+IHtcbiAgICAgIGNvbnN0IFtmaWxlXSA9IGZpbGVzO1xuICAgICAgdGhpcy5wYXJlbnQubG9hZENzdkZpbGUoZmlsZSk7XG4gICAgfSk7XG5cbiAgICAvLyDtjIzsnbwg7ISg7YOdXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdmaWxlLXNlbGVjdCcsICdjbGljaycsICgpID0+IHtcbiAgICAgICQoJyNmb3JtLWZpbGUnKS5vbignY2xpY2snKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRlbXBsYXRlKCkge1xuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgaW5wdXQtZ3JvdXAtc20gbWItMVwiPlxuICAgICAgICA8aW5wdXQgZGF0YS1hY3Rpb249XCJmaWxlLWxvYWRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJmaWxlXCIgaWQ9XCJmb3JtLWZpbGVcIiBhY2NlcHQ9XCIuY3N2XCIvPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgZGF0YS1hY3Rpb249XCJmaWxlLXNlbGVjdFwiXG4gICAgICAgICAgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeVwiXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgaWQ9XCJzZWxlY3QtZmlsZVwiXG4gICAgICAgID5cbiAgICAgICAgICDtjIzsnbzshKDtg51cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy5zdGF0ZS5wcm9ncmVzcztcbiAgICBpZiAocHJvZ3Jlc3MgIT09IElOSVQpIHtcbiAgICAgIHRoaXMuJHRhcmdldC5maW5kKCcjZm9ybS1maWxlLCAjc2VsZWN0LWZpbGUnKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiR0YXJnZXQuaHRtbCh0aGlzLnRlbXBsYXRlKCkpO1xuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJ0AvY29yZS9Db21wb25lbnQuanMnO1xuaW1wb3J0IHsgJGFjdGlvbiB9IGZyb20gJ0AvdXRpbHMvc2VsZWN0b3IuanMnO1xuaW1wb3J0IHsgSU5JVCwgTE9BRCB9IGZyb20gJ0AvY29uc3RhbnRzL3Byb2dyZXNzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhcnRSb3cgZXh0ZW5kcyBDb21wb25lbnQge1xuICBpbml0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2dyZXNzOiBJTklULFxuICAgIH07XG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdzdGFydC1yb3cnLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLnBhcmVudC5zZXRTdGFydFJvdygkKCcjc3RhcnQtcm93JykudmFsKCkpO1xuICAgIH0pO1xuICB9XG5cbiAgdGVtcGxhdGUoKSB7XG4gICAgY29uc3QgeyBwcm9ncmVzcyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgaW5wdXQtZ3JvdXAtc21cIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+7IucIOyekSDtlok8L3NwYW4+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgIHZhbHVlPVwiMFwiXG4gICAgICAgICAgbWluPVwiMFwiXG4gICAgICAgICAgaWQ9XCJzdGFydC1yb3dcIlxuICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGRhdGEtYWN0aW9uPVwic3RhcnQtcm93XCJcbiAgICAgICAgICBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5XCJcbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAke3Byb2dyZXNzID09PSBMT0FEID8gJycgOiAnZGlzYWJsZWQnfVxuICAgICAgICA+XG4gICAgICAgICAg7Iuc7J6RXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICdAL2NvcmUvQ29tcG9uZW50LmpzJztcbmltcG9ydCB7IERJQUcsIElOSVQsIFJFQURZLCBSRVBBSVIgfSBmcm9tICdAL2NvbnN0YW50cy9wcm9ncmVzcy5qcyc7XG5pbXBvcnQgeyAkYWN0aW9uIH0gZnJvbSAnQC91dGlscy9zZWxlY3Rvci5qcyc7XG5pbXBvcnQgeyB1bnBhcnNlIH0gZnJvbSAncGFwYXBhcnNlJztcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9sQm94IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgaW5pdFN0YXRlKCkge1xuICAgIHJldHVybiB7IHByb2dyZXNzOiBJTklUIH07XG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG4gICAgLy8g7KeE64uoXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdkaWFnJywgJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5wYXJlbnQuZGlhZ25vc2lzKCk7XG4gICAgfSk7XG5cbiAgICAvLyDstIjquLDtmZRcbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ3Jlc2V0JywgJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5wYXJlbnQucmVzZXQoKTtcbiAgICB9KTtcblxuICAgIC8vIOygleu5hFxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAncmVwYWlyJywgJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5wYXJlbnQucmVwYWlyKCk7XG4gICAgfSk7XG5cbiAgICAvLyDsp4Tri6jtjIzsnbwg64uk7Jq066Gc65OcXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdkaWFnZmlsZS1kb3dubG9hZCcsICdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMuZG93bmxvYWRDc3YoKTtcbiAgICB9KTtcblxuICAgIC8vIOyEpOyglVxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnc2V0dGluZycsICdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMucGFyZW50LnNldHRpbmdNb2RhbC5zaG93KCk7XG4gICAgfSk7XG4gIH1cblxuICBkb3dubG9hZENzdigpIHtcbiAgICBjb25zdCB7IGNvbHVtbnMsIGRhdGFWaWV3IH0gPSB0aGlzLnBhcmVudC5yZXBhaXJHcmlkLnN0YXRlO1xuICAgIGNvbnN0IGZpZWxkcyA9IGNvbHVtbnMuc2xpY2UoMSkubWFwKCh7IG5hbWUgfSkgPT4gbmFtZSk7XG4gICAgY29uc3QgY3N2RGF0YSA9IHVucGFyc2Uoe1xuICAgICAgZmllbGRzLFxuICAgICAgZGF0YTogZGF0YVZpZXcuZ2V0SXRlbXMoKSxcbiAgICB9KTtcbiAgICBjb25zdCBjc3YgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzB4ZWYsIDB4YmIsIDB4YmZdKSwgY3N2RGF0YV0sIHtcbiAgICAgIHR5cGU6ICd0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04OycsXG4gICAgfSk7XG4gICAgY29uc3QgY3N2VVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChjc3YpO1xuICAgIGNvbnN0IGFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFuY2hvcik7XG4gICAgYW5jaG9yLnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmUnO1xuICAgIGFuY2hvci5ocmVmID0gY3N2VVJMO1xuICAgIGFuY2hvci5kb3dubG9hZCA9IGDsp4Tri6jqsrDqs7wtJHtuZXcgRGF0ZSgpLmdldFRpbWUoKX0uY3N2YDtcbiAgICBhbmNob3IuY2xpY2soKTtcbiAgICAvLyBsb2NhdGlvbi5ocmVmID0gY3N2VVJMO1xuICAgIFVSTC5yZXZva2VPYmplY3RVUkwoY3N2VVJMKTtcbiAgfVxuXG4gIHRlbXBsYXRlKCkge1xuICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy5zdGF0ZS5wcm9ncmVzcztcbiAgICBjb25zdCBhY3RpdmUgPSBbXG4gICAgICBwcm9ncmVzcyA9PT0gUkVBRFkgfHwgcHJvZ3Jlc3MgPT09IERJQUcsXG4gICAgICBwcm9ncmVzcyA9PT0gRElBRyxcbiAgICAgIHByb2dyZXNzID09PSBSRVBBSVIsXG4gICAgXTtcblxuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgcm9sZT1cImdyb3VwXCI+XG4gICAgICAgIDxidXR0b24gZGF0YS1hY3Rpb249XCJyZXNldFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPuy0iOq4sO2ZlDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGRhdGEtYWN0aW9uPVwiZGlhZ1wiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tJHtcbiAgICAgICAgICBhY3RpdmVbMF0gPyAnJyA6ICdvdXRsaW5lLSdcbiAgICAgICAgfXByaW1hcnlcIiAke2FjdGl2ZVswXSA/ICcnIDogJ2Rpc2FibGVkJ30+7KeE64uoPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gZGF0YS1hY3Rpb249XCJyZXBhaXJcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLSR7XG4gICAgICAgICAgYWN0aXZlWzFdID8gJycgOiAnb3V0bGluZS0nXG4gICAgICAgIH1wcmltYXJ5XCIgJHthY3RpdmVbMV0gPyAnJyA6ICdkaXNhYmxlZCd9Puygleu5hDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGRhdGEtYWN0aW9uPVwiZGlhZ2ZpbGUtZG93bmxvYWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLSR7XG4gICAgICAgICAgYWN0aXZlWzJdID8gJycgOiAnb3V0bGluZS0nXG4gICAgICAgIH1wcmltYXJ5XCIgJHthY3RpdmVbMl0gPyAnJyA6ICdkaXNhYmxlZCd9Puygleu5hO2MjOydvDxici8+64uk7Jq066Gc65OcPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gZGF0YS1hY3Rpb249XCJzZXR0aW5nXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+7ISk7KCVPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJ0AvY29yZS9Db21wb25lbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhQ291bnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBpbml0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGFDb3VudDogMCxcbiAgICAgIGNvbHVtbkNvdW50OiAwLFxuICAgIH07XG4gIH1cblxuICBmaWx0ZXIoY291bnQpIHtcbiAgICByZXR1cm4gTnVtYmVyKGNvdW50KS50b0xvY2FsZVN0cmluZygna28tS1InKTtcbiAgfVxuXG4gIHRlbXBsYXRlKCkge1xuICAgIGNvbnN0IHsgZGF0YUNvdW50LCBjb2x1bW5Db3VudCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgaW5wdXQtZ3JvdXAtc20gbWItMVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZCBpbnB1dC1ncm91cC1zbVwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiXG4gICAgICAgICAgICA+642w7J207YSw6rG07IiYPC9zcGFuXG4gICAgICAgICAgPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgaWQ9XCJkYXRhLWNvdW50XCJcbiAgICAgICAgICByZWFkb25seVxuICAgICAgICAgIHZhbHVlPVwiJHt0aGlzLmZpbHRlcihkYXRhQ291bnQpfVwiXG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwIGlucHV0LWdyb3VwLXNtXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kIGlucHV0LWdyb3VwLXNtXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCJcbiAgICAgICAgICAgID7soITssrQg7Lus65+87IiYPC9zcGFuXG4gICAgICAgICAgPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgaWQ9XCJjb2x1bW4tY291bnRcIlxuICAgICAgICAgIHJlYWRvbmx5XG4gICAgICAgICAgdmFsdWU9XCIke3RoaXMuZmlsdGVyKGNvbHVtbkNvdW50KX1cIlxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG59XG4iLCJpbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9yZWdlbmVyYXRvclwiO1xuXG52YXIgZW1wdHlJdGVyID0gLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIF9jYWxsZWUpO1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW1wdHlMKCkge1xuICByZXR1cm4gZW1wdHlJdGVyO1xufSIsImltcG9ydCBfZ2V0SXRlcmF0b3JNZXRob2QgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9nZXQtaXRlcmF0b3ItbWV0aG9kXCI7XG5pbXBvcnQgX2dldEl0ZXJhdG9yIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvZ2V0LWl0ZXJhdG9yXCI7XG5pbXBvcnQgZW1wdHlMIGZyb20gXCIuLi9MYXp5L2VtcHR5TC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JdGVyKGl0ZXJhYmxlKSB7XG4gIHJldHVybiBpdGVyYWJsZSAmJiBfZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpID8gX2dldEl0ZXJhdG9yKGl0ZXJhYmxlKSA6IGVtcHR5TCgpO1xufSIsImltcG9ydCBfUHJvbWlzZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9wcm9taXNlXCI7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGEsIGYpIHtcbiAgcmV0dXJuIGEgaW5zdGFuY2VvZiBfUHJvbWlzZSA/IGEudGhlbihmKSA6IGYoYSk7XG59KTsiLCJpbXBvcnQgX1N5bWJvbCRmb3IgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvc3ltYm9sL2ZvclwiO1xuXG52YXIgbm9wID0gX1N5bWJvbCRmb3IoXCJub3BcIik7XG5cbmV4cG9ydCBkZWZhdWx0IG5vcDsiLCJpbXBvcnQgX1Byb21pc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvcHJvbWlzZVwiO1xuaW1wb3J0IG5vcCBmcm9tIFwiLi4vU3RyaWN0L25vcC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ28yKGFjYywgYSwgZikge1xuICByZXR1cm4gYSBpbnN0YW5jZW9mIF9Qcm9taXNlID8gYS50aGVuKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGYoYWNjLCBhKTtcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gZSA9PSBub3AgPyBhY2MgOiBfUHJvbWlzZS5yZWplY3QoZSk7XG4gIH0pIDogZihhY2MsIGEpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJpbXBvcnQgX0FycmF5JGlzQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9hcnJheS9pcy1hcnJheVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoX0FycmF5JGlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn0iLCJpbXBvcnQgX1N5bWJvbCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzL3N5bWJvbFwiO1xuaW1wb3J0IF9nZXRJdGVyYXRvck1ldGhvZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzL2dldC1pdGVyYXRvci1tZXRob2RcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIF9TeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgX2dldEl0ZXJhdG9yTWV0aG9kKGFycikgfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59IiwiaW1wb3J0IF9zbGljZUluc3RhbmNlUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9pbnN0YW5jZS9zbGljZVwiO1xuaW1wb3J0IF9BcnJheSRmcm9tIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvYXJyYXkvZnJvbVwiO1xuaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICB2YXIgX2NvbnRleHQ7XG5cbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcblxuICB2YXIgbiA9IF9zbGljZUluc3RhbmNlUHJvcGVydHkoX2NvbnRleHQgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykpLmNhbGwoX2NvbnRleHQsIDgsIC0xKTtcblxuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gX0FycmF5JGZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IF9jb25jYXRJbnN0YW5jZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL2NvbmNhdFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3VycnkoZikge1xuICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgX2NvbnRleHQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gXy5sZW5ndGggPyBmLmFwcGx5KHZvaWQgMCwgX2NvbmNhdEluc3RhbmNlUHJvcGVydHkoX2NvbnRleHQgPSBbYV0pLmNhbGwoX2NvbnRleHQsIF8pKSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfY29udGV4dDI7XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBfW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmLmFwcGx5KHZvaWQgMCwgX2NvbmNhdEluc3RhbmNlUHJvcGVydHkoX2NvbnRleHQyID0gW2FdKS5jYWxsKF9jb250ZXh0MiwgXykpO1xuICAgIH07XG4gIH07XG59IiwiaW1wb3J0IF9Qcm9taXNlIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL3Byb21pc2VcIjtcbmltcG9ydCBjdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0IHRvSXRlciBmcm9tIFwiLi90b0l0ZXIuanNcIjtcbmltcG9ydCBub3AgZnJvbSBcIi4vbm9wLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBjdXJyeShmdW5jdGlvbiB0YWtlKGwsIGl0ZXIpIHtcbiAgaWYgKGwgPCAxKSByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaXRlciA9IHRvSXRlcihpdGVyKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlY3VyKCkge1xuICAgIHZhciBjdXI7XG5cbiAgICB3aGlsZSAoIShjdXIgPSBpdGVyLm5leHQoKSkuZG9uZSkge1xuICAgICAgdmFyIGEgPSBjdXIudmFsdWU7XG5cbiAgICAgIGlmIChhIGluc3RhbmNlb2YgX1Byb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIGEudGhlbihmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiAocmVzLnB1c2goYSksIHJlcykubGVuZ3RoID09IGwgPyByZXMgOiByZWN1cigpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBlID09IG5vcCA/IHJlY3VyKCkgOiBfUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXMucHVzaChhKTtcbiAgICAgIGlmIChyZXMubGVuZ3RoID09IGwpIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfSgpO1xufSk7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHRha2UgZnJvbSBcIi4vdGFrZS5qc1wiO1xuaW1wb3J0IGdvMSBmcm9tIFwiLi9nbzEuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhlYWQoaXRlcikge1xuICByZXR1cm4gZ28xKHRha2UoMSwgaXRlciksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMSksXG4gICAgICAgIGggPSBfcmVmMlswXTtcblxuICAgIHJldHVybiBoO1xuICB9KTtcbn0iLCJpbXBvcnQgX2NvbmNhdEluc3RhbmNlUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2UvY29uY2F0XCI7XG5pbXBvcnQgX1Byb21pc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvcHJvbWlzZVwiO1xuaW1wb3J0IHRvSXRlciBmcm9tIFwiLi90b0l0ZXIuanNcIjtcbmltcG9ydCBnbzEgZnJvbSBcIi4vZ28xLmpzXCI7XG5pbXBvcnQgZ28yIGZyb20gXCIuLi9faW50ZXJuYWwvZ28yLmpzXCI7XG5pbXBvcnQgaGVhZCBmcm9tIFwiLi9oZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2UoZiwgYWNjLCBpdGVyKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9jb250ZXh0O1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiByZWR1Y2UuYXBwbHkodm9pZCAwLCBfY29uY2F0SW5zdGFuY2VQcm9wZXJ0eShfY29udGV4dCA9IFtmXSkuY2FsbChfY29udGV4dCwgXykpO1xuICB9O1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSByZXR1cm4gcmVkdWNlKGYsIGhlYWQoaXRlciA9IHRvSXRlcihhY2MpKSwgaXRlcik7XG4gIGl0ZXIgPSB0b0l0ZXIoaXRlcik7XG4gIHJldHVybiBnbzEoYWNjLCBmdW5jdGlvbiByZWN1cihhY2MpIHtcbiAgICB2YXIgY3VyO1xuXG4gICAgd2hpbGUgKCEoY3VyID0gaXRlci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIGFjYyA9IGdvMihhY2MsIGN1ci52YWx1ZSwgZik7XG4gICAgICBpZiAoYWNjIGluc3RhbmNlb2YgX1Byb21pc2UpIHJldHVybiBhY2MudGhlbihyZWN1cik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChhLCBmKSB7XG4gIHJldHVybiBmKGEpO1xufSk7IiwiaW1wb3J0IHJlZHVjZSBmcm9tIFwiLi9yZWR1Y2UuanNcIjtcbmltcG9ydCBnbzFTeW5jIGZyb20gXCIuLi9faW50ZXJuYWwvZ28xU3luYy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ28oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIF9bX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gcmVkdWNlKGdvMVN5bmMsIF8pO1xufSIsImltcG9ydCBfc2xpY2VJbnN0YW5jZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL3NsaWNlXCI7XG5pbXBvcnQgX0FycmF5JGZyb20gZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvYXJyYXkvZnJvbVwiO1xuaW1wb3J0IF9TeW1ib2wgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvc3ltYm9sXCI7XG5pbXBvcnQgX2dldEl0ZXJhdG9yTWV0aG9kIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvZ2V0LWl0ZXJhdG9yLW1ldGhvZFwiO1xuaW1wb3J0IF9BcnJheSRpc0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2FycmF5L2lzLWFycmF5XCI7XG5pbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9yZWdlbmVyYXRvclwiO1xuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgX1N5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfZ2V0SXRlcmF0b3JNZXRob2QobykgfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKF9BcnJheSRpc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgdmFyIF9jb250ZXh0MjsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gX3NsaWNlSW5zdGFuY2VQcm9wZXJ0eShfY29udGV4dDIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykpLmNhbGwoX2NvbnRleHQyLCA4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBfQXJyYXkkZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5pbXBvcnQgY3VycnkgZnJvbSBcIi4uL1N0cmljdC9jdXJyeS5qc1wiO1xuaW1wb3J0IGdvMSBmcm9tIFwiLi4vU3RyaWN0L2dvMS5qc1wiO1xuaW1wb3J0IHRvSXRlciBmcm9tIFwiLi4vU3RyaWN0L3RvSXRlci5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgY3VycnkoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gbWFwTChmLCBpdGVyKSB7XG4gIHZhciBfaXRlcmF0b3IsIF9zdGVwLCBhO1xuXG4gIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gbWFwTCQoX2NvbnRleHQpIHtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodG9JdGVyKGl0ZXIpKTtcbiAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTtcblxuICAgICAgICAgIF9pdGVyYXRvci5zKCk7XG5cbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGlmICgoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lKSB7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGEgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNztcbiAgICAgICAgICByZXR1cm4gZ28xKGEsIGYpO1xuXG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgX2NvbnRleHQucHJldiA9IDExO1xuICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbXCJjYXRjaFwiXSgxKTtcblxuICAgICAgICAgIF9pdGVyYXRvci5lKF9jb250ZXh0LnQwKTtcblxuICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNDtcblxuICAgICAgICAgIF9pdGVyYXRvci5mKCk7XG5cbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDE0KTtcblxuICAgICAgICBjYXNlIDE3OlxuICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIG1hcEwsIG51bGwsIFtbMSwgMTEsIDE0LCAxN11dKTtcbn0pKTsiLCJpbXBvcnQgdGFrZSBmcm9tIFwiLi90YWtlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0YWtlQWxsKGl0ZXIpIHtcbiAgcmV0dXJuIHRha2UoSW5maW5pdHksIGl0ZXIpO1xufSIsImltcG9ydCBtYXBMIGZyb20gXCIuLi9MYXp5L21hcEwuanNcIjtcbmltcG9ydCBjdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0IHRha2VBbGwgZnJvbSBcIi4vdGFrZUFsbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgY3VycnkoZnVuY3Rpb24gbWFwKGYsIGl0ZXIpIHtcbiAgcmV0dXJuIHRha2VBbGwobWFwTChmLCBpdGVyKSk7XG59KTsiLCJleHBvcnQgY29uc3QgZmV0Y2hTZXR0aW5ncyA9ICgpID0+IHtcbiAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ29kcS1zZXR0aW5nJykpID8/IHt9O1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVNldHRpbmdzID0gbmV4dFNldHRpbmdzID0+IHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBmZXRjaFNldHRpbmdzKCk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdvZHEtc2V0dGluZycsIEpTT04uc3RyaW5naWZ5KHsgLi4uc2V0dGluZ3MsIC4uLm5leHRTZXR0aW5ncyB9KSk7XG59O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICdAL2NvcmUvQ29tcG9uZW50LmpzJztcbmltcG9ydCB7IGZldGNoU2V0dGluZ3MgfSBmcm9tICdAL3V0aWxzL2xvY2FsU3RvcmFnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyaWQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBpbml0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgZ3JpZDogbnVsbCxcbiAgICAgIGRhdGFWaWV3OiBudWxsLFxuICAgICAgZ3JpZElkOiAnJyxcbiAgICB9O1xuICB9XG5cbiAgc2V0R3JpZE9wdGlvbnMoKSB7XG4gICAgY29uc3QgeyBzZXRDb2xsV2lkdGggPSAnJyB9ID0gZmV0Y2hTZXR0aW5ncygpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVuYWJsZUNlbGxOYXZpZ2F0aW9uOiB0cnVlLFxuICAgICAgZm9yY2VGaXRDb2x1bW5zOiAhc2V0Q29sbFdpZHRoLCAvLyBjZWxsIOuEiOu5hCDrp57stpTquLBcbiAgICAgIGhlYWRlclJvd0hlaWdodDogMzAsIC8vIO2XpOuNlCDrhpLsnbRcbiAgICAgIGV4cGxpY2l0SW5pdGlhbGl6YXRpb246IHRydWUsIC8vIOydmOuPhOyggSDstIjquLDtmZQgLT4g7Zek642UIOydtOuypO2KuFxuICAgIH07XG4gIH1cblxuICBzZXRHcmlkRXZlbnRzKCkge1xuICAgIGNvbnN0IHsgZ3JpZCwgZGF0YVZpZXcgfSA9IHRoaXMuc3RhdGU7XG4gICAgZGF0YVZpZXcub25Sb3dDb3VudENoYW5nZWQuc3Vic2NyaWJlKF8gPT4ge1xuICAgICAgZ3JpZC51cGRhdGVSb3dDb3VudCgpO1xuICAgICAgZ3JpZC5yZW5kZXIoKTtcbiAgICB9KTtcblxuICAgIGRhdGFWaWV3Lm9uUm93c0NoYW5nZWQuc3Vic2NyaWJlKChfLCB7IHJvd3MgfSkgPT4ge1xuICAgICAgZ3JpZC5pbnZhbGlkYXRlUm93cyhyb3dzKTtcbiAgICAgIGdyaWQucmVuZGVyKCk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXJHcmlkKG9yaWdpbmFsRGF0YSwgc3RhcnRSb3cgPSAwKSB7XG4gICAgY29uc3QgeyBjb2x1bW5zLCBkYXRhIH0gPSB0aGlzLnNsaWNlRGF0YUNvbHVtbnMob3JpZ2luYWxEYXRhLCBzdGFydFJvdyk7XG4gICAgY29uc3QgeyBncmlkSWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgU2xpY2suRGF0YS5EYXRhVmlldygpO1xuICAgIGNvbnN0IGdyaWQgPSBuZXcgU2xpY2suR3JpZChgIyR7Z3JpZElkfWAsIGRhdGFWaWV3LCBjb2x1bW5zLCB0aGlzLnNldEdyaWRPcHRpb25zKCkpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBncmlkLCBkYXRhVmlldyB9KTtcbiAgICB0aGlzLnNldEdyaWRFdmVudHMoKTtcbiAgICBncmlkLmluaXQoKTtcbiAgICBkYXRhVmlldy5zZXRJdGVtcyhkYXRhKTtcbiAgfVxuXG4gIHNsaWNlRGF0YUNvbHVtbnMob3JpZ2luYWxEYXRhLCBzdGFydCkge1xuICAgIHN0YXJ0ID0gTnVtYmVyKHN0YXJ0KTtcblxuICAgIGNvbnN0IHsgc2V0Q29sbFdpZHRoID0gJycgfSA9IGZldGNoU2V0dGluZ3MoKTtcblxuICAgIGNvbnN0IGNvbHVtbnMgPSAhc2V0Q29sbFdpZHRoXG4gICAgICA/IG9yaWdpbmFsRGF0YVtzdGFydF0ubWFwKGZpZWxkID0+ICh7XG4gICAgICAgICAgaWQ6IGZpZWxkLnJlcGxhY2VBbGwoJyAnLCAnJykucmVwbGFjZSgvW1xcYlxcdFxcdlxcblxcclxcZlxcJ1xcXCJcXDBdL2dpLCAnJyksXG4gICAgICAgICAgbmFtZTogZmllbGQsXG4gICAgICAgICAgZmllbGQ6IGZpZWxkLnJlcGxhY2VBbGwoJyAnLCAnJykucmVwbGFjZSgvW1xcYlxcdFxcdlxcblxcclxcZlxcJ1xcXCJcXDBdL2dpLCAnJyksXG4gICAgICAgIH0pKVxuICAgICAgOiBvcmlnaW5hbERhdGFbc3RhcnRdLm1hcChmaWVsZCA9PiAoe1xuICAgICAgICAgIGlkOiBmaWVsZC5yZXBsYWNlQWxsKCcgJywgJycpLnJlcGxhY2UoL1tcXGJcXHRcXHZcXG5cXHJcXGZcXCdcXFwiXFwwXS9naSwgJycpLFxuICAgICAgICAgIG5hbWU6IGZpZWxkLFxuICAgICAgICAgIGZpZWxkOiBmaWVsZC5yZXBsYWNlQWxsKCcgJywgJycpLnJlcGxhY2UoL1tcXGJcXHRcXHZcXG5cXHJcXGZcXCdcXFwiXFwwXS9naSwgJycpLFxuICAgICAgICAgIHdpZHRoOiBOdW1iZXIoc2V0Q29sbFdpZHRoKSxcbiAgICAgICAgfSkpO1xuXG4gICAgY29uc3QgZGF0YSA9IG9yaWdpbmFsRGF0YS5zcGxpY2Uoc3RhcnQgKyAxKS5tYXAoKGl0ZW1BcnIsIGlkeCkgPT4ge1xuICAgICAgY29uc3QgbmV3SXRlbSA9IHsgaWQ6IGlkeCArIDEgfTtcbiAgICAgIGl0ZW1BcnIuZm9yRWFjaCgodmFsLCBpZHgpID0+IChuZXdJdGVtW2NvbHVtbnNbaWR4XS5pZF0gPSB2YWwpKTtcbiAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgIH0pO1xuXG4gICAgY29sdW1ucy51bnNoaWZ0KHtcbiAgICAgIGlkOiAnaWQnLFxuICAgICAgbmFtZTogJ+2WieuyiO2YuChOTyknLFxuICAgICAgZmllbGQ6ICdpZCcsXG4gICAgICByZXNpemFibGU6IGZhbHNlLFxuICAgICAgc2VsZWN0YWJsZTogZmFsc2UsXG4gICAgICBjc3NDbGFzczogJ2lkLWNvbHVtbnMnLFxuICAgICAgYmVoYXZpb3I6ICdzZWxlY3QnLFxuICAgICAgY2Fubm90VHJpZ2dlckluc2VydDogdHJ1ZSxcbiAgICAgIHdpZHRoOiA4MCxcbiAgICB9KTtcbiAgICByZXR1cm4geyBjb2x1bW5zLCBkYXRhIH07XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBjYWxjdWxhdGlvblJ1bGVzZXQgPSB7XG4gIHZhbGlkOiAoY2VsbCwgeyBpZCwgdGFyZ2V0cywgb3AgfSwgcm93KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIOqzteuwsSDtj6ztlagg7LKY66asXG4gICAgICBpZiAodGFyZ2V0cy5zb21lKHRhcmdldCA9PiByb3dbdGFyZ2V0XS5tYXRjaCgvXFxzL2cpKSB8fCBjZWxsLm1hdGNoKC9cXHMvZykpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChpZCA9PT0gJ2NhbEZvcm11bGEnKSB7XG4gICAgICAgIGNvbnN0IFthLCBiXSA9IFtOdW1iZXIocm93W3RhcmdldHNbMF1dKSwgTnVtYmVyKHJvd1t0YXJnZXRzWzFdXSldO1xuICAgICAgICBzd2l0Y2ggKG9wKSB7XG4gICAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICByZXR1cm4gY2VsbCA9PSBhICsgYjtcbiAgICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgIHJldHVybiBjZWxsID09IGEgLSBiO1xuICAgICAgICAgIGNhc2UgJ8OXJzpcbiAgICAgICAgICAgIHJldHVybiBjZWxsID09IGEgKiBiO1xuICAgICAgICAgIGNhc2UgJ8O3JzpcbiAgICAgICAgICAgIHJldHVybiBjZWxsID09IGEgLyBiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaWQgPT09ICdjYWxTdW0nKSByZXR1cm4gY2VsbCA9PSB0YXJnZXRzLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArIE51bWJlcihyb3dbdmFsXSksIDApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICByZXBhaXI6IChjZWxsLCB7IGlkLCB0YXJnZXRzLCBvcCB9LCByb3cpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKGlkID09PSAnY2FsRm9ybXVsYScpIHtcbiAgICAgICAgY29uc3QgW2EsIGJdID0gW051bWJlcihyb3dbdGFyZ2V0c1swXV0pLCBOdW1iZXIocm93W3RhcmdldHNbMV1dKV07XG4gICAgICAgIHN3aXRjaCAob3ApIHtcbiAgICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICAgIHJldHVybiBhICsgYjtcbiAgICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICBjYXNlICfDlyc6XG4gICAgICAgICAgICByZXR1cm4gYSAqIGI7XG4gICAgICAgICAgY2FzZSAnw7cnOlxuICAgICAgICAgICAgcmV0dXJuIGEgLyBiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaWQgPT09ICdjYWxTdW0nKVxuICAgICAgICByZXR1cm4gdGFyZ2V0cy5yZWR1Y2UoXG4gICAgICAgICAgKGFjYywgdmFsKSA9PlxuICAgICAgICAgICAgYWNjICsgTnVtYmVyKHR5cGVvZiByb3dbdmFsXSA9PT0gJ3N0cmluZycgPyByb3dbdmFsXS5yZXBsYWNlKC9bXjAtOV0vZywgJycpIDogcm93W3ZhbF0pLFxuICAgICAgICAgIDAsXG4gICAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBpc0RlY2ltYWwgfSBmcm9tICd2YWxpZGF0b3InO1xuXG5leHBvcnQgY29uc3QgY2hhcmdlUnVsZXNldCA9IHtcbiAgdmFsaWQ6IGNlbGwgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIGNlbGwgPT09ICdudW1iZXInKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChjZWxsLmxlbmd0aCA+IDEgJiYgY2VsbFswXSA9PT0gJzAnKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gaXNEZWNpbWFsKGNlbGwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICByZXBhaXI6IGNlbGwgPT4ge1xuICAgIGNlbGwgPSBjZWxsXG4gICAgICAucmVwbGFjZSgn7Ja1JywgJzAwMDAwMDAwJylcbiAgICAgIC5yZXBsYWNlKCfrp4wnLCAnMDAwMCcpXG4gICAgICAucmVwbGFjZSgn7LKcJywgJzAwMCcpXG4gICAgICAucmVwbGFjZSgnaycsICcwMDAnKVxuICAgICAgLnJlcGxhY2UoJ+uwsScsICcwMCcpXG4gICAgICAucmVwbGFjZSgn7IutJywgJzAnKVxuICAgICAgLnJlcGxhY2UoL1teMC05XFwuLV0vZywgJycpO1xuICAgIHJldHVybiBpc05hTihOdW1iZXIoY2VsbCkpID8gY2VsbCA6IE51bWJlcihjZWxsKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBpc0RhdGUgfSBmcm9tICd2YWxpZGF0b3InO1xuXG5leHBvcnQgY29uc3QgY29uc2lzdGVuY3lSdWxlc2V0ID0ge1xuICB2YWxpZDogKGNlbGwsIHsgaWQsIHRhcmdldCwgb3AsIHJlcGxhY2VWYWx1ZSB9LCByb3cpID0+IHtcbiAgICAvLyDsi5zqsITsiJzshJzsnbzqtIDshLFcbiAgICBpZiAoaWQgPT09ICdjb25UaW1lJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjZWxsICE9PSAnc3RyaW5nJyB8fCBjZWxsLmxlbmd0aCA8IDIpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgbnVtQ2VsbCA9IE51bWJlcihjZWxsLnJlcGxhY2UoL1teMC05XS9nLCAnJykpO1xuICAgICAgICBjb25zdCBudW1Sb3cgPSBOdW1iZXIocm93W3RhcmdldF0ucmVwbGFjZSgvW14wLTldL2csICcnKSk7XG4gICAgICAgIHN3aXRjaCAob3ApIHtcbiAgICAgICAgICBjYXNlICc+PSc6XG4gICAgICAgICAgICByZXR1cm4gbnVtQ2VsbCA+PSBudW1Sb3c7XG4gICAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICByZXR1cm4gbnVtQ2VsbCA+IG51bVJvdztcbiAgICAgICAgICBjYXNlICc8PSc6XG4gICAgICAgICAgICByZXR1cm4gbnVtQ2VsbCA8PSBudW1Sb3c7XG4gICAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgICByZXR1cm4gbnVtQ2VsbCA8IG51bVJvdztcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyDsu6zrn7wg6rCEIOuFvOumrOq0gOqzhCDsnbzqtIDshLFcbiAgICBpZiAoaWQgPT09ICdjb25Mb2dpY1JlbGF0aW9uU2hpcCcgJiYgY2VsbCA9PT0gcmVwbGFjZVZhbHVlKSByZXR1cm4gaXNEYXRlKHJvd1t0YXJnZXRdKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgcmVwYWlyOiAoY2VsbCwgeyBpZCwgdGFyZ2V0LCBvcCwgcmVwbGFjZVZhbHVlIH0sIHJvdykgPT4gY2VsbCxcbn07XG4iLCJpbXBvcnQgeyBpc0RlY2ltYWwgfSBmcm9tICd2YWxpZGF0b3InO1xuXG5leHBvcnQgY29uc3QgY291bnRSdWxlc2V0ID0ge1xuICB2YWxpZDogY2VsbCA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgY2VsbCA9PT0gJ251bWJlcicpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKGNlbGwubGVuZ3RoID4gMSAmJiBjZWxsWzBdID09PSAnMCcpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBpc0RlY2ltYWwoY2VsbCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIHJlcGFpcjogY2VsbCA9PiB7XG4gICAgY2VsbCA9IGNlbGxcbiAgICAgIC5yZXBsYWNlKCfslrUnLCAnMDAwMDAwMDAnKVxuICAgICAgLnJlcGxhY2UoJ+unjCcsICcwMDAwJylcbiAgICAgIC5yZXBsYWNlKCfsspwnLCAnMDAwJylcbiAgICAgIC5yZXBsYWNlKCdrJywgJzAwMCcpXG4gICAgICAucmVwbGFjZSgn67CxJywgJzAwJylcbiAgICAgIC5yZXBsYWNlKCfsi60nLCAnMCcpXG4gICAgICAucmVwbGFjZSgvW14wLTlcXC4tXS9nLCAnJyk7XG4gICAgcmV0dXJuIGlzTmFOKE51bWJlcihjZWxsKSkgPyBjZWxsIDogTnVtYmVyKGNlbGwpO1xuICB9LFxufTtcbiIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiAodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcblxudmFyIGZvcm1hdFJlbGF0aXZlID0gZnVuY3Rpb24gKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcblxuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7IC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG5cbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA3NTAgbWlsbGlzZWNvbmRzIHRvIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NTozMC43NTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHRpbWVzdGFtcCA9IHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBkaXJ0eU9iamVjdCkge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhc3NpZ24gcmVxdWlyZXMgdGhhdCBpbnB1dCBwYXJhbWV0ZXIgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gIH1cblxuICBkaXJ0eU9iamVjdCA9IGRpcnR5T2JqZWN0IHx8IHt9O1xuXG4gIGZvciAodmFyIHByb3BlcnR5IGluIGRpcnR5T2JqZWN0KSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkaXJ0eU9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICB0YXJnZXRbcHJvcGVydHldID0gZGlydHlPYmplY3RbcHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwcCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59XG5cbnZhciBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlclxufTtcbmV4cG9ydCBkZWZhdWx0IGxvbmdGb3JtYXR0ZXJzOyIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsInZhciBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMgPSBbJ0QnLCAnREQnXTtcbnZhciBwcm90ZWN0ZWRXZWVrWWVhclRva2VucyA9IFsnWVknLCAnWVlZWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZERheU9mWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09ICdZWVlZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdERCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRVVENEYXkoZGlydHlEYXRlLCBkaXJ0eURheSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gdG9JbnRlZ2VyKGRpcnR5RGF5KTtcbiAgdmFyIGN1cnJlbnREYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgcmVtYWluZGVyID0gZGF5ICUgNztcbiAgdmFyIGRheUluZGV4ID0gKHJlbWFpbmRlciArIDcpICUgNztcbiAgdmFyIGRpZmYgPSAoZGF5SW5kZXggPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSBjdXJyZW50RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKTtcbiAgdmFyIGZpcnN0V2VlayA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWsuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2VlaywgZGlydHlPcHRpb25zKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzZXRVVENEYXkgZnJvbSBcIi4uLy4uLy4uL19saWIvc2V0VVRDRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgc2V0VVRDSVNPRGF5IGZyb20gXCIuLi8uLi8uLi9fbGliL3NldFVUQ0lTT0RheS9pbmRleC5qc1wiO1xuaW1wb3J0IHNldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvc2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHNldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvc2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fSE9VUiA9IDM2MDAwMDA7XG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwO1xudmFyIE1JTExJU0VDT05EU19JTl9TRUNPTkQgPSAxMDAwO1xudmFyIG51bWVyaWNQYXR0ZXJucyA9IHtcbiAgbW9udGg6IC9eKDFbMC0yXXwwP1xcZCkvLFxuICAvLyAwIHRvIDEyXG4gIGRhdGU6IC9eKDNbMC0xXXxbMC0yXT9cXGQpLyxcbiAgLy8gMCB0byAzMVxuICBkYXlPZlllYXI6IC9eKDM2WzAtNl18M1swLTVdXFxkfFswLTJdP1xcZD9cXGQpLyxcbiAgLy8gMCB0byAzNjZcbiAgd2VlazogL14oNVswLTNdfFswLTRdP1xcZCkvLFxuICAvLyAwIHRvIDUzXG4gIGhvdXIyM2g6IC9eKDJbMC0zXXxbMC0xXT9cXGQpLyxcbiAgLy8gMCB0byAyM1xuICBob3VyMjRoOiAvXigyWzAtNF18WzAtMV0/XFxkKS8sXG4gIC8vIDAgdG8gMjRcbiAgaG91cjExaDogL14oMVswLTFdfDA/XFxkKS8sXG4gIC8vIDAgdG8gMTFcbiAgaG91cjEyaDogL14oMVswLTJdfDA/XFxkKS8sXG4gIC8vIDAgdG8gMTJcbiAgbWludXRlOiAvXlswLTVdP1xcZC8sXG4gIC8vIDAgdG8gNTlcbiAgc2Vjb25kOiAvXlswLTVdP1xcZC8sXG4gIC8vIDAgdG8gNTlcbiAgc2luZ2xlRGlnaXQ6IC9eXFxkLyxcbiAgLy8gMCB0byA5XG4gIHR3b0RpZ2l0czogL15cXGR7MSwyfS8sXG4gIC8vIDAgdG8gOTlcbiAgdGhyZWVEaWdpdHM6IC9eXFxkezEsM30vLFxuICAvLyAwIHRvIDk5OVxuICBmb3VyRGlnaXRzOiAvXlxcZHsxLDR9LyxcbiAgLy8gMCB0byA5OTk5XG4gIGFueURpZ2l0c1NpZ25lZDogL14tP1xcZCsvLFxuICBzaW5nbGVEaWdpdFNpZ25lZDogL14tP1xcZC8sXG4gIC8vIDAgdG8gOSwgLTAgdG8gLTlcbiAgdHdvRGlnaXRzU2lnbmVkOiAvXi0/XFxkezEsMn0vLFxuICAvLyAwIHRvIDk5LCAtMCB0byAtOTlcbiAgdGhyZWVEaWdpdHNTaWduZWQ6IC9eLT9cXGR7MSwzfS8sXG4gIC8vIDAgdG8gOTk5LCAtMCB0byAtOTk5XG4gIGZvdXJEaWdpdHNTaWduZWQ6IC9eLT9cXGR7MSw0fS8gLy8gMCB0byA5OTk5LCAtMCB0byAtOTk5OVxuXG59O1xudmFyIHRpbWV6b25lUGF0dGVybnMgPSB7XG4gIGJhc2ljT3B0aW9uYWxNaW51dGVzOiAvXihbKy1dKShcXGR7Mn0pKFxcZHsyfSk/fFovLFxuICBiYXNpYzogL14oWystXSkoXFxkezJ9KShcXGR7Mn0pfFovLFxuICBiYXNpY09wdGlvbmFsU2Vjb25kczogL14oWystXSkoXFxkezJ9KShcXGR7Mn0pKChcXGR7Mn0pKT98Wi8sXG4gIGV4dGVuZGVkOiAvXihbKy1dKShcXGR7Mn0pOihcXGR7Mn0pfFovLFxuICBleHRlbmRlZE9wdGlvbmFsU2Vjb25kczogL14oWystXSkoXFxkezJ9KTooXFxkezJ9KSg6KFxcZHsyfSkpP3xaL1xufTtcblxuZnVuY3Rpb24gcGFyc2VOdW1lcmljUGF0dGVybihwYXR0ZXJuLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKHBhdHRlcm4pO1xuXG4gIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IHBhcnNlSW50KG1hdGNoUmVzdWx0WzBdLCAxMCk7XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlQ2FsbGJhY2sgPyB2YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlLFxuICAgIHJlc3Q6IHN0cmluZy5zbGljZShtYXRjaFJlc3VsdFswXS5sZW5ndGgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHBhdHRlcm4sIHN0cmluZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gocGF0dGVybik7XG5cbiAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIElucHV0IGlzICdaJ1xuXG5cbiAgaWYgKG1hdGNoUmVzdWx0WzBdID09PSAnWicpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IDAsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UoMSlcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNpZ24gPSBtYXRjaFJlc3VsdFsxXSA9PT0gJysnID8gMSA6IC0xO1xuICB2YXIgaG91cnMgPSBtYXRjaFJlc3VsdFsyXSA/IHBhcnNlSW50KG1hdGNoUmVzdWx0WzJdLCAxMCkgOiAwO1xuICB2YXIgbWludXRlcyA9IG1hdGNoUmVzdWx0WzNdID8gcGFyc2VJbnQobWF0Y2hSZXN1bHRbM10sIDEwKSA6IDA7XG4gIHZhciBzZWNvbmRzID0gbWF0Y2hSZXN1bHRbNV0gPyBwYXJzZUludChtYXRjaFJlc3VsdFs1XSwgMTApIDogMDtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogc2lnbiAqIChob3VycyAqIE1JTExJU0VDT05EU19JTl9IT1VSICsgbWludXRlcyAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUgKyBzZWNvbmRzICogTUlMTElTRUNPTkRTX0lOX1NFQ09ORCksXG4gICAgcmVzdDogc3RyaW5nLnNsaWNlKG1hdGNoUmVzdWx0WzBdLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBbnlEaWdpdHNTaWduZWQoc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKSB7XG4gIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5hbnlEaWdpdHNTaWduZWQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTkRpZ2l0cyhuLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spIHtcbiAgc3dpdGNoIChuKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnNpbmdsZURpZ2l0LCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnR3b0RpZ2l0cywgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy50aHJlZURpZ2l0cywgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5mb3VyRGlnaXRzLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG5ldyBSZWdFeHAoJ15cXFxcZHsxLCcgKyBuICsgJ30nKSwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZU5EaWdpdHNTaWduZWQobiwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKSB7XG4gIHN3aXRjaCAobikge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5zaW5nbGVEaWdpdFNpZ25lZCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy50d29EaWdpdHNTaWduZWQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG5cbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMudGhyZWVEaWdpdHNTaWduZWQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG5cbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuZm91ckRpZ2l0c1NpZ25lZCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihuZXcgUmVnRXhwKCdeLT9cXFxcZHsxLCcgKyBuICsgJ30nKSwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXlQZXJpb2RFbnVtVG9Ib3VycyhlbnVtVmFsdWUpIHtcbiAgc3dpdGNoIChlbnVtVmFsdWUpIHtcbiAgICBjYXNlICdtb3JuaW5nJzpcbiAgICAgIHJldHVybiA0O1xuXG4gICAgY2FzZSAnZXZlbmluZyc6XG4gICAgICByZXR1cm4gMTc7XG5cbiAgICBjYXNlICdwbSc6XG4gICAgY2FzZSAnbm9vbic6XG4gICAgY2FzZSAnYWZ0ZXJub29uJzpcbiAgICAgIHJldHVybiAxMjtcblxuICAgIGNhc2UgJ2FtJzpcbiAgICBjYXNlICdtaWRuaWdodCc6XG4gICAgY2FzZSAnbmlnaHQnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVUd29EaWdpdFllYXIodHdvRGlnaXRZZWFyLCBjdXJyZW50WWVhcikge1xuICB2YXIgaXNDb21tb25FcmEgPSBjdXJyZW50WWVhciA+IDA7IC8vIEFic29sdXRlIG51bWJlciBvZiB0aGUgY3VycmVudCB5ZWFyOlxuICAvLyAxIC0+IDEgQUNcbiAgLy8gMCAtPiAxIEJDXG4gIC8vIC0xIC0+IDIgQkNcblxuICB2YXIgYWJzQ3VycmVudFllYXIgPSBpc0NvbW1vbkVyYSA/IGN1cnJlbnRZZWFyIDogMSAtIGN1cnJlbnRZZWFyO1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmIChhYnNDdXJyZW50WWVhciA8PSA1MCkge1xuICAgIHJlc3VsdCA9IHR3b0RpZ2l0WWVhciB8fCAxMDA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJhbmdlRW5kID0gYWJzQ3VycmVudFllYXIgKyA1MDtcbiAgICB2YXIgcmFuZ2VFbmRDZW50dXJ5ID0gTWF0aC5mbG9vcihyYW5nZUVuZCAvIDEwMCkgKiAxMDA7XG4gICAgdmFyIGlzUHJldmlvdXNDZW50dXJ5ID0gdHdvRGlnaXRZZWFyID49IHJhbmdlRW5kICUgMTAwO1xuICAgIHJlc3VsdCA9IHR3b0RpZ2l0WWVhciArIHJhbmdlRW5kQ2VudHVyeSAtIChpc1ByZXZpb3VzQ2VudHVyeSA/IDEwMCA6IDApO1xuICB9XG5cbiAgcmV0dXJuIGlzQ29tbW9uRXJhID8gcmVzdWx0IDogMSAtIHJlc3VsdDtcbn1cblxudmFyIERBWVNfSU5fTU9OVEggPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG52YXIgREFZU19JTl9NT05USF9MRUFQX1lFQVIgPSBbMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07IC8vIFVzZXIgZm9yIHZhbGlkYXRpb25cblxuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMDtcbn1cbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBQICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6KiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYHBhcnNlYCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqL1xuXG5cbnZhciBwYXJzZXJzID0ge1xuICAvLyBFcmFcbiAgRzoge1xuICAgIHByaW9yaXR5OiAxNDAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gQUQsIEJDXG4gICAgICAgIGNhc2UgJ0cnOlxuICAgICAgICBjYXNlICdHRyc6XG4gICAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmVyYShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZXJhKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEEsIEJcblxuICAgICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmVyYShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5lcmEoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZXJhKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5lcmEoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIGZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGZsYWdzLmVyYSA9IHZhbHVlO1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih2YWx1ZSwgMCwgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnUicsICd1JywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIFllYXJcbiAgeToge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfUGF0dGVybnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgcHJpb3JpdHk6IDEzMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHllYXI6IHllYXIsXG4gICAgICAgICAgaXNUd29EaWdpdFllYXI6IHRva2VuID09PSAneXknXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHMoNCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgICAgICBjYXNlICd5byc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAneWVhcicsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlLmlzVHdvRGlnaXRZZWFyIHx8IHZhbHVlLnllYXIgPiAwO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGN1cnJlbnRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuXG4gICAgICBpZiAodmFsdWUuaXNUd29EaWdpdFllYXIpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRUd29EaWdpdFllYXIgPSBub3JtYWxpemVUd29EaWdpdFllYXIodmFsdWUueWVhciwgY3VycmVudFllYXIpO1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKG5vcm1hbGl6ZWRUd29EaWdpdFllYXIsIDAsIDEpO1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHllYXIgPSAhKCdlcmEnIGluIGZsYWdzKSB8fCBmbGFncy5lcmEgPT09IDEgPyB2YWx1ZS55ZWFyIDogMSAtIHZhbHVlLnllYXI7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICd1JywgJ3cnLCAnSScsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IHtcbiAgICBwcmlvcml0eTogMTMwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh5ZWFyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeWVhcjogeWVhcixcbiAgICAgICAgICBpc1R3b0RpZ2l0WWVhcjogdG9rZW4gPT09ICdZWSdcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnWSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyg0LCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgICAgIGNhc2UgJ1lvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICd5ZWFyJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUuaXNUd29EaWdpdFllYXIgfHwgdmFsdWUueWVhciA+IDA7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBmbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjdXJyZW50WWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAodmFsdWUuaXNUd29EaWdpdFllYXIpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRUd29EaWdpdFllYXIgPSBub3JtYWxpemVUd29EaWdpdFllYXIodmFsdWUueWVhciwgY3VycmVudFllYXIpO1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKG5vcm1hbGl6ZWRUd29EaWdpdFllYXIsIDAsIG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgeWVhciA9ICEoJ2VyYScgaW4gZmxhZ3MpIHx8IGZsYWdzLmVyYSA9PT0gMSA/IHZhbHVlLnllYXIgOiAxIC0gdmFsdWUueWVhcjtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1InLCAndScsICdRJywgJ3EnLCAnTScsICdMJywgJ0knLCAnZCcsICdEJywgJ2knLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjoge1xuICAgIHByaW9yaXR5OiAxMzAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBpZiAodG9rZW4gPT09ICdSJykge1xuICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzU2lnbmVkKDQsIHN0cmluZyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJzZU5EaWdpdHNTaWduZWQodG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoX2RhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgZmlyc3RXZWVrT2ZZZWFyID0gbmV3IERhdGUoMCk7XG4gICAgICBmaXJzdFdlZWtPZlllYXIuc2V0VVRDRnVsbFllYXIodmFsdWUsIDAsIDQpO1xuICAgICAgZmlyc3RXZWVrT2ZZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENJU09XZWVrKGZpcnN0V2Vla09mWWVhcik7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnRycsICd5JywgJ1knLCAndScsICdRJywgJ3EnLCAnTScsICdMJywgJ3cnLCAnZCcsICdEJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyXG4gIHU6IHtcbiAgICBwcmlvcml0eTogMTMwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgX21hdGNoLCBfb3B0aW9ucykge1xuICAgICAgaWYgKHRva2VuID09PSAndScpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0c1NpZ25lZCg0LCBzdHJpbmcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyc2VORGlnaXRzU2lnbmVkKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHZhbHVlLCAwLCAxKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydHJywgJ3knLCAnWScsICdSJywgJ3cnLCAnSScsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IHtcbiAgICBwcmlvcml0eTogMTIwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgICBjYXNlICdRbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgICBjYXNlICdRUVEnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKCh2YWx1ZSAtIDEpICogMywgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ3EnLCAnTScsICdMJywgJ3cnLCAnSScsICdkJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiB7XG4gICAgcHJpb3JpdHk6IDEyMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICAgIGNhc2UgJ3EnOlxuICAgICAgICBjYXNlICdxcSc6XG4gICAgICAgICAgLy8gMDEsIDAyLCAwMywgMDRcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgICAgY2FzZSAncW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgICBjYXNlICdxcXFxJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENNb250aCgodmFsdWUgLSAxKSAqIDMsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICdRJywgJ00nLCAnTCcsICd3JywgJ0knLCAnZCcsICdEJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IHtcbiAgICBwcmlvcml0eTogMTEwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgLSAxO1xuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5tb250aCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHMoMiwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdtb250aCcsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAxMTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKHZhbHVlLCAxKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydZJywgJ1InLCAncScsICdRJywgJ0wnLCAndycsICdJJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDoge1xuICAgIHByaW9yaXR5OiAxMTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAtIDE7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLm1vbnRoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcblxuICAgICAgICBjYXNlICdMTCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cygyLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgICAgY2FzZSAnTG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ21vbnRoJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgICBjYXNlICdMTExMJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDExO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTW9udGgodmFsdWUsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICdxJywgJ1EnLCAnTScsICd3JywgJ0knLCAnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzoge1xuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLndlZWssIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnd28nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNTM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gc3RhcnRPZlVUQ1dlZWsoc2V0VVRDV2VlayhkYXRlLCB2YWx1ZSwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnUicsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnaScsICd0JywgJ1QnXVxuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IHtcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0knOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy53ZWVrLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ0lvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDUzO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENJU09XZWVrKHNldFVUQ0lTT1dlZWsoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1knLCAndScsICdxJywgJ1EnLCAnTScsICdMJywgJ3cnLCAnZCcsICdEJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IHtcbiAgICBwcmlvcml0eTogOTAsXG4gICAgc3ViUHJpb3JpdHk6IDEsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLmRhdGUsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnZG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIHZhciBpc0xlYXBZZWFyID0gaXNMZWFwWWVhckluZGV4KHllYXIpO1xuICAgICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgICBpZiAoaXNMZWFwWWVhcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSBEQVlTX0lOX01PTlRIX0xFQVBfWUVBUlttb250aF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSBEQVlTX0lOX01PTlRIW21vbnRoXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0RhdGUodmFsdWUpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICdxJywgJ1EnLCAndycsICdJJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDoge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBzdWJQcmlvcml0eTogMSxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgY2FzZSAnREQnOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5kYXlPZlllYXIsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnRG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIHZhciBpc0xlYXBZZWFyID0gaXNMZWFwWWVhckluZGV4KHllYXIpO1xuXG4gICAgICBpZiAoaXNMZWFwWWVhcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAzNjY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAzNjU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENNb250aCgwLCB2YWx1ZSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ3EnLCAnUScsICdNJywgJ0wnLCAndycsICdJJywgJ2QnLCAnRScsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiB7XG4gICAgcHJpb3JpdHk6IDkwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIFR1ZVxuICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgY2FzZSAnRUUnOlxuICAgICAgICBjYXNlICdFRUUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFRcblxuICAgICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdVxuXG4gICAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgICBjYXNlICdFRUVFJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gNjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIGRhdGUgPSBzZXRVVENEYXkoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZToge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBvcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgd2hvbGVXZWVrRGF5cyA9IE1hdGguZmxvb3IoKHZhbHVlIC0gMSkgLyA3KSAqIDc7XG4gICAgICAgIHJldHVybiAodmFsdWUgKyBvcHRpb25zLndlZWtTdGFydHNPbiArIDYpICUgNyArIHdob2xlV2Vla0RheXM7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDNcbiAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgICAvLyAwM1xuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAzcmRcblxuICAgICAgICBjYXNlICdlbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF5JyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlXG5cbiAgICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUXG5cbiAgICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVcblxuICAgICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVzZGF5XG5cbiAgICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDY7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBkYXRlID0gc2V0VVRDRGF5KGRhdGUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1InLCAndScsICdxJywgJ1EnLCAnTScsICdMJywgJ0knLCAnZCcsICdEJywgJ0UnLCAnaScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IHtcbiAgICBwcmlvcml0eTogOTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHdob2xlV2Vla0RheXMgPSBNYXRoLmZsb29yKCh2YWx1ZSAtIDEpIC8gNykgKiA3O1xuICAgICAgICByZXR1cm4gKHZhbHVlICsgb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA2KSAlIDcgKyB3aG9sZVdlZWtEYXlzO1xuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyAzXG4gICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICBjYXNlICdjYyc6XG4gICAgICAgICAgLy8gMDNcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gM3JkXG5cbiAgICAgICAgY2FzZSAnY28nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2RheScsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1ZVxuXG4gICAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVFxuXG4gICAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1XG5cbiAgICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlc2RheVxuXG4gICAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSA2O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgZGF0ZSA9IHNldFVUQ0RheShkYXRlLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsneScsICdSJywgJ3UnLCAncScsICdRJywgJ00nLCAnTCcsICdJJywgJ2QnLCAnRCcsICdFJywgJ2knLCAnZScsICd0JywgJ1QnXVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaToge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIDc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDJcbiAgICAgICAgY2FzZSAnaSc6XG4gICAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgICAvLyAwMlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgICAvLyAybmRcblxuICAgICAgICBjYXNlICdpbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVcblxuICAgICAgICBjYXNlICdpaWknOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFRcblxuICAgICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVcblxuICAgICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgICBjYXNlICdpaWlpJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDc7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBkYXRlID0gc2V0VVRDSVNPRGF5KGRhdGUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1knLCAndScsICdxJywgJ1EnLCAnTScsICdMJywgJ3cnLCAnZCcsICdEJywgJ0UnLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IHtcbiAgICBwcmlvcml0eTogODAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKGRheVBlcmlvZEVudW1Ub0hvdXJzKHZhbHVlKSwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydiJywgJ0InLCAnSCcsICdrJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHRcbiAgYjoge1xuICAgIHByaW9yaXR5OiA4MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgY2FzZSAnYmInOlxuICAgICAgICBjYXNlICdiYmInOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnYmJiYic6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoZGF5UGVyaW9kRW51bVRvSG91cnModmFsdWUpLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ2EnLCAnQicsICdIJywgJ2snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiB7XG4gICAgcHJpb3JpdHk6IDgwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0InOlxuICAgICAgICBjYXNlICdCQic6XG4gICAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdCQkJCJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENIb3VycyhkYXlQZXJpb2RFbnVtVG9Ib3Vycyh2YWx1ZSksIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnYScsICdiJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IHtcbiAgICBwcmlvcml0eTogNzAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLmhvdXIxMmgsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnaG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gMTI7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGlzUE0gPSBkYXRlLmdldFVUQ0hvdXJzKCkgPj0gMTI7XG5cbiAgICAgIGlmIChpc1BNICYmIHZhbHVlIDwgMTIpIHtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSArIDEyLCAwLCAwLCAwKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzUE0gJiYgdmFsdWUgPT09IDEyKSB7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKHZhbHVlLCAwLCAwLCAwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnSCcsICdLJywgJ2snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDoge1xuICAgIHByaW9yaXR5OiA3MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuaG91cjIzaCwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdIbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnaG91cidcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAyMztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKHZhbHVlLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ2EnLCAnYicsICdoJywgJ0snLCAnaycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiB7XG4gICAgcHJpb3JpdHk6IDcwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0snOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5ob3VyMTFoLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ0tvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDExO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBpc1BNID0gZGF0ZS5nZXRVVENIb3VycygpID49IDEyO1xuXG4gICAgICBpZiAoaXNQTSAmJiB2YWx1ZSA8IDEyKSB7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnModmFsdWUgKyAxMiwgMCwgMCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKHZhbHVlLCAwLCAwLCAwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnaCcsICdIJywgJ2snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazoge1xuICAgIHByaW9yaXR5OiA3MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdrJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuaG91cjI0aCwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdrbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnaG91cidcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAyNDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgaG91cnMgPSB2YWx1ZSA8PSAyNCA/IHZhbHVlICUgMjQgOiB2YWx1ZTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoaG91cnMsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnYScsICdiJywgJ2gnLCAnSCcsICdLJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiB7XG4gICAgcHJpb3JpdHk6IDYwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5taW51dGUsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnbW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSA1OTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01pbnV0ZXModmFsdWUsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsndCcsICdUJ11cbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IHtcbiAgICBwcmlvcml0eTogNTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnNlY29uZCwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdzbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDU5O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDU2Vjb25kcyh2YWx1ZSwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd0JywgJ1QnXVxuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzoge1xuICAgIHByaW9yaXR5OiAzMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHZhbHVlICogTWF0aC5wb3coMTAsIC10b2tlbi5sZW5ndGggKyAzKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01pbGxpc2Vjb25kcyh2YWx1ZSk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd0JywgJ1QnXVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuICswMDowMCBpcyBgJ1onYClcbiAgWDoge1xuICAgIHByaW9yaXR5OiAxMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnWCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuYmFzaWNPcHRpb25hbE1pbnV0ZXMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljT3B0aW9uYWxTZWNvbmRzLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5leHRlbmRlZE9wdGlvbmFsU2Vjb25kcywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdYWFgnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmV4dGVuZGVkLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgaWYgKGZsYWdzLnRpbWVzdGFtcElzU2V0KSB7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgLSB2YWx1ZSk7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsndCcsICdUJywgJ3gnXVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEpXG4gIHg6IHtcbiAgICBwcmlvcml0eTogMTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljT3B0aW9uYWxNaW51dGVzLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5iYXNpYywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICd4eHh4JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5iYXNpY09wdGlvbmFsU2Vjb25kcywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICd4eHh4eCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuZXh0ZW5kZWRPcHRpb25hbFNlY29uZHMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAneHh4JzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5leHRlbmRlZCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIGZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGlmIChmbGFncy50aW1lc3RhbXBJc1NldCkge1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpIC0gdmFsdWUpO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3QnLCAnVCcsICdYJ11cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDoge1xuICAgIHByaW9yaXR5OiA0MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgX3Rva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gcGFyc2VBbnlEaWdpdHNTaWduZWQoc3RyaW5nKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKF9kYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIFtuZXcgRGF0ZSh2YWx1ZSAqIDEwMDApLCB7XG4gICAgICAgIHRpbWVzdGFtcElzU2V0OiB0cnVlXG4gICAgICB9XTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogJyonXG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDoge1xuICAgIHByaW9yaXR5OiAyMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgX3Rva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gcGFyc2VBbnlEaWdpdHNTaWduZWQoc3RyaW5nKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKF9kYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIFtuZXcgRGF0ZSh2YWx1ZSksIHtcbiAgICAgICAgdGltZXN0YW1wSXNTZXQ6IHRydWVcbiAgICAgIH1dO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiAnKidcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHBhcnNlcnM7IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eVdlZWssIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB3ZWVrID0gdG9JbnRlZ2VyKGRpcnR5V2Vlayk7XG4gIHZhciBkaWZmID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKSAtIHdlZWs7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYgKiA3KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFVUQ0lTT1dlZWsoZGlydHlEYXRlLCBkaXJ0eUlTT1dlZWspIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBpc29XZWVrID0gdG9JbnRlZ2VyKGRpcnR5SVNPV2Vlayk7XG4gIHZhciBkaWZmID0gZ2V0VVRDSVNPV2VlayhkYXRlKSAtIGlzb1dlZWs7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYgKiA3KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VVRDSVNPRGF5KGRpcnR5RGF0ZSwgZGlydHlEYXkpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXkgPSB0b0ludGVnZXIoZGlydHlEYXkpO1xuXG4gIGlmIChkYXkgJSA3ID09PSAwKSB7XG4gICAgZGF5ID0gZGF5IC0gNztcbiAgfVxuXG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgY3VycmVudERheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciByZW1haW5kZXIgPSBkYXkgJSA3O1xuICB2YXIgZGF5SW5kZXggPSAocmVtYWluZGVyICsgNykgJSA3O1xuICB2YXIgZGlmZiA9IChkYXlJbmRleCA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIGN1cnJlbnREYXk7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGFzc2lnbiBmcm9tIFwiLi4vX2xpYi9hc3NpZ24vaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCBwYXJzZXJzIGZyb20gXCIuL19saWIvcGFyc2Vycy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBUSU1FWk9ORV9VTklUX1BSSU9SSVRZID0gMTA7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciBub3RXaGl0ZXNwYWNlUmVnRXhwID0gL1xcUy87XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBwYXJzZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBQYXJzZSB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZGF0ZSBwYXJzZWQgZnJvbSBzdHJpbmcgdXNpbmcgdGhlIGdpdmVuIGZvcm1hdCBzdHJpbmcuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgaW4gdGhlIGZvcm1hdCBzdHJpbmcgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKlxuICogRm9ybWF0IG9mIHRoZSBmb3JtYXQgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA1IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogTm90IGFsbCB0b2tlbnMgYXJlIGNvbXBhdGlibGUuIENvbWJpbmF0aW9ucyB0aGF0IGRvbid0IG1ha2Ugc2Vuc2Ugb3IgY291bGQgbGVhZCB0byBidWdzIGFyZSBwcm9oaWJpdGVkXG4gKiBhbmQgd2lsbCB0aHJvdyBgUmFuZ2VFcnJvcmAuIEZvciBleGFtcGxlIHVzYWdlIG9mIDI0LWhvdXIgZm9ybWF0IHRva2VuIHdpdGggQU0vUE0gdG9rZW4gd2lsbCB0aHJvdyBhbiBleGNlcHRpb246XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogcGFyc2UoJzIzIEFNJywgJ0hIIGEnLCBuZXcgRGF0ZSgpKVxuICogLy89PiBSYW5nZUVycm9yOiBUaGUgZm9ybWF0IHN0cmluZyBtdXN0bid0IGNvbnRhaW4gYEhIYCBhbmQgYGFgIGF0IHRoZSBzYW1lIHRpbWVcbiAqIGBgYFxuICpcbiAqIFNlZSB0aGUgY29tcGF0aWJpbGl0eSB0YWJsZTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvZS8yUEFDWC0xdlFPUFUzeFVocGxsbDZkeW9NbVZVWEhLbF84Q1JEczZfdWVMbWV4M1NvcXdodW9sa3VOM08wNWw0cnF4NWgxZEtYOGViNDZVbC1DQ1NycS9wdWJodG1sP2dpZD0wJnNpbmdsZT10cnVlXG4gKlxuICogQWNjZXB0ZWQgZm9ybWF0IHN0cmluZyBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8UHJpb3J8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMTQwIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgMTMwIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3LCA5OTk5ICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgOTk5OTk5OXRoICAgICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxMjMsIDk5OSAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiw0ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgMTMwIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3LCA5MDAwICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgOTk5OTk5OXRoICAgICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNCw2ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxMjMsIDk5OSAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA0LDYgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiw0ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgMTMwIHwgUiAgICAgICB8IC00MywgMSwgMTkwMCwgMjAxNywgOTk5OSwgLTk5OTkgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFJSICAgICAgfCAtNDMsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAxLCAxMjMsIDk5OSwgLTk5OSAgICAgICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAxLCAyMDE3LCA5OTk5LCAtOTk5OSAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyLDQsNSB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCAxMzAgfCB1ICAgICAgIHwgLTQzLCAxLCAxOTAwLCAyMDE3LCA5OTk5LCAtOTk5ICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDk5LCAtOTkgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDEyMywgOTk5LCAtOTk5ICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDIwMTcsIDk5OTksIC05OTk5ICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIsNCAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IDEyMCB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IDEyMCB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IDExMCB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IDExMCB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IDEwMCB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IDEwMCB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8ICA5MCB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8ICA5MCB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgIDkwIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8ICA5MCB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA1ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCAgOTAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgIDkwIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8ICA4MCB8IGEuLmFhYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8ICA4MCB8IGIuLmJiYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8ICA4MCB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8ICA3MCB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8ICA3MCB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8ICA3MCB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8ICA3MCB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8ICA2MCB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8ICA1MCB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8ICA0MCB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgIDMwIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8ICAyMCB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgIDEwIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCAgMTAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8ICBOQSB8IFAgICAgICAgfCAwNS8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUCAgICAgIHwgTWF5IDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBQICAgICB8IE1heSAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQUFAgICAgfCBTdW5kYXksIE1heSAyOXRoLCAxNDUzICAgICAgICAgICAgfCAyLDUsOCB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCAgTkEgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8ICBOQSB8IFBwICAgICAgfCAwNS8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUHBwICAgIHwgTWF5IDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBQcHAgICB8IE1heSAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQUFBwcCAgfCBTdW5kYXksIE1heSAyOXRoLCAxNDUzIGF0IC4uLiAgICAgfCAyLDUsOCB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyLlxuICogICAgSW4gYGZvcm1hdGAgZnVuY3Rpb24sIHRoZXkgd2lsbCBwcm9kdWNlIGRpZmZlcmVudCByZXN1bHQ6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqICAgIGBwYXJzZWAgd2lsbCB0cnkgdG8gbWF0Y2ggYm90aCBmb3JtYXR0aW5nIGFuZCBzdGFuZC1hbG9uZSB1bml0cyBpbnRlcmNoYW5nYWJseS5cbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGU6XG4gKiAgICAtIGZvciBudW1lcmljYWwgdW5pdHMgKGB5eXl5eXl5eWApIGBwYXJzZWAgd2lsbCB0cnkgdG8gbWF0Y2ggYSBudW1iZXJcbiAqICAgICAgYXMgd2lkZSBhcyB0aGUgc2VxdWVuY2VcbiAqICAgIC0gZm9yIHRleHQgdW5pdHMgKGBNTU1NTU1NTWApIGBwYXJzZWAgd2lsbCB0cnkgdG8gbWF0Y2ggdGhlIHdpZGVzdCB2YXJpYXRpb24gb2YgdGhlIHVuaXQuXG4gKiAgICAgIFRoZXNlIHZhcmlhdGlvbnMgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogMy4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNC4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCB3aWxsIHRyeSB0byBndWVzcyB0aGUgY2VudHVyeSBvZiB0d28gZGlnaXQgeWVhciBieSBwcm94aW1pdHkgd2l0aCBgcmVmZXJlbmNlRGF0ZWA6XG4gKlxuICogICAgYHBhcnNlKCc1MCcsICd5eScsIG5ldyBEYXRlKDIwMTgsIDAsIDEpKSAvLz0+IFNhdCBKYW4gMDEgMjA1MCAwMDowMDowMGBcbiAqXG4gKiAgICBgcGFyc2UoJzc1JywgJ3l5JywgbmV3IERhdGUoMjAxOCwgMCwgMSkpIC8vPT4gV2VkIEphbiAwMSAxOTc1IDAwOjAwOjAwYFxuICpcbiAqICAgIHdoaWxlIGB1dWAgd2lsbCBqdXN0IGFzc2lnbiB0aGUgeWVhciBhcyBpczpcbiAqXG4gKiAgICBgcGFyc2UoJzUwJywgJ3V1JywgbmV3IERhdGUoMjAxOCwgMCwgMSkpIC8vPT4gU2F0IEphbiAwMSAwMDUwIDAwOjAwOjAwYFxuICpcbiAqICAgIGBwYXJzZSgnNzUnLCAndXUnLCBuZXcgRGF0ZSgyMDE4LCAwLCAxKSkgLy89PiBUdWUgSmFuIDAxIDAwNzUgMDA6MDA6MDBgXG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbc2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3Mvc2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW3NldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3NldFdlZWtZZWFyfSkuXG4gKlxuICogNS4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA2LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA3LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRoZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogOC4gYFArYCB0b2tlbnMgZG8gbm90IGhhdmUgYSBkZWZpbmVkIHByaW9yaXR5IHNpbmNlIHRoZXkgYXJlIG1lcmVseSBhbGlhc2VzIHRvIG90aGVyIHRva2VucyBiYXNlZFxuICogICAgb24gdGhlIGdpdmVuIGxvY2FsZS5cbiAqXG4gKiAgICB1c2luZyBgZW4tVVNgIGxvY2FsZTogYFBgID0+IGBNTS9kZC95eXl5YFxuICogICAgdXNpbmcgYGVuLVVTYCBsb2NhbGU6IGBwYCA9PiBgaGg6bW0gYWBcbiAqICAgIHVzaW5nIGBwdC1CUmAgbG9jYWxlOiBgUGAgPT4gYGRkL01NL3l5eXlgXG4gKiAgICB1c2luZyBgcHQtQlJgIGxvY2FsZTogYHBgID0+IGBISDptbWBcbiAqXG4gKiBWYWx1ZXMgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgZGF0ZSBpbiB0aGUgZGVzY2VuZGluZyBvcmRlciBvZiBpdHMgdW5pdCdzIHByaW9yaXR5LlxuICogVW5pdHMgb2YgYW4gZXF1YWwgcHJpb3JpdHkgb3ZlcndyaXRlIGVhY2ggb3RoZXIgaW4gdGhlIG9yZGVyIG9mIGFwcGVhcmFuY2UuXG4gKlxuICogSWYgbm8gdmFsdWVzIG9mIGhpZ2hlciBwcmlvcml0eSBhcmUgcGFyc2VkIChlLmcuIHdoZW4gcGFyc2luZyBzdHJpbmcgJ0phbnVhcnkgMXN0JyB3aXRob3V0IGEgeWVhciksXG4gKiB0aGUgdmFsdWVzIHdpbGwgYmUgdGFrZW4gZnJvbSAzcmQgYXJndW1lbnQgYHJlZmVyZW5jZURhdGVgIHdoaWNoIHdvcmtzIGFzIGEgY29udGV4dCBvZiBwYXJzaW5nLlxuICpcbiAqIGByZWZlcmVuY2VEYXRlYCBtdXN0IGJlIHBhc3NlZCBmb3IgY29ycmVjdCB3b3JrIG9mIHRoZSBmdW5jdGlvbi5cbiAqIElmIHlvdSdyZSBub3Qgc3VyZSB3aGljaCBgcmVmZXJlbmNlRGF0ZWAgdG8gc3VwcGx5LCBjcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgRGF0ZTpcbiAqIGBwYXJzZSgnMDIvMTEvMjAxNCcsICdNTS9kZC95eXl5JywgbmV3IERhdGUoKSlgXG4gKiBJbiB0aGlzIGNhc2UgcGFyc2luZyB3aWxsIGJlIGRvbmUgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGN1cnJlbnQgZGF0ZS5cbiAqIElmIGByZWZlcmVuY2VEYXRlYCBpcyBgSW52YWxpZCBEYXRlYCBvciBhIHZhbHVlIG5vdCBjb252ZXJ0aWJsZSB0byB2YWxpZCBgRGF0ZWAsXG4gKiB0aGVuIGBJbnZhbGlkIERhdGVgIHdpbGwgYmUgcmV0dXJuZWQuXG4gKlxuICogVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogSWYgYGZvcm1hdFN0cmluZ2AgbWF0Y2hlcyB3aXRoIGBkYXRlU3RyaW5nYCBidXQgZG9lcyBub3QgcHJvdmlkZXMgdG9rZW5zLCBgcmVmZXJlbmNlRGF0ZWAgd2lsbCBiZSByZXR1cm5lZC5cbiAqXG4gKiBJZiBwYXJzaW5nIGZhaWxlZCwgYEludmFsaWQgRGF0ZWAgd2lsbCBiZSByZXR1cm5lZC5cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIE9sZCBgcGFyc2VgIHdhcyByZW5hbWVkIHRvIGB0b0RhdGVgLlxuICogICBOb3cgYHBhcnNlYCBpcyBhIG5ldyBmdW5jdGlvbiB3aGljaCBwYXJzZXMgYSBzdHJpbmcgdXNpbmcgYSBwcm92aWRlZCBmb3JtYXQuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgcGFyc2UoJzIwMTYtMDEtMDEnKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZCAodG9EYXRlIG5vIGxvbmdlciBhY2NlcHRzIGEgc3RyaW5nKVxuICogICB0b0RhdGUoMTM5MjA5ODQzMDAwMCkgLy8gVW5peCB0byB0aW1lc3RhbXBcbiAqICAgdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSkgLy8gQ2xvbmluZyB0aGUgZGF0ZVxuICogICBwYXJzZSgnMjAxNi0wMS0wMScsICd5eXl5LU1NLWRkJywgbmV3IERhdGUoKSlcbiAqICAgYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGVTdHJpbmcgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0U3RyaW5nIC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IHJlZmVyZW5jZURhdGUgLSBkZWZpbmVzIHZhbHVlcyBtaXNzaW5nIGZyb20gdGhlIHBhcnNlZCBkYXRlU3RyaW5nXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7MXwyfDN8NHw1fDZ8N30gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDMgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbWF0Y2hgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFBhcnNlIDExIEZlYnJ1YXJ5IDIwMTQgZnJvbSBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIHZhciByZXN1bHQgPSBwYXJzZSgnMDIvMTEvMjAxNCcsICdNTS9kZC95eXl5JywgbmV3IERhdGUoKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFBhcnNlIDI4dGggb2YgRmVicnVhcnkgaW4gRXNwZXJhbnRvIGxvY2FsZSBpbiB0aGUgY29udGV4dCBvZiAyMDEwIHllYXI6XG4gKiBpbXBvcnQgZW8gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IHBhcnNlKCcyOC1hIGRlIGZlYnJ1YXJvJywgXCJkbyAnZGUnIE1NTU1cIiwgbmV3IERhdGUoMjAxMCwgMCwgMSksIHtcbiAqICAgbG9jYWxlOiBlb1xuICogfSlcbiAqIC8vPT4gU3VuIEZlYiAyOCAyMDEwIDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2UoZGlydHlEYXRlU3RyaW5nLCBkaXJ0eUZvcm1hdFN0cmluZywgZGlydHlSZWZlcmVuY2VEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDMsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlU3RyaW5nID0gU3RyaW5nKGRpcnR5RGF0ZVN0cmluZyk7XG4gIHZhciBmb3JtYXRTdHJpbmcgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHJpbmcpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGU7XG5cbiAgaWYgKCFsb2NhbGUubWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBtYXRjaCBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIGlmIChmb3JtYXRTdHJpbmcgPT09ICcnKSB7XG4gICAgaWYgKGRhdGVTdHJpbmcgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdG9EYXRlKGRpcnR5UmVmZXJlbmNlRGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdWJGbk9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGVcbiAgfTsgLy8gSWYgdGltZXpvbmUgaXNuJ3Qgc3BlY2lmaWVkLCBpdCB3aWxsIGJlIHNldCB0byB0aGUgc3lzdGVtIHRpbWV6b25lXG5cbiAgdmFyIHNldHRlcnMgPSBbe1xuICAgIHByaW9yaXR5OiBUSU1FWk9ORV9VTklUX1BSSU9SSVRZLFxuICAgIHN1YlByaW9yaXR5OiAtMSxcbiAgICBzZXQ6IGRhdGVUb1N5c3RlbVRpbWV6b25lLFxuICAgIGluZGV4OiAwXG4gIH1dO1xuICB2YXIgaTtcbiAgdmFyIHRva2VucyA9IGZvcm1hdFN0cmluZy5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcsIHN1YkZuT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCk7XG4gIHZhciB1c2VkVG9rZW5zID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSkge1xuICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0U3RyaW5nLCBkaXJ0eURhdGVTdHJpbmcpO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pKSB7XG4gICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXRTdHJpbmcsIGRpcnR5RGF0ZVN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gdG9rZW5bMF07XG4gICAgdmFyIHBhcnNlciA9IHBhcnNlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuXG4gICAgaWYgKHBhcnNlcikge1xuICAgICAgdmFyIGluY29tcGF0aWJsZVRva2VucyA9IHBhcnNlci5pbmNvbXBhdGlibGVUb2tlbnM7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGluY29tcGF0aWJsZVRva2VucykpIHtcbiAgICAgICAgdmFyIGluY29tcGF0aWJsZVRva2VuID0gdm9pZCAwO1xuXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB1c2VkVG9rZW5zLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIHZhciB1c2VkVG9rZW4gPSB1c2VkVG9rZW5zW19pXS50b2tlbjtcblxuICAgICAgICAgIGlmIChpbmNvbXBhdGlibGVUb2tlbnMuaW5kZXhPZih1c2VkVG9rZW4pICE9PSAtMSB8fCB1c2VkVG9rZW4gPT09IGZpcnN0Q2hhcmFjdGVyKSB7XG4gICAgICAgICAgICBpbmNvbXBhdGlibGVUb2tlbiA9IHVzZWRUb2tlbnNbX2ldO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluY29tcGF0aWJsZVRva2VuKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUaGUgZm9ybWF0IHN0cmluZyBtdXN0bid0IGNvbnRhaW4gYFwiLmNvbmNhdChpbmNvbXBhdGlibGVUb2tlbi5mdWxsVG9rZW4sIFwiYCBhbmQgYFwiKS5jb25jYXQodG9rZW4sIFwiYCBhdCB0aGUgc2FtZSB0aW1lXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJzZXIuaW5jb21wYXRpYmxlVG9rZW5zID09PSAnKicgJiYgdXNlZFRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUaGUgZm9ybWF0IHN0cmluZyBtdXN0bid0IGNvbnRhaW4gYFwiLmNvbmNhdCh0b2tlbiwgXCJgIGFuZCBhbnkgb3RoZXIgdG9rZW4gYXQgdGhlIHNhbWUgdGltZVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHVzZWRUb2tlbnMucHVzaCh7XG4gICAgICAgIHRva2VuOiBmaXJzdENoYXJhY3RlcixcbiAgICAgICAgZnVsbFRva2VuOiB0b2tlblxuICAgICAgfSk7XG4gICAgICB2YXIgcGFyc2VSZXN1bHQgPSBwYXJzZXIucGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIGxvY2FsZS5tYXRjaCwgc3ViRm5PcHRpb25zKTtcblxuICAgICAgaWYgKCFwYXJzZVJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICAgIH1cblxuICAgICAgc2V0dGVycy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6IHBhcnNlci5wcmlvcml0eSxcbiAgICAgICAgc3ViUHJpb3JpdHk6IHBhcnNlci5zdWJQcmlvcml0eSB8fCAwLFxuICAgICAgICBzZXQ6IHBhcnNlci5zZXQsXG4gICAgICAgIHZhbGlkYXRlOiBwYXJzZXIudmFsaWRhdGUsXG4gICAgICAgIHZhbHVlOiBwYXJzZVJlc3VsdC52YWx1ZSxcbiAgICAgICAgaW5kZXg6IHNldHRlcnMubGVuZ3RoXG4gICAgICB9KTtcbiAgICAgIGRhdGVTdHJpbmcgPSBwYXJzZVJlc3VsdC5yZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgICB9IC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcblxuXG4gICAgICBpZiAodG9rZW4gPT09IFwiJydcIikge1xuICAgICAgICB0b2tlbiA9IFwiJ1wiO1xuICAgICAgfSBlbHNlIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgICAgdG9rZW4gPSBjbGVhbkVzY2FwZWRTdHJpbmcodG9rZW4pO1xuICAgICAgfSAvLyBDdXQgdG9rZW4gZnJvbSBzdHJpbmcsIG9yLCBpZiBzdHJpbmcgZG9lc24ndCBtYXRjaCB0aGUgdG9rZW4sIHJldHVybiBJbnZhbGlkIERhdGVcblxuXG4gICAgICBpZiAoZGF0ZVN0cmluZy5pbmRleE9mKHRva2VuKSA9PT0gMCkge1xuICAgICAgICBkYXRlU3RyaW5nID0gZGF0ZVN0cmluZy5zbGljZSh0b2tlbi5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIENoZWNrIGlmIHRoZSByZW1haW5pbmcgaW5wdXQgY29udGFpbnMgc29tZXRoaW5nIG90aGVyIHRoYW4gd2hpdGVzcGFjZVxuXG5cbiAgaWYgKGRhdGVTdHJpbmcubGVuZ3RoID4gMCAmJiBub3RXaGl0ZXNwYWNlUmVnRXhwLnRlc3QoZGF0ZVN0cmluZykpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIHZhciB1bmlxdWVQcmlvcml0eVNldHRlcnMgPSBzZXR0ZXJzLm1hcChmdW5jdGlvbiAoc2V0dGVyKSB7XG4gICAgcmV0dXJuIHNldHRlci5wcmlvcml0eTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiIC0gYTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChwcmlvcml0eSwgaW5kZXgsIGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5LmluZGV4T2YocHJpb3JpdHkpID09PSBpbmRleDtcbiAgfSkubWFwKGZ1bmN0aW9uIChwcmlvcml0eSkge1xuICAgIHJldHVybiBzZXR0ZXJzLmZpbHRlcihmdW5jdGlvbiAoc2V0dGVyKSB7XG4gICAgICByZXR1cm4gc2V0dGVyLnByaW9yaXR5ID09PSBwcmlvcml0eTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYi5zdWJQcmlvcml0eSAtIGEuc3ViUHJpb3JpdHk7XG4gICAgfSk7XG4gIH0pLm1hcChmdW5jdGlvbiAoc2V0dGVyQXJyYXkpIHtcbiAgICByZXR1cm4gc2V0dGVyQXJyYXlbMF07XG4gIH0pO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eVJlZmVyZW5jZURhdGUpO1xuXG4gIGlmIChpc05hTihkYXRlKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zN1xuXG5cbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMoZGF0ZSwgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSk7XG4gIHZhciBmbGFncyA9IHt9O1xuXG4gIGZvciAoaSA9IDA7IGkgPCB1bmlxdWVQcmlvcml0eVNldHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2V0dGVyID0gdW5pcXVlUHJpb3JpdHlTZXR0ZXJzW2ldO1xuXG4gICAgaWYgKHNldHRlci52YWxpZGF0ZSAmJiAhc2V0dGVyLnZhbGlkYXRlKHV0Y0RhdGUsIHNldHRlci52YWx1ZSwgc3ViRm5PcHRpb25zKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IHNldHRlci5zZXQodXRjRGF0ZSwgZmxhZ3MsIHNldHRlci52YWx1ZSwgc3ViRm5PcHRpb25zKTsgLy8gUmVzdWx0IGlzIHR1cGxlIChkYXRlLCBmbGFncylcblxuICAgIGlmIChyZXN1bHRbMF0pIHtcbiAgICAgIHV0Y0RhdGUgPSByZXN1bHRbMF07XG4gICAgICBhc3NpZ24oZmxhZ3MsIHJlc3VsdFsxXSk7IC8vIFJlc3VsdCBpcyBkYXRlXG4gICAgfSBlbHNlIHtcbiAgICAgIHV0Y0RhdGUgPSByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHV0Y0RhdGU7XG59XG5cbmZ1bmN0aW9uIGRhdGVUb1N5c3RlbVRpbWV6b25lKGRhdGUsIGZsYWdzKSB7XG4gIGlmIChmbGFncy50aW1lc3RhbXBJc1NldCkge1xuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgdmFyIGNvbnZlcnRlZERhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgY29udmVydGVkRGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRhdGUuZ2V0VVRDTW9udGgoKSwgZGF0ZS5nZXRVVENEYXRlKCkpO1xuICBjb252ZXJ0ZWREYXRlLnNldEhvdXJzKGRhdGUuZ2V0VVRDSG91cnMoKSwgZGF0ZS5nZXRVVENNaW51dGVzKCksIGRhdGUuZ2V0VVRDU2Vjb25kcygpLCBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKTtcbiAgcmV0dXJuIGNvbnZlcnRlZERhdGU7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gdmFsdWUgYSBkYXRlP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLiBUaGUgZnVuY3Rpb24gd29ya3MgZm9yIGRhdGVzIHRyYW5zZmVycmVkIGFjcm9zcyBpZnJhbWVzLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59IiwiaW1wb3J0IGlzRGF0ZSBmcm9tIFwiLi4vaXNEYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIE5vdyBgaXNWYWxpZGAgZG9lc24ndCB0aHJvdyBhbiBleGNlcHRpb25cbiAqICAgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICogICBJbnN0ZWFkLCBhcmd1bWVudCBpcyBjb252ZXJ0ZWQgYmVmb3JlaGFuZCB1c2luZyBgdG9EYXRlYC5cbiAqXG4gKiAgIEV4YW1wbGVzOlxuICpcbiAqICAgfCBgaXNWYWxpZGAgYXJndW1lbnQgICAgICAgIHwgQmVmb3JlIHYyLjAuMCB8IHYyLjAuMCBvbndhcmQgfFxuICogICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18XG4gKiAgIHwgYG5ldyBEYXRlKClgICAgICAgICAgICAgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJzIwMTYtMDEtMDEnKWAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnJylgICAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKDE0ODgzNzA4MzUwODEpYCB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoTmFOKWAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnMjAxNi0wMS0wMSdgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcnYCAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgMTQ4ODM3MDgzNTA4MWAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBOYU5gICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKlxuICogICBXZSBpbnRyb2R1Y2UgdGhpcyBjaGFuZ2UgdG8gbWFrZSAqZGF0ZS1mbnMqIGNvbnNpc3RlbnQgd2l0aCBFQ01BU2NyaXB0IGJlaGF2aW9yXG4gKiAgIHRoYXQgdHJ5IHRvIGNvZXJjZSBhcmd1bWVudHMgdG8gdGhlIGV4cGVjdGVkIHR5cGVcbiAqICAgKHdoaWNoIGlzIGFsc28gdGhlIGNhc2Ugd2l0aCBvdGhlciAqZGF0ZS1mbnMqIGZ1bmN0aW9ucykuXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYWxpZChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKCFpc0RhdGUoZGlydHlEYXRlKSAmJiB0eXBlb2YgZGlydHlEYXRlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oTnVtYmVyKGRhdGUpKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcblxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7IC8vIFBhZGRpbmdcblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAnWCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcblxuICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgY2FzZSAnWFhYJzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ3p6JzpcbiAgICAgIGNhc2UgJ3p6eic6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGlzVmFsaWQgZnJvbSBcIi4uL2lzVmFsaWQvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSBcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nOyAvLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5cbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIG5vdyByZXF1aXJlZCBmb3IgdGhlIHNha2Ugb2YgZXhwbGljaXRuZXNzLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSlcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpLCBcInl5eXktTU0tZGQnVCdISDptbTpzcy5TU1N4eHhcIilcbiAqICAgYGBgXG4gKlxuICogLSBOZXcgZm9ybWF0IHN0cmluZyBBUEkgZm9yIGBmb3JtYXRgIGZ1bmN0aW9uXG4gKiAgIHdoaWNoIGlzIGJhc2VkIG9uIFtVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzVdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGUpLlxuICogICBTZWUgW3RoaXMgcG9zdF0oaHR0cHM6Ly9ibG9nLmRhdGUtZm5zLm9yZy9wb3N0L3VuaWNvZGUtdG9rZW5zLWluLWRhdGUtZm5zLXYyLXNyZWF0eWtpOTFqZykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAtIENoYXJhY3RlcnMgYXJlIG5vdyBlc2NhcGVkIHVzaW5nIHNpbmdsZSBxdW90ZSBzeW1ib2xzIChgJ2ApIGluc3RlYWQgb2Ygc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsRGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuXG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gbG9uZ0Zvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZywgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCJpbXBvcnQgY3VycnkgZnJvbSBcIi4vY3VycnkuanNcIjtcbmltcG9ydCByZWR1Y2UgZnJvbSBcIi4vcmVkdWNlLmpzXCI7XG5pbXBvcnQgZ28xIGZyb20gXCIuL2dvMS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgY3VycnkoZnVuY3Rpb24gZ3JvdXBCeShmLCBpdGVyKSB7XG4gIHJldHVybiByZWR1Y2UoZnVuY3Rpb24gKGdyb3VwLCBhKSB7XG4gICAgcmV0dXJuIGdvMShmKGEpLCBmdW5jdGlvbiAoaykge1xuICAgICAgcmV0dXJuIChncm91cFtrXSB8fCAoZ3JvdXBba10gPSBbXSkpLnB1c2goYSksIGdyb3VwO1xuICAgIH0pO1xuICB9LCB7fSwgaXRlcik7XG59KTsiLCJpbXBvcnQgX2tleXNJbnN0YW5jZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL2tleXNcIjtcbmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL3JlZ2VuZXJhdG9yXCI7XG5cbnZhciBfbWFya2VkID0gLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhlbnRyaWVzTCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVudHJpZXNMKG9iaikge1xuICB2YXIgaztcbiAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBlbnRyaWVzTCQoX2NvbnRleHQpIHtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgX2NvbnRleHQudDAgPSBfa2V5c0luc3RhbmNlUHJvcGVydHkoX3JlZ2VuZXJhdG9yUnVudGltZSkuY2FsbChfcmVnZW5lcmF0b3JSdW50aW1lLCBvYmopO1xuXG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoKF9jb250ZXh0LnQxID0gX2NvbnRleHQudDAoKSkuZG9uZSkge1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBrID0gX2NvbnRleHQudDEudmFsdWU7XG4gICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7XG4gICAgICAgICAgcmV0dXJuIFtrLCBvYmpba11dO1xuXG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDc6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgX21hcmtlZCk7XG59IiwiaW1wb3J0IHsgZ28sIGdyb3VwQnksIGVudHJpZXMsIG1hcCB9IGZyb20gJ2Z4anMnO1xuXG5leHBvcnQgY29uc3QgcnVsZXNldCA9IFtcbiAge1xuICAgIGluZGV4OiAnMScsXG4gICAgaWQ6ICdzdHInLFxuICAgIGdyb3VwOiAn66y47J6Q7Je0JyxcbiAgICBsYWJlbDogJ+usuOyekOyXtCcsXG4gIH0sXG4gIHtcbiAgICBpbmRleDogJzInLFxuICAgIGlkOiAnYW10JyxcbiAgICBncm91cDogJ+q4iOyVoScsXG4gICAgbGFiZWw6ICfquIjslaEnLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn7Iir7J6QKOq4iOyVoSwg7IiY65+JLCDsnKgpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDsiKvsnpAg642w7J207YSw7ZiV7Iud7J2AIOq4iOyVoSwg7IiY65+JLCDsnKjroZwg6rWs67aE7ZWY6rOgLCDtkZzspIDrjbDsnbTthLAg7ZiV7Iud7J2AIOyIq+yekCwg7IaM7IiY7KCQIOuniOydtOuEiOyKpCgtKeuhnOunjCDtkZzquLAnLFxuICAgIGV4YW1wbGU6XG4gICAgICAn7ZGc7KSA7ZiV7IudOiDikaA5OTk5OSDikaEtOTk5OTkg4pGiLTk5OTk5Ljk5OTxiciAvPuyYiOyLnDog4pGgMiwxMDDsm5AgLT4gMjEwMCDikaEtPuKIhjEyOC42NSUgLT4gLTEyOC42NScsXG4gIH0sXG4gIHtcbiAgICBpbmRleDogJzMnLFxuICAgIGlkOiAncXR0JyxcbiAgICBncm91cDogJ+yImOufiScsXG4gICAgbGFiZWw6ICfsiJjrn4knLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn7Iir7J6QKOq4iOyVoSwg7IiY65+JLCDsnKgpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDsiKvsnpAg642w7J207YSw7ZiV7Iud7J2AIOq4iOyVoSwg7IiY65+JLCDsnKjroZwg6rWs67aE7ZWY6rOgLCDtkZzspIDrjbDsnbTthLAg7ZiV7Iud7J2AIOyIq+yekCwg7IaM7IiY7KCQIOuniOydtOuEiOyKpCgtKeuhnOunjCDtkZzquLAnLFxuICAgIGV4YW1wbGU6XG4gICAgICAn7ZGc7KSA7ZiV7IudOiDikaA5OTk5OSDikaEtOTk5OTkg4pGiLTk5OTk5Ljk5OTxiciAvPuyYiOyLnDog4pGgMiwxMDDsm5AgLT4gMjEwMCDikaHiiIYxMjguNjUlIC0+IC0xMjguNjUnLFxuICB9LFxuICB7XG4gICAgaW5kZXg6ICc0JyxcbiAgICBpZDogJ3BlYycsXG4gICAgdHlwZTogJ+ycqCcsXG4gICAgbGFiZWw6ICfsnKgnLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn7Iir7J6QKOq4iOyVoSwg7IiY65+JLCDsnKgpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDsiKvsnpAg642w7J207YSw7ZiV7Iud7J2AIOq4iOyVoSwg7IiY65+JLCDsnKjroZwg6rWs67aE7ZWY6rOgLCDtkZzspIDrjbDsnbTthLAg7ZiV7Iud7J2AIOyIq+yekCwg7IaM7IiY7KCQIOuniOydtOuEiOyKpCgtKeuhnOunjCDtkZzquLAnLFxuICAgIGV4YW1wbGU6XG4gICAgICAn7ZGc7KSA7ZiV7IudOiDikaA5OTk5OSDikaEtOTk5OTkg4pGiLTk5OTk5Ljk5OTxiciAvPuyYiOyLnDog4pGgMiwxMDDsm5AgLT4gMjEwMCDikaHiiIYxMjguNjUlIC0+IC0xMjguNjUnLFxuICB9LFxuICB7XG4gICAgaW5kZXg6ICc1LTEnLFxuICAgIGlkOiAnd2hlWU4nLFxuICAgIGdyb3VwOiAn7Jes67aAJyxcbiAgICBsYWJlbDogJ1ksIE4nLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn7Jes67aAKFksIE4pIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDsl6zrtoAg642w7J207YSw7ZiV7Iud7J2AIFkg7JmAIE4g6rWs67aE7ZWY6rOgLCDsmIHrrLgg64yA66y47J6QIFnsmYAgTuycvOuhnOunjCDtkZzquLAnLFxuICAgIGV4YW1wbGU6ICftkZzspIDtmJXsi506IOKRoFkg4pGhTjxiciAvPuyYiOyLnDog4pGgeSAtPiBZIOKRoW4gLT4gTiDikaLsmIggLT4gWSDikaPslYTri4jsmKQgLT4gTicsXG4gIH0sXG4gIHtcbiAgICBpbmRleDogJzUtMicsXG4gICAgaWQ6ICd3aGVTRVQnLFxuICAgIGdyb3VwOiAn7Jes67aAJyxcbiAgICBsYWJlbDogJ+yXrOu2gOqwkiDsp4DsoJUnLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn7Jes67aAKOyXrOu2gOqwkiDsp4DsoJUpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDsl6zrtoAg642w7J207YSw7ZiV7Iud7J2AIOyngOygle2VnCDsl6zrtoDqsJLsnLzroZzrp4wg7ZGc6riwJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ+2RnOykgO2YleyLnTog7Jes67aA6rCSIOyngOyglSDsmIjsi5zikaDsoIHsmqkg4pGh66+47KCB7JqpPGJyIC8+7JiI7IucOiDikaDsoIEg7JqpIC0+IOyggeyaqSDikaFZIC0+IOyggeyaqSDikaLrr7gg7KCB7JqpIC0+IOuvuOyggeyaqSDikaPslYTri4jsmKQgLT4g66+47KCB7JqpJyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi0xJyxcbiAgICBpZDogJ2R0WVlZWU1NRERISDI0TUlTUycsXG4gICAgZ3JvdXA6ICfrgqDsp5wnLFxuICAgIGxhYmVsOiAnWVlZWS1NTS1ERCBISDI0Ok1JOlNTJyxcbiAgICBjb250ZW50OiAn7Jew7JuU7J28IOyLnOqwhOu2hOy0iCcsXG4gICAgZXJyb3JEaXNjcmlwdGlvbjpcbiAgICAgICfrgqDsp5woWVlZWS1NTS1ERCBISDI0Ok1JOlNTKSDrjbDsnbTthLDsnZgg67aA7KCV7ZmV7ZWcIOyeheugpTxiciAvPuyEpOuqhTog64WE64+ELCDsm5QsIOydvOyekOqwhOydmCDtkZzspIDrjbDsnbTthLDtmJXsi53snYAg7ZWY7J207ZSIKC0p7J2EIOyCrOyaqe2VmOqzoCwg7Iuc6rCELCDrtoQsIOy0iOqwhOyXkOuKlCDsvZzroaAoOinsnYQg7IKs7Jqp7ZWY7JesIO2RnOq4sCcsXG4gICAgZXhhbXBsZTpcbiAgICAgICftkZzspIDtmJXsi506OTk5OS05OS05OSA5OTo5OTo5OTxiciAvPuyYiOyLnDog4pGgMjAyMS0wOC0wNyA4Ojk6NTkgLT4gMjAyMS0wOC0wNyAwODowOTo1OSDikaEyMDIxLzA4LzA3ODk1OSAtPiAyMDIxLzA4LzA3IDA4OjA5OjU5JyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi0yJyxcbiAgICBpZDogJ2R0WVlZWU1NRERISDI0TUknLFxuICAgIGdyb3VwOiAn64Kg7KecJyxcbiAgICBsYWJlbDogJ1lZWVktTU0tREQgSEgyNDpNSScsXG4gICAgY29udGVudDogJ+yXsOyblOydvCDsi5zqsITrtoQnLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn64Kg7KecKFlZWVktTU0tREQgSEgyNDpNSSkg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOuFhOuPhCwg7JuULCDsnbzsnpDqsITsnZgg7ZGc7KSA642w7J207YSw7ZiV7Iud7J2AIO2VmOydtO2UiCgtKeydhCDsgqzsmqntlZjqs6AsIOyLnOqwhCwg67aE6rCE7JeQ64qUIOy9nOuhoCg6KeydhCDsgqzsmqntlZjsl6wg7ZGc6riwJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ+2RnOykgO2YleyLnTo5OTk5LTk5LTk5IDk5Ojk5PGJyIC8+7JiI7IucOiDikaAyMDIxLTA4LTA3IDg6OSAtPiAyMDIxLTA4LTA3IDA4OjA5IOKRoTIwMjEvMDgvMDc4OSAtPiAyMDIxLzA4LzA3IDA4OjA5JyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi0zJyxcbiAgICBpZDogJ2R0WVlZWU1NRERISDI0JyxcbiAgICBncm91cDogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdZWVlZLU1NLUREIEhIMjQnLFxuICAgIGNvbnRlbnQ6ICfsl7Dsm5Tsnbwg7Iuc6rCEJyxcbiAgICBlcnJvckRpc2NyaXB0aW9uOlxuICAgICAgJ+uCoOynnChZWVlZLU1NLUREIEhIMjQpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDrhYTrj4QsIOyblCwg7J287J6Q6rCE7J2YIO2RnOykgOuNsOydtO2EsO2YleyLneydgCDtlZjsnbTtlIgoLSnsnYQg7IKs7Jqp7ZWY6rOgLCDsi5zqsITsnYQg7ZGc6riwJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ+2RnOykgO2YleyLnTo5OTk5LTk5LTk5IDk5PGJyIC8+7JiI7IucOiDikaAyMDIxLTA4LTA3IDggLT4gMjAyMS0wOC0wNyAwOCDikaEyMDIxLzA4LzA3OCAtPiAyMDIxLzA4LzA3IDA4JyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi00JyxcbiAgICBpZDogJ2R0TU1EREhIMjRNSScsXG4gICAgZ3JvdXA6ICfrgqDsp5wnLFxuICAgIGxhYmVsOiAnTU0tREQgSEgyNDpNSScsXG4gICAgY29udGVudDogJ+yblOydvCDsi5zqsITrtoQnLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn64Kg7KecKE1NLUREIEhIMjQ6TUkpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDsm5QsIOydvOyekOqwhOydmCDtkZzspIDrjbDsnbTthLDtmJXsi53snYAg7ZWY7J207ZSIKC0p7J2EIOyCrOyaqe2VmOqzoCwg7Iuc6rCELCDrtoTqsITsl5DripQg7L2c66GgKDop7J2EIOyCrOyaqe2VmOyXrCDtkZzquLAnLFxuICAgIGV4YW1wbGU6XG4gICAgICAn7ZGc7KSA7ZiV7IudOjk5LTk5IDk5Ojk5PGJyIC8+7JiI7IucOiDikaAwOC0wNyA4OjkgLT4gMDgtMDcgMDg6MDkg4pGhOOyblDfsnbw47IucNuu2hCAtPiAwOC0wNyAwODowNicsXG4gIH0sXG4gIHtcbiAgICBpbmRleDogJzYtNScsXG4gICAgaWQ6ICdkdEhIMjRNSVNTJyxcbiAgICBncm91cDogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdISDI0Ok1JOlNTJyxcbiAgICBjb250ZW50OiAn7Iuc6rCE67aE7LSIJyxcbiAgICBlcnJvckRpc2NyaXB0aW9uOlxuICAgICAgJ+uCoOynnChISDI0Ok1JOlNTKSDrjbDsnbTthLDsnZgg67aA7KCV7ZmV7ZWcIOyeheugpTxiciAvPuyEpOuqhTog7Iuc6rCELCDrtoQsIOy0iOqwhOyXkOuKlCDsvZzroaAoOinsnYQg7IKs7Jqp7ZWY7JesIO2RnOq4sCcsXG4gICAgZXhhbXBsZTogJ+2RnOykgO2YleyLnTo5OTo5OTo5OTxiciAvPuyYiOyLnDog4pGgODo2OjU5IC0+IDA4OjA2OjU5IOKRoTjsi5w267aENTnstIggLT4gMDg6MDY6NTknLFxuICB9LFxuICB7XG4gICAgaW5kZXg6ICc2LTYnLFxuICAgIGlkOiAnZHRZWVlZTU1ERCcsXG4gICAgZ3JvdXA6ICfrgqDsp5wnLFxuICAgIGxhYmVsOiAnWVlZWS1NTS1ERCcsXG4gICAgY29udGVudDogJ+yXsOyblOydvCcsXG4gICAgZXJyb3JEaXNjcmlwdGlvbjpcbiAgICAgICfrgqDsp5woWVlZWS1NTS1ERCkg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOuFhOuPhCwg7JuULCDsnbzsnpDqsITsnZgg7ZGc7KSA642w7J207YSw7ZiV7Iud7J2AIO2VmOydtO2UiCgtKeydhCDsgqzsmqntlZjsl6wg7ZGc6riwJyxcbiAgICBleGFtcGxlOiAn7ZGc7KSA7ZiV7IudOjk5OTktOTktOTk8YnIgLz7smIjsi5w6IOKRoDIxLjguMSAtPiAyMDIxLTA4LTAxIOKRoTIxLzgvMSAtPiAyMDIxLTA4LTAxJyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi03JyxcbiAgICBpZDogJ2R0SEgyNE1JJyxcbiAgICBncm91cDogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdISDI0Ok1JJyxcbiAgICBjb250ZW50OiAn7Iuc6rCE67aEJyxcbiAgICBlcnJvckRpc2NyaXB0aW9uOlxuICAgICAgJ+uCoOynnChISDI0Ok1JKSDrjbDsnbTthLDsnZgg67aA7KCV7ZmV7ZWcIOyeheugpTxiciAvPuyEpOuqhTog7Iuc6rCELCDrtoTqsITsl5DripQg7L2c66GgKDop7J2EIOyCrOyaqe2VmOyXrCDtkZzquLAnLFxuICAgIGV4YW1wbGU6ICftkZzspIDtmJXsi506OTk6OTk8YnIgLz7smIjsi5w6IOKRoDg6NiAtPiAwODowNiDikaE47IucNuu2hCAtPiAwODowNicsXG4gIH0sXG4gIHtcbiAgICBpbmRleDogJzYtOCcsXG4gICAgaWQ6ICdkdFlZWVlNTScsXG4gICAgZ3JvdXA6ICfrgqDsp5wnLFxuICAgIGxhYmVsOiAnWVlZWS1NTScsXG4gICAgY29udGVudDogJ+yXsOyblCcsXG4gICAgZXJyb3JEaXNjcmlwdGlvbjpcbiAgICAgICfrgqDsp5woWVlZWS1NTSkg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOuFhOuPhCwg7JuU6rCE7J2YIO2RnOykgOuNsOydtO2EsO2YleyLneydgCDtlZjsnbTtlIgoLSnsnYQg7IKs7Jqp7ZWY7JesIO2RnOq4sCcsXG4gICAgZXhhbXBsZTogJ+2RnOykgO2YleyLnTo5OTk5LTk5PGJyIC8+7JiI7IucOiDikaAyMS44IC0+IDIwMjEtMDgg4pGhMjEvOCAtPiAyMDIxLTA4JyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi05JyxcbiAgICBpZDogJ2R0TU1ERCcsXG4gICAgZ3JvdXA6ICfrgqDsp5wnLFxuICAgIGxhYmVsOiAnTU0tREQnLFxuICAgIGNvbnRlbnQ6ICfsm5TsnbwnLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn64Kg7KecKE1NLUREKSDrjbDsnbTthLDsnZgg67aA7KCV7ZmV7ZWcIOyeheugpTxiciAvPuyEpOuqhTog7JuULCDsnbzsnpDqsITsnZgg7ZGc7KSA642w7J207YSw7ZiV7Iud7J2AIO2VmOydtO2UiCgtKeydhCDsgqzsmqntlZjsl6wg7ZGc6riwJyxcbiAgICBleGFtcGxlOiAn7ZGc7KSA7ZiV7IudOjk5LTk5PGJyIC8+7JiI7IucOiDikaA1LTkgLT4gMDUtMDkg4pGhNS45IC0+IDA1OjA5JyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi0xMCcsXG4gICAgaWQ6ICdkdEhIMjQnLFxuICAgIGdyb3VwOiAn64Kg7KecJyxcbiAgICBsYWJlbDogJ0hIMjQnLFxuICAgIGNvbnRlbnQ6ICfsi5zqsIQnLFxuICAgIGVycm9yRGlzY3JpcHRpb246ICfrgqDsp5woSEgyNCkg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOyLnOqwhCjsiKvsnpAy7J6Q66asKSDsgqzsmqntlZjsl6wg7ZGc6riwJyxcbiAgICBleGFtcGxlOiAn7ZGc7KSA7ZiV7IudOjk5PGJyIC8+7JiI7IucOiDikaA5IC0+IDA5IOKRoTnsi5wgLT4gMDknLFxuICB9LFxuICB7XG4gICAgaW5kZXg6ICc2LTExJyxcbiAgICBpZDogJ2R0WVlZWScsXG4gICAgZ3JvdXA6ICfrgqDsp5wnLFxuICAgIGxhYmVsOiAnWVlZWScsXG4gICAgY29udGVudDogJ+yXsOuPhCcsXG4gICAgZXJyb3JEaXNjcmlwdGlvbjogJ+uCoOynnChZWVlZKSDrjbDsnbTthLDsnZgg67aA7KCV7ZmV7ZWcIOyeheugpTxiciAvPuyEpOuqhTog64WE64+EKOyIq+yekDTsnpDrpqwpIOyCrOyaqe2VmOyXrCDtkZzquLAnLFxuICAgIGV4YW1wbGU6ICftkZzspIDtmJXsi506IDk5OTk8YnIgLz7smIjsi5w6IOKRoDIx64WEIC0+IDIwMjEg4pGhMjAyMeuFhCAtPiAyMDIxJyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi0xMicsXG4gICAgaWQ6ICdkdEREJyxcbiAgICBncm91cDogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdERCcsXG4gICAgY29udGVudDogJ+ydvOyekCcsXG4gICAgZXJyb3JEaXNjcmlwdGlvbjogJ+uCoOynnChERCkg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOydvOyekCjsiKvsnpAy7J6Q66asKSDsgqzsmqntlZjsl6wg7ZGc6riwJyxcbiAgICBleGFtcGxlOiAn7ZGc7KSA7ZiV7IudOiA5OTxiciAvPuyYiOyLnDog4pGgNeyblCAtPiAwNSDikaE1IC0+IDA1JyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi0xMycsXG4gICAgaWQ6ICdkdE1JJyxcbiAgICBncm91cDogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdNSScsXG4gICAgY29udGVudDogJ+u2hCcsXG4gICAgZXJyb3JEaXNjcmlwdGlvbjogJ+uCoOynnChNSSkg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOu2hCjsiKvsnpAy7J6Q66asKSDsgqzsmqntlZjsl6wg7ZGc6riwJyxcbiAgICBleGFtcGxlOiAn7ZGc7KSA7ZiV7IudOiA5OTxiciAvPuyYiOyLnDog4pGgNeu2hCAtPiAwNSDikaE1IC0+IDA1JyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi0xNCcsXG4gICAgaWQ6ICdkdE1NJyxcbiAgICBncm91cDogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdNTScsXG4gICAgY29udGVudDogJ+yblCcsXG4gICAgZXJyb3JEaXNjcmlwdGlvbjogJ+uCoOynnChNTSkg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOyblCjsiKvsnpAy7J6Q66asKSDsgqzsmqntlZjsl6wg7ZGc6riwJyxcbiAgICBleGFtcGxlOiAn7ZGc7KSA7ZiV7IudOiA5OTxiciAvPuyYiOyLnDog4pGgNeyblCAtPiAwNSDikaE17JuUIC0+IDA1JyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi0xNScsXG4gICAgaWQ6ICdkdFNTJyxcbiAgICBncm91cDogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdTUycsXG4gICAgY29udGVudDogJ+y0iCcsXG4gICAgZXJyb3JEaXNjcmlwdGlvbjogJ+uCoOynnChTUykg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOy0iCjsiKvsnpAy7J6Q66asKSDsgqzsmqntlZjsl6wg7ZGc6riwJyxcbiAgICBleGFtcGxlOiAn7ZGc7KSA7ZiV7IudOiA5OTxiciAvPuyYiOyLnDog4pGgNey0iCAtPiAwNSDikaE1IC0+IDA1JyxcbiAgfSxcbiAge1xuICAgIGluZGV4OiAnNi0xNicsXG4gICAgaWQ6ICdkdE1JU1MnLFxuICAgIGdyb3VwOiAn64Kg7KecJyxcbiAgICBsYWJlbDogJ01JOlNTJyxcbiAgICBjb250ZW50OiAn67aE7LSIJyxcbiAgICBlcnJvckRpc2NyaXB0aW9uOlxuICAgICAgJ+uCoOynnChNSTpTUykg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOu2hCwg7LSI6rCE7JeQ64qUIOy9nOuhoCg6KeydhCDsgqzsmqntlZjsl6wg7ZGc6riwJyxcbiAgICBleGFtcGxlOiAn7ZGc7KSA7ZiV7IudOiA5OTo5OTxiciAvPuyYiOyLnDog4pGgNToxIC0+IDA1OjAxIOKRoTUuMSAtPiAwNTowMScsXG4gIH0sXG4gIHtcbiAgICBpbmRleDogJzctMScsXG4gICAgaWQ6ICdudW1QaG9uZScsXG4gICAgZ3JvdXA6ICfrsojtmLgnLFxuICAgIGxhYmVsOiAn7KCE7ZmU67KI7Zi4JyxcbiAgICBlcnJvckRpc2NyaXB0aW9uOlxuICAgICAgJ+uyiO2YuCjsoITtmZTrsojtmLgpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDrsojtmLgo7KCE7ZmU67KI7Zi4KeuKlCDri6TslpHtlZwg7Jyg7ZiV7J2YIO2MqO2EtCjsg4HshLjslYjrgrTssLjsobApIOyhtOyerO2VmOqzoCwg7Iir7J6Q7JmAIO2VmOydtO2UiCgtKeycvOuhnOunjCDtkZzquLAsIOycoO2YleuzhCDsnpDrpr/siJgg7KSA7JqpJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ+2RnOykgO2YleyLnTog4pGgOTktOTk5LTk5OTkg4pGhOTktOTk5OS05OTk5IOKRojk5OS05OTktOTk5OSDrk7E8YnIgLz7smIjsi5w6IOKRoDA2MzI3MTQ3OTAgLT4gMDYzLTI3MS00NzkwIOKRoTA2MykyNzE0NzkwIC0+IDA2My0yNzEtNDc5MCDikaIwNjMtIDI3MS0gNDc5MCAtPiAwNjMtMjcxLTQ3OTAnLFxuICB9LFxuICB7XG4gICAgaW5kZXg6ICc3LTInLFxuICAgIGlkOiAnbnVtUG9zdGFsQ29kZScsXG4gICAgZ3JvdXA6ICfrsojtmLgnLFxuICAgIGxhYmVsOiAn7Jqw7Y6467KI7Zi4JyxcbiAgICBlcnJvckRpc2NyaXB0aW9uOlxuICAgICAgJ+uyiO2YuCjsmrDtjrjrsojtmLgpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDrsojtmLgo7Jqw7Y6467KI7Zi4KeuKlCDsi6DsmrDtjrjrsojtmLgsIOq1rOyasO2OuOuyiO2YuOuhnCDqtazrtoTtlZjqs6AsIOyIq+yekOyZgCDtlZjsnbTtlIgoLSnsnLzroZzrp4wg7ZGc6riwLCDsnKDtmJXrs4Qg7J6Q66a/7IiYIOykgOyaqScsXG4gICAgZXhhbXBsZTpcbiAgICAgICftkZzspIDtmJXsi506IOKRoOyLoOyasO2OuOuyiO2YuCA5OTk5OSDikaHqtazsmrDtjrjrsojtmLggOTk5LTk5OSA8YnIgLz7smIjsi5w6IOKRoCg0Njk4NykgLT4gNDY5ODcg4pGhNzAxNzIxIC0+IDcwMS03MjEg4pGiNjk4NyAtPiAwNjk4NycsXG4gIH0sXG4gIHtcbiAgICBpbmRleDogJzctMycsXG4gICAgaWQ6ICdudW1CdXNpbmVzcycsXG4gICAgZ3JvdXA6ICfrsojtmLgnLFxuICAgIGxhYmVsOiAn7IKs7JeF7J6Q67KI7Zi4JyxcbiAgICBlcnJvckRpc2NyaXB0aW9uOlxuICAgICAgJ+uyiO2YuCjsgqzsl4XsnpDrsojtmLgpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDrsojtmLgo7IKs7JeF7J6Q67KI7Zi4KeuKlCDsiKvsnpDsmYAg7ZWY7J207ZSIKC0p7Jy866Gc66eMIO2RnOq4sCwgM+yekOumrC0y7J6Q66asLTXsnpDrpqwg7J6Q66a/7IiY66W8IOykgOyaqScsXG4gICAgZXhhbXBsZTpcbiAgICAgICftkZzspIDtmJXsi506IOKRoDk5OS05OS05OTk5OTxiciAvPuyYiOyLnDog4pGgNDAyMDM4Nzk1NiAtPiA0MDItMDMtODc5NTYg4pGhNDAyIDAzIDg3OTU2IC0+IDQwMi0wMy04Nzk1NicsXG4gIH0sXG4gIHtcbiAgICBpbmRleDogJzctNCcsXG4gICAgaWQ6ICdudW1QYXR0ZXJuJyxcbiAgICBncm91cDogJ+uyiO2YuCcsXG4gICAgbGFiZWw6ICftjKjthLTsp4DsoJXrsojtmLgnLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn67KI7Zi4KO2MqO2EtOyngOygleuyiO2YuCkg642w7J207YSw7J2YIOu2gOygle2Zle2VnCDsnoXroKU8YnIgLz7shKTrqoU6IOuyiO2YuCjtjKjthLTsp4DsoJXrsojtmLgp64qUIOyngOygle2VnCDsnKDtmJXsnZgg7Yyo7YS067KI7Zi466eMIOycoO2aqO2VmOqzoCwg7Iir7J6Q7JmAIO2VmOydtO2UiCgtKeycvOuhnOunjCDtkZzquLAsIOyngOygle2VnCDsnpDrpr/siJgg7KSA7JqpJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ+2RnOykgO2YleyLnTog7Yyo7YS0IOyngOyglSDsmIjsi5wg7KO87LCo7J6l6rSA66as67KI7Zi4IE5OTi1OLU5OTk5OTjxiciAvPuyYiOyLnDog4pGgMTAwLTAxLTAwMDAwMSAtPiAxMDAtMS0wMDAwMDEnLFxuICB9LFxuICB7XG4gICAgaW5kZXg6ICc4JyxcbiAgICBpZDogJ2NvblRpbWUnLFxuICAgIGdyb3VwOiAn7J286rSA7ISxJyxcbiAgICBsYWJlbDogJ+yLnOqwhOyInOyEnCDsnbzqtIDshLEnLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn7Iuc6rCE7Iic7IScIOuNsOydtO2EsOydmCDtla3rqqnqs7wg7ZWt66qp7J2YIOyLnOqwhOyInOyEnCDqt5zsuZkg7Jik66WYPGJyIC8+7ISk66qFOiDsi5zqsITsiJzshJwg642w7J207YSwIO2VreuqqSDqsIQg7KCQ6rKA7J2AIO2VreuqqeqzvCDtla3rqqnsnZgg7Iuc6rCE7Iic7IScIOq3nOy5meyXkCDrlLDrnbwg7J6F66ClJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ+2RnOykgO2YleyLnTog7Iuc7J6R7J287J6QIDIwMjEtMDEtMDEg7KKF66OM7J287J6QIDIwMjEtMTItMzEgKOyiheujjOydvOyekOuKlCDsi5zsnpHsnbzsnpDrs7Tri6Qg6rCZ6rGw64KYIOy7pOyVvCDrkJjripQg6rec7LmZKTxiciAvPuyYiOyLnDog7Iuc7J6R7J287J6QIDIwMjEtMTItMzEg7KKF66OM7J287J6QIDIwMjEtMDEtMDEgKOyLnOyekeydvOyekOqwgCDsooXro4zsnbzsnpAg67O064ukIO2BvCknLFxuICB9LFxuICB7XG4gICAgaW5kZXg6ICc5JyxcbiAgICBpZDogJ2NvbkxvZ2ljUmVsYXRpb25TaGlwJyxcbiAgICBncm91cDogJ+ydvOq0gOyEsScsXG4gICAgbGFiZWw6ICfsu6zrn7wg6rCEIOuFvOumrOq0gOqzhCDsnbzqtIDshLEnLFxuICB9LFxuICB7XG4gICAgaW5kZXg6ICcxMC0xJyxcbiAgICBpZDogJ2NhbEZvcm11bGEnLFxuICAgIGdyb3VwOiAn6rOE7IKw7IudJyxcbiAgICBsYWJlbDogJ+yCsOyLnScsXG4gICAgZXJyb3JEaXNjcmlwdGlvbjpcbiAgICAgICfqs4TsgrDsi50gPiDsgrDsi50g642w7J207YSw7J2YIO2VreuqqSDrjbDsnbTthLDqsITsnZgg6rOE7IKwIOyCsOyLnSDqt5zsuZkg7Jik66WYPGJyIC8+7ISk66qFOiDsgrDsi50g642w7J207YSwIO2VreuqqSDqsIQg7KeE64uo7J2AIO2VreuqqeqzvCDtla3rqqnsnZgg6rOE7IKwIOyCsOyLnSDqt5zsuZnsl5Ag65Sw6528IOyeheugpScsXG4gICAgZXhhbXBsZTpcbiAgICAgICftkZzspIDtmJXsi506IOyLnOqwhOuLueyDneyCsOufiSAxMiA9IOyDneyCsOufiSAxMjAv6rCA64+Z7Iuc6rCEIDEwICjsi5zqsITri7nsg53sgrDrn4nsnYAg7IOd7IKw65+JIOuCmOuIhOq4sCDqsIDrj5nsi5zqsIQg6rec7LmZKTxiciAvPuyYiOyLnDog7Iuc6rCE64u57IOd7IKw65+JIDExID0g7IOd7IKw65+JIDEyMC/qsIDrj5nsi5zqsIQgMTAgKOqzhOyCsOyLneyXkCDrp57sp4Ag7JWK7J2MKScsXG4gIH0sXG4gIHtcbiAgICBpbmRleDogJzEwLTInLFxuICAgIGlkOiAnY2FsU3VtJyxcbiAgICBncm91cDogJ+qzhOyCsOyLnScsXG4gICAgbGFiZWw6ICftlanqs4QnLFxuICAgIGVycm9yRGlzY3JpcHRpb246XG4gICAgICAn6rOE7IKw7IudID4g7ZWp6rOEIOuNsOydtO2EsOydmCDtla3rqqkg642w7J207YSw6rCE7J2YIOqzhOyCsCDtlanqs4Qg6rec7LmZIOyYpOulmDxiciAvPuyEpOuqhTog6rOE7IKwIO2VqeqzhCDrjbDsnbTthLAg7ZWt66qpIOqwhCDsp4Tri6jsnYAg7ZWt66qp6rO8IO2VreuqqeydmCDqs4TsgrAg7ZWp6rOEIOq3nOy5meyXkCDrlLDrnbwg7J6F66ClJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ+2RnOykgO2YleyLnTrsoITqta3rp6TstpzslaEo7Ja17JuQKSAxMjAgPSDshJzsmrjrp6TstpzslaEgNjAgKyDrtoDsgrDrp6TstpzslaEgNDAgKyDrjIDqtazrp6TstpzslaEgMjAgKOyghOq1reunpOy2nOyVoeydgCDshJzsmrgsIOu2gOyCsCwg64yA6rWsIOunpOy2nOyVoeydmCDtlanqs4Qg6rec7LmZIOyhtOyerCk8YnIgLz7smIjsi5w6IOyghOq1reunpOy2nOyVoSjslrXsm5ApIDEyMCA9IOyEnOyauOunpOy2nOyVoSA2MCArIOu2gOyCsOunpOy2nOyVoSA0MCArIOuMgOq1rOunpOy2nOyVoSAxMCAo6rOE7IKwIO2VqeqzhCDqt5zsuZnsl5Ag66ee7KeAIOyViuydjCknLFxuICB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IGdyb3VwZWRSdWxlc2V0ID0gZ28oXG4gIHJ1bGVzZXQsXG4gIGdyb3VwQnkoKHsgaW5kZXggfSkgPT4gaW5kZXguaW5jbHVkZXMoJy0nKSksXG4gIGVudHJpZXMsXG4gIG1hcCgoW2tleSwgdmFsdWVdKSA9PiB2YWx1ZSksXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0UnVsZXNldEdyb3VwID0gZGlhZ1R5cGVJZCA9PiB7XG4gIGlmIChkaWFnVHlwZUlkLmluY2x1ZGVzKCdzdHInKSkgcmV0dXJuICfrrLjsnpDsl7QnO1xuICBlbHNlIGlmIChkaWFnVHlwZUlkLmluY2x1ZGVzKCdhbXQnKSkgcmV0dXJuICfquIjslaEnO1xuICBlbHNlIGlmIChkaWFnVHlwZUlkLmluY2x1ZGVzKCdxdHQnKSkgcmV0dXJuICfsiJjrn4knO1xuICBlbHNlIGlmIChkaWFnVHlwZUlkLmluY2x1ZGVzKCdwZWMnKSkgcmV0dXJuICfsnKgnO1xuICBlbHNlIGlmIChkaWFnVHlwZUlkLmluY2x1ZGVzKCd3aGUnKSkgcmV0dXJuICfsl6zrtoAnO1xuICBlbHNlIGlmIChkaWFnVHlwZUlkLmluY2x1ZGVzKCdkdCcpKSByZXR1cm4gJ+uCoOynnCc7XG4gIGVsc2UgaWYgKGRpYWdUeXBlSWQuaW5jbHVkZXMoJ251bScpKSByZXR1cm4gJ+uyiO2YuCc7XG4gIGVsc2UgaWYgKGRpYWdUeXBlSWQuaW5jbHVkZXMoJ2NvbicpKSByZXR1cm4gJ+ydvOq0gOyEsSc7XG4gIGVsc2UgaWYgKGRpYWdUeXBlSWQuaW5jbHVkZXMoJ2NhbCcpKSByZXR1cm4gJ+qzhOyCsOyLnSc7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UnVsZXNldExhYmVsID0gZGlhZ1R5cGVJZCA9PlxuICBydWxlc2V0LmZpbmQoKHsgaWQgfSkgPT4gZGlhZ1R5cGVJZC5pbmNsdWRlcyhpZCkpLmxhYmVsO1xuXG5leHBvcnQgY29uc3QgZ2V0RGF0ZVJ1bGVzZXRGb3JtYXQgPSBkaWFnVHlwZUlkID0+IHtcbiAgc3dpdGNoIChkaWFnVHlwZUlkKSB7XG4gICAgY2FzZSAnZHRZWVlZTU1EREhIMjRNSVNTJzpcbiAgICAgIHJldHVybiAneXl5eS1NTS1kZCBISDptbTpzcyc7XG4gICAgY2FzZSAnZHRZWVlZTU1EREhIMjRNSSc6XG4gICAgICByZXR1cm4gJ3l5eXktTU0tZGQgSEg6bW0nO1xuICAgIGNhc2UgJ2R0WVlZWU1NRERISDI0JzpcbiAgICAgIHJldHVybiAneXl5eS1NTS1kZCBISCc7XG4gICAgY2FzZSAnZHRNTURESEgyNE1JJzpcbiAgICAgIHJldHVybiAnTU0tZGQgSEg6bW0nO1xuICAgIGNhc2UgJ2R0SEgyNE1JU1MnOlxuICAgICAgcmV0dXJuICdISDptbTpzcyc7XG4gICAgY2FzZSAnZHRZWVlZTU1ERCc6XG4gICAgICByZXR1cm4gJ3l5eXktTU0tZGQnO1xuICAgIGNhc2UgJ2R0SEgyNE1JJzpcbiAgICAgIHJldHVybiAnSEg6bW0nO1xuICAgIGNhc2UgJ2R0WVlZWU1NJzpcbiAgICAgIHJldHVybiAneXl5eS1NTSc7XG4gICAgY2FzZSAnZHRNTUREJzpcbiAgICAgIHJldHVybiAnTU0tZGQnO1xuICAgIGNhc2UgJ2R0SEgyNCc6XG4gICAgICByZXR1cm4gJ0hIJztcbiAgICBjYXNlICdkdFlZWVknOlxuICAgICAgcmV0dXJuICd5eXl5JztcbiAgICBjYXNlICdkdEREJzpcbiAgICAgIHJldHVybiAnZGQnO1xuICAgIGNhc2UgJ2R0TUknOlxuICAgICAgcmV0dXJuICdtbSc7XG4gICAgY2FzZSAnZHRNTSc6XG4gICAgICByZXR1cm4gJ01NJztcbiAgICBjYXNlICdkdFNTJzpcbiAgICAgIHJldHVybiAnc3MnO1xuICAgIGNhc2UgJ2R0TUlTUyc6XG4gICAgICByZXR1cm4gJ21tOnNzJztcbiAgfVxufTtcbiIsImltcG9ydCBlbnRyaWVzTCBmcm9tIFwiLi4vTGF6eS9lbnRyaWVzTC5qc1wiO1xuaW1wb3J0IHRha2VBbGwgZnJvbSBcIi4vdGFrZUFsbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW50cmllcyhhKSB7XG4gIHJldHVybiB0YWtlQWxsKGVudHJpZXNMKGEpKTtcbn0iLCJpbXBvcnQgeyBpc01hdGNoLCBmb3JtYXQsIHBhcnNlLCBwYXJzZUlTTyB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IGdldERhdGVSdWxlc2V0Rm9ybWF0IH0gZnJvbSAnQC9jb25zdGFudHMvcnVsZXNldCc7XG5cbmV4cG9ydCBjb25zdCBkYXRlUnVsZXNldCA9IHtcbiAgdmFsaWQ6IChjZWxsLCB7IGlkIH0pID0+IHtcbiAgICBpZiAodHlwZW9mIGNlbGwgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIChcbiAgICAgIGlzTWF0Y2goY2VsbCwgZ2V0RGF0ZVJ1bGVzZXRGb3JtYXQoaWQpKSAmJiBjZWxsLmxlbmd0aCA9PT0gZ2V0RGF0ZVJ1bGVzZXRGb3JtYXQoaWQpLmxlbmd0aFxuICAgICk7XG4gIH0sXG4gIHJlcGFpcjogKGNlbGwsIHsgaWQgfSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGNlbGw7XG4gICAgdHJ5IHtcbiAgICAgIHN3aXRjaCAoaWQpIHtcbiAgICAgICAgY2FzZSAnZHRZWVlZTU1EREhIMjRNSVNTJzpcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAucmVwbGFjZUFsbCgnLycsICctJylcbiAgICAgICAgICAgIC5yZXBsYWNlQWxsKCcuJywgJy0nKVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoXCInXCIsICcyMCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvKOuFhOuPhHzrhYR87JuUKS9nLCAnLScpXG4gICAgICAgICAgICAucmVwbGFjZSgv7J28LywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyjsi5x867aEKS8sICc6JylcbiAgICAgICAgICAgIC5yZXBsYWNlKC/stIgvLCAnJyk7XG4gICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMTQpXG4gICAgICAgICAgICB2YWx1ZSA9IGAke3ZhbHVlLnNsaWNlKDAsIDQpfS0ke3ZhbHVlLnNsaWNlKDQsIDYpfS0ke3ZhbHVlLnNsaWNlKDYsIDgpfSAke3ZhbHVlLnNsaWNlKFxuICAgICAgICAgICAgICA4LFxuICAgICAgICAgICAgICAxMCxcbiAgICAgICAgICAgICl9OiR7dmFsdWUuc2xpY2UoMTAsIDEyKX06JHt2YWx1ZS5zbGljZSgxMiwgMTQpfWA7XG4gICAgICAgICAge1xuICAgICAgICAgICAgbGV0IFt5LCBtLCBkLCBoLCBtaSwgc10gPSB2YWx1ZS5zcGxpdCgvWy1cXHM6XS9nKTtcbiAgICAgICAgICAgIHZhbHVlID1cbiAgICAgICAgICAgICAgW3ksIG0ucGFkU3RhcnQoMiwgJzAnKSwgZC5wYWRTdGFydCgyLCAnMCcpXS5qb2luKCctJykgK1xuICAgICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgICBbaC5wYWRTdGFydCgyLCAnMCcpLCBtaS5wYWRTdGFydCgyLCAnMCcpLCBzLnBhZFN0YXJ0KDIsICcwJyldLmpvaW4oJzonKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2R0WVlZWU1NRERISDI0TUknOlxuICAgICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIC5yZXBsYWNlQWxsKCcvJywgJy0nKVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoJy4nLCAnLScpXG4gICAgICAgICAgICAucmVwbGFjZUFsbChcIidcIiwgJzIwJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8o64WE64+EfOuFhHzsm5QpL2csICctJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC/si5wvLCAnOicpXG4gICAgICAgICAgICAucmVwbGFjZSgv7J28LywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL+u2hC8sICcnKTtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsZXQgW3ksIG0sIGQsIGgsIG1pXSA9IHZhbHVlLnNwbGl0KC9bLVxcczpdL2cpO1xuICAgICAgICAgICAgdmFsdWUgPVxuICAgICAgICAgICAgICBbeSwgbS5wYWRTdGFydCgyLCAnMCcpLCBkLnBhZFN0YXJ0KDIsICcwJyldLmpvaW4oJy0nKSArXG4gICAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBoLnBhZFN0YXJ0KDIsICcwJykuc2xpY2UoMCwgMiksXG4gICAgICAgICAgICAgICAgISFtaSA/IG1pLnBhZFN0YXJ0KDIsICcwJykgOiBoLnNsaWNlKGgubGVuZ3RoIC0gMSkucGFkU3RhcnQoMiwgJzAnKSxcbiAgICAgICAgICAgICAgXS5qb2luKCc6Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkdFlZWVlNTURESEgyNCc6XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoJy8nLCAnLScpXG4gICAgICAgICAgICAucmVwbGFjZUFsbCgnLicsICctJylcbiAgICAgICAgICAgIC5yZXBsYWNlQWxsKFwiJ1wiLCAnMjAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyjrhYTrj4R864WEfOyblCkvZywgJy0nKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyjsnbx87IucKS9nLCAnJyk7XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgW3ksIG0sIGRdID0gdmFsdWUuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGlmIChkID4gMilcbiAgICAgICAgICAgICAgdmFsdWUgPVxuICAgICAgICAgICAgICAgIFt5LCBtLnBhZFN0YXJ0KDIsICcwJyksIGQuc2xpY2UoMCwgMildLmpvaW4oJy0nKSArXG4gICAgICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgICAgICBkLnNsaWNlKDIpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgdmFsdWU6ICR7dmFsdWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkdE1NRERISDI0TUknOlxuICAgICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIC5yZXBsYWNlQWxsKCcvJywgJy0nKVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoJy4nLCAnLScpXG4gICAgICAgICAgICAucmVwbGFjZUFsbChcIidcIiwgJzIwJylcbiAgICAgICAgICAgIC5yZXBsYWNlKCfsm5QnLCAnLScpXG4gICAgICAgICAgICAucmVwbGFjZSgvKOyLnHzsi5zqsIQpLywgJzonKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyjsnbx867aEKS9nLCAnJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2R0SEgyNE1JU1MnOlxuICAgICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIC5yZXBsYWNlKC8o7Iuc6rCEfOyLnHzrtoQpL2csICc6JylcbiAgICAgICAgICAgIC5yZXBsYWNlKC/stIgvLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bOy8vLi1dL2csICc6JylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXjAtOTpdL2csICc6Jyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2R0WVlZWU1NREQnOlxuICAgICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIC5yZXBsYWNlQWxsKCcvJywgJy0nKVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoJy4nLCAnLScpXG4gICAgICAgICAgICAucmVwbGFjZUFsbChcIidcIiwgJzIwJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8o64WE64+EfOuFhHzsm5QpL2csICctJylcbiAgICAgICAgICAgIC5yZXBsYWNlKCfsnbwnLCAnJyk7XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gOCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IGAke3ZhbHVlLnNsaWNlKDAsIDQpfS0ke3ZhbHVlLnNsaWNlKDUsIDYpfS0ke3ZhbHVlLnNsaWNlKDcsIDgpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBbeSwgbSwgZF0gPSB2YWx1ZS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaWYgKG0ubGVuZ3RoID09PSAxIHx8IGQubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICB2YWx1ZSA9IFt5LCBtLnBhZFN0YXJ0KDIsICcwJyksIGQucGFkU3RhcnQoMiwgJzAnKV0uam9pbignLScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZHRISDI0TUknOlxuICAgICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIC5yZXBsYWNlKC8o7Iuc6rCEfOyLnCkvLCAnOicpXG4gICAgICAgICAgICAucmVwbGFjZSgv67aELywgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvWzsvLy4tXS9nLCAnOicpXG4gICAgICAgICAgICAucmVwbGFjZSgvW14wLTk6XS9nLCAnJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2R0WVlZWU1NJzpcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAucmVwbGFjZUFsbCgnICcsICcnKVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoJy8nLCAnLScpXG4gICAgICAgICAgICAucmVwbGFjZUFsbCgnLicsICctJylcbiAgICAgICAgICAgIC5yZXBsYWNlQWxsKFwiJ1wiLCAnMjAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyjrhYTrj4R864WEKS9nLCAnLScpXG4gICAgICAgICAgICAucmVwbGFjZSgn7JuUJywgJycpO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxldCBbeSwgbV0gPSB2YWx1ZS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaWYgKHkubGVuZ3RoIDwgbS5sZW5ndGgpIFt5LCBtXSA9IFttLCB5XTtcbiAgICAgICAgICAgIHZhbHVlID0gW3ksIG0ucGFkU3RhcnQoMiwgJzAnKV0uam9pbignLScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZHRNTUREJzpcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1svLuyblF0vZywgJy0nKS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZHRISDI0JzpcbiAgICAgICAgY2FzZSAnZHRZWVlZJzpcbiAgICAgICAgY2FzZSAnZHRERCc6XG4gICAgICAgIGNhc2UgJ2R0TUknOlxuICAgICAgICBjYXNlICdkdE1NJzpcbiAgICAgICAgY2FzZSAnZHRTUyc6XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgLnJlcGxhY2UoXCInXCIsICcyMCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvW14wLTldL2csICcnKVxuICAgICAgICAgICAgLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2R0TUlTUyc6XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgLnJlcGxhY2UoJ+u2hCcsICc6JylcbiAgICAgICAgICAgIC5yZXBsYWNlKCfstIgnLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXjAtOTpdL2csICcnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JtYXQocGFyc2UodmFsdWUsIGdldERhdGVSdWxlc2V0Rm9ybWF0KGlkKSwgbmV3IERhdGUoKSksIGdldERhdGVSdWxlc2V0Rm9ybWF0KGlkKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgfSxcbn07XG4iLCJpbXBvcnQgcGFyc2UgZnJvbSBcIi4uL3BhcnNlL2luZGV4LmpzXCI7XG5pbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAbmFtZSBpc01hdGNoXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IHZhbGlkYXRlcyB0aGUgZGF0ZSBzdHJpbmcgYWdhaW5zdCBnaXZlbiBmb3JtYXRzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHRydWUgaWYgZ2l2ZW4gZGF0ZSBpcyBzdHJpbmcgY29ycmVjdCBhZ2FpbnN0IHRoZSBnaXZlbiBmb3JtYXQgZWxzZVxuICogd2lsbCByZXR1cm4gZmFsc2UuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgaW4gdGhlIGZvcm1hdCBzdHJpbmcgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKlxuICogRm9ybWF0IG9mIHRoZSBmb3JtYXQgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA1IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogTm90IGFsbCB0b2tlbnMgYXJlIGNvbXBhdGlibGUuIENvbWJpbmF0aW9ucyB0aGF0IGRvbid0IG1ha2Ugc2Vuc2Ugb3IgY291bGQgbGVhZCB0byBidWdzIGFyZSBwcm9oaWJpdGVkXG4gKiBhbmQgd2lsbCB0aHJvdyBgUmFuZ2VFcnJvcmAuIEZvciBleGFtcGxlIHVzYWdlIG9mIDI0LWhvdXIgZm9ybWF0IHRva2VuIHdpdGggQU0vUE0gdG9rZW4gd2lsbCB0aHJvdyBhbiBleGNlcHRpb246XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaXNNYXRjaCgnMjMgQU0nLCAnSEggYScpXG4gKiAvLz0+IFJhbmdlRXJyb3I6IFRoZSBmb3JtYXQgc3RyaW5nIG11c3RuJ3QgY29udGFpbiBgSEhgIGFuZCBgYWAgYXQgdGhlIHNhbWUgdGltZVxuICogYGBgXG4gKlxuICogU2VlIHRoZSBjb21wYXRpYmlsaXR5IHRhYmxlOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC9lLzJQQUNYLTF2UU9QVTN4VWhwbGxsNmR5b01tVlVYSEtsXzhDUkRzNl91ZUxtZXgzU29xd2h1b2xrdU4zTzA1bDRycXg1aDFkS1g4ZWI0NlVsLUNDU3JxL3B1Ymh0bWw/Z2lkPTAmc2luZ2xlPXRydWVcbiAqXG4gKiBBY2NlcHRlZCBmb3JtYXQgc3RyaW5nIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxQcmlvcnwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAxNDAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCAxMzAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcsIDk5OTkgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCA5OTk5OTk5dGggICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDEyMywgOTk5ICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyLDQgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCAxMzAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcsIDkwMDAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCA5OTk5OTk5dGggICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA0LDYgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDEyMywgOTk5ICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDQsNiAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyLDQgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCAxMzAgfCBSICAgICAgIHwgLTQzLCAxLCAxOTAwLCAyMDE3LCA5OTk5LCAtOTk5OSAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUlIgICAgICB8IC00MywgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDEsIDEyMywgOTk5LCAtOTk5ICAgICAgICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDEsIDIwMTcsIDk5OTksIC05OTk5ICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIsNCw1IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IDEzMCB8IHUgICAgICAgfCAtNDMsIDEsIDE5MDAsIDIwMTcsIDk5OTksIC05OTkgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgOTksIC05OSAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTIzLCA5OTksIC05OTkgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMjAxNywgOTk5OSwgLTk5OTkgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiw0ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgMTIwIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgMTIwIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgMTEwIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgMTEwIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgMTAwIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgMTAwIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgIDkwIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgIDkwIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCAgOTAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdSAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgIDkwIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3UgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDUgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8ICA5MCB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCAgOTAgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdSAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDgwIHwgYS4uYWFhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgIDgwIHwgYi4uYmJiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgIDgwIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDYwIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDUwIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgIDQwIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCAgMzAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgIDIwIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCAgMTAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8ICAxMCB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgIE5BIHwgUCAgICAgICB8IDA1LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQICAgICAgfCBNYXkgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFAgICAgIHwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBQUCAgICB8IFN1bmRheSwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICB8IDIsNSw4IHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8ICBOQSB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgIE5BIHwgUHAgICAgICB8IDA1LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQcHAgICAgfCBNYXkgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFBwcCAgIHwgTWF5IDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBQUHBwICB8IFN1bmRheSwgTWF5IDI5dGgsIDE0NTMgYXQgLi4uICAgICB8IDIsNSw4IHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXIuXG4gKiAgICBJbiBgZm9ybWF0YCBmdW5jdGlvbiwgdGhleSB3aWxsIHByb2R1Y2UgZGlmZmVyZW50IHJlc3VsdDpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogICAgYGlzTWF0Y2hgIHdpbGwgdHJ5IHRvIG1hdGNoIGJvdGggZm9ybWF0dGluZyBhbmQgc3RhbmQtYWxvbmUgdW5pdHMgaW50ZXJjaGFuZ2FibHkuXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlOlxuICogICAgLSBmb3IgbnVtZXJpY2FsIHVuaXRzIChgeXl5eXl5eXlgKSBgaXNNYXRjaGAgd2lsbCB0cnkgdG8gbWF0Y2ggYSBudW1iZXJcbiAqICAgICAgYXMgd2lkZSBhcyB0aGUgc2VxdWVuY2VcbiAqICAgIC0gZm9yIHRleHQgdW5pdHMgKGBNTU1NTU1NTWApIGBpc01hdGNoYCB3aWxsIHRyeSB0byBtYXRjaCB0aGUgd2lkZXN0IHZhcmlhdGlvbiBvZiB0aGUgdW5pdC5cbiAqICAgICAgVGhlc2UgdmFyaWF0aW9ucyBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAzLiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA0LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIHdpbGwgdHJ5IHRvIGd1ZXNzIHRoZSBjZW50dXJ5IG9mIHR3byBkaWdpdCB5ZWFyIGJ5IHByb3hpbWl0eSB3aXRoIGByZWZlcmVuY2VEYXRlYDpcbiAqXG4gKiAgICBgaXNNYXRjaCgnNTAnLCAneXknKSAvLz0+IHRydWVgXG4gKlxuICogICAgYGlzTWF0Y2goJzc1JywgJ3l5JykgLy89PiB0cnVlYFxuICpcbiAqICAgIHdoaWxlIGB1dWAgd2lsbCB1c2UgdGhlIHllYXIgYXMgaXM6XG4gKlxuICogICAgYGlzTWF0Y2goJzUwJywgJ3V1JykgLy89PiB0cnVlYFxuICpcbiAqICAgIGBpc01hdGNoKCc3NScsICd1dScpIC8vPT4gdHJ1ZWBcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtzZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9zZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbc2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3Mvc2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA1LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDYuIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDcuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGhlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA4LiBgUCtgIHRva2VucyBkbyBub3QgaGF2ZSBhIGRlZmluZWQgcHJpb3JpdHkgc2luY2UgdGhleSBhcmUgbWVyZWx5IGFsaWFzZXMgdG8gb3RoZXIgdG9rZW5zIGJhc2VkXG4gKiAgICBvbiB0aGUgZ2l2ZW4gbG9jYWxlLlxuICpcbiAqICAgIHVzaW5nIGBlbi1VU2AgbG9jYWxlOiBgUGAgPT4gYE1NL2RkL3l5eXlgXG4gKiAgICB1c2luZyBgZW4tVVNgIGxvY2FsZTogYHBgID0+IGBoaDptbSBhYFxuICogICAgdXNpbmcgYHB0LUJSYCBsb2NhbGU6IGBQYCA9PiBgZGQvTU0veXl5eWBcbiAqICAgIHVzaW5nIGBwdC1CUmAgbG9jYWxlOiBgcGAgPT4gYEhIOm1tYFxuICpcbiAqIFZhbHVlcyB3aWxsIGJlIGNoZWNrZWQgaW4gdGhlIGRlc2NlbmRpbmcgb3JkZXIgb2YgaXRzIHVuaXQncyBwcmlvcml0eS5cbiAqIFVuaXRzIG9mIGFuIGVxdWFsIHByaW9yaXR5IG92ZXJ3cml0ZSBlYWNoIG90aGVyIGluIHRoZSBvcmRlciBvZiBhcHBlYXJhbmNlLlxuICpcbiAqIElmIG5vIHZhbHVlcyBvZiBoaWdoZXIgcHJpb3JpdHkgYXJlIG1hdGNoZWQgKGUuZy4gd2hlbiBtYXRjaGluZyBzdHJpbmcgJ0phbnVhcnkgMXN0JyB3aXRob3V0IGEgeWVhciksXG4gKiB0aGUgdmFsdWVzIHdpbGwgYmUgdGFrZW4gZnJvbSB0b2RheSdzIHVzaW5nIGBuZXcgRGF0ZSgpYCBkYXRlIHdoaWNoIHdvcmtzIGFzIGEgY29udGV4dCBvZiBwYXJzaW5nLlxuICpcbiAqIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqIElmIGBmb3JtYXRTdHJpbmdgIG1hdGNoZXMgd2l0aCBgZGF0ZVN0cmluZ2AgYnV0IGRvZXMgbm90IHByb3ZpZGVzIHRva2VucywgYHJlZmVyZW5jZURhdGVgIHdpbGwgYmUgcmV0dXJuZWQuXG4gKlxuICpcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0ZVN0cmluZyAtIHRoZSBkYXRlIHN0cmluZyB0byB2ZXJpZnlcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXRTdHJpbmcgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0gezF8MnwzfDR8NXw2fDd9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbWF0Y2hgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnM7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGg7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIE1hdGNoIDExIEZlYnJ1YXJ5IDIwMTQgZnJvbSBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIHZhciByZXN1bHQgPSBpc01hdGNoKCcwMi8xMS8yMDE0JywgJ01NL2RkL3l5eXknKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIE1hdGNoIDI4dGggb2YgRmVicnVhcnkgaW4gRXNwZXJhbnRvIGxvY2FsZSBpbiB0aGUgY29udGV4dCBvZiAyMDEwIHllYXI6XG4gKiBpbXBvcnQgZW8gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGlzTWF0Y2goJzI4LWEgZGUgZmVicnVhcm8nLCBcImRvICdkZScgTU1NTVwiLCB7XG4gKiAgIGxvY2FsZTogZW9cbiAqIH0pXG4gKiAvLz0+IHRydWVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNYXRjaChkYXRlU3RyaW5nLCBmb3JtYXRTdHJpbmcsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBpc1ZhbGlkKHBhcnNlKGRhdGVTdHJpbmcsIGZvcm1hdFN0cmluZywgbmV3IERhdGUoKSwgb3B0aW9ucykpO1xufSIsImV4cG9ydCBjb25zdCBpc0Vzc2VudGlhbCA9IGNlbGwgPT4gY2VsbCAhPT0gJycgfHwgY2VsbCAhPT0gbnVsbCB8fCBjZWxsICE9PSB1bmRlZmluZWQ7XG4iLCJleHBvcnQgY29uc3QgbnVtYmVyUnVsZXNldCA9IHtcbiAgdmFsaWQ6IChjZWxsLCB7IGlkLCBwYXR0ZXJuIH0pID0+IHtcbiAgICBpZiAoaWQgPT09ICdudW1QaG9uZScpXG4gICAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2YgY2VsbCAhPT0gJ251bWJlcicgJiZcbiAgICAgICAgKC9eXFxkezJ9LVxcZHszfS1cXGR7NH0kLy50ZXN0KGNlbGwpIHx8XG4gICAgICAgICAgL15cXGR7Mn0tXFxkezR9LVxcZHs0fSQvLnRlc3QoY2VsbCkgfHxcbiAgICAgICAgICAvXlxcZHszfS1cXGR7M30tXFxkezR9JC8udGVzdChjZWxsKSB8fFxuICAgICAgICAgIC9eXFxkezN9LVxcZHs0fS1cXGR7NH0kLy50ZXN0KGNlbGwpIHx8XG4gICAgICAgICAgL15cXGR7NH0tXFxkezR9JC8udGVzdChjZWxsKSB8fFxuICAgICAgICAgIC9eXFxkezR9LVxcZHszfS1cXGR7NH0kLy50ZXN0KGNlbGwpIHx8XG4gICAgICAgICAgL15cXGR7NH0tXFxkezR9LVxcZHs0fSQvLnRlc3QoY2VsbCkgfHxcbiAgICAgICAgICAvXlxcZHsyfS1cXGR7M30kLy50ZXN0KGNlbGwpIHx8XG4gICAgICAgICAgL15cXGR7M30tXFxkezR9JC8udGVzdChjZWxsKSB8fFxuICAgICAgICAgIC9eXFxkezN9LVxcZHszfSQvLnRlc3QoY2VsbCkgfHxcbiAgICAgICAgICAvXlxcZHszfSQvLnRlc3QoY2VsbCkgfHxcbiAgICAgICAgICAvXlxcZHs0fSQvLnRlc3QoY2VsbCkpXG4gICAgICApO1xuICAgIGlmIChpZCA9PT0gJ251bVBvc3RhbENvZGUnKVxuICAgICAgcmV0dXJuIHR5cGVvZiBjZWxsICE9PSAnbnVtYmVyJyAmJiAoL15cXGR7M30tXFxkezN9JC8udGVzdChjZWxsKSB8fCAvXlxcZHs1fSQvLnRlc3QoY2VsbCkpO1xuICAgIGlmIChpZCA9PT0gJ251bUJ1c2luZXNzJykgcmV0dXJuIHR5cGVvZiBjZWxsICE9PSAnbnVtYmVyJyAmJiAvXlxcZHszfS1cXGR7Mn0tXFxkezV9JC8udGVzdChjZWxsKTtcbiAgICBpZiAoaWQgPT09ICdudW1QYXR0ZXJuJykge1xuICAgICAgY29uc3QgcmVkdWNlZFBhdHRlcm4gPSBwYXR0ZXJuXG4gICAgICAgIC5zcGxpdCgnLScpXG4gICAgICAgIC5tYXAoXyA9PiBgXFxcXGR7JHtfLmxlbmd0aH19YClcbiAgICAgICAgLmpvaW4oJy0nKTtcbiAgICAgIGNvbnN0IHBhdHRlcm5SZWdFeHAgPSBuZXcgUmVnRXhwKGBeJHtyZWR1Y2VkUGF0dGVybn0kYCk7XG4gICAgICByZXR1cm4gcGF0dGVyblJlZ0V4cC50ZXN0KGNlbGwpO1xuICAgIH1cbiAgfSxcbiAgcmVwYWlyOiAoY2VsbCwgeyBpZCwgcGF0dGVybiB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpZCA9PT0gJ251bVBob25lJykge1xuICAgICAgICBsZXQgdmFsdWUgPSBjZWxsXG4gICAgICAgICAgLnJlcGxhY2UoL1xcKFteKV0rXFwpL2csICcnKVxuICAgICAgICAgIC5yZXBsYWNlKC8oflswLTldfCxbMC05XSkvZywgJycpXG4gICAgICAgICAgLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPT09IDhcbiAgICAgICAgICA/IHZhbHVlLnJlcGxhY2UoLyhcXGR7NH0pKFxcZHs0fSkvLCAnJDEtJDInKVxuICAgICAgICAgIDogdmFsdWUucmVwbGFjZSgvKF4wMnxeMDUwNXxeMVswLTldezN9fF4wWzAtOV17Mn0pKFswLTldKyk/KFswLTldezR9KSQvLCAnJDEtJDItJDMnKTtcbiAgICAgIH1cbiAgICAgIGlmIChpZCA9PT0gJ251bVBvc3RhbENvZGUnKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGNlbGwucmVwbGFjZSgvW14wLTldL2csICcnKTtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNikgcmV0dXJuIHZhbHVlLnJlcGxhY2UoLyheWzAtOV17M30pKFswLTldezN9KSQvLCAnJDEtJDInKTtcbiAgICAgICAgZWxzZSByZXR1cm4gdmFsdWUucGFkU3RhcnQoNSwgJzAnKTtcbiAgICAgIH1cbiAgICAgIGlmIChpZCA9PT0gJ251bUJ1c2luZXNzJykge1xuICAgICAgICBsZXQgdmFsdWUgPSBjZWxsLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XG4gICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC8oXFxkezN9KShcXGR7Mn0pKFxcZHs1fSkvLCAnJDEtJDItJDMnKTtcbiAgICAgIH1cbiAgICAgIGlmIChpZCA9PT0gJ251bVBhdHRlcm4nKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGNlbGwucmVwbGFjZSgvW14wLTldL2csICcnKTtcbiAgICAgICAgY29uc3QgcGF0dGVyblJlZ0V4cDEgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgIHBhdHRlcm5cbiAgICAgICAgICAgIC5zcGxpdCgnLScpXG4gICAgICAgICAgICAubWFwKF8gPT4gYChcXFxcZHske18ubGVuZ3RofX0pYClcbiAgICAgICAgICAgIC5qb2luKCcnKSxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcGF0dGVyblJlZ0V4cDIgPSBwYXR0ZXJuXG4gICAgICAgICAgLnNwbGl0KCctJylcbiAgICAgICAgICAubWFwKChfLCAkKSA9PiBgJCR7JCArIDF9YClcbiAgICAgICAgICAuam9pbignLScpO1xuICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShwYXR0ZXJuUmVnRXhwMSwgcGF0dGVyblJlZ0V4cDIpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgaXNEZWNpbWFsIH0gZnJvbSAndmFsaWRhdG9yJztcblxuZXhwb3J0IGNvbnN0IHBlcmNlbnRSdWxlc2V0ID0ge1xuICB2YWxpZDogY2VsbCA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgY2VsbCA9PT0gJ251bWJlcicpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKGNlbGwubGVuZ3RoID4gMSAmJiBjZWxsWzBdID09PSAnMCcpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBpc0RlY2ltYWwoY2VsbCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIHJlcGFpcjogY2VsbCA9PiB7XG4gICAgY2VsbCA9IGNlbGxcbiAgICAgIC5yZXBsYWNlKCfslrUnLCAnMDAwMDAwMDAnKVxuICAgICAgLnJlcGxhY2UoJ+unjCcsICcwMDAwJylcbiAgICAgIC5yZXBsYWNlKCfsspwnLCAnMDAwJylcbiAgICAgIC5yZXBsYWNlKCdrJywgJzAwMCcpXG4gICAgICAucmVwbGFjZSgn67CxJywgJzAwJylcbiAgICAgIC5yZXBsYWNlKCfsi60nLCAnMCcpXG4gICAgICAucmVwbGFjZSgvW14wLTlcXC4tXS9nLCAnJyk7XG4gICAgcmV0dXJuIGlzTmFOKE51bWJlcihjZWxsKSkgPyBjZWxsIDogTnVtYmVyKGNlbGwpO1xuICB9LFxufTtcbiIsImV4cG9ydCBjb25zdCB3aGV0aGVyUnVsZXNldCA9IHtcbiAgdmFsaWQ6IChjZWxsLCB7IHRydWVWYWx1ZSA9ICdZJywgZmFsc2VWYWx1ZSA9ICdOJyB9KSA9PlxuICAgIFJlZ0V4cChgXlske3RydWVWYWx1ZX0ke2ZhbHNlVmFsdWV9XSRgKS50ZXN0KGNlbGwpLFxuICByZXBhaXI6IChjZWxsLCB7IHRydWVWYWx1ZSA9ICdZJywgZmFsc2VWYWx1ZSA9ICdOJyB9KSA9PiB7XG4gICAgY2VsbCArPSAnJztcbiAgICBzd2l0Y2ggKGNlbGwudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSAnbyc6XG4gICAgICBjYXNlICd0cnVlJzpcbiAgICAgIGNhc2UgJzEnOlxuICAgICAgY2FzZSAn7JiIJzpcbiAgICAgIGNhc2UgJ3knOlxuICAgICAgY2FzZSAn7KCB7JqpJzpcbiAgICAgIGNhc2UgJ+yatOyYgSc6XG4gICAgICBjYXNlICfsgqzsmqnqsIDriqUnOlxuICAgICAgY2FzZSAn6rCA64qlJzpcbiAgICAgICAgcmV0dXJuIHRydWVWYWx1ZTtcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgY2FzZSAnZmFsc2UnOlxuICAgICAgY2FzZSAnMCc6XG4gICAgICBjYXNlICdudWxsJzpcbiAgICAgIGNhc2UgJ+yVhOuLiOyYpCc6XG4gICAgICBjYXNlICfslYTri4jsmpQnOlxuICAgICAgY2FzZSAn66+47Jq07JiBJzpcbiAgICAgIGNhc2UgJ+uvuOyggeyaqSc6XG4gICAgICBjYXNlICfsgqzsmqnrtojqsIAnOlxuICAgICAgY2FzZSAn67aI6rCAJzpcbiAgICAgIGNhc2UgJ24nOlxuICAgICAgICByZXR1cm4gZmFsc2VWYWx1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgfSxcbn07XG4iLCJpbXBvcnQge1xuICBpc0Vzc2VudGlhbCxcbiAgY2hhcmdlUnVsZXNldCxcbiAgY291bnRSdWxlc2V0LFxuICBwZXJjZW50UnVsZXNldCxcbiAgd2hldGhlclJ1bGVzZXQsXG4gIGRhdGVSdWxlc2V0LFxuICBudW1iZXJSdWxlc2V0LFxuICBjb25zaXN0ZW5jeVJ1bGVzZXQsXG4gIGNhbGN1bGF0aW9uUnVsZXNldCxcbn0gZnJvbSAnLi4vdXRpbHMvcnVsZXNldCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvckZvcm1hdHRlcihsaW5lLCBjZWxsLCB2YWx1ZSwgY29sdW1uRGVmLCByb3cpIHtcbiAgY29uc3QgcnRuID0geyB0ZXh0OiB2YWx1ZSB9O1xuICBjb25zdCB7IGVzc2VudGlhbCwgcnVsZXNldCwgaWQgfSA9IGNvbHVtbkRlZjtcbiAgbGV0IGlzRXJyb3IgPSBmYWxzZTtcbiAgLy8g67mIIOqwkuydtOuptCDsl5Drn6wg7JeG7J2MIChudWxsKVxuICBpZiAoIXZhbHVlKSByZXR1cm4gcnRuO1xuXG4gIC8vIGlkIOygnOyZuFxuICBpZiAoaWQgPT09ICdpZCcpIHJldHVybiBydG47XG5cbiAgLy8g7ZWE7IiY6rCSIOynhOuLqFxuICBpZiAoZXNzZW50aWFsICYmICFpc0Vzc2VudGlhbCh2YWx1ZSkpIHtcbiAgICBydG4uYWRkQ2xhc3NlcyA9ICdlcnJvci1jZWxsJztcbiAgICByZXR1cm4gcnRuO1xuICB9XG5cbiAgY29uc3QgeyBuYW1lIH0gPSBydWxlc2V0O1xuXG4gIC8vIOynhOuLqCDro7Ag7IWLIOyggeyaqVxuICBpZiAoXG4gICAgKG5hbWUgPT09ICfquIjslaEnICYmICFjaGFyZ2VSdWxlc2V0LnZhbGlkKHZhbHVlKSkgfHxcbiAgICAobmFtZSA9PT0gJ+yImOufiScgJiYgIWNvdW50UnVsZXNldC52YWxpZCh2YWx1ZSkpIHx8XG4gICAgKG5hbWUgPT09ICfsnKgnICYmICFwZXJjZW50UnVsZXNldC52YWxpZCh2YWx1ZSkpIHx8XG4gICAgKG5hbWUgPT09ICfsl6zrtoAnICYmICF3aGV0aGVyUnVsZXNldC52YWxpZCh2YWx1ZSwgcnVsZXNldCkpIHx8XG4gICAgKG5hbWUgPT09ICfrgqDsp5wnICYmICFkYXRlUnVsZXNldC52YWxpZCh2YWx1ZSwgcnVsZXNldCkpIHx8XG4gICAgKG5hbWUgPT09ICfrsojtmLgnICYmICFudW1iZXJSdWxlc2V0LnZhbGlkKHZhbHVlLCBydWxlc2V0KSkgfHxcbiAgICAobmFtZSA9PT0gJ+ydvOq0gOyEsScgJiYgIWNvbnNpc3RlbmN5UnVsZXNldC52YWxpZCh2YWx1ZSwgcnVsZXNldCwgcm93KSkgfHxcbiAgICAobmFtZSA9PT0gJ+qzhOyCsOyLnScgJiYgIWNhbGN1bGF0aW9uUnVsZXNldC52YWxpZCh2YWx1ZSwgcnVsZXNldCwgcm93KSlcbiAgKVxuICAgIGlzRXJyb3IgPSB0cnVlO1xuXG4gIHJldHVybiBpc0Vycm9yID8gT2JqZWN0LmFzc2lnbihydG4sIHsgYWRkQ2xhc3NlczogJ2Vycm9yLWNlbGwnIH0pIDogcnRuO1xufVxuIiwiaW1wb3J0IHsgZ28sIG1hcCB9IGZyb20gJ2Z4anMvU3RyaWN0JztcbmltcG9ydCBHcmlkIGZyb20gJy4uL2NvbW1vbi9HcmlkJztcbmltcG9ydCB7IERJQUcsIElOSVQgfSBmcm9tICdAL2NvbnN0YW50cy9wcm9ncmVzcyc7XG5pbXBvcnQgeyBlcnJvckZvcm1hdHRlciB9IGZyb20gJ0AvdXRpbHMvZ3JpZC1mb3JtYXR0ZXInO1xuaW1wb3J0IHsgcnVsZXNldCBhcyBhbGxSdWxlc2V0IH0gZnJvbSAnQC9jb25zdGFudHMvcnVsZXNldCc7XG5pbXBvcnQge1xuICBpc0Vzc2VudGlhbCxcbiAgY2hhcmdlUnVsZXNldCxcbiAgY291bnRSdWxlc2V0LFxuICBwZXJjZW50UnVsZXNldCxcbiAgd2hldGhlclJ1bGVzZXQsXG4gIGRhdGVSdWxlc2V0LFxuICBudW1iZXJSdWxlc2V0LFxuICBjb25zaXN0ZW5jeVJ1bGVzZXQsXG4gIGNhbGN1bGF0aW9uUnVsZXNldCxcbn0gZnJvbSAnQC91dGlscy9ydWxlc2V0JztcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWFnUmVzdWx0R3JpZCBleHRlbmRzIEdyaWQge1xuICBpbml0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2dyZXNzOiBJTklULFxuICAgICAgbm9FcnJvckRhdGE6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBkaWFnbm9zaXMoZGF0YUdyaWQpIHtcbiAgICBsZXQgY29sdW1ucyA9IHRoaXMucGFyZW50LmRhdGFHcmlkLnN0YXRlLmNvbHVtbnM7XG4gICAgY29uc3QgZGF0YSA9IGRhdGFHcmlkLmdldERhdGEoKS5nZXRJdGVtcygpO1xuICAgIGNvbnN0IGVycm9ySW5kZXggPSBbXTtcblxuICAgICQuZWFjaCgkKCcuZXNzZW50aWFsJyksIChpZHgsIGVsKSA9PiB7XG4gICAgICBjb25zdCBlc3NlbnRpYWwgPSAkKGVsKS5pcygnOmNoZWNrZWQnKTtcbiAgICAgIGNvbHVtbnNbaWR4ICsgMV0uZXNzZW50aWFsID0gZXNzZW50aWFsO1xuICAgIH0pO1xuXG4gICAgLy8g6re466as65Oc7JeQIOyXkOufrCDtj6zrp7cg7ISk7KCVXG4gICAgZ28oXG4gICAgICBjb2x1bW5zLFxuICAgICAgbWFwKGZpZWxkID0+ICh7XG4gICAgICAgIC4uLmZpZWxkLFxuICAgICAgICBmb3JtYXR0ZXI6IGVycm9yRm9ybWF0dGVyLFxuICAgICAgfSkpLFxuICAgICAgZGF0YUdyaWQuc2V0Q29sdW1ucyxcbiAgICApO1xuXG4gICAgLy8g7KCE7LK0IOuNsOydtO2EsCDsp4Tri6hcbiAgICAvLyDsl5Drn6zsiJgg7LSI6riw7ZmUXG4gICAgY29sdW1ucyA9IGNvbHVtbnMubWFwKChjb2x1bW4sIGlkeCkgPT4gKHtcbiAgICAgIC4uLmNvbHVtbixcbiAgICAgIG9yZGVyOiBpZHgsXG4gICAgICBlcnJvckNvdW50OiAwLFxuICAgIH0pKTtcblxuICAgIC8vIOuqqOuToCDrjbDsnbTthLAg7Iic7ZqMXG4gICAgY29uc3QgZGF0YUxlbiA9IGRhdGEubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YUxlbjsgaSsrKSB7XG4gICAgICBjb25zdCByb3cgPSBkYXRhW2ldO1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJvdyk7XG4gICAgICBjb25zdCBrZXlMZW4gPSBrZXlzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5TGVuOyBqKyspIHtcbiAgICAgICAgY29uc3QgY29sdW1uID0gY29sdW1ucy5maW5kKCh7IGlkIH0pID0+IGlkID09PSBrZXlzW2pdKTtcbiAgICAgICAgY29uc3QgeyBlc3NlbnRpYWwsIHJ1bGVzZXQgfSA9IGNvbHVtbjtcbiAgICAgICAgbGV0IGNlbGwgPSByb3dba2V5c1tqXV07XG4gICAgICAgIC8vIGluZGV4IGlkIOyYiOyZuOyymOumrFxuICAgICAgICBpZiAoIXJ1bGVzZXQpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCB7IG5hbWUgfSA9IHJ1bGVzZXQ7XG4gICAgICAgIC8vIO2VhOyImOqwkiDsp4Tri6gg7ZmV7J24XG4gICAgICAgIGlmIChlc3NlbnRpYWwgJiYgIWlzRXNzZW50aWFsKGNlbGwpKSB7XG4gICAgICAgICAgY29sdW1uLmVycm9yQ291bnQrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOynhOuLqCDro7DshYsg7KCB7JqpXG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgIGNhc2UgJ+q4iOyVoSc6XG4gICAgICAgICAgICBpZiAoIWNoYXJnZVJ1bGVzZXQudmFsaWQoY2VsbCkpIHtcbiAgICAgICAgICAgICAgY29sdW1uLmVycm9yQ291bnQrKztcbiAgICAgICAgICAgICAgZXJyb3JJbmRleFtyb3cuaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ+yImOufiSc6XG4gICAgICAgICAgICBpZiAoIWNvdW50UnVsZXNldC52YWxpZChjZWxsKSkge1xuICAgICAgICAgICAgICBjb2x1bW4uZXJyb3JDb3VudCsrO1xuICAgICAgICAgICAgICBlcnJvckluZGV4W3Jvdy5pZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAn7JyoJzpcbiAgICAgICAgICAgIGlmICghcGVyY2VudFJ1bGVzZXQudmFsaWQoY2VsbCkpIHtcbiAgICAgICAgICAgICAgY29sdW1uLmVycm9yQ291bnQrKztcbiAgICAgICAgICAgICAgZXJyb3JJbmRleFtyb3cuaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ+yXrOu2gCc6XG4gICAgICAgICAgICBpZiAoIXdoZXRoZXJSdWxlc2V0LnZhbGlkKGNlbGwsIHJ1bGVzZXQpKSB7XG4gICAgICAgICAgICAgIGNvbHVtbi5lcnJvckNvdW50Kys7XG4gICAgICAgICAgICAgIGVycm9ySW5kZXhbcm93LmlkXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICfrgqDsp5wnOlxuICAgICAgICAgICAgaWYgKCFkYXRlUnVsZXNldC52YWxpZChjZWxsLCBydWxlc2V0KSkge1xuICAgICAgICAgICAgICBjb2x1bW4uZXJyb3JDb3VudCsrO1xuICAgICAgICAgICAgICBlcnJvckluZGV4W3Jvdy5pZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAn67KI7Zi4JzpcbiAgICAgICAgICAgIGlmICghbnVtYmVyUnVsZXNldC52YWxpZChjZWxsLCBydWxlc2V0KSkge1xuICAgICAgICAgICAgICBjb2x1bW4uZXJyb3JDb3VudCsrO1xuICAgICAgICAgICAgICBlcnJvckluZGV4W3Jvdy5pZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAn7J286rSA7ISxJzpcbiAgICAgICAgICAgIGlmICghY29uc2lzdGVuY3lSdWxlc2V0LnZhbGlkKGNlbGwsIHJ1bGVzZXQsIHJvdykpIHtcbiAgICAgICAgICAgICAgY29sdW1uLmVycm9yQ291bnQrKztcbiAgICAgICAgICAgICAgZXJyb3JJbmRleFtyb3cuaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ+qzhOyCsOyLnSc6XG4gICAgICAgICAgICBpZiAoIWNhbGN1bGF0aW9uUnVsZXNldC52YWxpZChjZWxsLCBydWxlc2V0LCByb3cpKSB7XG4gICAgICAgICAgICAgIGNvbHVtbi5lcnJvckNvdW50Kys7XG4gICAgICAgICAgICAgIGVycm9ySW5kZXhbcm93LmlkXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JJbmRleCB9KTtcbiAgICB0aGlzLnJlbmRlckdyaWQoY29sdW1ucyk7XG4gIH1cblxuICByZW5kZXJHcmlkKGNvbHVtbnMpIHtcbiAgICBjb25zdCByZXN1bHRDb2x1bW5zID0gW1xuICAgICAgeyBpZDogJ2NvbHVtbi1ubycsIG5hbWU6ICfsu6zrn7zsiJzrsognLCBmaWVsZDogJ2NvbHVtbk5vJywgbWF4V2lkdGg6IDgwIH0sXG4gICAgICB7IGlkOiAnY29sdW1uLW5hbWUnLCBuYW1lOiAn7Lus65+866qFJywgZmllbGQ6ICdjb2x1bW5OYW1lJywgbWF4V2lkdGg6IDgwIH0sXG4gICAgICB7IGlkOiAnZGlhZy1ydWxlJywgbmFtZTogJ+ynhOuLqOq3nOy5mScsIGZpZWxkOiAnZGlhZ1J1bGUnLCBtYXhXaWR0aDogODAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdkaWFnLXJlc3VsdCcsXG4gICAgICAgIG5hbWU6ICfsp4Tri6jqsrDqs7wnLFxuICAgICAgICBmaWVsZDogJ2RpYWdSZXN1bHQnLFxuICAgICAgICBjc3NDbGFzczogJ2RpYWctcmVzdWx0JyxcbiAgICAgICAgZm9ybWF0dGVyOiAoLi4uYXJncykgPT4gYXJnc1syXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnZm9ybWF0JyxcbiAgICAgICAgbmFtZTogJ+2RnO2YhO2YleyLnS/smIjsi5wnLFxuICAgICAgICBmaWVsZDogJ2Zvcm1hdCcsXG4gICAgICAgIGNzc0NsYXNzOiAnZm9ybWF0JyxcbiAgICAgICAgZm9ybWF0dGVyOiAoLi4uYXJncykgPT4gYXJnc1syXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnZXJyb3ItY291bnQnLFxuICAgICAgICBuYW1lOiAn7JeQ65+s6rG07IiYJyxcbiAgICAgICAgZmllbGQ6ICdlcnJvckNvdW50JyxcbiAgICAgICAgbWF4V2lkdGg6IDgwLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgLy8g7JeQ65+sIO2DkOyDiVxuICAgIGNvbnN0IGRhdGEgPSBjb2x1bW5zXG4gICAgICAuZmlsdGVyKCh7IGVycm9yQ291bnQgfSkgPT4gISFlcnJvckNvdW50KVxuICAgICAgLm1hcCgoeyBpZCwgb3JkZXIsIGVycm9yQ291bnQsIHJ1bGVzZXQgfSkgPT4ge1xuICAgICAgICBjb25zdCB7IGdyb3VwLCBsYWJlbCwgZXJyb3JEaXNjcmlwdGlvbiwgZXhhbXBsZSB9ID0gYWxsUnVsZXNldC5maW5kKFxuICAgICAgICAgICh7IGlkIH0pID0+IHJ1bGVzZXQuaWQgPT09IGlkLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29sdW1uTm86IG9yZGVyLFxuICAgICAgICAgIGNvbHVtbk5hbWU6IGlkLFxuICAgICAgICAgIGRpYWdSdWxlOiBncm91cCA9PT0gbGFiZWwgPyBsYWJlbCA6IGAke2dyb3VwfSgke2xhYmVsfSlgLFxuICAgICAgICAgIGRpYWdSZXN1bHQ6IGVycm9yRGlzY3JpcHRpb24gfHwgJ+yXkOufrCDshKTrqoUg66+47J6F66ClJyxcbiAgICAgICAgICBmb3JtYXQ6IGV4YW1wbGUgfHwgJ+2RnO2YhCDtmJXsi50g66+47J6F66ClJyxcbiAgICAgICAgICBlcnJvckNvdW50LFxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAvLyDsl5Drn6wg7JeG64qUIOqyveyasFxuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYWxlcnQoJ+ynhOuLqCDqsrDqs7wg6rec7LmZ7JeQIO2VtOuLue2VmOuKlCDsmKTrpZjqsIAg7JeG7Iq164uI64ukLicpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG5vRXJyb3JEYXRhOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgbm9FcnJvckRhdGE6IGZhbHNlIH0pO1xuXG4gICAgY29uc3QgZ3JpZCA9IG5ldyBTbGljay5HcmlkKCcjZGlhZy1yZXN1bHQtZ3JpZCcsIGRhdGEsIHJlc3VsdENvbHVtbnMsIHtcbiAgICAgIGVuYWJsZUNlbGxOYXZpZ2F0aW9uOiB0cnVlLFxuICAgICAgZm9yY2VGaXRDb2x1bW5zOiB0cnVlLCAvLyBjZWxsIOuEiOu5hCDrp57stpTquLBcbiAgICAgIGhlYWRlclJvd0hlaWdodDogMzAsXG4gICAgICByb3dIZWlnaHQ6IDQyLFxuICAgIH0pO1xuXG4gICAgLy8g64SI67mEIOunnuy2lOq4sFxuICAgIGdvKFxuICAgICAgZ3JpZC5nZXRDb2x1bW5zKCksXG4gICAgICBtYXAoY29sID0+IHtcbiAgICAgICAgY29uc3QgeyBtYXhXaWR0aCwgLi4ucmVzdCB9ID0gY29sO1xuICAgICAgICByZXR1cm4gcmVzdDtcbiAgICAgIH0pLFxuICAgICAgZ3JpZC5zZXRDb2x1bW5zLFxuICAgICk7XG4gIH1cblxuICB0ZW1wbGF0ZSgpIHtcbiAgICBjb25zdCB7IHByb2dyZXNzLCBub0Vycm9yRGF0YSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChub0Vycm9yRGF0YSkgcmV0dXJuICcnO1xuXG4gICAgcmV0dXJuIHByb2dyZXNzID09PSBESUFHXG4gICAgICA/IGBcbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJjYXJkXCI+XG4gICAgICAgICAgPGFydGljbGUgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJkaWFnLXJlc3VsdC1ncmlkXCIgLz5cbiAgICAgICAgICA8L2FydGljbGU+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgIGBcbiAgICAgIDogJyc7XG4gIH1cbn1cbiIsImltcG9ydCBHcmlkIGZyb20gJ0AvY29tcG9uZW50cy9jb21tb24vR3JpZC5qcyc7XG5pbXBvcnQgeyAkYWN0aW9uIH0gZnJvbSAnQC91dGlscy9zZWxlY3Rvci5qcyc7XG5pbXBvcnQgeyBJTklULCBSRVBBSVIgfSBmcm9tICdAL2NvbnN0YW50cy9wcm9ncmVzcy5qcyc7XG5pbXBvcnQgeyBncm91cGVkUnVsZXNldCB9IGZyb20gJ0AvY29uc3RhbnRzL3J1bGVzZXQuanMnO1xuaW1wb3J0IHsgZmV0Y2hTZXR0aW5ncyB9IGZyb20gJ0AvdXRpbHMvbG9jYWxTdG9yYWdlJztcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhR3JpZCBleHRlbmRzIEdyaWQge1xuICBpbml0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2dyZXNzOiBJTklULFxuICAgICAgZ3JpZDogbnVsbCxcbiAgICAgIGRhdGFWaWV3OiBudWxsLFxuICAgICAgY29sdW1uczogW10sXG4gICAgICBncmlkSWQ6ICdkYXRhLWdyaWQnLFxuICAgIH07XG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG4gICAgLy8g66Ow7IWLIOyEoO2DnVxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnc2VsZWN0LXJ1bGVzZXQnLCAnY2hhbmdlJywgKHsgdGFyZ2V0IH0pID0+IHtcbiAgICAgIGNvbnN0ICRzZWxlY3QgPSAkKHRhcmdldCk7XG4gICAgICBjb25zdCB7IGNvbHVtbnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICBjb25zdCBjb2x1bW5JZCA9ICRzZWxlY3QuYXR0cignaWQnKS5yZXBsYWNlKCdzZWxlY3REaWFnLScsICcnKTtcbiAgICAgIGNvbnN0IHJ1bGVzZXQgPSAkc2VsZWN0LmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpLmRhdGEoJ3J1bGVzZXQnKTtcbiAgICAgIGNvbnN0IHJ1bGVzZXRJZCA9ICRzZWxlY3QuZmluZCgnb3B0aW9uOnNlbGVjdGVkJykudmFsKCk7XG4gICAgICBpZiAoXG4gICAgICAgIHJ1bGVzZXQgPT09ICfquIjslaEnIHx8XG4gICAgICAgIHJ1bGVzZXQgPT09ICfsiJjrn4knIHx8XG4gICAgICAgIHJ1bGVzZXQgPT09ICfsnKgnIHx8XG4gICAgICAgIHJ1bGVzZXRJZCA9PT0gJ3doZVlOJyB8fFxuICAgICAgICBydWxlc2V0SWQgPT09ICdudW1QaG9uZScgfHxcbiAgICAgICAgcnVsZXNldElkID09PSAnbnVtUG9zdGFsQ29kZScgfHxcbiAgICAgICAgcnVsZXNldElkID09PSAnbnVtQnVzaW5lc3MnXG4gICAgICApIHtcbiAgICAgICAgJHNlbGVjdC52YWwocnVsZXNldElkKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY29sdW1uczogY29sdW1ucy5tYXAoY29sID0+XG4gICAgICAgICAgICBjb2wuaWQgPT09IGNvbHVtbklkXG4gICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgLi4uY29sLFxuICAgICAgICAgICAgICAgICAgcnVsZXNldDoge1xuICAgICAgICAgICAgICAgICAgICBpZDogcnVsZXNldElkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBydWxlc2V0LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogY29sLFxuICAgICAgICAgICksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHJ1bGVzZXRJZCA9PT0gJ3doZVNFVCcpIHRoaXMucGFyZW50LndoZXRoZXJNb2RhbC5zaG93KCRzZWxlY3QsIHRoaXMuc3RhdGUuZ3JpZCk7XG4gICAgICBpZiAocnVsZXNldCA9PT0gJ+uCoOynnCcpIHRoaXMucGFyZW50LmRhdGVNb2RhbC5zaG93KCRzZWxlY3QsIHJ1bGVzZXRJZCk7XG4gICAgICBpZiAocnVsZXNldElkID09PSAnbnVtUGF0dGVybicpIHRoaXMucGFyZW50LnBhdHRlcm5Nb2RhbC5zaG93KCRzZWxlY3QsIHRoaXMuc3RhdGUuZ3JpZCk7XG4gICAgICBpZiAocnVsZXNldElkID09PSAnY29uVGltZScpIHRoaXMucGFyZW50LnRpbWVPcmRlck1vZGFsLnNob3coJHNlbGVjdCwgdGhpcy5zdGF0ZSk7XG4gICAgICBpZiAocnVsZXNldElkID09PSAnY29uTG9naWNSZWxhdGlvblNoaXAnKVxuICAgICAgICB0aGlzLnBhcmVudC5sb2dpY1JlbGF0aW9uc2hpcE1vZGFsLnNob3coJHNlbGVjdCwgdGhpcy5zdGF0ZSk7XG4gICAgICBpZiAocnVsZXNldElkID09PSAnY2FsRm9ybXVsYScpIHRoaXMucGFyZW50LmZvcm11bGFNb2RhbC5zaG93KCRzZWxlY3QsIHRoaXMuc3RhdGUpO1xuICAgICAgaWYgKHJ1bGVzZXRJZCA9PT0gJ2NhbFN1bScpIHRoaXMucGFyZW50LnN1bU1vZGFsLnNob3coJHNlbGVjdCwgdGhpcy5zdGF0ZSk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRTdGFydFJvdyhvcmlnaW5hbERhdGEsIHN0YXJ0Um93KSB7XG4gICAgY29uc3QgeyBzZXRDb2xsV2lkdGggPSAnJyB9ID0gZmV0Y2hTZXR0aW5ncygpO1xuICAgIGNvbnN0IHsgY29sdW1ucywgZGF0YSB9ID0gdGhpcy5zbGljZURhdGFDb2x1bW5zKG9yaWdpbmFsRGF0YSwgc3RhcnRSb3cpO1xuICAgIGNvbnN0IGRhdGFWaWV3ID0gbmV3IFNsaWNrLkRhdGEuRGF0YVZpZXcoKTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgZW5hYmxlQ2VsbE5hdmlnYXRpb246IHRydWUsXG4gICAgICBzaG93SGVhZGVyUm93OiB0cnVlLFxuICAgICAgZm9yY2VGaXRDb2x1bW5zOiAhc2V0Q29sbFdpZHRoLCAvLyBjZWxsIOuEiOu5hCDrp57stpTquLBcbiAgICAgIGhlYWRlclJvd0hlaWdodDogMzAsIC8vIO2XpOuNlCDrhpLsnbRcbiAgICAgIGV4cGxpY2l0SW5pdGlhbGl6YXRpb246IHRydWUsIC8vIOydmOuPhOyggSDstIjquLDtmZQgLT4g7Zek642UIOydtOuypO2KuFxuICAgIH07XG4gICAgY29uc3QgZ3JpZCA9IG5ldyBTbGljay5HcmlkKCcjZGF0YS1ncmlkJywgZGF0YVZpZXcsIGNvbHVtbnMsIG9wdGlvbnMpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZ3JpZCxcbiAgICAgIGNvbHVtbnM6IGdyaWQuZ2V0Q29sdW1ucygpLm1hcChjb2wgPT4gKHtcbiAgICAgICAgLi4uY29sLFxuICAgICAgICBydWxlc2V0OiB7IGlkOiAnc3RyJywgbmFtZTogJ+usuOyekOyXtCcgfSxcbiAgICAgIH0pKSxcbiAgICB9KTtcblxuICAgIGRhdGFWaWV3Lm9uUm93Q291bnRDaGFuZ2VkLnN1YnNjcmliZShfID0+IHtcbiAgICAgIGdyaWQudXBkYXRlUm93Q291bnQoKTtcbiAgICAgIGdyaWQucmVuZGVyKCk7XG4gICAgfSk7XG5cbiAgICBkYXRhVmlldy5vblJvd3NDaGFuZ2VkLnN1YnNjcmliZSgoXywgeyByb3dzIH0pID0+IHtcbiAgICAgIGdyaWQuaW52YWxpZGF0ZVJvd3Mocm93cyk7XG4gICAgICBncmlkLnJlbmRlcigpO1xuICAgIH0pO1xuXG4gICAgZ3JpZC5vbkhlYWRlclJvd0NlbGxSZW5kZXJlZC5zdWJzY3JpYmUoXG4gICAgICAoXywgeyBub2RlLCBjb2x1bW46IHsgaWQsIHJ1bGVzZXQgPSB7IGlkOiAnc3RyJywgbmFtZTogJ+usuOyekOyXtCcgfSB9IH0pID0+IHtcbiAgICAgICAgaWYgKGlkID09PSAnaWQnKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0T3B0aW9uID0gdGhpcy5ydWxlc2V0U2VsZWN0VGVtcGxhdGUoaWQsIHJ1bGVzZXQpO1xuICAgICAgICAkKG5vZGUpLmFwcGVuZChzZWxlY3RPcHRpb24pO1xuICAgICAgfSxcbiAgICApO1xuICAgIGdyaWQuaW5pdCgpO1xuICAgIGRhdGFWaWV3LnNldEl0ZW1zKGRhdGEpO1xuICB9XG5cbiAgdGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPlxuICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPVwiY2FyZFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICA8ZGl2IGlkPVwiZGF0YS1ncmlkXCI+XG4gICAgICAgICAgICAgICAgPGgxPkNTViDtjIzsnbzsnYQg7ISg7YOd7ZW07KO87IS47JqULjwvaDE+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9hcnRpY2xlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9ncmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IG9uZUdyaWQgfSA9IGZldGNoU2V0dGluZ3MoKTtcblxuICAgIGlmIChwcm9ncmVzcyA9PT0gSU5JVCkgdGhpcy4kdGFyZ2V0Lmh0bWwodGhpcy50ZW1wbGF0ZSgpKTtcbiAgICBlbHNlIGlmIChvbmVHcmlkICYmIHByb2dyZXNzID09PSBSRVBBSVIpIHRoaXMuJHRhcmdldC5odG1sKCcnKTtcbiAgfVxuXG4gIHJ1bGVzZXRTZWxlY3RUZW1wbGF0ZShjb2x1bW5JZCwgeyBpZDogcnVsZXNldElkIH0pIHtcbiAgICByZXR1cm4gJChgXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZXNzZW50aWFsXCIgaWQ9XCJlc3NlbnRpYWwtJHtjb2x1bW5JZH1cIiAvPlxuICAgICAgICAgIDxzZWxlY3QgaWQ9c2VsZWN0RGlhZy0ke2NvbHVtbklkfSBjbGFzcz1cImN1c3RvbS1zZWxlY3Qgc2VsZWN0ZWQtcnVsZXNldFwiIGRhdGEtYWN0aW9uPVwic2VsZWN0LXJ1bGVzZXRcIj5cbiAgICAgICAgICAgICR7Z3JvdXBlZFJ1bGVzZXRcbiAgICAgICAgICAgICAgLm1hcCgocnVsZXNldEdyb3VwLCBtdWx0aSkgPT5cbiAgICAgICAgICAgICAgICBydWxlc2V0R3JvdXBcbiAgICAgICAgICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICAgICAgICAgICh7IGlkLCBpbmRleCwgZ3JvdXAsIGxhYmVsIH0pID0+XG4gICAgICAgICAgICAgICAgICAgICAgYDxvcHRpb24gdmFsdWU9XCIke2lkfVwiIGRhdGEtcnVsZXNldD1cIiR7Z3JvdXB9XCIgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkID09PSBydWxlc2V0SWQgPyAnc2VsZWN0ZWQnIDogJydcbiAgICAgICAgICAgICAgICAgICAgICB9PiR7aW5kZXh9KSAkeyEhbXVsdGkgPyBncm91cCArICcgPiAnIDogJyd9JHtsYWJlbH08L29wdGlvbj5gLFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgLmpvaW4oJycpLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC5qb2luKCcnKX1cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgYCk7XG4gIH1cbn1cbiIsImltcG9ydCBfc2xpY2VJbnN0YW5jZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL3NsaWNlXCI7XG5pbXBvcnQgX0FycmF5JGZyb20gZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvYXJyYXkvZnJvbVwiO1xuaW1wb3J0IF9TeW1ib2wgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvc3ltYm9sXCI7XG5pbXBvcnQgX2dldEl0ZXJhdG9yTWV0aG9kIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvZ2V0LWl0ZXJhdG9yLW1ldGhvZFwiO1xuaW1wb3J0IF9BcnJheSRpc0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2FycmF5L2lzLWFycmF5XCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9yZWdlbmVyYXRvclwiO1xuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgX1N5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfZ2V0SXRlcmF0b3JNZXRob2QobykgfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKF9BcnJheSRpc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgdmFyIF9jb250ZXh0MzsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gX3NsaWNlSW5zdGFuY2VQcm9wZXJ0eShfY29udGV4dDMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykpLmNhbGwoX2NvbnRleHQzLCA4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBfQXJyYXkkZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5pbXBvcnQgY3VycnkgZnJvbSBcIi4uL1N0cmljdC9jdXJyeS5qc1wiO1xuaW1wb3J0IGdvMSBmcm9tIFwiLi4vU3RyaWN0L2dvMS5qc1wiO1xuaW1wb3J0IHRvSXRlciBmcm9tIFwiLi4vU3RyaWN0L3RvSXRlci5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgY3VycnkoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gbWFwRW50cmllc0woZiwgaXRlcikge1xuICB2YXIgX2l0ZXJhdG9yLCBfc3RlcCwgX2xvb3A7XG5cbiAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBtYXBFbnRyaWVzTCQoX2NvbnRleHQyKSB7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodG9JdGVyKGl0ZXIpKTtcbiAgICAgICAgICBfY29udGV4dDIucHJldiA9IDE7XG4gICAgICAgICAgX2xvb3AgPSAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgICAgICAgdmFyIF9zdGVwJHZhbHVlLCBrLCBhO1xuXG4gICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9sb29wJChfY29udGV4dCkge1xuICAgICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX3N0ZXAkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcC52YWx1ZSwgMiksIGsgPSBfc3RlcCR2YWx1ZVswXSwgYSA9IF9zdGVwJHZhbHVlWzFdO1xuICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdvMShnbzEoYSwgZiksIGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtrLCBiXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIF9sb29wKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF9pdGVyYXRvci5zKCk7XG5cbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGlmICgoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lKSB7XG4gICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmRlbGVnYXRlWWllbGQoX2xvb3AoKSwgXCJ0MFwiLCA2KTtcblxuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxMDtcbiAgICAgICAgICBfY29udGV4dDIudDEgPSBfY29udGV4dDJbXCJjYXRjaFwiXSgxKTtcblxuICAgICAgICAgIF9pdGVyYXRvci5lKF9jb250ZXh0Mi50MSk7XG5cbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEzO1xuXG4gICAgICAgICAgX2l0ZXJhdG9yLmYoKTtcblxuICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZmluaXNoKDEzKTtcblxuICAgICAgICBjYXNlIDE2OlxuICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBtYXBFbnRyaWVzTCwgbnVsbCwgW1sxLCAxMCwgMTMsIDE2XV0pO1xufSkpOyIsImltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL3JlZ2VuZXJhdG9yXCI7XG5pbXBvcnQgX1Byb21pc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvcHJvbWlzZVwiO1xuaW1wb3J0IF9zbGljZUluc3RhbmNlUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2Uvc2xpY2VcIjtcbmltcG9ydCBfQXJyYXkkZnJvbSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9hcnJheS9mcm9tXCI7XG5pbXBvcnQgX1N5bWJvbCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9zeW1ib2xcIjtcbmltcG9ydCBfZ2V0SXRlcmF0b3JNZXRob2QgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9nZXQtaXRlcmF0b3ItbWV0aG9kXCI7XG5pbXBvcnQgX0FycmF5JGlzQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvYXJyYXkvaXMtYXJyYXlcIjtcblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIF9TeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgX2dldEl0ZXJhdG9yTWV0aG9kKG8pIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChfQXJyYXkkaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBpdC5jYWxsKG8pOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IHZhciBfY29udGV4dDM7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IF9zbGljZUluc3RhbmNlUHJvcGVydHkoX2NvbnRleHQzID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pKS5jYWxsKF9jb250ZXh0MywgOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gX0FycmF5JGZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuaW1wb3J0IGN1cnJ5IGZyb20gXCIuLi9TdHJpY3QvY3VycnkuanNcIjtcbmltcG9ydCBnbzEgZnJvbSBcIi4uL1N0cmljdC9nbzEuanNcIjtcbmltcG9ydCBub3AgZnJvbSBcIi4uL1N0cmljdC9ub3AuanNcIjtcbmltcG9ydCB0b0l0ZXIgZnJvbSBcIi4uL1N0cmljdC90b0l0ZXIuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGN1cnJ5KCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIGZpbHRlckwoZiwgaXRlcikge1xuICB2YXIgX2l0ZXJhdG9yLCBfc3RlcCwgX2xvb3A7XG5cbiAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBmaWx0ZXJMJChfY29udGV4dDIpIHtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0b0l0ZXIoaXRlcikpO1xuICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTtcbiAgICAgICAgICBfbG9vcCA9IC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2xvb3AoKSB7XG4gICAgICAgICAgICB2YXIgYSwgYjtcbiAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2xvb3AkKF9jb250ZXh0KSB7XG4gICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBhID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnbzEoYSwgZik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYiBpbnN0YW5jZW9mIF9Qcm9taXNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiLnRoZW4oZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYiA/IGEgOiBfUHJvbWlzZS5yZWplY3Qobm9wKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgX2xvb3ApO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX2l0ZXJhdG9yLnMoKTtcblxuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaWYgKChfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmUpIHtcbiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZGVsZWdhdGVZaWVsZChfbG9vcCgpLCBcInQwXCIsIDYpO1xuXG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTM7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEwO1xuICAgICAgICAgIF9jb250ZXh0Mi50MSA9IF9jb250ZXh0MltcImNhdGNoXCJdKDEpO1xuXG4gICAgICAgICAgX2l0ZXJhdG9yLmUoX2NvbnRleHQyLnQxKTtcblxuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTM7XG5cbiAgICAgICAgICBfaXRlcmF0b3IuZigpO1xuXG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5maW5pc2goMTMpO1xuXG4gICAgICAgIGNhc2UgMTY6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIGZpbHRlckwsIG51bGwsIFtbMSwgMTAsIDEzLCAxNl1dKTtcbn0pKTsiLCJpbXBvcnQgX2NvbmNhdEluc3RhbmNlUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2UvY29uY2F0XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdXJyeTIoZikge1xuICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgX2NvbnRleHQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gXy5sZW5ndGggPiAxID8gZi5hcHBseSh2b2lkIDAsIF9jb25jYXRJbnN0YW5jZVByb3BlcnR5KF9jb250ZXh0ID0gW2FdKS5jYWxsKF9jb250ZXh0LCBfKSkgOiBfLmxlbmd0aCA9PT0gMSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfY29udGV4dDI7XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgX18gPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgX19bX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGYuYXBwbHkodm9pZCAwLCBfY29uY2F0SW5zdGFuY2VQcm9wZXJ0eShfY29udGV4dDIgPSBbYSwgX1swXV0pLmNhbGwoX2NvbnRleHQyLCBfXykpO1xuICAgIH0gOiBmdW5jdGlvbiAoYikge1xuICAgICAgdmFyIF9jb250ZXh0MztcblxuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBfID0gbmV3IEFycmF5KF9sZW4zID4gMSA/IF9sZW4zIC0gMSA6IDApLCBfa2V5MyA9IDE7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgX1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF8ubGVuZ3RoID8gZi5hcHBseSh2b2lkIDAsIF9jb25jYXRJbnN0YW5jZVByb3BlcnR5KF9jb250ZXh0MyA9IFthLCBiXSkuY2FsbChfY29udGV4dDMsIF8pKSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9jb250ZXh0NDtcblxuICAgICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgICBfW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZi5hcHBseSh2b2lkIDAsIF9jb25jYXRJbnN0YW5jZVByb3BlcnR5KF9jb250ZXh0NCA9IFthLCBiXSkuY2FsbChfY29udGV4dDQsIF8pKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3QoYSkge1xuICByZXR1cm4gIWE7XG59IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiBhO1xufSk7IiwiaW1wb3J0IGN1cnJ5MyBmcm9tIFwiLi9jdXJyeTMuanNcIjtcbmltcG9ydCBnbzEgZnJvbSBcIi4vZ28xLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBjdXJyeTMoZnVuY3Rpb24gaWZFbHNlKGNvbmQsIHQsIGYpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDMgPyBfbGVuIC0gMyA6IDApLCBfa2V5ID0gMzsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDNdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGdvMShjb25kLmFwcGx5KHZvaWQgMCwgYXJncyksIGZ1bmN0aW9uIChiKSB7XG4gICAgcmV0dXJuIGIgPyB0LmFwcGx5KHZvaWQgMCwgYXJncykgOiBmLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gIH0pO1xufSk7IiwiaW1wb3J0IF9jb25jYXRJbnN0YW5jZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL2NvbmNhdFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3VycnkzKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIF9jb250ZXh0O1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF8ubGVuZ3RoID4gMiA/IGYuYXBwbHkodm9pZCAwLCBfY29uY2F0SW5zdGFuY2VQcm9wZXJ0eShfY29udGV4dCA9IFthXSkuY2FsbChfY29udGV4dCwgXykpIDogXy5sZW5ndGggPT09IDIgPyBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2NvbnRleHQyO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9fID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIF9fW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmLmFwcGx5KHZvaWQgMCwgX2NvbmNhdEluc3RhbmNlUHJvcGVydHkoX2NvbnRleHQyID0gW2EsIF9bMF0sIF9bMV1dKS5jYWxsKF9jb250ZXh0MiwgX18pKTtcbiAgICB9IDogXy5sZW5ndGggPT09IDEgPyBmdW5jdGlvbiAoYikge1xuICAgICAgdmFyIF9jb250ZXh0MztcblxuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBfXyA9IG5ldyBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIF9fW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX18ubGVuZ3RoID8gZi5hcHBseSh2b2lkIDAsIF9jb25jYXRJbnN0YW5jZVByb3BlcnR5KF9jb250ZXh0MyA9IFthLCBfWzBdLCBiXSkuY2FsbChfY29udGV4dDMsIF9fKSkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfY29udGV4dDQ7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBfXyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICAgIF9fW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZi5hcHBseSh2b2lkIDAsIF9jb25jYXRJbnN0YW5jZVByb3BlcnR5KF9jb250ZXh0NCA9IFthLCBfWzBdLCBiXSkuY2FsbChfY29udGV4dDQsIF9fKSk7XG4gICAgICB9O1xuICAgIH0gOiBmdW5jdGlvbiAoYikge1xuICAgICAgdmFyIF9jb250ZXh0NTtcblxuICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBfID0gbmV3IEFycmF5KF9sZW41ID4gMSA/IF9sZW41IC0gMSA6IDApLCBfa2V5NSA9IDE7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICAgICAgX1tfa2V5NSAtIDFdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF8ubGVuZ3RoID4gMSA/IGYuYXBwbHkodm9pZCAwLCBfY29uY2F0SW5zdGFuY2VQcm9wZXJ0eShfY29udGV4dDUgPSBbYSwgYl0pLmNhbGwoX2NvbnRleHQ1LCBfKSkgOiBfLmxlbmd0aCA9PT0gMSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9jb250ZXh0NjtcblxuICAgICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9fID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICAgICAgX19bX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmLmFwcGx5KHZvaWQgMCwgX2NvbmNhdEluc3RhbmNlUHJvcGVydHkoX2NvbnRleHQ2ID0gW2EsIGIsIF9bMF1dKS5jYWxsKF9jb250ZXh0NiwgX18pKTtcbiAgICAgIH0gOiBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgX2NvbnRleHQ3O1xuXG4gICAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IG5ldyBBcnJheShfbGVuNyA+IDEgPyBfbGVuNyAtIDEgOiAwKSwgX2tleTcgPSAxOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgICAgICAgX1tfa2V5NyAtIDFdID0gYXJndW1lbnRzW19rZXk3XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfLmxlbmd0aCA/IGYuYXBwbHkodm9pZCAwLCBfY29uY2F0SW5zdGFuY2VQcm9wZXJ0eShfY29udGV4dDcgPSBbYSwgYiwgY10pLmNhbGwoX2NvbnRleHQ3LCBfKSkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIF9jb250ZXh0ODtcblxuICAgICAgICAgIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IG5ldyBBcnJheShfbGVuOCksIF9rZXk4ID0gMDsgX2tleTggPCBfbGVuODsgX2tleTgrKykge1xuICAgICAgICAgICAgX1tfa2V5OF0gPSBhcmd1bWVudHNbX2tleThdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmLmFwcGx5KHZvaWQgMCwgX2NvbmNhdEluc3RhbmNlUHJvcGVydHkoX2NvbnRleHQ4ID0gW2EsIGIsIGNdKS5jYWxsKF9jb250ZXh0OCwgXykpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBfY29uY2F0SW5zdGFuY2VQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9pbnN0YW5jZS9jb25jYXRcIjtcbmltcG9ydCBjdXJyeTIgZnJvbSBcIi4vY3VycnkyLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCBpZkVsc2UgZnJvbSBcIi4vaWZFbHNlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBjdXJyeTIoZnVuY3Rpb24gd2hlbihjb25kLCBmKSB7XG4gIHZhciBfY29udGV4dDtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gaWZFbHNlLmFwcGx5KHZvaWQgMCwgX2NvbmNhdEluc3RhbmNlUHJvcGVydHkoX2NvbnRleHQgPSBbY29uZCwgZiwgaWRlbnRpdHldKS5jYWxsKF9jb250ZXh0LCBhcmdzKSk7XG59KTsiLCJpbXBvcnQgY3VycnkyIGZyb20gXCIuL2N1cnJ5Mi5qc1wiO1xuaW1wb3J0IGdvIGZyb20gXCIuL2dvLmpzXCI7XG5pbXBvcnQgbm90IGZyb20gXCIuL25vdC5qc1wiO1xuaW1wb3J0IHdoZW4gZnJvbSBcIi4vd2hlbi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgY3VycnkyKGZ1bmN0aW9uIGVpdGhlcihmMSwgZjIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGdvKGYxLmFwcGx5KHZvaWQgMCwgYXJncyksIHdoZW4obm90LCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGYyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gIH0pLCBCb29sZWFuKTtcbn0pOyIsInZhciBfY29udGV4dDtcblxuaW1wb3J0IF9iaW5kSW5zdGFuY2VQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9pbnN0YW5jZS9iaW5kXCI7XG5pbXBvcnQgX0FycmF5JGlzQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvYXJyYXkvaXMtYXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IF9iaW5kSW5zdGFuY2VQcm9wZXJ0eShfY29udGV4dCA9IF9BcnJheSRpc0FycmF5KS5jYWxsKF9jb250ZXh0LCBBcnJheSk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNGdW5jdGlvbihhKSB7XG4gIHJldHVybiB0eXBlb2YgYSA9PSBcImZ1bmN0aW9uXCI7XG59IiwiaW1wb3J0IF9nZXRJdGVyYXRvck1ldGhvZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzL2dldC1pdGVyYXRvci1tZXRob2RcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzSXRlcmFibGUoYSkge1xuICByZXR1cm4gYSAhPSBudWxsICYmICEhX2dldEl0ZXJhdG9yTWV0aG9kKGEpO1xufSIsImltcG9ydCBfU3ltYm9sIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvc3ltYm9sXCI7XG5pbXBvcnQgX1N5bWJvbCRpdGVyYXRvciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBfU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIF9TeW1ib2wkaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIF9TeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfU3ltYm9sICYmIG9iaiAhPT0gX1N5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvdHlwZW9mXCI7XG5cbnZhciBpc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KGEpIHtcbiAgcmV0dXJuIGEgIT09IG51bGwgJiYgX3R5cGVvZihhKSA9PT0gXCJvYmplY3RcIiAmJiBhLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1N0cmluZyhhKSB7XG4gIHJldHVybiB0eXBlb2YgYSA9PSBcInN0cmluZ1wiO1xufSIsImltcG9ydCBfU3ltYm9sIGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL3N5bWJvbFwiO1xuZXhwb3J0IGRlZmF1bHQgX1N5bWJvbChcImNsb25lZEl0ZXJhYmxlXCIpOyIsImltcG9ydCBfc2xpY2VJbnN0YW5jZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL3NsaWNlXCI7XG5pbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9yZWdlbmVyYXRvclwiO1xuaW1wb3J0IGVudHJpZXNMIGZyb20gXCIuLi9MYXp5L2VudHJpZXNMLmpzXCI7XG5pbXBvcnQgbWFwRW50cmllc0wgZnJvbSBcIi4uL0xhenkvbWFwRW50cmllc0wuanNcIjtcbmltcG9ydCBjb25kIGZyb20gXCIuLi9TdHJpY3QvY29uZC5qc1wiO1xuaW1wb3J0IGVpdGhlciBmcm9tIFwiLi4vU3RyaWN0L2VpdGhlci5qc1wiO1xuaW1wb3J0IGdvIGZyb20gXCIuLi9TdHJpY3QvZ28uanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vU3RyaWN0L2lkZW50aXR5LmpzXCI7XG5pbXBvcnQgaXNBcnJheSBmcm9tIFwiLi4vU3RyaWN0L2lzQXJyYXkuanNcIjtcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gXCIuLi9TdHJpY3QvaXNGdW5jdGlvbi5qc1wiO1xuaW1wb3J0IGlzSXRlcmFibGUgZnJvbSBcIi4uL1N0cmljdC9pc0l0ZXJhYmxlLmpzXCI7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSBcIi4uL1N0cmljdC9pc09iamVjdC5qc1wiO1xuaW1wb3J0IGlzU3RyaW5nIGZyb20gXCIuLi9TdHJpY3QvaXNTdHJpbmcuanNcIjtcbmltcG9ydCBjbG9uZWRJdGVyYWJsZVN5bWJvbCBmcm9tIFwiLi9jbG9uZWRJdGVyYWJsZVN5bWJvbC5qc1wiO1xuXG52YXIgZGVsZWdhdGVJdGVyYWJsZSA9IC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gZGVsZWdhdGVJdGVyYWJsZShpdGVyKSB7XG4gIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gZGVsZWdhdGVJdGVyYWJsZSQoX2NvbnRleHQpIHtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmRlbGVnYXRlWWllbGQoaXRlciwgXCJ0MFwiLCAxKTtcblxuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZGVsZWdhdGVJdGVyYWJsZSk7XG59KTtcblxudmFyIGNsb25lSXRlcmFibGUgPSBmdW5jdGlvbiBjbG9uZUl0ZXJhYmxlKGl0ZXIpIHtcbiAgdmFyIGNsb25lZCA9IGRlbGVnYXRlSXRlcmFibGUoaXRlcik7XG4gIGNsb25lZFtjbG9uZWRJdGVyYWJsZVN5bWJvbF0gPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW50cmllc0RlZXBMKG9iaikge1xuICByZXR1cm4gZ28ob2JqLCBlbnRyaWVzTCwgbWFwRW50cmllc0woY29uZChbaXNBcnJheSwgZnVuY3Rpb24gKGFycikge1xuICAgIHJldHVybiBfc2xpY2VJbnN0YW5jZVByb3BlcnR5KGFycikuY2FsbChhcnIpO1xuICB9XSwgW2lzU3RyaW5nLCBpZGVudGl0eV0sIFtpc0l0ZXJhYmxlLCBjbG9uZUl0ZXJhYmxlXSwgW2VpdGhlcihpc09iamVjdCwgaXNGdW5jdGlvbiksIGVudHJpZXNEZWVwTF0sIFtmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIGlkZW50aXR5XSkpKTtcbn0iLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgZ28gZnJvbSBcIi4vZ28uanNcIjtcbmltcG9ydCBmaWx0ZXJMIGZyb20gXCIuLi9MYXp5L2ZpbHRlckwuanNcIjtcbmltcG9ydCBtYXBMIGZyb20gXCIuLi9MYXp5L21hcEwuanNcIjtcbmltcG9ydCBoZWFkIGZyb20gXCIuL2hlYWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbmQoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZm5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ28oZm5zLCBmaWx0ZXJMKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAxKSxcbiAgICAgICAgICBjID0gX3JlZjJbMF07XG5cbiAgICAgIHJldHVybiBjLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSksIG1hcEwoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgX3JlZjQgPSBfc2xpY2VkVG9BcnJheShfcmVmMywgMiksXG4gICAgICAgICAgXyA9IF9yZWY0WzBdLFxuICAgICAgICAgIGYgPSBfcmVmNFsxXTtcblxuICAgICAgcmV0dXJuIGYuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KSwgaGVhZCk7XG4gIH07XG59IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IGdvIGZyb20gXCIuLi9TdHJpY3QvZ28uanNcIjtcbmltcG9ydCBpc0FycmF5IGZyb20gXCIuLi9TdHJpY3QvaXNBcnJheS5qc1wiO1xuaW1wb3J0IGlzSXRlcmFibGUgZnJvbSBcIi4uL1N0cmljdC9pc0l0ZXJhYmxlLmpzXCI7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSBcIi4uL1N0cmljdC9pc1N0cmluZy5qc1wiO1xuaW1wb3J0IG5vdCBmcm9tIFwiLi4vU3RyaWN0L25vdC5qc1wiO1xuaW1wb3J0IHJlZHVjZSBmcm9tIFwiLi4vU3RyaWN0L3JlZHVjZS5qc1wiO1xuaW1wb3J0IHdoZW4gZnJvbSBcIi4uL1N0cmljdC93aGVuLmpzXCI7XG5pbXBvcnQgY2xvbmVkSXRlcmFibGUgZnJvbSBcIi4vY2xvbmVkSXRlcmFibGVTeW1ib2wuanNcIjtcblxudmFyIGlzRW50cmllcyA9IGZ1bmN0aW9uIGlzRW50cmllcyhhKSB7XG4gIHJldHVybiBub3QoaXNTdHJpbmcoYSkpICYmIG5vdChpc0FycmF5KGEpKSAmJiBpc0l0ZXJhYmxlKGEpICYmIG5vdChhW2Nsb25lZEl0ZXJhYmxlXSkgPT09IHRydWU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvYmplY3REZWVwKGVudHJpZXMpIHtcbiAgcmV0dXJuIHJlZHVjZShmdW5jdGlvbiAoYWNjLCBfcmVmKSB7XG4gICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgIGsgPSBfcmVmMlswXSxcbiAgICAgICAgdiA9IF9yZWYyWzFdO1xuXG4gICAgcmV0dXJuIGdvKHYsIHdoZW4oaXNFbnRyaWVzLCBvYmplY3REZWVwKSwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgcmV0dXJuIGFjY1trXSA9IHJlcywgYWNjO1xuICAgIH0pO1xuICB9LCB7fSwgZW50cmllcyk7XG59IiwiaW1wb3J0IGRlZXBFbnRyaWVzTCBmcm9tIFwiLi4vX2ludGVybmFsL2VudHJpZXNEZWVwTC5qc1wiO1xuaW1wb3J0IG9iamVjdERlZXAgZnJvbSBcIi4uL19pbnRlcm5hbC9vYmplY3REZWVwLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgcmV0dXJuIG9iamVjdERlZXAoZGVlcEVudHJpZXNMKG9iaikpO1xufSIsImltcG9ydCBfa2V5c0luc3RhbmNlUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2Uva2V5c1wiO1xuaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvcmVnZW5lcmF0b3JcIjtcblxudmFyIF9tYXJrZWQgPSAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKHZhbHVlc0wpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2YWx1ZXNMKG9iaikge1xuICB2YXIgaztcbiAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiB2YWx1ZXNMJChfY29udGV4dCkge1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBfY29udGV4dC50MCA9IF9rZXlzSW5zdGFuY2VQcm9wZXJ0eShfcmVnZW5lcmF0b3JSdW50aW1lKS5jYWxsKF9yZWdlbmVyYXRvclJ1bnRpbWUsIG9iaik7XG5cbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmICgoX2NvbnRleHQudDEgPSBfY29udGV4dC50MCgpKS5kb25lKSB7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGsgPSBfY29udGV4dC50MS52YWx1ZTtcbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTtcbiAgICAgICAgICByZXR1cm4gb2JqW2tdO1xuXG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDc6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgX21hcmtlZCk7XG59IiwiaW1wb3J0IHZhbHVlc0wgZnJvbSBcIi4uL0xhenkvdmFsdWVzTC5qc1wiO1xuaW1wb3J0IHRha2VBbGwgZnJvbSBcIi4vdGFrZUFsbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsdWVzKGEpIHtcbiAgcmV0dXJuIHRha2VBbGwodmFsdWVzTChhKSk7XG59IiwiaW1wb3J0IEdyaWQgZnJvbSAnLi4vY29tbW9uL0dyaWQnO1xuaW1wb3J0IHsgSU5JVCwgUkVQQUlSIH0gZnJvbSAnQC9jb25zdGFudHMvcHJvZ3Jlc3MnO1xuaW1wb3J0IHsgZXJyb3JGb3JtYXR0ZXIgfSBmcm9tICdAL3V0aWxzL2dyaWQtZm9ybWF0dGVyJztcbmltcG9ydCB7IGZldGNoU2V0dGluZ3MgfSBmcm9tICdAL3V0aWxzL2xvY2FsU3RvcmFnZSc7XG5pbXBvcnQge1xuICBpc0Vzc2VudGlhbCxcbiAgc3RyaW5nUnVsZXNldCxcbiAgY2hhcmdlUnVsZXNldCxcbiAgY291bnRSdWxlc2V0LFxuICBwZXJjZW50UnVsZXNldCxcbiAgd2hldGhlclJ1bGVzZXQsXG4gIGRhdGVSdWxlc2V0LFxuICBudW1iZXJSdWxlc2V0LFxuICBjb25zaXN0ZW5jeVJ1bGVzZXQsXG4gIGNhbGN1bGF0aW9uUnVsZXNldCxcbn0gZnJvbSAnQC91dGlscy9ydWxlc2V0JztcbmltcG9ydCB7IGNsb25lLCBnbywgdmFsdWVzIH0gZnJvbSAnZnhqcyc7XG5pbXBvcnQgeyBnZXRSdWxlc2V0R3JvdXAsIGdldFJ1bGVzZXRMYWJlbCB9IGZyb20gJ0AvY29uc3RhbnRzL3J1bGVzZXQnO1xuaW1wb3J0ICdAL2xpYi9zbGlja2dyaWQvcGx1Z2lucy9zbGljay5jdXN0b210b29sdGlwLmNzcyc7XG5cbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXBhaXJHcmlkIGV4dGVuZHMgR3JpZCB7XG4gIGluaXRTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvZ3Jlc3M6IElOSVQsXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlckdyaWQoY29sdW1ucywgZGF0YSkge1xuICAgIGNvbnN0IF9jb2x1bW5zID0gdGhpcy5zZXRSZXBhaXJGb3JtYXQoY29sdW1ucyk7XG4gICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgU2xpY2suRGF0YS5EYXRhVmlldygpO1xuICAgIGNvbnN0IGVycm9ySW5kZXggPSB0aGlzLnBhcmVudC5kaWFnUmVzdWx0R3JpZC5zdGF0ZS5lcnJvckluZGV4O1xuXG4gICAgY29uc3QgZ3JpZCA9IG5ldyBTbGljay5HcmlkKCcjcmVwYWlyLWdyaWQnLCBkYXRhVmlldywgX2NvbHVtbnMsIHRoaXMuc2V0R3JpZE9wdGlvbnMoKSk7XG4gICAgdGhpcy5zdGF0ZS5ncmlkID0gZ3JpZDtcbiAgICB0aGlzLnN0YXRlLmRhdGFWaWV3ID0gZGF0YVZpZXc7XG4gICAgZ3JpZC5zZXRTZWxlY3Rpb25Nb2RlbChuZXcgU2xpY2suQ2VsbFNlbGVjdGlvbk1vZGVsKCkpO1xuICAgIGNvbnN0IGN1c3RvbVRvb2x0aXBQbHVnaW4gPSBuZXcgU2xpY2suUGx1Z2lucy5DdXN0b21Ub29sdGlwKCk7XG4gICAgZ3JpZC5yZWdpc3RlclBsdWdpbihjdXN0b21Ub29sdGlwUGx1Z2luKTtcbiAgICB0aGlzLnNldEdyaWRFdmVudHMoKTtcbiAgICBncmlkLmluaXQoKTtcbiAgICBkYXRhVmlldy5iZWdpblVwZGF0ZSgpO1xuICAgIC8vIGdyaWQuYWRkQ2VsbENzc1N0eWxlcygncmVwYWlyJywgdGhpcy5zdGF0ZS5yZXBhaXJTdHlsZUNzcyk7XG4gICAgZGF0YVZpZXcuc3luY0dyaWRTZWxlY3Rpb24oZ3JpZCwgJ3JlcGFpcicpO1xuICAgIGRhdGFWaWV3LnNldEl0ZW1zKGRhdGEpO1xuICAgIGRhdGFWaWV3LnNldEZpbHRlcigoeyBpZCB9KSA9PiAhIWVycm9ySW5kZXhbaWRdKTtcbiAgICBkYXRhVmlldy5lbmRVcGRhdGUoKTtcbiAgfVxuXG4gIHNldEdyaWRPcHRpb25zKCkge1xuICAgIGNvbnN0IGRhdGFWaWV3ID0gdGhpcy5wYXJlbnQuZGF0YUdyaWQuc3RhdGUuZGF0YVZpZXc7XG4gICAgZnVuY3Rpb24gdG9vbHRpcEZvcm1hdHRlcihyb3csIGNlbGwsIHZhbHVlLCB7IG5hbWUgfSwgeyBpZCB9KSB7XG4gICAgICByZXR1cm4gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwibXktdG9vbHRpcFwiPlxuICAgICAgICAgIDxkaXY+7J207KCEIOuNsOydtO2EsDogPHNwYW4gY2xhc3M9XCJlcnJvci10ZXh0XCI+JHtkYXRhVmlldy5nZXRJdGVtQnlJZChpZClbbmFtZV19PC9zcGFuPjwvZGl2PlxuICAgICAgICAgIDxkaXY+7KCV67mE65CcIOuNsOydtO2EsDogPHNwYW4gY2xhc3M9XCJyZXBhaXJlZC10ZXh0XCI+JHt2YWx1ZX08L3NwYW4+PC9kaXY+XG4gICAgICAgIDwvZGl2PiAgXG4gICAgICBgO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhlYWRlckZvcm1hdHRlcihyb3csIGNlbGwsIHZhbHVlLCB7IG5hbWUsIHJ1bGVzZXQ6IHsgaWQgfSB9LCBkYXRhQ29udGV4dCkge1xuICAgICAgY29uc3QgcnVsZXNldEdyb3VwID0gZ2V0UnVsZXNldEdyb3VwKGlkKTtcbiAgICAgIGNvbnN0IHJ1bGVzZXRMYWJlbCA9IGdldFJ1bGVzZXRMYWJlbChpZCk7XG4gICAgICByZXR1cm4gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwibXktdG9vbHRpcFwiPlxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJmb250LXdlaWdodDogYm9sZFwiPlxuICAgICAgICAgICAgJHtuYW1lfSDsu6zrn7xcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAg7KCB7Jqp65CcIOynhOuLqCDqt5zsuZk6ICR7cnVsZXNldEdyb3VwfSAoJHtydWxlc2V0TGFiZWx9KVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgYXV0b0VkaXQ6IGZhbHNlLFxuICAgICAgaGVhZGVyUm93SGVpZ2h0OiAzMCwgLy8g7Zek642UIOuGkuydtFxuICAgICAgZm9yY2VGaXRDb2x1bW5zOiB0cnVlLCAvLyBjZWxsIOuEiOu5hCDrp57stpTquLBcbiAgICAgIGFzeW5jRWRpdG9yTG9hZGluZzogZmFsc2UsXG4gICAgICBlbmFibGVDZWxsTmF2aWdhdGlvbjogdHJ1ZSxcbiAgICAgIGV4cGxpY2l0SW5pdGlhbGl6YXRpb246IHRydWUsXG4gICAgICBjdXN0b21Ub29sdGlwOiB7XG4gICAgICAgIGZvcm1hdHRlcjogdG9vbHRpcEZvcm1hdHRlcixcbiAgICAgICAgaGVhZGVyRm9ybWF0dGVyOiBoZWFkZXJGb3JtYXR0ZXIsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBzZXRHcmlkRXZlbnRzKCkge1xuICAgIGNvbnN0IHsgZ3JpZCwgZGF0YVZpZXcgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBvbmVHcmlkID0gZmFsc2UgfSA9IGZldGNoU2V0dGluZ3MoKTtcblxuICAgIGlmICghb25lR3JpZCkge1xuICAgICAgLyog7Iqk7YGs66GkIOuPmeq4sO2ZlCAqL1xuICAgICAgY29uc3QgZGF0YUdyaWQgPSB0aGlzLnBhcmVudC5kYXRhR3JpZC5zdGF0ZS5ncmlkO1xuXG4gICAgICBncmlkLm9uU2Nyb2xsLnN1YnNjcmliZSgoXywgeyBzY3JvbGxMZWZ0LCBzY3JvbGxUb3AgfSkgPT4ge1xuICAgICAgICBkYXRhR3JpZC5zY3JvbGxUbyhzY3JvbGxUb3ApO1xuICAgICAgICBkYXRhR3JpZC5yZW5kZXIoKTtcbiAgICAgIH0pO1xuXG4gICAgICBkYXRhR3JpZC5vblNjcm9sbC5zdWJzY3JpYmUoKF8sIHsgc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wIH0pID0+IHtcbiAgICAgICAgZ3JpZC5zY3JvbGxUbyhzY3JvbGxUb3ApO1xuICAgICAgICBncmlkLnJlbmRlcigpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGRhdGFWaWV3Lm9uUm93Q291bnRDaGFuZ2VkLnN1YnNjcmliZShmdW5jdGlvbiAoZSwgYXJncykge1xuICAgICAgZ3JpZC51cGRhdGVSb3dDb3VudCgpO1xuICAgICAgZ3JpZC5yZW5kZXIoKTtcbiAgICB9KTtcblxuICAgIGRhdGFWaWV3Lm9uUm93c0NoYW5nZWQuc3Vic2NyaWJlKGZ1bmN0aW9uIChlLCBhcmdzKSB7XG4gICAgICBncmlkLmludmFsaWRhdGVSb3dzKGFyZ3Mucm93cyk7XG4gICAgICBncmlkLnJlbmRlcigpO1xuICAgIH0pO1xuXG4gICAgZ3JpZC5zZXRTZWxlY3Rpb25Nb2RlbChuZXcgU2xpY2suQ2VsbFNlbGVjdGlvbk1vZGVsKCkpO1xuICB9XG5cbiAgcmVwYWlyKGRhdGFHcmlkKSB7XG4gICAgY29uc3QgY29sdW1ucyA9IGRhdGFHcmlkLmdldENvbHVtbnMoKTtcbiAgICBjb25zdCBkYXRhID0gZ28oZGF0YUdyaWQuZ2V0RGF0YSgpLmdldEl0ZW1zKCksIGNsb25lLCB2YWx1ZXMpO1xuXG4gICAgLy8g7KCV67mEXG4gICAgbGV0IHJlcGFpclN0eWxlQ3NzID0ge307XG4gICAgY29uc3QgZGF0YUxlbiA9IGRhdGEubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YUxlbjsgaSsrKSB7XG4gICAgICBjb25zdCByb3cgPSBkYXRhW2ldO1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJvdyk7XG4gICAgICBjb25zdCBrZXlMZW4gPSBrZXlzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5TGVuOyBqKyspIHtcbiAgICAgICAgY29uc3QgeyBlc3NlbnRpYWwsIHJ1bGVzZXQsIGVycm9yQ291bnQsIGZpZWxkIH0gPSBjb2x1bW5zLmZpbmQoKHsgaWQgfSkgPT4gaWQgPT09IGtleXNbal0pO1xuICAgICAgICBpZiAoIXJ1bGVzZXQgfHwgISFlcnJvckNvdW50KSBjb250aW51ZTtcbiAgICAgICAgY29uc3Qgb2xkQ2VsbCA9IHR5cGVvZiByb3dba2V5c1tqXV0gPT09ICdzdHJpbmcnID8gcm93W2tleXNbal1dLnRyaW0oKSA6IHJvd1trZXlzW2pdXTtcbiAgICAgICAgbGV0IG5ld0NlbGw7XG4gICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gcnVsZXNldDtcblxuICAgICAgICAvLyDsoJXruYQg66Ow7IWLIOyggeyaqVxuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICBjYXNlICfrrLjsnpDsl7QnOlxuICAgICAgICAgICAgbmV3Q2VsbCA9IHN0cmluZ1J1bGVzZXQucmVwYWlyKG9sZENlbGwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAn6riI7JWhJzpcbiAgICAgICAgICAgIG5ld0NlbGwgPSBjaGFyZ2VSdWxlc2V0LnJlcGFpcihvbGRDZWxsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ+yImOufiSc6XG4gICAgICAgICAgICBuZXdDZWxsID0gY291bnRSdWxlc2V0LnJlcGFpcihvbGRDZWxsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ+ycqCc6XG4gICAgICAgICAgICBuZXdDZWxsID0gcGVyY2VudFJ1bGVzZXQucmVwYWlyKG9sZENlbGwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAn7Jes67aAJzpcbiAgICAgICAgICAgIG5ld0NlbGwgPSB3aGV0aGVyUnVsZXNldC5yZXBhaXIob2xkQ2VsbCwgcnVsZXNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICfrgqDsp5wnOlxuICAgICAgICAgICAgbmV3Q2VsbCA9IGRhdGVSdWxlc2V0LnJlcGFpcihvbGRDZWxsLCBydWxlc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ+uyiO2YuCc6XG4gICAgICAgICAgICBuZXdDZWxsID0gbnVtYmVyUnVsZXNldC5yZXBhaXIob2xkQ2VsbCwgcnVsZXNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICfsnbzqtIDshLEnOlxuICAgICAgICAgICAgbmV3Q2VsbCA9IGNvbnNpc3RlbmN5UnVsZXNldC5yZXBhaXIob2xkQ2VsbCwgcnVsZXNldCwgcm93KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ+qzhOyCsOyLnSc6XG4gICAgICAgICAgICBuZXdDZWxsID0gY2FsY3VsYXRpb25SdWxlc2V0LnJlcGFpcihvbGRDZWxsLCBydWxlc2V0LCByb3cpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2xkQ2VsbCAhPSBuZXdDZWxsKSB7XG4gICAgICAgICAgaWYgKCFyZXBhaXJTdHlsZUNzcy5oYXNPd25Qcm9wZXJ0eShpKSkgcmVwYWlyU3R5bGVDc3NbaV0gPSB7fTtcbiAgICAgICAgICByZXBhaXJTdHlsZUNzc1tpXVtmaWVsZF0gPSAncmVwYWlyZWQtY2VsbCc7XG4gICAgICAgIH1cbiAgICAgICAgcm93W2tleXNbal1dID0gbmV3Q2VsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zdGF0ZSA9IHsgLi4udGhpcy5zdGF0ZSwgY29sdW1ucywgcmVwYWlyU3R5bGVDc3MgfTtcbiAgICB0aGlzLnJlbmRlckdyaWQoY29sdW1ucywgZGF0YSk7XG4gIH1cblxuICBzZXRSZXBhaXJGb3JtYXQoY29sdW1ucykge1xuICAgIHJldHVybiBjb2x1bW5zLm1hcChjb2x1bW4gPT4gKHtcbiAgICAgIC4uLmNvbHVtbixcbiAgICAgIGZvcm1hdHRlcjogZXJyb3JGb3JtYXR0ZXIsXG4gICAgICBlZGl0b3I6IGNvbHVtbi5pZCAhPT0gJ2lkJyA/IFNsaWNrLkVkaXRvcnMuVGV4dCA6IG51bGwsXG4gICAgfSkpO1xuICB9XG5cbiAgdGVtcGxhdGUoKSB7XG4gICAgY29uc3QgeyBwcm9ncmVzcyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiBwcm9ncmVzcyA9PT0gUkVQQUlSXG4gICAgICA/IGBcbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJjYXJkXCI+XG4gICAgICAgICAgPGFydGljbGUgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJyZXBhaXItZ3JpZFwiIC8+XG4gICAgICAgICAgPC9hcnRpY2xlPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICBgXG4gICAgICA6ICcnO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTklUIH0gZnJvbSAnQC9jb25zdGFudHMvcHJvZ3Jlc3MuanMnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICdAL2NvcmUvQ29tcG9uZW50LmpzJztcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXNjcmlwdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIGluaXRTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvZ3Jlc3M6IElOSVQsXG4gICAgfTtcbiAgfVxuXG4gIHRlbXBsYXRlKCkge1xuICAgIGNvbnN0IHsgcHJvZ3Jlc3MgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gcHJvZ3Jlc3MgPT09IElOSVRcbiAgICAgID8gYFxuICAgICAgPGFydGljbGUgY2xhc3M9XCJjYXJkXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICA8c3Ryb25nPlvsgqzsmqnrspUg7JWI64K0XTwvc3Ryb25nPlxuICAgICAgICAgIDxwPjEuIFvtjIzsnbzshKDtg51dIOuyhO2KvOydhCDtgbTrpq3tlbQgQ1NW7YyM7J287J2EIOyEoO2Dne2VmOqzoCwg7Lus65+8IO2XpOuNlCDsi5zsnpHtlonsnYQg7J6F66ClIO2bhCBb7Iuc7J6RXSDrsoTtirzsnYQg7YG066at7ZWp64uI64ukLijsp4Tri6jsnbQg7LKY66as65CcIOqyveyasOuKlCDsp4Tri6jqsrDqs7wg642w7J207YSw6rCAIOyhsO2ajOuQqeuLiOuLpC4pPC9wPlxuICAgICAgICAgIDxwPjIuIOy7rOufvCDtl6TrjZQg7JWE656Y7J2YIOy9pOuztOuwleyKpOyXkOyEnCDtlbTri7nrkJjripQg642w7J207YSwIO2DgOyeheyduCDtkojsp4jsp4Tri6jquLDspIDsnYQg7ISg7YOd7ZWp64uI64ukLjwvcD5cbiAgICAgICAgICA8cD4mbmJzcCZuYnNwID4g6rCc67CpIO2RnOykgCDrjbDsnbTthLDshYvsnbgg6rK97Jqw64qUIFvqsJzrsKntkZzspIBdIOuyhO2KvOydhCDtgbTrpq3tlZjrqbQg7J6Q64+Z7Jy866GcIOynhOuLqOq3nOy5meydhCDstpTsspztlanri4jri6QuIDwvcD5cbiAgICAgICAgICA8cD4mbmJzcCZuYnNwID4g7J2867CYIOqwnOuwqSDrjbDsnbTthLDshYvsnbgg6rK97Jqw64qUIFvqt5zsuZnstpTsspxdIOuyhO2KvOydhCDtgbTrpq3tlZjrqbQg642w7J207YSwIO2MqO2EtOycoO2YleyXkCDsp4Tri6jqt5zsuZnsnYQg7LaU7LKcKOynhOuLqOq3nOy5mSDtmZXsnbgg7ZuEIOy1nOyiheyEpOyglSDtlYTsmpQp7ZWp64uI64ukLiA8L3A+XG4gICAgICAgICAgPHA+My4gW+ynhOuLqF0g67KE7Yq87J2EIO2BtOumre2VmOyXrCDsp4Tri6jsnYQg7Iuk7Iuc7ZWY6rOgLCBb67O06rOg7IScXSDrsoTtirzsnYQg7YG066at7ZWY7JesIOuztOqzoOyEnOulvCDsg53shLHtlanri4jri6QuKOuzgOqyveuQnCDrjbDsnbTthLDsnZgg7J6s7KeE64uo7J2AIOy0iOq4sO2ZlCDtm4Qg7KeE64uo7LKY66asKSA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9hcnRpY2xlPlxuICAgIGBcbiAgICAgIDogJyc7XG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9Db21wb25lbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHNob3coKSB7XG4gICAgdGhpcy4kdGFyZ2V0LmZpbmQoJy5tb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIHRoaXMuJHRhcmdldC5maW5kKCcubW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuICB9XG5cbiAgc2V0SGVhZGVyKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHNldEJvZHkoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgc2V0Rm9vdGVyKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHRlbXBsYXRlKCkge1xuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwgZmFkZVwiIGlkPVwibW9kYWxcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZGlhbG9nIG1vZGFsLWxnXCIgcm9sZT1cImRvY3VtZW50XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgPGg1IGNsYXNzPVwibW9kYWwtdGl0bGVcIj4ke3RoaXMuc2V0SGVhZGVyKCl9PC9oNT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj4ke3RoaXMuc2V0Qm9keSgpfTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPiR7dGhpcy5zZXRGb290ZXIoKX08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG59XG4iLCJpbXBvcnQgX09iamVjdCRkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBfT2JqZWN0JGRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJpbXBvcnQgaXNTdHJpbmcgZnJvbSBcIi4vaXNTdHJpbmcuanNcIjtcbmltcG9ydCByZWR1Y2UgZnJvbSBcIi4vcmVkdWNlLmpzXCI7XG5pbXBvcnQgaXNBcnJheSBmcm9tIFwiLi9pc0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYXN0KGl0ZXIpIHtcbiAgaWYgKGlzQXJyYXkoaXRlcikgfHwgaXNTdHJpbmcoaXRlcikpIHtcbiAgICByZXR1cm4gaXRlcltpdGVyLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgcmV0dXJuIHJlZHVjZShmdW5jdGlvbiAoXywgYSkge1xuICAgIHJldHVybiBhO1xuICB9LCBpdGVyKTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZ2V0SXRlcmF0b3IgZnJvbSBcIkBiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9nZXQtaXRlcmF0b3JcIjtcbmltcG9ydCBfUHJvbWlzZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9wcm9taXNlXCI7XG5pbXBvcnQgX1N5bWJvbCRpdGVyYXRvciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9zeW1ib2wvaXRlcmF0b3JcIjtcbmltcG9ydCBpc0l0ZXJhYmxlIGZyb20gXCIuLi9TdHJpY3QvaXNJdGVyYWJsZS5qc1wiO1xuaW1wb3J0IGxhc3QgZnJvbSBcIi4uL1N0cmljdC9sYXN0LmpzXCI7XG5pbXBvcnQgdG9JdGVyIGZyb20gXCIuLi9TdHJpY3QvdG9JdGVyLmpzXCI7XG5pbXBvcnQgbm9wIGZyb20gXCIuLi9TdHJpY3Qvbm9wLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGF0TChpdGVyKSB7XG4gIHZhciBkZXB0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgdmFyIGNvbmN1ckNoZWNrID0gbnVsbDtcbiAgdmFyIGl0ZXJTdGFjayA9IFt0b0l0ZXIoaXRlcildO1xuICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHtcbiAgICBuZXh0OiBmdW5jdGlvbiByZWN1cigpIHtcbiAgICAgIHZhciBpdGVyID0gbGFzdChpdGVyU3RhY2spO1xuICAgICAgaWYgKCFpdGVyKSByZXR1cm4ge1xuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9O1xuICAgICAgdmFyIGN1ciA9IGl0ZXIubmV4dCgpO1xuXG4gICAgICBpZiAoY3VyLmRvbmUpIHtcbiAgICAgICAgaXRlclN0YWNrLnBvcCgpO1xuICAgICAgICByZXR1cm4gcmVjdXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlclN0YWNrLmxlbmd0aCA8PSBkZXB0aCAmJiBpc0l0ZXJhYmxlKGN1ci52YWx1ZSkgJiYgdHlwZW9mIGN1ci52YWx1ZSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGl0ZXJTdGFjay5wdXNoKF9nZXRJdGVyYXRvcihjdXIudmFsdWUpKTtcbiAgICAgICAgcmV0dXJuIHJlY3VyKCk7XG4gICAgICB9IGVsc2UgaWYgKGN1ci52YWx1ZSBpbnN0YW5jZW9mIF9Qcm9taXNlKSB7XG4gICAgICAgIGlmIChjb25jdXJDaGVjayAmJiAhY29uY3VyQ2hlY2suZG9uZSkge1xuICAgICAgICAgIGl0ZXJTdGFjay5sZW5ndGggPSAwO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogX1Byb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIidMLmZsYXQnIGNhbiBub3QgYmUgdXNlZCB3aXRoICdDJyBmdW5jdGlvbi5cIikpLFxuICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uY3VyQ2hlY2sgPSBjb25jdXJDaGVjayB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogY3VyLnZhbHVlLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWNvbmN1ckNoZWNrLmhhc093blByb3BlcnR5KFwiZG9uZVwiKSkgY29uY3VyQ2hlY2suZG9uZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaXRlclN0YWNrLmxlbmd0aCA+IGRlcHRoIHx8ICFpc0l0ZXJhYmxlKHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikgcmV0dXJuIHZhbHVlO1xuXG4gICAgICAgICAgICB2YXIgaXRlciA9IF9nZXRJdGVyYXRvcih2YWx1ZSksXG4gICAgICAgICAgICAgICAgY3VyID0gaXRlci5uZXh0KCk7XG5cbiAgICAgICAgICAgIHJldHVybiBjdXIuZG9uZSA/IF9Qcm9taXNlLnJlamVjdChub3ApIDogKGl0ZXJTdGFjay5wdXNoKGl0ZXIpLCBjdXIudmFsdWUpO1xuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoIWNvbmN1ckNoZWNrLmhhc093blByb3BlcnR5KFwiZG9uZVwiKSkgY29uY3VyQ2hlY2suZG9uZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gX1Byb21pc2UucmVqZWN0KGUpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY3VyO1xuICAgICAgfVxuICAgIH1cbiAgfSwgX1N5bWJvbCRpdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbn0iLCJpbXBvcnQgeyBmbGF0IH0gZnJvbSAnZnhqcy9TdHJpY3QnO1xuXG5jb25zdCBydWxlc2V0ID0gW1xuICB7IGlkOiAnc3RyJywgdHlwZTogJ+usuOyekOyXtCcsIGxhYmVsOiAn66y47J6Q7Je0JyB9LFxuICB7IGlkOiAnYW10JywgdHlwZTogJ+q4iOyVoScsIGxhYmVsOiAn6riI7JWhJyB9LFxuICB7IGlkOiAncXR0JywgdHlwZTogJ+yImOufiScsIGxhYmVsOiAn7IiY65+JJyB9LFxuICB7IGlkOiAncGVjJywgdHlwZTogJ+ycqCcsIGxhYmVsOiAn7JyoJyB9LFxuICB7IGlkOiAnd2hlWU4nLCB0eXBlOiAn7Jes67aAJywgbGFiZWw6ICdZLCBOJyB9LFxuICB7IGlkOiAnd2hlU0VUJywgdHlwZTogJ+yXrOu2gCcsIGxhYmVsOiAn7Jes67aA6rCSIOyngOyglScgfSxcbiAge1xuICAgIGlkOiAnZHRZWVlZTU1EREhIMjRNSVNTJyxcbiAgICB0eXBlOiAn64Kg7KecJyxcbiAgICBsYWJlbDogJ1lZWVktTU0tREQgSEgyNDpNSTpTUycsXG4gICAgY29udGVudDogJ+yXsOyblOydvCDsi5zqsITrtoTstIgnLFxuICB9LFxuICB7XG4gICAgaWQ6ICdkdFlZWVlNTURESEgyNE1JJyxcbiAgICB0eXBlOiAn64Kg7KecJyxcbiAgICBsYWJlbDogJ1lZWVktTU0tREQgSEgyNDpNSScsXG4gICAgY29udGVudDogJ+yXsOyblOydvCDsi5zqsITrtoQnLFxuICB9LFxuICB7XG4gICAgaWQ6ICdkdFlZWVlNTURESEgyNCcsXG4gICAgdHlwZTogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdZWVlZLU1NLUREIEhIMjQnLFxuICAgIGNvbnRlbnQ6ICfsl7Dsm5Tsnbwg7Iuc6rCEJyxcbiAgfSxcbiAge1xuICAgIGlkOiAnZHRNTURESEgyNE1JJyxcbiAgICB0eXBlOiAn64Kg7KecJyxcbiAgICBsYWJlbDogJ01NLUREIEhIMjQ6TUknLFxuICAgIGNvbnRlbnQ6ICfsm5Tsnbwg7Iuc6rCE67aEJyxcbiAgfSxcbiAge1xuICAgIGlkOiAnZHRISDI0TUlTUycsXG4gICAgdHlwZTogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdISDI0Ok1JOlNTJyxcbiAgICBjb250ZW50OiAn7Iuc6rCE67aE7LSIJyxcbiAgfSxcbiAge1xuICAgIGlkOiAnZHRZWVlZTU1ERCcsXG4gICAgdHlwZTogJ+uCoOynnCcsXG4gICAgbGFiZWw6ICdZWVlZLU1NLUREJyxcbiAgICBjb250ZW50OiAn7Jew7JuU7J28JyxcbiAgICBlcnJvckRpc2NyaXB0aW9uOlxuICAgICAgJ+uCoOynnChZWVlZLU1NLUREKSDrjbDsnbTthLDsnZgg67aA7KCV7ZmV7ZWcIOyeheugpTxiciAvPuyEpOuqhTog64WE64+ELCDsm5QsIOydvOyekOqwhOydmCDtkZzspIDrjbDsnbTthLDtmJXsi53snYAg7ZWY7J207ZSIKC0p7J2EIOyCrOyaqe2VmOyXrCDtkZzquLAnLFxuICAgIGV4YW1wbGU6ICftkZzspIDtmJXsi506OTk5OS05OS05OTxiciAvPuyYiOyLnDog4pGgMjEuOC4xIC0+IDIwMjEtMDgtMDEg4pGhMjEvOC8xIC0+IDIwMjEtMDgtMDEnLFxuICB9LFxuICB7IGlkOiAnZHRISDI0TUknLCB0eXBlOiAn64Kg7KecJywgbGFiZWw6ICdISDI0Ok1JJywgY29udGVudDogJ+yLnOqwhOu2hCcgfSxcbiAgeyBpZDogJ2R0WVlZWU1NJywgdHlwZTogJ+uCoOynnCcsIGxhYmVsOiAnWVlZWS1NTScsIGNvbnRlbnQ6ICfsl7Dsm5QnIH0sXG4gIHsgaWQ6ICdkdE1NREQnLCB0eXBlOiAn64Kg7KecJywgbGFiZWw6ICdNTS1ERCcsIGNvbnRlbnQ6ICfsm5TsnbwnIH0sXG4gIHsgaWQ6ICdkdEhIMjQnLCB0eXBlOiAn64Kg7KecJywgbGFiZWw6ICdISDI0JywgY29udGVudDogJ+yLnOqwhCcgfSxcbiAgeyBpZDogJ2R0WVlZWScsIHR5cGU6ICfrgqDsp5wnLCBsYWJlbDogJ1lZWVknLCBjb250ZW50OiAn7Jew64+EJyB9LFxuICB7IGlkOiAnZHRERCcsIHR5cGU6ICfrgqDsp5wnLCBsYWJlbDogJ0REJywgY29udGVudDogJ+ydvOyekCcgfSxcbiAgeyBpZDogJ2R0TUknLCB0eXBlOiAn64Kg7KecJywgbGFiZWw6ICdNSScsIGNvbnRlbnQ6ICfrtoQnIH0sXG4gIHsgaWQ6ICdkdE1NJywgdHlwZTogJ+uCoOynnCcsIGxhYmVsOiAnTU0nLCBjb250ZW50OiAn7JuUJyB9LFxuICB7IGlkOiAnZHRTUycsIHR5cGU6ICfrgqDsp5wnLCBsYWJlbDogJ1NTJywgY29udGVudDogJ+y0iCcgfSxcbiAgeyBpZDogJ2R0TUlTUycsIHR5cGU6ICfrgqDsp5wnLCBsYWJlbDogJ01JOlNTJywgY29udGVudDogJ+u2hOy0iCcgfSxcbiAgeyBpZDogJ251bVBob25lJywgdHlwZTogJ+uyiO2YuCcsIGxhYmVsOiAn7KCE7ZmU67KI7Zi4JyB9LFxuICB7IGlkOiAnbnVtUG9zdGFsQ29kZScsIHR5cGU6ICfrsojtmLgnLCBsYWJlbDogJ+yasO2OuOuyiO2YuCcgfSxcbiAgeyBpZDogJ251bUJ1c2luZXNzJywgdHlwZTogJ+uyiO2YuCcsIGxhYmVsOiAn7IKs7JeF7J6Q67KI7Zi4JyB9LFxuICB7IGlkOiAnbnVtUGF0dGVybicsIHR5cGU6ICfrsojtmLgnLCBsYWJlbDogJ+2MqO2EtOyngOygleuyiO2YuCcgfSxcbiAgeyBpZDogJ2NvblRpbWUnLCB0eXBlOiAn7J286rSA7ISxJywgbGFiZWw6ICfsi5zqsITsiJzshJwg7J286rSA7ISxJyB9LFxuICB7XG4gICAgaWQ6ICdjb25Mb2dpY1JlbGF0aW9uU2hpcCcsXG4gICAgdHlwZTogJ+ydvOq0gOyEsScsXG4gICAgbGFiZWw6ICfsu6zrn7wg6rCEIOuFvOumrOq0gOqzhCDsnbzqtIDshLEnLFxuICB9LFxuICB7IGlkOiAnY2FsRm9ybXVsYScsIHR5cGU6ICfqs4TsgrDsi50nLCBsYWJlbDogJ+yCsOyLnScgfSxcbiAgeyBpZDogJ2NhbFN1bScsIHR5cGU6ICfqs4TsgrDsi50nLCBsYWJlbDogJ+2VqeqzhCcgfSxcbl07XG5cbmNvbnN0IGRpYWd0eXBlID0gW1xuICB7IGluZGV4OiAnMScsIGlkOiAnc3RyJywgdHlwZTogJ+usuOyekOyXtCcsIGxhYmVsOiAn66y47J6Q7Je0JyB9LFxuICB7IGluZGV4OiAnMicsIGlkOiAnYW10JywgdHlwZTogJ+q4iOyVoScsIGxhYmVsOiAn6riI7JWhJyB9LFxuICB7IGluZGV4OiAnMycsIGlkOiAncXR0JywgdHlwZTogJ+yImOufiScsIGxhYmVsOiAn7IiY65+JJyB9LFxuICB7IGluZGV4OiAnNCcsIGlkOiAncGVjJywgdHlwZTogJ+ycqCcsIGxhYmVsOiAn7JyoJyB9LFxuICBbXG4gICAgeyBpbmRleDogJzUtMScsIGlkOiAnd2hlWU4nLCB0eXBlOiAn7Jes67aAJywgbGFiZWw6ICdZLCBOJyB9LFxuICAgIHsgaW5kZXg6ICc1LTInLCBpZDogJ3doZVNFVCcsIHR5cGU6ICfsl6zrtoAnLCBsYWJlbDogJ+yXrOu2gOqwkiDsp4DsoJUnIH0sXG4gIF0sXG4gIFtcbiAgICB7XG4gICAgICBpbmRleDogJzYtMScsXG4gICAgICBpZDogJ2R0WVlZWU1NRERISDI0TUlTUycsXG4gICAgICB0eXBlOiAn64Kg7KecJyxcbiAgICAgIGxhYmVsOiAnWVlZWS1NTS1ERCBISDI0Ok1JOlNTJyxcbiAgICAgIGNvbnRlbnQ6ICfsl7Dsm5Tsnbwg7Iuc6rCE67aE7LSIJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGluZGV4OiAnNi0yJyxcbiAgICAgIGlkOiAnZHRZWVlZTU1EREhIMjRNSScsXG4gICAgICB0eXBlOiAn64Kg7KecJyxcbiAgICAgIGxhYmVsOiAnWVlZWS1NTS1ERCBISDI0Ok1JJyxcbiAgICAgIGNvbnRlbnQ6ICfsl7Dsm5Tsnbwg7Iuc6rCE67aEJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGluZGV4OiAnNi0zJyxcbiAgICAgIGlkOiAnZHRZWVlZTU1EREhIMjQnLFxuICAgICAgdHlwZTogJ+uCoOynnCcsXG4gICAgICBsYWJlbDogJ1lZWVktTU0tREQgSEgyNCcsXG4gICAgICBjb250ZW50OiAn7Jew7JuU7J28IOyLnOqwhCcsXG4gICAgfSxcbiAgICB7XG4gICAgICBpbmRleDogJzYtNCcsXG4gICAgICBpZDogJ2R0TU1EREhIMjRNSScsXG4gICAgICB0eXBlOiAn64Kg7KecJyxcbiAgICAgIGxhYmVsOiAnTU0tREQgSEgyNDpNSScsXG4gICAgICBjb250ZW50OiAn7JuU7J28IOyLnOqwhOu2hCcsXG4gICAgfSxcbiAgICB7XG4gICAgICBpbmRleDogJzYtNScsXG4gICAgICBpZDogJ2R0SEgyNE1JU1MnLFxuICAgICAgdHlwZTogJ+uCoOynnCcsXG4gICAgICBsYWJlbDogJ0hIMjQ6TUk6U1MnLFxuICAgICAgY29udGVudDogJ+yLnOqwhOu2hOy0iCcsXG4gICAgfSxcbiAgICB7XG4gICAgICBpbmRleDogJzYtNicsXG4gICAgICBpZDogJ2R0WVlZWU1NREQnLFxuICAgICAgdHlwZTogJ+uCoOynnCcsXG4gICAgICBsYWJlbDogJ1lZWVktTU0tREQnLFxuICAgICAgY29udGVudDogJ+yXsOyblOydvCcsXG4gICAgICBlcnJvckRpc2NyaXB0aW9uOlxuICAgICAgICAn64Kg7KecKFlZWVktTU0tREQpIOuNsOydtO2EsOydmCDrtoDsoJXtmZXtlZwg7J6F66ClPGJyIC8+7ISk66qFOiDrhYTrj4QsIOyblCwg7J287J6Q6rCE7J2YIO2RnOykgOuNsOydtO2EsO2YleyLneydgCDtlZjsnbTtlIgoLSnsnYQg7IKs7Jqp7ZWY7JesIO2RnOq4sCcsXG4gICAgICBleGFtcGxlOiAn7ZGc7KSA7ZiV7IudOjk5OTktOTktOTk8YnIgLz7smIjsi5w6IOKRoDIxLjguMSAtPiAyMDIxLTA4LTAxIOKRoTIxLzgvMSAtPiAyMDIxLTA4LTAxJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGluZGV4OiAnNi03JyxcbiAgICAgIGlkOiAnZHRISDI0TUknLFxuICAgICAgdHlwZTogJ+uCoOynnCcsXG4gICAgICBsYWJlbDogJ0hIMjQ6TUknLFxuICAgICAgY29udGVudDogJ+yLnOqwhOu2hCcsXG4gICAgfSxcbiAgICB7XG4gICAgICBpbmRleDogJzYtOCcsXG4gICAgICBpZDogJ2R0WVlZWU1NJyxcbiAgICAgIHR5cGU6ICfrgqDsp5wnLFxuICAgICAgbGFiZWw6ICdZWVlZLU1NJyxcbiAgICAgIGNvbnRlbnQ6ICfsl7Dsm5QnLFxuICAgIH0sXG4gICAge1xuICAgICAgaW5kZXg6ICc2LTknLFxuICAgICAgaWQ6ICdkdE1NREQnLFxuICAgICAgdHlwZTogJ+uCoOynnCcsXG4gICAgICBsYWJlbDogJ01NLUREJyxcbiAgICAgIGNvbnRlbnQ6ICfsm5TsnbwnLFxuICAgIH0sXG4gICAge1xuICAgICAgaW5kZXg6ICc2LTEwJyxcbiAgICAgIGlkOiAnZHRISDI0JyxcbiAgICAgIHR5cGU6ICfrgqDsp5wnLFxuICAgICAgbGFiZWw6ICdISDI0JyxcbiAgICAgIGNvbnRlbnQ6ICfsi5zqsIQnLFxuICAgIH0sXG4gICAge1xuICAgICAgaW5kZXg6ICc2LTExJyxcbiAgICAgIGlkOiAnZHRZWVlZJyxcbiAgICAgIHR5cGU6ICfrgqDsp5wnLFxuICAgICAgbGFiZWw6ICdZWVlZJyxcbiAgICAgIGNvbnRlbnQ6ICfsl7Drj4QnLFxuICAgIH0sXG4gICAgeyBpbmRleDogJzYtMTInLCBpZDogJ2R0REQnLCB0eXBlOiAn64Kg7KecJywgbGFiZWw6ICdERCcsIGNvbnRlbnQ6ICfsnbzsnpAnIH0sXG4gICAgeyBpbmRleDogJzYtMTMnLCBpZDogJ2R0TUknLCB0eXBlOiAn64Kg7KecJywgbGFiZWw6ICdNSScsIGNvbnRlbnQ6ICfrtoQnIH0sXG4gICAgeyBpbmRleDogJzYtMTQnLCBpZDogJ2R0TU0nLCB0eXBlOiAn64Kg7KecJywgbGFiZWw6ICdNTScsIGNvbnRlbnQ6ICfsm5QnIH0sXG4gICAgeyBpbmRleDogJzYtMTUnLCBpZDogJ2R0U1MnLCB0eXBlOiAn64Kg7KecJywgbGFiZWw6ICdTUycsIGNvbnRlbnQ6ICfstIgnIH0sXG4gICAge1xuICAgICAgaW5kZXg6ICc2LTE2JyxcbiAgICAgIGlkOiAnZHRNSVNTJyxcbiAgICAgIHR5cGU6ICfrgqDsp5wnLFxuICAgICAgbGFiZWw6ICdNSTpTUycsXG4gICAgICBjb250ZW50OiAn67aE7LSIJyxcbiAgICB9LFxuICBdLFxuICBbXG4gICAgeyBpbmRleDogJzctMScsIGlkOiAnbnVtUGhvbmUnLCB0eXBlOiAn67KI7Zi4JywgbGFiZWw6ICfsoITtmZTrsojtmLgnIH0sXG4gICAgeyBpbmRleDogJzctMicsIGlkOiAnbnVtUG9zdGFsQ29kZScsIHR5cGU6ICfrsojtmLgnLCBsYWJlbDogJ+yasO2OuOuyiO2YuCcgfSxcbiAgICB7IGluZGV4OiAnNy0zJywgaWQ6ICdudW1CdXNpbmVzcycsIHR5cGU6ICfrsojtmLgnLCBsYWJlbDogJ+yCrOyXheyekOuyiO2YuCcgfSxcbiAgICB7IGluZGV4OiAnNy00JywgaWQ6ICdudW1QYXR0ZXJuJywgdHlwZTogJ+uyiO2YuCcsIGxhYmVsOiAn7Yyo7YS07KeA7KCV67KI7Zi4JyB9LFxuICBdLFxuICBbXG4gICAgeyBpbmRleDogJzgtMScsIGlkOiAnY29uVGltZScsIHR5cGU6ICfsnbzqtIDshLEnLCBsYWJlbDogJ+yLnOqwhOyInOyEnCDsnbzqtIDshLEnIH0sXG4gICAge1xuICAgICAgaW5kZXg6ICc4LTInLFxuICAgICAgaWQ6ICdjb25Mb2dpY1JlbGF0aW9uU2hpcCcsXG4gICAgICB0eXBlOiAn7J286rSA7ISxJyxcbiAgICAgIGxhYmVsOiAn7Lus65+8IOqwhCDrhbzrpqzqtIDqs4Qg7J286rSA7ISxJyxcbiAgICB9LFxuICBdLFxuICBbXG4gICAgeyBpbmRleDogJzktMScsIGlkOiAnY2FsRm9ybXVsYScsIHR5cGU6ICfqs4TsgrDsi50nLCBsYWJlbDogJ+yCsOyLnScgfSxcbiAgICB7IGluZGV4OiAnOS0yJywgaWQ6ICdjYWxTdW0nLCB0eXBlOiAn6rOE7IKw7IudJywgbGFiZWw6ICftlanqs4QnIH0sXG4gIF0sXG5dO1xuXG5jb25zdCBmbGF0dGVkUnVsZXNldCA9IGZsYXQoZGlhZ3R5cGUpO1xuY29uc3QgZGF0ZURpYWd0eXBlcyA9IGZsYXR0ZWRSdWxlc2V0LmZpbHRlcigoeyB0eXBlIH0pID0+IHR5cGUgPT09ICfrgqDsp5wnKTtcblxuZXhwb3J0IHsgZGlhZ3R5cGUsIGRhdGVEaWFndHlwZXMsIGZsYXR0ZWRSdWxlc2V0IH07XG4iLCJpbXBvcnQgdGFrZUFsbCBmcm9tIFwiLi90YWtlQWxsLmpzXCI7XG5pbXBvcnQgZmxhdEwgZnJvbSBcIi4uL0xhenkvZmxhdEwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZsYXQoaXRlcikge1xuICB2YXIgZGVwdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gIHJldHVybiB0YWtlQWxsKGZsYXRMKGl0ZXIsIGRlcHRoKSk7XG59IiwiaW1wb3J0IGdvMSBmcm9tIFwiLi9nbzEuanNcIjtcbmltcG9ydCBtYXAgZnJvbSBcIi4vbWFwLmpzXCI7XG5pbXBvcnQgY3VycnkgZnJvbSBcIi4vY3VycnkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGN1cnJ5KGZ1bmN0aW9uIGVhY2goZiwgaXRlcikge1xuICByZXR1cm4gbWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGdvMShmKGEpLCBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfSk7XG4gIH0sIGl0ZXIpO1xufSk7IiwiaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL2NvbW1vbi9Nb2RhbC5qcyc7XG5pbXBvcnQgeyBkYXRlRGlhZ3R5cGVzIH0gZnJvbSAnQC9jb25zdGFudHMvZGlhZ3R5cGUuanMnO1xuaW1wb3J0IHsgJGFjdGlvbiB9IGZyb20gJ0AvdXRpbHMvc2VsZWN0b3IuanMnO1xuaW1wb3J0IHsgZ28sIGVhY2ggfSBmcm9tICdmeGpzL1N0cmljdCc7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0ZU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICBpbml0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV2ZW50OiBudWxsLFxuICAgICAgZGF0ZVJ1bGVzZXQ6IHtcbiAgICAgICAgWVlZWTogZmFsc2UsXG4gICAgICAgIE1NOiBmYWxzZSxcbiAgICAgICAgREQ6IGZhbHNlLFxuICAgICAgICBISDI0OiBmYWxzZSxcbiAgICAgICAgTUk6IGZhbHNlLFxuICAgICAgICBTUzogZmFsc2UsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG4gICAgdGhpcy4kdGFyZ2V0Lm9uKCdrZXlwcmVzcycsICh7IGtleSB9KSA9PiB7XG4gICAgICBpZiAoa2V5ID09PSAnRW50ZXInKSB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICB9KTtcblxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnY2xvc2UtbW9kYWwnLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICB9KTtcblxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnZGF0ZS1jaGVjaycsICdjaGFuZ2UnLCAoeyB0YXJnZXQ6IHsgZGF0YXNldCB9IH0pID0+IHtcbiAgICAgIGNvbnN0IHsgZGF0ZXR5cGUgfSA9IGRhdGFzZXQ7XG4gICAgICBpZiAoZGF0ZXR5cGUgPT09ICdZWVlZTU1EREgyNE1JU1MnKVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBldmVudDogJ2NoZWNrLWFsbCcsXG4gICAgICAgICAgZGF0ZVJ1bGVzZXQ6IHtcbiAgICAgICAgICAgIFlZWVk6IHRydWUsXG4gICAgICAgICAgICBNTTogdHJ1ZSxcbiAgICAgICAgICAgIEREOiB0cnVlLFxuICAgICAgICAgICAgSEgyNDogdHJ1ZSxcbiAgICAgICAgICAgIE1JOiB0cnVlLFxuICAgICAgICAgICAgU1M6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5kYXRlUnVsZXNldFtkYXRldHlwZV0gPSAhdGhpcy5zdGF0ZS5kYXRlUnVsZXNldFtkYXRldHlwZV07XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBldmVudDogJ2NoZWNrJyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnZGF0ZS1zZWxlY3QnLCAnY2hhbmdlJywgZSA9PiB7XG4gICAgICBjb25zdCBkYXRlRGlhZ3R5cGUgPSAkKGUudGFyZ2V0KS5maW5kKCdvcHRpb246c2VsZWN0ZWQnKS52YWwoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBldmVudDogJ3NlbGVjdCcsXG4gICAgICAgIGRhdGVSdWxlc2V0OiB7XG4gICAgICAgICAgWVlZWTogZGF0ZURpYWd0eXBlLmluY2x1ZGVzKCdZWVlZJyksXG4gICAgICAgICAgTU06IGRhdGVEaWFndHlwZS5pbmNsdWRlcygnTU0nKSxcbiAgICAgICAgICBERDogZGF0ZURpYWd0eXBlLmluY2x1ZGVzKCdERCcpLFxuICAgICAgICAgIEhIMjQ6IGRhdGVEaWFndHlwZS5pbmNsdWRlcygnSEgyNCcpLFxuICAgICAgICAgIE1JOiBkYXRlRGlhZ3R5cGUuaW5jbHVkZXMoJ01JJyksXG4gICAgICAgICAgU1M6IGRhdGVEaWFndHlwZS5pbmNsdWRlcygnU1MnKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHsgLi4udGhpcy5zdGF0ZSwgLi4ubmV4dFN0YXRlIH07XG5cbiAgICBjb25zdCBzZWxlY3QgPSB0aGlzLiR0YXJnZXQuZmluZCgnc2VsZWN0Jyk7XG4gICAgY29uc3Qgc2VsZWN0ZWREaWFnUnVsZSA9IHRoaXMuJHRhcmdldC5maW5kKCcjc2VsZWN0ZWQtZGlhZy1ydWxlJyk7XG5cbiAgICBjb25zdCBkYXRlUnVsZXNldCA9IHRoaXMuc3RhdGUuZGF0ZVJ1bGVzZXQ7XG4gICAgY29uc3QgZGF0ZURpYWd0eXBlID0gZGF0ZURpYWd0eXBlcy5maW5kKFxuICAgICAgKHsgaWQgfSkgPT5cbiAgICAgICAgYGR0JHtPYmplY3QuZW50cmllcyhkYXRlUnVsZXNldClcbiAgICAgICAgICAuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHZhbHVlKVxuICAgICAgICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4ga2V5KVxuICAgICAgICAgIC5qb2luKCcnKX1gID09PSBpZCxcbiAgICApO1xuXG4gICAgLy8gY2hlY2sg67CV7Iqk66W8IO2BtOumrSDslYjtlZwg6rK97JqwXG4gICAgaWYgKHRoaXMuc3RhdGUuZXZlbnQgIT09ICdjaGVjaycpIHtcbiAgICAgIGdvKFxuICAgICAgICB0aGlzLiR0YXJnZXQuZmluZCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyksXG4gICAgICAgIGVhY2goY2hlY2tib3ggPT4ge1xuICAgICAgICAgIGNvbnN0IHsgZGF0ZXR5cGUgfSA9IGNoZWNrYm94LmRhdGFzZXQ7XG4gICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGRhdGVSdWxlc2V0W2RhdGV0eXBlXTtcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNlbGVjdCDrsJXsiqTrpbwg7YG066atIOyViO2VnCDqsr3smrBcbiAgICBpZiAodGhpcy5zdGF0ZS5ldmVudCAhPT0gJ3NlbGVjdCcpIHNlbGVjdC52YWwoZGF0ZURpYWd0eXBlLmlkKS5wcm9wKCdzZWxlY3RlZCcsIHRydWUpO1xuXG4gICAgc2VsZWN0ZWREaWFnUnVsZS52YWwoZGF0ZURpYWd0eXBlLmxhYmVsKTtcbiAgfVxuXG4gIHNob3coJHNlbGVjdCwgZGlhZ3R5cGVJZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgJHNlbGVjdCxcbiAgICAgIGRhdGVSdWxlc2V0OiB7XG4gICAgICAgIFlZWVk6IGRpYWd0eXBlSWQuaW5jbHVkZXMoJ1lZWVknKSxcbiAgICAgICAgTU06IGRpYWd0eXBlSWQuaW5jbHVkZXMoJ01NJyksXG4gICAgICAgIEREOiBkaWFndHlwZUlkLmluY2x1ZGVzKCdERCcpLFxuICAgICAgICBISDI0OiBkaWFndHlwZUlkLmluY2x1ZGVzKCdISDI0JyksXG4gICAgICAgIE1JOiBkaWFndHlwZUlkLmluY2x1ZGVzKCdNSScpLFxuICAgICAgICBTUzogZGlhZ3R5cGVJZC5pbmNsdWRlcygnU1MnKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgc3VwZXIuc2hvdygpO1xuICB9XG5cbiAgY2xvc2VNb2RhbCgpIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICBjb25zdCB7ICRzZWxlY3QsIGRhdGVSdWxlc2V0IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGNvbHVtbklkID0gJHNlbGVjdC5hdHRyKCdpZCcpLnJlcGxhY2UoJ3NlbGVjdERpYWctJywgJycpO1xuICAgIGNvbnN0IHsgY29sdW1ucyB9ID0gdGhpcy5wYXJlbnQuZGF0YUdyaWQuc3RhdGU7XG5cbiAgICAkc2VsZWN0LnZhbChcbiAgICAgIGRhdGVEaWFndHlwZXMuZmluZChcbiAgICAgICAgKHsgaWQgfSkgPT5cbiAgICAgICAgICBpZCA9PT1cbiAgICAgICAgICAnZHQnICtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGRhdGVSdWxlc2V0KVxuICAgICAgICAgICAgICAuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHZhbHVlKVxuICAgICAgICAgICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IGtleSlcbiAgICAgICAgICAgICAgLmpvaW4oJycpLFxuICAgICAgKS5pZCxcbiAgICApO1xuXG4gICAgdGhpcy5wYXJlbnQuZGF0YUdyaWQuc2V0U3RhdGUoe1xuICAgICAgY29sdW1uczogY29sdW1ucy5tYXAoY29sID0+XG4gICAgICAgIGNvbC5pZCA9PT0gY29sdW1uSWRcbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgLi4uY29sLFxuICAgICAgICAgICAgICBydWxlc2V0OiB7XG4gICAgICAgICAgICAgICAgaWQ6ICRzZWxlY3QudmFsKCksXG4gICAgICAgICAgICAgICAgbmFtZTogJ+uCoOynnCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiBjb2wsXG4gICAgICApLFxuICAgIH0pO1xuICB9XG5cbiAgc2V0SGVhZGVyKCkge1xuICAgIHJldHVybiAn7KeE64uoIOuCoOynnCDsnKDtmJUg7ISg7YOdJztcbiAgfVxuXG4gIHNldEJvZHkoKSB7XG4gICAgY29uc3QgZGF0ZVR5cGUgPSBbXG4gICAgICB7IHR5cGU6ICdZWVlZJywgdGV4dDogJ+yXsCcgfSxcbiAgICAgIHsgdHlwZTogJ01NJywgdGV4dDogJ+yblCcgfSxcbiAgICAgIHsgdHlwZTogJ0REJywgdGV4dDogJ+ydvCcgfSxcbiAgICAgIHsgdHlwZTogJ0hIMjQnLCB0ZXh0OiAn7Iuc6rCEJyB9LFxuICAgICAgeyB0eXBlOiAnTUknLCB0ZXh0OiAn67aEJyB9LFxuICAgICAgeyB0eXBlOiAnU1MnLCB0ZXh0OiAn7LSIJyB9LFxuICAgIF07XG5cbiAgICByZXR1cm4gYFxuICAgICAgPHA+4oC7IOyCrOyaqeuylTwvcD5cbiAgICAgIDxwPjEuIOynhOuLqOuMgOyDgey7rOufvOydmCDsp4Tri6gg64Kg7KecIOycoO2YlSDshKDtg50gPiAyLiDtmZXsnbg8L3A+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyLWZsdWlkXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXCIgc3R5bGU9XCJ2aXNpYmlsaXR5OiBoaWRkZW47XCIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxpbnB1dCBkYXRhLWFjdGlvbj1cImRhdGUtY2hlY2tcIiBkYXRhLWRhdGV0eXBlPVwiWVlZWU1NRERIMjRNSVNTXCIgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJtb2RhbC1kYXRlLWFsbFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXRcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbFwiIGZvcj1cIm1vZGFsLWRhdGUtYWxsXCI+7KCE7LK0PC9sYWJlbD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAke2RhdGVUeXBlXG4gICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAoeyB0eXBlLCB0ZXh0IH0pID0+IGBcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgcHgtMVwiPlxuICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgdGV4dC1jZW50ZXIgbXItMlwiIHZhbHVlPVwiJHt0eXBlfVwiIHJlYWRvbmx5IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtYWN0aW9uPVwiZGF0ZS1jaGVja1wiIGRhdGEtZGF0ZXR5cGU9XCIke3R5cGV9XCIgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJtb2RhbC1kYXRlLSR7dHlwZX1cIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIiBmb3I9XCJtb2RhbC1kYXRlLSR7dHlwZX1cIj4ke3RleHR9PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuam9pbignJyl9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sXCI+XG4gICAgICAgICAgICA8c2VsZWN0IGRhdGEtYWN0aW9uPVwiZGF0ZS1zZWxlY3RcIiBjbGFzcz1cImN1c3RvbS1zZWxlY3RcIiBzaXplPVwiJHtkYXRlRGlhZ3R5cGVzLmxlbmd0aH1cIj5cbiAgICAgICAgICAgICAgJHtkYXRlRGlhZ3R5cGVzXG4gICAgICAgICAgICAgICAgLm1hcCgoeyBpZCwgY29udGVudCB9KSA9PiBgPG9wdGlvbiB2YWx1ZT1cIiR7aWR9XCI+JHtjb250ZW50fTwvb3B0aW9uPmApXG4gICAgICAgICAgICAgICAgLmpvaW4oJycpfVxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPlxuICAgICAgICAgICAgPGgxPuyEoO2DneuQnCDrgqDsp5wg7KeE64uo6rec7LmZPC9oMT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBpbnB1dC1ncm91cC1sZ1wiPlxuICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJzZWxlY3RlZC1kaWFnLXJ1bGVcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXCIgcmVhZG9ubHkgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBzZXRGb290ZXIoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIiBkYXRhLWFjdGlvbj1cImNsb3NlLW1vZGFsXCI+7Leo7IaMPC9idXR0b24+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIGRhdGEtYWN0aW9uPVwiY2xvc2UtbW9kYWxcIj7tmZXsnbg8L2J1dHRvbj5cbiAgICBgO1xuICB9XG59XG4iLCJpbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vY29tbW9uL01vZGFsJztcbmltcG9ydCB7ICRhY3Rpb24gfSBmcm9tICdAL3V0aWxzL3NlbGVjdG9yJztcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaGV0aGVyTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gIGluaXRTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJ1ZVZhbHVlOiAnWScsXG4gICAgICBmYWxzZVZhbHVlOiAnTicsXG4gICAgfTtcbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcbiAgICAvLyB0cnVlIOuMgOy5reqwkiDsnoXroKVcbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ2lucHV0LXRydWUtdmFsdWUnLCAna2V5dXAnLCAoeyB0YXJnZXQ6IHsgdmFsdWUgfSB9KSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdHJ1ZVZhbHVlOiB2YWx1ZSB9KTtcbiAgICB9KTtcblxuICAgIC8vIGZhbHNlIOuMgOy5reqwkiDsnoXroKVcbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ2lucHV0LWZhbHNlLXZhbHVlJywgJ2tleXVwJywgKHsgdGFyZ2V0OiB7IHZhbHVlIH0gfSkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGZhbHNlVmFsdWU6IHZhbHVlIH0pO1xuICAgIH0pO1xuXG4gICAgLy8g7KCB7JqpXG4gICAgLy8gdmFsaWRhdGlvbiBDaGVjayDrsI8g7Lus65+8IOyggeyaqVxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnc3VibWl0LXdoZXRoZXInLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCB7ICRzZWxlY3QsIGRhdGFHcmlkLCB0cnVlVmFsdWUsIGZhbHNlVmFsdWUgfSA9IHRoaXMuc3RhdGU7XG4gICAgICBjb25zdCBjb2x1bW5JZCA9ICRzZWxlY3QuYXR0cignaWQnKS5yZXBsYWNlKCdzZWxlY3REaWFnLScsICcnKTtcbiAgICAgIGNvbnN0IHsgY29sdW1ucyB9ID0gdGhpcy5wYXJlbnQuZGF0YUdyaWQuc3RhdGU7XG4gICAgICB0aGlzLnBhcmVudC5kYXRhR3JpZC5zZXRTdGF0ZSh7XG4gICAgICAgIGNvbHVtbnM6IGNvbHVtbnMubWFwKGNvbCA9PlxuICAgICAgICAgIGNvbC5pZCA9PT0gY29sdW1uSWRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIC4uLmNvbCxcbiAgICAgICAgICAgICAgICBydWxlc2V0OiB7XG4gICAgICAgICAgICAgICAgICBpZDogJ3doZVNFVCcsXG4gICAgICAgICAgICAgICAgICBuYW1lOiAn7Jes67aAJyxcbiAgICAgICAgICAgICAgICAgIHRydWVWYWx1ZSxcbiAgICAgICAgICAgICAgICAgIGZhbHNlVmFsdWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBjb2wsXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdjYW5jZWwnLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNob3coJHNlbGVjdCwgZ3JpZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyAkc2VsZWN0LCBkYXRhR3JpZDogZ3JpZCB9KTtcbiAgICBzdXBlci5zaG93KCk7XG4gIH1cblxuICBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlID0geyAuLi50aGlzLnN0YXRlLCAuLi5uZXh0U3RhdGUgfTtcbiAgICBjb25zdCB7IHRydWVWYWx1ZSwgZmFsc2VWYWx1ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IFt0cnVlRWwsIGZhbHNlRWxdID0gdGhpcy4kdGFyZ2V0LmZpbmQoJy5lbXBoYXNpcycpO1xuICAgIHRydWVFbC5pbm5lclRleHQgPSBgJyR7dHJ1ZVZhbHVlfSdgO1xuICAgIGZhbHNlRWwuaW5uZXJUZXh0ID0gYCcke2ZhbHNlVmFsdWV9J2A7XG4gIH1cblxuICBzZXRIZWFkZXIoKSB7XG4gICAgcmV0dXJuICfsl6zrtoDqsJIg7KeA7KCVJztcbiAgfVxuXG4gIHNldEJvZHkoKSB7XG4gICAgY29uc3QgeyB0cnVlVmFsdWUsIGZhbHNlVmFsdWUgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICA8cD7igLsg7IKs7Jqp67KVPC9wPlxuICAgICAgICA8cD4xLiDsp4Tri6jrjIDsg4Hsu6zrn7zsnZgg7Jes67aAIOycoO2aqOqwkiDsnoXroKUgPiAyLiDtmZXsnbg8L3A+XG5cbiAgICAgICAgPGZvcm0gY2xhc3M9XCJmb3JtLWlubGluZVwiPlxuICAgICAgICAgIOyEoO2Dney7rOufvOydmCDsnKDtmqjqsJLsnYAgXG4gICAgICAgICAgPGlucHV0IGRhdGEtYWN0aW9uPVwiaW5wdXQtdHJ1ZS12YWx1ZVwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgdGV4dC1jZW50ZXJcIiB2YWx1ZT1cIiR7dHJ1ZVZhbHVlfVwiIC8+XG4gICAgICAgICAg6rO8KOyZgCkgXG4gICAgICAgICAgPGlucHV0IGRhdGEtYWN0aW9uPVwiaW5wdXQtZmFsc2UtdmFsdWVcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXCIgdmFsdWU9XCIke2ZhbHNlVmFsdWV9XCIgLz5cbiAgICAgICAgICDsnbTri6RcbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cD7snoXroKXtlZwg7ZKI7KeI6riw7KSA7J2YIOycoO2aqOqwkuydgCBcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVtcGhhc2lzXCI+JyR7dHJ1ZVZhbHVlfSc8L3NwYW4+XG4gICAgICAgICAg6rO8KOyZgCkgXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlbXBoYXNpc1wiPicke2ZhbHNlVmFsdWV9Jzwvc3Bhbj5cbiAgICAgICAgICDqsJLrp4wg7Jyg7Zqo7ZWY64ukXG4gICAgICAgIDwvcD5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBzZXRGb290ZXIoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIiBkYXRhLWFjdGlvbj1cImNhbmNlbFwiPuy3qOyGjDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBkYXRhLWFjdGlvbj1cInN1Ym1pdC13aGV0aGVyXCI+7ZmV7J24PC9idXR0b24+XG4gICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL2NvbW1vbi9Nb2RhbCc7XG5pbXBvcnQgeyAkYWN0aW9uIH0gZnJvbSAnQC91dGlscy9zZWxlY3Rvcic7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF0dGVybk1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICBpbml0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdHRlcm46ICdOJyxcbiAgICB9O1xuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuICAgIC8vIHRydWUg64yA7Lmt6rCSIOyeheugpVxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnaW5wdXQtcGF0dGVybicsICdrZXl1cCcsIGUgPT4ge1xuICAgICAgZS50YXJnZXQudmFsdWUgPSBlLnRhcmdldC52YWx1ZS5yZXBsYWNlKC9bXk4tXS9nLCAnJyk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgcGF0dGVybjogZS50YXJnZXQudmFsdWUgfSk7XG4gICAgfSk7XG5cbiAgICAvLyDsoIHsmqlcbiAgICAvLyB2YWxpZGF0aW9uIENoZWNrIOuwjyDsu6zrn7wg7KCB7JqpXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdzdWJtaXQtcGF0dGVybicsICdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgJHNlbGVjdCwgcGF0dGVybiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIGNvbnN0IGNvbHVtbklkID0gJHNlbGVjdC5hdHRyKCdpZCcpLnJlcGxhY2UoJ3NlbGVjdERpYWctJywgJycpO1xuICAgICAgY29uc3QgeyBjb2x1bW5zIH0gPSB0aGlzLnBhcmVudC5kYXRhR3JpZC5zdGF0ZTtcbiAgICAgIHRoaXMucGFyZW50LmRhdGFHcmlkLnNldFN0YXRlKHtcbiAgICAgICAgY29sdW1uczogY29sdW1ucy5tYXAoY29sID0+XG4gICAgICAgICAgY29sLmlkID09PSBjb2x1bW5JZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgLi4uY29sLFxuICAgICAgICAgICAgICAgIHJ1bGVzZXQ6IHtcbiAgICAgICAgICAgICAgICAgIGlkOiAnbnVtUGF0dGVybicsXG4gICAgICAgICAgICAgICAgICBuYW1lOiAn67KI7Zi4JyxcbiAgICAgICAgICAgICAgICAgIHBhdHRlcm4sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBjb2wsXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdjYW5jZWwnLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNob3coJHNlbGVjdCwgZ3JpZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyAkc2VsZWN0LCBkYXRhR3JpZDogZ3JpZCB9KTtcbiAgICBzdXBlci5zaG93KCk7XG4gIH1cblxuICBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlID0geyAuLi50aGlzLnN0YXRlLCAuLi5uZXh0U3RhdGUgfTtcbiAgICBjb25zdCB7IHBhdHRlcm4gfSA9IHRoaXMuc3RhdGU7XG5cbiAgICB0aGlzLiR0YXJnZXQuZmluZCgnLmVtcGhhc2lzJykudGV4dChwYXR0ZXJuKTtcbiAgfVxuXG4gIHNldEhlYWRlcigpIHtcbiAgICByZXR1cm4gJ+2MqO2EtOyngOygleuyiO2YuCc7XG4gIH1cblxuICBzZXRCb2R5KCkge1xuICAgIGNvbnN0IHsgcGF0dGVybiB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgIDxwPuKAuyDsgqzsmqnrspU8L3A+XG4gICAgICAgIDxwPjEuIOynhOuLqOuMgOyDgey7rOufvOydmCDtjKjthLTsp4DsoJXrsojtmLgg7J6F66ClID4gMi4g7ZmV7J24PC9wPlxuXG4gICAgICAgIDxmb3JtIGNsYXNzPVwiZm9ybS1pbmxpbmVcIj5cbiAgICAgICAgICDshKDtg53su6zrn7zsnZgg7Jyg7Zqo7ZWcIOuyiO2YuOydmCDtjKjthLTqsJLsnYBcbiAgICAgICAgICA8aW5wdXQgZGF0YS1hY3Rpb249XCJpbnB1dC1wYXR0ZXJuXCIgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbCB0ZXh0LWNlbnRlclwiIHZhbHVlPVwiJHtwYXR0ZXJufVwiIC8+XG4gICAgICAgICAg6rCS66eMIOycoO2aqO2VmOuLpC5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cD7snoXroKXtlZwg7ZKI7KeI6riw7KSA7J2YIOycoO2aqOqwkuydgCA8c3BhbiBjbGFzcz1cImVtcGhhc2lzXCI+JyR7cGF0dGVybn0nPC9zcGFuPiDqsJLrp4wg7Jyg7Zqo7ZWY64ukXG4gICAgICAgIDwvcD5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBzZXRGb290ZXIoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIiBkYXRhLWFjdGlvbj1cImNhbmNlbFwiPuy3qOyGjDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBkYXRhLWFjdGlvbj1cInN1Ym1pdC1wYXR0ZXJuXCI+7ZmV7J24PC9idXR0b24+XG4gICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL2NvbW1vbi9Nb2RhbCc7XG5pbXBvcnQgeyAkYWN0aW9uIH0gZnJvbSAnQC91dGlscy9zZWxlY3Rvcic7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZU9yZGVyTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gIGluaXRTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGFyZ2V0OiAnJyxcbiAgICAgIG9wOiAnPj0nLFxuICAgICAgY29sdW1uSWQ6ICcnLFxuICAgICAgY29sdW1uczogW10sXG4gICAgfTtcbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcbiAgICAvLyDsu6zrn7wg7ISg7YOdIOuzgOqyvVxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnc2VsZWN0LWNvbHVtbicsICdjaGFuZ2UnLCAoeyB0YXJnZXQ6IHsgdmFsdWUgfSB9KSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdGFyZ2V0OiB2YWx1ZSB9KTtcbiAgICB9KTtcblxuICAgIC8vIOu5hOq1kCDsl7DsgrDsnpAg67OA6rK9XG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdjaGFuZ2Utb3BlcmF0b3InLCAnY2hhbmdlJywgKHsgdGFyZ2V0OiB7IHZhbHVlIH0gfSkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wOiB2YWx1ZSB9KTtcbiAgICB9KTtcblxuICAgIC8vIOyggeyaqVxuICAgIC8vIHZhbGlkYXRpb24gQ2hlY2sg67CPIOy7rOufvCDsoIHsmqlcbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ3N1Ym1pdC10aW1lb3JkZXInLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGNvbHVtbklkLCB0YXJnZXQsIG9wLCBjb2x1bW5zIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgdGhpcy5wYXJlbnQuZGF0YUdyaWQuc2V0U3RhdGUoe1xuICAgICAgICBjb2x1bW5zOiBjb2x1bW5zLm1hcChjb2wgPT5cbiAgICAgICAgICBjb2wuaWQgPT09IGNvbHVtbklkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAuLi5jb2wsXG4gICAgICAgICAgICAgICAgcnVsZXNldDoge1xuICAgICAgICAgICAgICAgICAgaWQ6ICdjb25UaW1lJyxcbiAgICAgICAgICAgICAgICAgIG5hbWU6ICfsnbzqtIDshLEnLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgb3AsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBjb2wsXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdjYW5jZWwnLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNob3coJHNlbGVjdCwgeyBjb2x1bW5zIH0pIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbHVtbklkOiAkc2VsZWN0LmF0dHIoJ2lkJykucmVwbGFjZSgnc2VsZWN0RGlhZy0nLCAnJyksXG4gICAgICBjb2x1bW5zLFxuICAgICAgdGFyZ2V0OiBjb2x1bW5zWzFdLm5hbWUsXG4gICAgfSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICBzdXBlci5zaG93KCk7XG4gIH1cblxuICBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlID0geyAuLi50aGlzLnN0YXRlLCAuLi5uZXh0U3RhdGUgfTtcbiAgICBjb25zdCB7IG9wLCB0YXJnZXQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICB0aGlzLiR0YXJnZXQuZmluZCgnLmVtcGhhc2lzJykudGV4dChvcGVyYXRvclRleHQob3ApKTtcbiAgICB0aGlzLiR0YXJnZXQuZmluZCgnLnRhcmdldC1jb2x1bW4nKS50ZXh0KHRhcmdldCk7XG4gIH1cblxuICBzZXRIZWFkZXIoKSB7XG4gICAgcmV0dXJuICfsi5zqsITsiJzshJwg7J286rSA7ISxJztcbiAgfVxuXG4gIHNldEJvZHkoKSB7XG4gICAgY29uc3QgeyBjb2x1bW5JZCwgY29sdW1ucywgdGFyZ2V0LCBvcCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBjb2x1bW5OYW1lID0gY29sdW1ucy5maW5kKCh7IGlkIH0pID0+IGlkID09PSBjb2x1bW5JZCk/Lm5hbWU7XG5cbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICA8cD7igLsg7IKs7Jqp67KVPC9wPlxuICAgICAgICA8cD4xLiDsp4Tri6jrjIDsg4Hsu6zrn7zsnZgg67mE6rWQ7Lus65+8IOyEoO2DnSA+IDIuIOu5hOq1kCDsl7DsgrDsnpAg7ISg7YOdID4gMy4g7ZmV7J24PC9wPlxuXG4gICAgICAgIDxmb3JtIGNsYXNzPVwiZm9ybS1pbmxpbmVcIj5cbiAgICAgICAgICDshKDtg53tlZwgPHNwYW4gY2xhc3M9XCJib2xkXCI+WyR7Y29sdW1uTmFtZX1dIDwvc3Bhbj7su6zrn7zsnYAgXG4gICAgICAgICAgPHNlbGVjdCBkYXRhLWFjdGlvbj1cInNlbGVjdC1jb2x1bW5cIiBjbGFzcz1cImN1c3RvbS1zZWxlY3RcIj5cbiAgICAgICAgICAgICR7Y29sdW1uc1xuICAgICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgICAgLm1hcChcbiAgICAgICAgICAgICAgICAoeyBpZCwgbmFtZSB9KSA9PlxuICAgICAgICAgICAgICAgICAgYDxvcHRpb24gdmFsdWU9XCIke2lkfVwiICR7aWQgPT09IHRhcmdldCA/ICdzZWxlY3RlZCcgOiAnJ30+JHtuYW1lfTwvb3B0aW9uPmAsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgLmpvaW4oJycpfVxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIOy7rOufvOuztOuLpFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJyYWRpby1ib3hcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tY2hlY2staW5saW5lXCI+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGlkPVwiZ3JlYXRlci10aGFuLXRvLWVxdWFsXCJcbiAgICAgICAgICAgICAgICBkYXRhLWFjdGlvbj1cImNoYW5nZS1vcGVyYXRvclwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCJcbiAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJvcGVyYXRvclwiXG4gICAgICAgICAgICAgICAgdmFsdWU9XCI+PVwiXG4gICAgICAgICAgICAgICAgJHtvcCA9PT0gJz49JyA/ICdjaGVja2VkJyA6ICcnfT5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cImdyZWF0ZXItdGhhbi10by1lcXVhbFwiPj49PC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1jaGVjay1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgaWQ9XCJncmVhdGVyLXRoYW5cIlxuICAgICAgICAgICAgICAgIGRhdGEtYWN0aW9uPVwiY2hhbmdlLW9wZXJhdG9yXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgbmFtZT1cIm9wZXJhdG9yXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT1cIj5cIlxuICAgICAgICAgICAgICAgICR7b3AgPT09ICc+JyA/ICdjaGVja2VkJyA6ICcnfT5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwiZ3JlYXRlci10aGFuXCI+PjwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tY2hlY2staW5saW5lXCI+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGlkPVwibGVzcy10aGFuLXRvLWVxdWFsXCJcbiAgICAgICAgICAgICAgICBkYXRhLWFjdGlvbj1cImNoYW5nZS1vcGVyYXRvclwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCJcbiAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJvcGVyYXRvclwiXG4gICAgICAgICAgICAgICAgdmFsdWU9XCI8PVwiXG4gICAgICAgICAgICAgICAgJHtvcCA9PT0gJzw9JyA/ICdjaGVja2VkJyA6ICcnfT5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cImxlc3MtdGhhbi10by1lcXVhbFwiPjw9PC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1jaGVjay1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgaWQ9XCJsZXNzLXRoYW5cIlxuICAgICAgICAgICAgICAgIGRhdGEtYWN0aW9uPVwiY2hhbmdlLW9wZXJhdG9yXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgbmFtZT1cIm9wZXJhdG9yXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT1cIjxcIlxuICAgICAgICAgICAgICAgICR7b3AgPT09ICc8JyA/ICdjaGVja2VkJyA6ICcnfT5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cImxlc3MtdGhhblwiPjw8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPHA+XG4gICAgICAgICAg7KeA7KCV7ZWcIO2SiOyniOq4sOykgOydgCBcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImJvbGRcIj5bJHtjb2x1bW5OYW1lfV0gPC9zcGFuPuy7rOufvOydtFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYm9sZCB0YXJnZXQtY29sdW1uXCI+WyR7Y29sdW1uc1sxXT8ubmFtZX1dIDwvc3Bhbj7su6zrn7zrs7Tri6QgXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlbXBoYXNpc1wiPiR7b3BlcmF0b3JUZXh0KG9wKX08L3NwYW4+IO2VnOuLpC5cbiAgICAgICAgPC9wPlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuXG4gIHNldEZvb3RlcigpIHtcbiAgICByZXR1cm4gYFxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeVwiIGRhdGEtYWN0aW9uPVwiY2FuY2VsXCI+7Leo7IaMPC9idXR0b24+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIGRhdGEtYWN0aW9uPVwic3VibWl0LXRpbWVvcmRlclwiPu2ZleyduDwvYnV0dG9uPlxuICAgIGA7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3BlcmF0b3JUZXh0KG9wKSB7XG4gIGlmIChvcCA9PT0gJz49JykgcmV0dXJuICftgazqsbDrgpgg6rCZ7JWE7JW8JztcbiAgaWYgKG9wID09PSAnPicpIHJldHVybiAn7Luk7JW8JztcbiAgaWYgKG9wID09PSAnPD0nKSByZXR1cm4gJ+yekeqxsOuCmCDqsJnslYTslbwnO1xuICBpZiAob3AgPT09ICc8JykgcmV0dXJuICfsnpHslYTslbwnO1xufVxuIiwiaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL2NvbW1vbi9Nb2RhbCc7XG5pbXBvcnQgeyAkYWN0aW9uIH0gZnJvbSAnQC91dGlscy9zZWxlY3Rvcic7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9naWNSZWxhdGlvbnNoaXBNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgaW5pdFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXBsYWNlVmFsdWU6ICdZJyxcbiAgICAgIGNvbHVtbklkOiAnJyxcbiAgICAgIHRhcmdldDogJycsXG4gICAgICBjb2x1bW5zOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuICAgIC8vIOy7rOufvCDshKDtg50g67OA6rK9XG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdzZWxlY3QtY29sdW1uJywgJ2NoYW5nZScsICh7IHRhcmdldDogeyB2YWx1ZSB9IH0pID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0YXJnZXQ6IHZhbHVlIH0pO1xuICAgIH0pO1xuXG4gICAgLy8g7KGw6rG0IOqwkiDsnoXroKVcbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ2lucHV0LXJlcGxhY2UtdmFsdWUnLCAna2V5dXAnLCAoeyB0YXJnZXQ6IHsgdmFsdWUgfSB9KSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgcmVwbGFjZVZhbHVlOiB2YWx1ZSB9KTtcbiAgICB9KTtcblxuICAgIC8vIOyggeyaqVxuICAgIC8vIHZhbGlkYXRpb24gQ2hlY2sg67CPIOy7rOufvCDsoIHsmqlcbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ3N1Ym1pdC1sb2dpYy1yZWxhdGlvbnNoaXAnLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGNvbHVtbklkLCBjb2x1bW5zLCByZXBsYWNlVmFsdWUsIHRhcmdldCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIHRoaXMucGFyZW50LmRhdGFHcmlkLnNldFN0YXRlKHtcbiAgICAgICAgY29sdW1uczogY29sdW1ucy5tYXAoY29sID0+XG4gICAgICAgICAgY29sLmlkID09PSBjb2x1bW5JZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgLi4uY29sLFxuICAgICAgICAgICAgICAgIHJ1bGVzZXQ6IHtcbiAgICAgICAgICAgICAgICAgIGlkOiAnY29uTG9naWNSZWxhdGlvblNoaXAnLFxuICAgICAgICAgICAgICAgICAgbmFtZTogJ+ydvOq0gOyEsScsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICByZXBsYWNlVmFsdWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBjb2wsXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdjYW5jZWwnLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNob3coJHNlbGVjdCwgeyBjb2x1bW5zIH0pIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbHVtbklkOiAkc2VsZWN0LmF0dHIoJ2lkJykucmVwbGFjZSgnc2VsZWN0RGlhZy0nLCAnJyksXG4gICAgICBjb2x1bW5zLFxuICAgICAgdGFyZ2V0OiBjb2x1bW5zWzFdLm5hbWUsXG4gICAgfSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICBzdXBlci5zaG93KCk7XG4gIH1cblxuICBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlID0geyAuLi50aGlzLnN0YXRlLCAuLi5uZXh0U3RhdGUgfTtcbiAgICBjb25zdCB7IHRhcmdldCwgcmVwbGFjZVZhbHVlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgdGhpcy4kdGFyZ2V0LmZpbmQoJy50YXJnZXQtY29sdW1uJykudGV4dCh0YXJnZXQpO1xuICAgIHRoaXMuJHRhcmdldC5maW5kKCcucmVwbGFjZS12YWx1ZScpLnRleHQocmVwbGFjZVZhbHVlKTtcbiAgfVxuXG4gIHNldEhlYWRlcigpIHtcbiAgICByZXR1cm4gJ+y7rOufvCDqsIQg64W866as6rSA6rOEIOydvOq0gOyEsSc7XG4gIH1cblxuICBzZXRCb2R5KCkge1xuICAgIGNvbnN0IHsgY29sdW1uSWQsIGNvbHVtbnMsIHRhcmdldCwgcmVwbGFjZVZhbHVlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGNvbHVtbk5hbWUgPSBjb2x1bW5zLmZpbmQoKHsgaWQgfSkgPT4gaWQgPT09IGNvbHVtbklkKT8ubmFtZTtcblxuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgIDxwPuKAuyDsgqzsmqnrspU8L3A+XG4gICAgICAgIDxwPjEuIOynhOuLqOuMgOyDgey7rOufvOydmCDsobDqsbQg6rCSIOyeheugpSA+IDIuIOuFvOumrOq0gOqzhOqwgCDsnojripQg64Kg7KecIOy7rOufvCDshKDtg50gPiAzLiDtmZXsnbg8L3A+XG5cbiAgICAgICAgPGZvcm0gY2xhc3M9XCJmb3JtLWlubGluZVwiPlxuICAgICAgICAgIOyEoO2Dne2VnCA8c3BhbiBjbGFzcz1cImJvbGRcIj5bJHtjb2x1bW5OYW1lfV0gPC9zcGFuPuy7rOufvOydtFxuICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgIGRhdGEtYWN0aW9uPVwiaW5wdXQtcmVwbGFjZS12YWx1ZVwiXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbCB0ZXh0LWNlbnRlclwiXG4gICAgICAgICAgICB2YWx1ZT1cIiR7cmVwbGFjZVZhbHVlfVwiIC8+XG4gICAgICAgICAg652866m0XG4gICAgICAgICAgPHNlbGVjdCBkYXRhLWFjdGlvbj1cInNlbGVjdC1jb2x1bW5cIiBjbGFzcz1cImN1c3RvbS1zZWxlY3RcIj5cbiAgICAgICAgICAgICR7Y29sdW1uc1xuICAgICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgICAgLm1hcChcbiAgICAgICAgICAgICAgICAoeyBpZCwgbmFtZSB9KSA9PlxuICAgICAgICAgICAgICAgICAgYDxvcHRpb24gdmFsdWU9XCIke2lkfVwiICR7aWQgPT09IHRhcmdldCA/ICdzZWxlY3RlZCcgOiAnJ30+JHtuYW1lfTwvb3B0aW9uPmAsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgLmpvaW4oJycpfVxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIOy7rOufvOydgCDrsJjrk5zsi5wg64Kg7Kec6rCAIOyhtOyerO2VtOyVvCDtlZzri6RcbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cD5cbiAgICAgICAgICDsp4DsoJXtlZwg7ZKI7KeI6riw7KSA7J2AIFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYm9sZFwiPlske2NvbHVtbk5hbWV9XSA8L3NwYW4+7Lus65+87J20XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJib2xkIHJlcGxhY2UtdmFsdWVcIj5cbiAgICAgICAgICAgICcke3JlcGxhY2VWYWx1ZX0nIFxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgKOydtCnrnbzrqbQgXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJib2xkIHRhcmdldC1jb2x1bW5cIj5cbiAgICAgICAgICAgIFske2NvbHVtbnNbMV0/Lm5hbWV9XSBcbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAg7Lus65+87J2AIOuwmOuTnOyLnCDrgqDsp5zqsIAg7KG07J6s7ZW07JW8IO2VnOuLpFxuICAgICAgICA8L3A+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgc2V0Rm9vdGVyKCkge1xuICAgIHJldHVybiBgXG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5XCIgZGF0YS1hY3Rpb249XCJjYW5jZWxcIj7st6jshow8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgZGF0YS1hY3Rpb249XCJzdWJtaXQtbG9naWMtcmVsYXRpb25zaGlwXCI+7ZmV7J24PC9idXR0b24+XG4gICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL2NvbW1vbi9Nb2RhbCc7XG5pbXBvcnQgeyAkYWN0aW9uIH0gZnJvbSAnQC91dGlscy9zZWxlY3Rvcic7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybXVsYU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICBpbml0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhcmdldHM6IFtdLFxuICAgICAgb3A6ICcrJyxcbiAgICAgIGNvbHVtbklkOiAnJyxcbiAgICAgIGNvbHVtbnM6IFtdLFxuICAgIH07XG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG4gICAgLy8g7Lus65+8IOyEoO2DnSDrs4Dqsr1cbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ3NlbGVjdC10YXJnZXQxJywgJ2NoYW5nZScsICh7IHRhcmdldDogeyB2YWx1ZSB9IH0pID0+IHtcbiAgICAgIGNvbnN0IFt0YXJnZXQxLCB0YXJnZXQyXSA9IHRoaXMuc3RhdGUudGFyZ2V0cztcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0YXJnZXRzOiBbdmFsdWUsIHRhcmdldDJdIH0pO1xuICAgIH0pO1xuXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdzZWxlY3QtdGFyZ2V0MicsICdjaGFuZ2UnLCAoeyB0YXJnZXQ6IHsgdmFsdWUgfSB9KSA9PiB7XG4gICAgICBjb25zdCBbdGFyZ2V0MSwgdGFyZ2V0Ml0gPSB0aGlzLnN0YXRlLnRhcmdldHM7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdGFyZ2V0czogW3RhcmdldDEsIHZhbHVlXSB9KTtcbiAgICB9KTtcblxuICAgIC8vIOu5hOq1kCDsl7DsgrDsnpAg67OA6rK9XG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdjaGFuZ2Utb3BlcmF0b3InLCAnY2hhbmdlJywgKHsgdGFyZ2V0OiB7IHZhbHVlIH0gfSkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wOiB2YWx1ZSB9KTtcbiAgICB9KTtcblxuICAgIC8vIOyggeyaqVxuICAgIC8vIHZhbGlkYXRpb24gQ2hlY2sg67CPIOy7rOufvCDsoIHsmqlcbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ3N1Ym1pdC1mb3JtdWxhJywgJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBjb2x1bW5JZCwgdGFyZ2V0cywgb3AsIGNvbHVtbnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICB0aGlzLnBhcmVudC5kYXRhR3JpZC5zZXRTdGF0ZSh7XG4gICAgICAgIGNvbHVtbnM6IGNvbHVtbnMubWFwKGNvbCA9PlxuICAgICAgICAgIGNvbC5pZCA9PT0gY29sdW1uSWRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIC4uLmNvbCxcbiAgICAgICAgICAgICAgICBydWxlc2V0OiB7XG4gICAgICAgICAgICAgICAgICBpZDogJ2NhbEZvcm11bGEnLFxuICAgICAgICAgICAgICAgICAgbmFtZTogJ+qzhOyCsOyLnScsXG4gICAgICAgICAgICAgICAgICB0YXJnZXRzLFxuICAgICAgICAgICAgICAgICAgb3AsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBjb2wsXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdjYW5jZWwnLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNob3coJHNlbGVjdCwgeyBjb2x1bW5zIH0pIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbHVtbklkOiAkc2VsZWN0LmF0dHIoJ2lkJykucmVwbGFjZSgnc2VsZWN0RGlhZy0nLCAnJyksXG4gICAgICBjb2x1bW5zLFxuICAgICAgdGFyZ2V0czogW2NvbHVtbnNbMV0ubmFtZSwgY29sdW1uc1sxXS5uYW1lXSxcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHN1cGVyLnNob3coKTtcbiAgfVxuXG4gIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIHRoaXMuc3RhdGUgPSB7IC4uLnRoaXMuc3RhdGUsIC4uLm5leHRTdGF0ZSB9O1xuICAgIGNvbnN0IHsgb3AsIHRhcmdldHMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICB0aGlzLiR0YXJnZXQuZmluZCgnLmVtcGhhc2lzJykudGV4dChvcCk7XG4gICAgdGhpcy4kdGFyZ2V0LmZpbmQoJy50YXJnZXQxLXRleHQnKS50ZXh0KHRhcmdldHNbMF0pO1xuICAgIHRoaXMuJHRhcmdldC5maW5kKCcudGFyZ2V0Mi10ZXh0JykudGV4dCh0YXJnZXRzWzFdKTtcbiAgfVxuXG4gIHNldEhlYWRlcigpIHtcbiAgICByZXR1cm4gJ+yCsOyLnSc7XG4gIH1cblxuICBzZXRCb2R5KCkge1xuICAgIGNvbnN0IHsgY29sdW1uSWQsIGNvbHVtbnMsIG9wIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGNvbHVtbk5hbWUgPSBjb2x1bW5zLmZpbmQoKHsgaWQgfSkgPT4gaWQgPT09IGNvbHVtbklkKT8ubmFtZTtcblxuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgIDxwPuKAuyDsgqzsmqnrspU8L3A+XG4gICAgICAgIDxwPjEuIOynhOuLqOuMgOyDgey7rOufvOydmCDruYTqtZDsu6zrn7wg7ISg7YOdID4gMi4g6rOE7IKw7IudIOyEoO2DnSA+IDMuIOuRkOuyiOynuCDruYTqtZDsu6zrn7wg7ISg7YOdID4gNC4g7ZmV7J24PC9wPlxuXG4gICAgICAgIDxmb3JtIGNsYXNzPVwiZm9ybS1pbmxpbmVcIj5cbiAgICAgICAgICDshKDtg53tlZwgPHNwYW4gY2xhc3M9XCJib2xkXCI+WyR7Y29sdW1uTmFtZX1dIDwvc3Bhbj7su6zrn7zsnYAgXG4gICAgICAgICAgPHNlbGVjdCBkYXRhLWFjdGlvbj1cInNlbGVjdC10YXJnZXQxXCIgY2xhc3M9XCJjdXN0b20tc2VsZWN0XCI+XG4gICAgICAgICAgICAke2NvbHVtbnNcbiAgICAgICAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgICAgICAgIC5yZWR1Y2UoKGFjYywgeyBpZCwgbmFtZSB9KSA9PiBhY2MgKyBgPG9wdGlvbiB2YWx1ZT1cIiR7aWR9XCI+JHtuYW1lfTwvb3B0aW9uPmAsICcnKX1cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicmFkaW8tYm94XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBmb3JtLWNoZWNrLWlubGluZVwiPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBpZD1cInBsdXNcIlxuICAgICAgICAgICAgICAgIGRhdGEtYWN0aW9uPVwiY2hhbmdlLW9wZXJhdG9yXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgbmFtZT1cIm9wZXJhdG9yXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT1cIitcIlxuICAgICAgICAgICAgICAgIGNoZWNrZWQgLz5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cInBsdXNcIj4rPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1jaGVjay1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgaWQ9XCJtaW51c1wiXG4gICAgICAgICAgICAgICAgZGF0YS1hY3Rpb249XCJjaGFuZ2Utb3BlcmF0b3JcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICBuYW1lPVwib3BlcmF0b3JcIlxuICAgICAgICAgICAgICAgIHZhbHVlPVwi4oiSXCIgLz5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwibWludXNcIj7iiJI8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBmb3JtLWNoZWNrLWlubGluZVwiPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBpZD1cIm11bHRpcGxlXCJcbiAgICAgICAgICAgICAgICBkYXRhLWFjdGlvbj1cImNoYW5nZS1vcGVyYXRvclwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCJcbiAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJvcGVyYXRvclwiXG4gICAgICAgICAgICAgICAgdmFsdWU9XCLDl1wiIC8+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCJtdWx0aXBsZVwiPsOXPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1jaGVjay1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgaWQ9XCJkaXZpc2lvblwiXG4gICAgICAgICAgICAgICAgZGF0YS1hY3Rpb249XCJjaGFuZ2Utb3BlcmF0b3JcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICBuYW1lPVwib3BlcmF0b3JcIlxuICAgICAgICAgICAgICAgIHZhbHVlPVwiw7dcIiAvPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwiZGl2aXNpb25cIj7DtzwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8c2VsZWN0IGRhdGEtYWN0aW9uPVwic2VsZWN0LXRhcmdldDJcIiBjbGFzcz1cImN1c3RvbS1zZWxlY3RcIj5cbiAgICAgICAgICAgICR7Y29sdW1uc1xuICAgICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgICAgLnJlZHVjZSgoYWNjLCB7IGlkLCBuYW1lIH0pID0+IGFjYyArIGA8b3B0aW9uIHZhbHVlPVwiJHtpZH1cIj4ke25hbWV9PC9vcHRpb24+YCwgJycpfVxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIOyZgCDqsJnri6RcbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cD5cbiAgICAgICAgICDsp4DsoJXtlZwg7ZKI7KeI6riw7KSA7J2AIFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYm9sZFwiPlske2NvbHVtbk5hbWV9XSA8L3NwYW4+7Lus65+87J2AXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJib2xkIHRhcmdldDEtdGV4dFwiPlske2NvbHVtbnNbMV0/Lm5hbWV9XSA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlbXBoYXNpc1wiPiR7b3B9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYm9sZCB0YXJnZXQyLXRleHRcIj5bJHtjb2x1bW5zWzFdPy5uYW1lfV0gPC9zcGFuPlxuICAgICAgICAgIOqzvCDqsJnri6RcbiAgICAgICAgPC9wPlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuXG4gIHNldEZvb3RlcigpIHtcbiAgICByZXR1cm4gYFxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeVwiIGRhdGEtYWN0aW9uPVwiY2FuY2VsXCI+7Leo7IaMPC9idXR0b24+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIGRhdGEtYWN0aW9uPVwic3VibWl0LWZvcm11bGFcIj7tmZXsnbg8L2J1dHRvbj5cbiAgICBgO1xuICB9XG59XG4iLCJpbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vY29tbW9uL01vZGFsJztcbmltcG9ydCB7ICRhY3Rpb24gfSBmcm9tICdAL3V0aWxzL3NlbGVjdG9yJztcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdW1Nb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgaW5pdFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0YXJnZXRzOiBbXSxcbiAgICAgIG9wOiAnKycsXG4gICAgICBjb2x1bW5JZDogJycsXG4gICAgICBjb2x1bW5zOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuICAgIC8vIOy7rOufvCDshKDtg50g67OA6rK9XG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdzZWxlY3QtdGFyZ2V0JywgJ2NoYW5nZScsICh7IHRhcmdldCB9KSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdGFyZ2V0czogJCh0YXJnZXQpLnZhbCgpIH0pO1xuICAgIH0pO1xuXG4gICAgLy8g67mE6rWQIOyXsOyCsOyekCDrs4Dqsr1cbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ2NoYW5nZS1vcGVyYXRvcicsICdjaGFuZ2UnLCAoeyB0YXJnZXQ6IHsgdmFsdWUgfSB9KSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgb3A6IHZhbHVlIH0pO1xuICAgIH0pO1xuXG4gICAgLy8g7KCB7JqpXG4gICAgLy8gdmFsaWRhdGlvbiBDaGVjayDrsI8g7Lus65+8IOyggeyaqVxuICAgICRhY3Rpb24uY2FsbCh0aGlzLCAnc3VibWl0LXN1bScsICdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29sdW1uSWQsIHRhcmdldHMsIG9wLCBjb2x1bW5zIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgdGhpcy5wYXJlbnQuZGF0YUdyaWQuc2V0U3RhdGUoe1xuICAgICAgICBjb2x1bW5zOiBjb2x1bW5zLm1hcChjb2wgPT5cbiAgICAgICAgICBjb2wuaWQgPT09IGNvbHVtbklkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAuLi5jb2wsXG4gICAgICAgICAgICAgICAgcnVsZXNldDoge1xuICAgICAgICAgICAgICAgICAgaWQ6ICdjYWxTdW0nLFxuICAgICAgICAgICAgICAgICAgbmFtZTogJ+qzhOyCsOyLnScsXG4gICAgICAgICAgICAgICAgICB0YXJnZXRzLFxuICAgICAgICAgICAgICAgICAgb3AsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBjb2wsXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdjYW5jZWwnLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNob3coJHNlbGVjdCwgeyBjb2x1bW5zIH0pIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbHVtbklkOiAkc2VsZWN0LmF0dHIoJ2lkJykucmVwbGFjZSgnc2VsZWN0RGlhZy0nLCAnJyksXG4gICAgICBjb2x1bW5zLFxuICAgIH0pO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgc3VwZXIuc2hvdygpO1xuICB9XG5cbiAgc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHsgLi4udGhpcy5zdGF0ZSwgLi4ubmV4dFN0YXRlIH07XG4gICAgY29uc3QgeyBvcCwgdGFyZ2V0cyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHRoaXMuJHRhcmdldC5maW5kKCcuZW1waGFzaXMnKS50ZXh0KG9wKTtcbiAgICB0aGlzLiR0YXJnZXQuZmluZCgnLnRhcmdldHMtdGV4dCcpLnRleHQodGFyZ2V0cy5tYXAodGFyZ2V0ID0+IGBbJHt0YXJnZXR9XWApLmpvaW4oJyArICcpKTtcbiAgfVxuXG4gIHNldEhlYWRlcigpIHtcbiAgICByZXR1cm4gJ+2VqeqzhCc7XG4gIH1cblxuICBzZXRCb2R5KCkge1xuICAgIGNvbnN0IHsgY29sdW1uSWQsIGNvbHVtbnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgY29sdW1uTmFtZSA9IGNvbHVtbnMuZmluZCgoeyBpZCB9KSA9PiBpZCA9PT0gY29sdW1uSWQpPy5uYW1lO1xuXG4gICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgPHA+4oC7IOyCrOyaqeuylTwvcD5cbiAgICAgICAgPHA+MS4g7KeE64uo64yA7IOB7Lus65+87J2YIOu5hOq1kOy7rOufvCDshKDtg50gPiAyLiDtmZXsnbg8L3A+XG5cbiAgICAgICAgPGZvcm0gY2xhc3M9XCJmb3JtLWlubGluZVwiPlxuICAgICAgICAgIOyEoO2Dne2VnCA8c3BhbiBjbGFzcz1cImJvbGRcIj5bJHtjb2x1bW5OYW1lfV0gPC9zcGFuPuy7rOufvOydgCBcbiAgICAgICAgICA8c2VsZWN0IGRhdGEtYWN0aW9uPVwic2VsZWN0LXRhcmdldFwiIGNsYXNzPVwiY3VzdG9tLXNlbGVjdFwiIG11bHRpcGxlPlxuICAgICAgICAgICAgJHtjb2x1bW5zXG4gICAgICAgICAgICAgIC5zbGljZSgxKVxuICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIHsgaWQsIG5hbWUgfSkgPT4gYWNjICsgYDxvcHRpb24gdmFsdWU9XCIke2lkfVwiPiR7bmFtZX08L29wdGlvbj5gLCAnJyl9XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAg7Lus65+865Ok7J2YXG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc3VjY2Vzc1wiPuuNlO2VmOq4sCgrKTwvYnV0dG9uPiBcbiAgICAgICAgICDsmYAg6rCZ64ukXG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPHA+XG4gICAgICAgICAg7KeA7KCV7ZWcIO2SiOyniOq4sOykgOydgCBcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImJvbGRcIj5bJHtjb2x1bW5OYW1lfV0gPSA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJib2xkIHRhcmdldHMtdGV4dFwiPlske2NvbHVtbnNbMV0/Lm5hbWV9XSA8L3NwYW4+XG4gICAgICAgICAg7J207Ja07JW8IO2VnOuLpFxuICAgICAgICA8L3A+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgc2V0Rm9vdGVyKCkge1xuICAgIHJldHVybiBgXG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5XCIgZGF0YS1hY3Rpb249XCJjYW5jZWxcIj7st6jshow8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgZGF0YS1hY3Rpb249XCJzdWJtaXQtc3VtXCI+7ZmV7J24PC9idXR0b24+XG4gICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL2NvbW1vbi9Nb2RhbCc7XG5pbXBvcnQgeyAkYWN0aW9uIH0gZnJvbSAnQC91dGlscy9zZWxlY3Rvcic7XG5pbXBvcnQgeyBmZXRjaFNldHRpbmdzLCB1cGRhdGVTZXR0aW5ncyB9IGZyb20gJ0AvdXRpbHMvbG9jYWxTdG9yYWdlJztcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXR0aW5nTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gIHNldEV2ZW50cygpIHtcbiAgICAvLyDsoIHsmqlcbiAgICAvLyB2YWxpZGF0aW9uIENoZWNrIOuwjyDsu6zrn7wg7KCB7JqpXG4gICAgJGFjdGlvbi5jYWxsKHRoaXMsICdzdWJtaXQtc2V0dGluZycsICdjbGljaycsICgpID0+IHtcbiAgICAgIHVwZGF0ZVNldHRpbmdzKHtcbiAgICAgICAgc2V0Q29sbFdpZHRoOiAkKCcjc2V0LWNvbGwtd2lkdGgnKS52YWwoKSxcbiAgICAgICAgb25lR3JpZDogJCgnI29uZS1ncmlkJykuaXMoJzpjaGVja2VkJyksXG4gICAgICB9KTtcbiAgICAgIGFsZXJ0KCfshKTsoJUg64K07Jqp7J20IOyggOyepeuQmOyXiOyKteuLiOuLpC5cXG7stIjquLDtmZQg67KE7Yq87J2EIOuIjOufrCDri6Tsi5wg7Iuc7J6R7ZW07KO87IS47JqUIScpO1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSk7XG5cbiAgICAkYWN0aW9uLmNhbGwodGhpcywgJ2NhbmNlbCcsICdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgc2hvdygkc2VsZWN0LCBncmlkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7ICRzZWxlY3QsIGRhdGFHcmlkOiBncmlkIH0pO1xuICAgIHN1cGVyLnNob3coKTtcbiAgfVxuXG4gIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIHRoaXMuc3RhdGUgPSB7IC4uLnRoaXMuc3RhdGUsIC4uLm5leHRTdGF0ZSB9O1xuICAgIGNvbnN0IHsgcGF0dGVybiB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHRoaXMuJHRhcmdldC5maW5kKCcuZW1waGFzaXMnKS50ZXh0KHBhdHRlcm4pO1xuICB9XG5cbiAgc2V0SGVhZGVyKCkge1xuICAgIHJldHVybiAn7ISk7KCVJztcbiAgfVxuXG4gIHNldEJvZHkoKSB7XG4gICAgY29uc3QgeyBzZXRDb2xsV2lkdGggPSAnJywgb25lR3JpZCA9IGZhbHNlIH0gPSBmZXRjaFNldHRpbmdzKCk7XG5cbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtc20tMyBjb2wtZm9ybS1sYWJlbFwiIHRpdGxlPVwi7Je0IOuEiOu5hOulvCDsp4DsoJXtlaAg7IiYIOyeiOyKteuLiOuLpC4g7JWE66y06rCS64+EIOyeheugpe2VmOyngCDslYrsnYQg6rK97JqwIOuEiOu5hOyXkCDrp57strDsp5Hri4jri6QuIGV4KSAxMDBcIj7sl7Qg64SI67mEIOyngOyglTwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0zXCI+XG4gICAgICAgICAgICA8aW5wdXQgaWQ9XCJzZXQtY29sbC13aWR0aFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT1cIiR7c2V0Q29sbFdpZHRofVwiPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1zd2l0Y2hcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtc20tMyBjdXN0b20tY29udHJvbC1sYWJlbFwiIGZvcj1cIm9uZS1ncmlkXCIgdGl0bGU9XCLsoJXruYQg64uo6rOE7JeQ7IScIOybkOuzuCDqt7jrpqzrk5zsnZgg7ZGc7Iuc7Jes67aA66W8IOyEoO2Dne2VoCDsiJgg7J6I7Iq164uI64ukLlwiPuygleu5hCDqt7jrpqzrk5wg7ZWcIOqwnCDsgqzsmqk8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0XCIgaWQ9XCJvbmUtZ3JpZFwiICR7XG4gICAgICAgICAgICBvbmVHcmlkID8gJ2NoZWNrZWQnIDogJydcbiAgICAgICAgICB9PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBzZXRGb290ZXIoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIiBkYXRhLWFjdGlvbj1cImNhbmNlbFwiPuy3qOyGjDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBkYXRhLWFjdGlvbj1cInN1Ym1pdC1zZXR0aW5nXCI+7KCA7J6lPC9idXR0b24+XG4gICAgYDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjY5Yzk2MjhjNDYzNzI5ZmM1ZjI1MThmYWVkYmNmZDEyLmdpZlwiOyIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnQC9jb3JlL0NvbXBvbmVudC5qcyc7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcbmltcG9ydCBjYXQgZnJvbSAnQC9hc3NldHMvaW1hZ2VzL255YW4tY2F0LmdpZic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmdTcGlubmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgaW5pdFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICB0ZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0xvYWRpbmdcbiAgICAgID8gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnlcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgYFxuICAgICAgOiAnJztcbiAgfVxuICAvLyA8aW1nIHNyYz1cIiR7Y2F0fVwiIC8+XG4gIC8vXG59XG4iLCIvKipcbiAqIO2XiOyaqSDtjIzsnbwg7J247L2U65SpIOuqqeuhnVxuICovXG5leHBvcnQgY29uc3QgRklMRV9FTkNPRElOR1MgPSBbJ1VURi04J107XG5cbi8qKlxuICog7YyM7J28IO2BrOq4sCDsoJztlZwgKOuwlOydtO2KuClcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9GSUxFX1NJWkUgPSAyMDAgKiAxMDI0ICoqIDI7XG4iLCJpbXBvcnQgeyBwYXJzZSB9IGZyb20gJ3BhcGFwYXJzZSc7XG5pbXBvcnQgbGFuZ3VhZ2VFbmNvZGluZyBmcm9tICdkZXRlY3QtZmlsZS1lbmNvZGluZy1hbmQtbGFuZ3VhZ2UnO1xuaW1wb3J0IHsgRklMRV9FTkNPRElOR1MsIE1BWF9GSUxFX1NJWkUgfSBmcm9tICdAL2NvbnN0YW50cy9maWxlJztcblxuYXN5bmMgZnVuY3Rpb24gcGFyc2VDU1YoY3N2RmlsZSkge1xuICBjb25zdCBbaXNFbmNvZGluZ1ZhbGlkLCBlbmNvZGluZ10gPSBhd2FpdCBlbmNvZGluZ0NoZWNrKGNzdkZpbGUpO1xuICBpZiAoIXNpemVDaGVjayhjc3ZGaWxlKSlcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBg7YyM7J287J20IOuEiOustCDtgb3ri4jri6QuXFxuJHtNYXRoLmZsb29yKFxuICAgICAgICBNQVhfRklMRV9TSVpFIC8gMTAyNCAqKiAyLFxuICAgICAgKX1NQiDsnbTtlZgg7YyM7J287J2EIOyXheuhnOuTnCDtlbTso7zshLjsmpQuYCxcbiAgICApO1xuICBpZiAoIWlzRW5jb2RpbmdWYWxpZClcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBg7YyM7J28IOyduOy9lOuUqeydtCDsnKDtmqjtlZjsp4Ag7JWK7Iq164uI64ukLiDtmITsnqwg7J247L2U65SpIFske1xuICAgICAgICBlbmNvZGluZyA/PyAn7ZmV7J2467aI6rCAJ1xuICAgICAgfV0gXFxu7ZeI7JqpIO2MjOydvCDsnbjsvZTrlKkgWyR7RklMRV9FTkNPRElOR1Muam9pbignLCAnKX1dYCxcbiAgICApO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcGFyc2UoY3N2RmlsZSwge1xuICAgICAgLy8gaGVhZGVyOiB0cnVlLFxuICAgICAgY29tcGxldGU6ICh7IGRhdGEsIG1ldGE6IHsgZmllbGRzIH0gfSkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IGRhdGEsIGZpZWxkcyB9KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICog7YyM7J28IOyduOy9lOuUqSDtmZXsnbhcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZW5jb2RpbmdDaGVjayhmaWxlKSB7XG4gIGNvbnN0IHsgZW5jb2RpbmcgfSA9IGF3YWl0IGxhbmd1YWdlRW5jb2RpbmcoZmlsZSk7XG4gIHJldHVybiBbRklMRV9FTkNPRElOR1MucmVkdWNlKChhY2MsIGVuYykgPT4gYWNjIHx8IGVuYyA9PT0gZW5jb2RpbmcsIGZhbHNlKSwgZW5jb2RpbmddO1xufVxuXG4vKipcbiAqIO2MjOydvCDsmqnrn4kg7ZmV7J24XG4gKi9cbmZ1bmN0aW9uIHNpemVDaGVjayhmaWxlKSB7XG4gIHJldHVybiBNQVhfRklMRV9TSVpFID49IGZpbGUuc2l6ZTtcbn1cblxuZXhwb3J0IHsgcGFyc2VDU1YgfTtcbiIsIi8vIENvbXBvbmVudHNcblxuLy8gQ29yZVxuaW1wb3J0IFNlbGVjdEZpbGUgZnJvbSAnQC9jb21wb25lbnRzL1NlbGVjdEZpbGUnO1xuaW1wb3J0IFN0YXJ0Um93IGZyb20gJ0AvY29tcG9uZW50cy9TdGFydFJvdyc7XG5pbXBvcnQgQ29udHJvbEJveCBmcm9tICdAL2NvbXBvbmVudHMvQ29udHJvbEJveCc7XG5pbXBvcnQgRGF0YUNvdW50IGZyb20gJ0AvY29tcG9uZW50cy9EYXRhQ291bnQnO1xuaW1wb3J0IERpYWdSZXN1bHRHcmlkIGZyb20gJ0AvY29tcG9uZW50cy9EaWFnUmVzdWx0R3JpZCc7XG5pbXBvcnQgRGF0YUdyaWQgZnJvbSAnQC9jb21wb25lbnRzL0RhdGFHcmlkJztcbmltcG9ydCBSZXBhaXJHcmlkIGZyb20gJ0AvY29tcG9uZW50cy9SZXBhaXJHcmlkJztcbmltcG9ydCBEaXNjcmlwdGlvbiBmcm9tICdAL2NvbXBvbmVudHMvRGlzY3JpcHRpb24nO1xuXG4vLyBTdXBwb3J0XG4vLyAtIE1vZGFsXG5pbXBvcnQgRGF0ZU1vZGFsIGZyb20gJ0AvY29tcG9uZW50cy9tb2RhbC9EYXRlTW9kYWwnO1xuaW1wb3J0IFdoZXRoZXJNb2RhbCBmcm9tICdAL2NvbXBvbmVudHMvbW9kYWwvV2hldGhlck1vZGFsJztcbmltcG9ydCBQYXR0ZXJuTW9kYWwgZnJvbSAnQC9jb21wb25lbnRzL21vZGFsL1BhdHRlcm5Nb2RhbCc7XG5pbXBvcnQgVGltZU9yZGVyTW9kYWwgZnJvbSAnQC9jb21wb25lbnRzL21vZGFsL1RpbWVPcmRlck1vZGFsJztcbmltcG9ydCBMb2dpY1JlbGF0aW9uc2hpcE1vZGFsIGZyb20gJ0AvY29tcG9uZW50cy9tb2RhbC9Mb2dpY1JlbGF0aW9uc2hpcE1vZGFsJztcbmltcG9ydCBGb3JtdWxhTW9kYWwgZnJvbSAnQC9jb21wb25lbnRzL21vZGFsL0Zvcm11bGFNb2RhbCc7XG5pbXBvcnQgU3VtTW9kYWwgZnJvbSAnQC9jb21wb25lbnRzL21vZGFsL1N1bU1vZGFsJztcbmltcG9ydCBTZXR0aW5nTW9kYWwgZnJvbSAnQC9jb21wb25lbnRzL21vZGFsL1NldHRpbmdNb2RhbCc7XG5cbi8vIC0gTG9hZGluZ1NwaW5uZXJcbmltcG9ydCBMb2FkaW5nU3Bpbm5lciBmcm9tICdAL2NvbXBvbmVudHMvTG9hZGluZ1NwaW5uZXInO1xuXG4vLyB1dGlsc1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICdAL2NvcmUvQ29tcG9uZW50JztcbmltcG9ydCB7ICRjb21wb25lbnQgfSBmcm9tICdAL3V0aWxzL3NlbGVjdG9yJztcbmltcG9ydCB7IHBhcnNlQ1NWIH0gZnJvbSAnQC91dGlscy9jc3YnO1xuaW1wb3J0IHsgRElBRywgSU5JVCwgTE9BRCwgcHJvZ3Jlc3NLUiwgUkVBRFksIFJFUEFJUiB9IGZyb20gJ0AvY29uc3RhbnRzL3Byb2dyZXNzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgaW5pdFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm9ncmVzczogSU5JVCxcbiAgICAgIGRpYWdGaWxlOiBudWxsLFxuICAgICAgZGF0YUNvdW50OiAwLFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICB9O1xuICB9XG5cbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLnNlbGVjdEZpbGUgPSBuZXcgU2VsZWN0RmlsZSh7XG4gICAgICAkdGFyZ2V0OiAkY29tcG9uZW50KCdzZWxlY3QtZmlsZScpLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgIH0pO1xuICAgIHRoaXMuc3RhcnRSb3cgPSBuZXcgU3RhcnRSb3coe1xuICAgICAgJHRhcmdldDogJGNvbXBvbmVudCgnc3RhcnQtcm93JyksXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgfSk7XG4gICAgdGhpcy5jb250cm9sQm94ID0gbmV3IENvbnRyb2xCb3goe1xuICAgICAgJHRhcmdldDogJGNvbXBvbmVudCgnY29udHJvbC1ib3gnKSxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICB9KTtcbiAgICB0aGlzLmRhdGFDb3VudCA9IG5ldyBEYXRhQ291bnQoe1xuICAgICAgJHRhcmdldDogJGNvbXBvbmVudCgnZGF0YS1jb3VudCcpLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgIH0pO1xuICAgIHRoaXMuZGlhZ1Jlc3VsdEdyaWQgPSBuZXcgRGlhZ1Jlc3VsdEdyaWQoe1xuICAgICAgJHRhcmdldDogJGNvbXBvbmVudCgnZGlhZy1yZXN1bHQtZ3JpZCcpLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgIH0pO1xuICAgIHRoaXMuZGF0YUdyaWQgPSBuZXcgRGF0YUdyaWQoe1xuICAgICAgJHRhcmdldDogJGNvbXBvbmVudCgnZGF0YS1ncmlkJyksXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgfSk7XG4gICAgdGhpcy5yZXBhaXJHcmlkID0gbmV3IFJlcGFpckdyaWQoe1xuICAgICAgJHRhcmdldDogJGNvbXBvbmVudCgncmVwYWlyLWdyaWQnKSxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICB9KTtcbiAgICB0aGlzLmRpc2NyaXB0aW9uID0gbmV3IERpc2NyaXB0aW9uKHtcbiAgICAgICR0YXJnZXQ6ICRjb21wb25lbnQoJ2Rpc2NyaXB0aW9uJyksXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgfSk7XG4gICAgdGhpcy5sb2FkaW5nU3Bpbm5lciA9IG5ldyBMb2FkaW5nU3Bpbm5lcih7XG4gICAgICAkdGFyZ2V0OiAkY29tcG9uZW50KCdsb2FkaW5nLXNwaW5uZXInKSxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICB9KTtcbiAgICB0aGlzLmRhdGVNb2RhbCA9IG5ldyBEYXRlTW9kYWwoe1xuICAgICAgJHRhcmdldDogJGNvbXBvbmVudCgnZGF0ZS1tb2RhbCcpLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgIH0pO1xuICAgIHRoaXMud2hldGhlck1vZGFsID0gbmV3IFdoZXRoZXJNb2RhbCh7XG4gICAgICAkdGFyZ2V0OiAkY29tcG9uZW50KCd3aGV0aGVyLW1vZGFsJyksXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgfSk7XG4gICAgdGhpcy5wYXR0ZXJuTW9kYWwgPSBuZXcgUGF0dGVybk1vZGFsKHtcbiAgICAgICR0YXJnZXQ6ICRjb21wb25lbnQoJ3BhdHRlcm4tbW9kYWwnKSxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICB9KTtcbiAgICB0aGlzLnRpbWVPcmRlck1vZGFsID0gbmV3IFRpbWVPcmRlck1vZGFsKHtcbiAgICAgICR0YXJnZXQ6ICRjb21wb25lbnQoJ3RpbWUtb3JkZXItbW9kYWwnKSxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICB9KTtcbiAgICB0aGlzLmxvZ2ljUmVsYXRpb25zaGlwTW9kYWwgPSBuZXcgTG9naWNSZWxhdGlvbnNoaXBNb2RhbCh7XG4gICAgICAkdGFyZ2V0OiAkY29tcG9uZW50KCdsb2dpYy1yZWxhdGlvbnNoaXAtbW9kYWwnKSxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICB9KTtcbiAgICB0aGlzLmZvcm11bGFNb2RhbCA9IG5ldyBGb3JtdWxhTW9kYWwoe1xuICAgICAgJHRhcmdldDogJGNvbXBvbmVudCgnZm9ybXVsYS1tb2RhbCcpLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgIH0pO1xuICAgIHRoaXMuc3VtTW9kYWwgPSBuZXcgU3VtTW9kYWwoe1xuICAgICAgJHRhcmdldDogJGNvbXBvbmVudCgnc3VtLW1vZGFsJyksXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgfSk7XG4gICAgdGhpcy5zZXR0aW5nTW9kYWwgPSBuZXcgU2V0dGluZ01vZGFsKHtcbiAgICAgICR0YXJnZXQ6ICRjb21wb25lbnQoJ3NldHRpbmctbW9kYWwnKSxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRDc3ZGaWxlKGZpbGUpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5vbkxvYWRpbmcoKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBhcnNlQ1NWKGZpbGUpO1xuICAgICAgY29uc3QgZGF0YSA9IHJlc3VsdC5kYXRhO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRpYWdGaWxlOiBmaWxlLFxuICAgICAgICBwcm9ncmVzczogTE9BRCxcbiAgICAgICAgZGF0YUNvdW50OiBkYXRhLmxlbmd0aCAtIDEsXG4gICAgICAgIGNvbHVtbkNvdW50OiBkYXRhWzBdLmxlbmd0aCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kYXRhR3JpZC5yZW5kZXJHcmlkKGRhdGEpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhbGVydChlcnJvcik7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMub2ZmTG9hZGluZygpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNldFN0YXJ0Um93KHN0YXJ0Um93KSB7XG4gICAgdGhpcy5vbkxvYWRpbmcoKTtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHBhcnNlQ1NWKHRoaXMuc3RhdGUuZGlhZ0ZpbGUpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcHJvZ3Jlc3M6IFJFQURZLFxuICAgICAgc3RhcnRSb3csXG4gICAgICBkYXRhQ291bnQ6IGRhdGEubGVuZ3RoIC0gc3RhcnRSb3cgLSAxLFxuICAgIH0pO1xuICAgIHRoaXMuZGF0YUdyaWQuc2V0U3RhcnRSb3coZGF0YSwgc3RhcnRSb3cpO1xuICAgIHRoaXMub2ZmTG9hZGluZygpO1xuICB9XG5cbiAgZGlhZ25vc2lzKCkge1xuICAgIHRoaXMub25Mb2FkaW5nKCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHByb2dyZXNzOiBESUFHIH0pO1xuICAgIGNvbnN0IHsgZ3JpZCB9ID0gdGhpcy5kYXRhR3JpZC5zdGF0ZTtcbiAgICB0aGlzLmRpYWdSZXN1bHRHcmlkLmRpYWdub3NpcyhncmlkKTtcbiAgICB0aGlzLm9mZkxvYWRpbmcoKTtcbiAgfVxuXG4gIGFzeW5jIHJlcGFpcigpIHtcbiAgICB0aGlzLm9uTG9hZGluZygpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBwcm9ncmVzczogUkVQQUlSIH0pO1xuICAgIGNvbnN0IHsgZ3JpZCB9ID0gdGhpcy5kYXRhR3JpZC5zdGF0ZTtcbiAgICB0aGlzLnJlcGFpckdyaWQucmVwYWlyKGdyaWQpO1xuICAgIHRoaXMub2ZmTG9hZGluZygpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm1vdW50ZWQoKTtcbiAgfVxuXG4gIG9uTG9hZGluZygpIHtcbiAgICB0aGlzLmxvYWRpbmdTcGlubmVyLnNldFN0YXRlKHsgaXNMb2FkaW5nOiB0cnVlIH0pO1xuICB9XG5cbiAgb2ZmTG9hZGluZygpIHtcbiAgICB0aGlzLmxvYWRpbmdTcGlubmVyLnNldFN0YXRlKHsgaXNMb2FkaW5nOiBmYWxzZSB9KTtcbiAgfVxuXG4gIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIHRoaXMuc3RhdGUgPSB7IC4uLnRoaXMuc3RhdGUsIC4uLm5leHRTdGF0ZSB9O1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYCVjKioqKioq7ZiE7J6s64qUICR7cHJvZ3Jlc3NLUlt0aGlzLnN0YXRlLnByb2dyZXNzXX0g64uo6rOEIOyeheuLiOuLpCoqKioqKipgLFxuICAgICAgJ2JhY2tncm91bmQ6ICMyMjI7IGNvbG9yOiAjYmFkYTU1OyBmb250LXdlaWdodDogYm9sZDsnLFxuICAgICk7XG4gICAgdGhpcy5zZWxlY3RGaWxlLnNldFN0YXRlKHtcbiAgICAgIHByb2dyZXNzOiB0aGlzLnN0YXRlLnByb2dyZXNzLFxuICAgIH0pO1xuICAgIHRoaXMuc3RhcnRSb3cuc2V0U3RhdGUoe1xuICAgICAgcHJvZ3Jlc3M6IHRoaXMuc3RhdGUucHJvZ3Jlc3MsXG4gICAgfSk7XG4gICAgdGhpcy5jb250cm9sQm94LnNldFN0YXRlKHtcbiAgICAgIHByb2dyZXNzOiB0aGlzLnN0YXRlLnByb2dyZXNzLFxuICAgIH0pO1xuICAgIHRoaXMuZGF0YUNvdW50LnNldFN0YXRlKHtcbiAgICAgIHByb2dyZXNzOiB0aGlzLnN0YXRlLnByb2dyZXNzLFxuICAgICAgZGF0YUNvdW50OiB0aGlzLnN0YXRlLmRhdGFDb3VudCxcbiAgICAgIGNvbHVtbkNvdW50OiB0aGlzLnN0YXRlLmNvbHVtbkNvdW50LFxuICAgIH0pO1xuICAgIHRoaXMuZGF0YUdyaWQuc2V0U3RhdGUoe1xuICAgICAgcHJvZ3Jlc3M6IHRoaXMuc3RhdGUucHJvZ3Jlc3MsXG4gICAgfSk7XG4gICAgdGhpcy5kaWFnUmVzdWx0R3JpZC5zZXRTdGF0ZSh7XG4gICAgICBwcm9ncmVzczogdGhpcy5zdGF0ZS5wcm9ncmVzcyxcbiAgICB9KTtcbiAgICB0aGlzLnJlcGFpckdyaWQuc2V0U3RhdGUoe1xuICAgICAgcHJvZ3Jlc3M6IHRoaXMuc3RhdGUucHJvZ3Jlc3MsXG4gICAgfSk7XG4gICAgdGhpcy5kaXNjcmlwdGlvbi5zZXRTdGF0ZSh7XG4gICAgICBwcm9ncmVzczogdGhpcy5zdGF0ZS5wcm9ncmVzcyxcbiAgICB9KTtcbiAgfVxuXG4gIHRlbXBsYXRlKCkge1xuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZ3JvdXBcIj5cbiAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cImNhcmRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICAgICAgPGFydGljbGUgZGF0YS1jb21wb25lbnQ9XCJzZWxlY3QtZmlsZVwiIC8+XG4gICAgICAgICAgICAgIDxhcnRpY2xlIGRhdGEtY29tcG9uZW50PVwic3RhcnQtcm93XCIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cImNhcmRcIj5cbiAgICAgICAgICAgIDxhcnRpY2xlIGRhdGEtY29tcG9uZW50PVwiY29udHJvbC1ib3hcIiBjbGFzcz1cImNhcmQtYm9keVwiIC8+XG4gICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPVwiY2FyZFwiPlxuICAgICAgICAgICAgPGFydGljbGUgZGF0YS1jb21wb25lbnQ9XCJkYXRhLWNvdW50XCIgY2xhc3M9XCJjYXJkLWJvZHlcIiAvPlxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPlxuICAgICAgICAgIDxzZWN0aW9uIGRhdGEtY29tcG9uZW50PVwiZGlhZy1yZXN1bHQtZ3JpZFwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8c2VjdGlvbiBkYXRhLWNvbXBvbmVudD1cImRhdGEtZ3JpZFwiIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2xcIj5cbiAgICAgICAgICA8c2VjdGlvbiBkYXRhLWNvbXBvbmVudD1cInJlcGFpci1ncmlkXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPlxuICAgICAgICAgIDxzZWN0aW9uIGRhdGEtY29tcG9uZW50PVwiZGlzY3JpcHRpb25cIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHNlY3Rpb24gZGF0YS1jb21wb25lbnQ9XCJkYXRlLW1vZGFsXCIgLz5cbiAgICAgIDxzZWN0aW9uIGRhdGEtY29tcG9uZW50PVwid2hldGhlci1tb2RhbFwiIC8+XG4gICAgICA8c2VjdGlvbiBkYXRhLWNvbXBvbmVudD1cInBhdHRlcm4tbW9kYWxcIiAvPlxuICAgICAgPHNlY3Rpb24gZGF0YS1jb21wb25lbnQ9XCJ0aW1lLW9yZGVyLW1vZGFsXCIgLz5cbiAgICAgIDxzZWN0aW9uIGRhdGEtY29tcG9uZW50PVwibG9naWMtcmVsYXRpb25zaGlwLW1vZGFsXCIgLz5cbiAgICAgIDxzZWN0aW9uIGRhdGEtY29tcG9uZW50PVwiZm9ybXVsYS1tb2RhbFwiIC8+XG4gICAgICA8c2VjdGlvbiBkYXRhLWNvbXBvbmVudD1cInN1bS1tb2RhbFwiIC8+XG4gICAgICA8c2VjdGlvbiBkYXRhLWNvbXBvbmVudD1cInNldHRpbmctbW9kYWxcIiAvPlxuICAgICAgPHNlY3Rpb24gZGF0YS1jb21wb25lbnQ9XCJsb2FkaW5nLXNwaW5uZXJcIiAvPlxuICAgIGA7XG4gIH1cbn1cbiIsImltcG9ydCBBcHAgZnJvbSAnQC9BcHAuanMnO1xuaW1wb3J0IHsgJGNvbXBvbmVudCB9IGZyb20gJ0AvdXRpbHMvc2VsZWN0b3IuanMnO1xuaW1wb3J0ICdAL2Fzc2V0cy9jc3MvbWFpbi5jc3MnO1xuXG4kKCgpID0+IHtcbiAgbmV3IEFwcCh7ICR0YXJnZXQ6ICRjb21wb25lbnQoJ2FwcCcpIH0pO1xufSk7XG5cbi8qKlxuICogQm9vdHN0cmFwIFRvb3B0aXBcbiAqL1xuJChmdW5jdGlvbiAoKSB7XG4gICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS50b29sdGlwKCk7XG59KTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGFyZW50IiwicGF0aCIsIkFycmF5IiwiZnJvbSIsImlzQXJyYXkiLCJlbnRyeVZpcnR1YWwiLCJjb25jYXQiLCJrZXlzIiwic2xpY2UiLCJiaW5kIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJnZXRJdGVyYXRvciIsImlzUHJvdG90eXBlT2YiLCJtZXRob2QiLCJGdW5jdGlvblByb3RvdHlwZSIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwiaXQiLCJvd24iLCJBcnJheVByb3RvdHlwZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiZGVzYyIsInNoYW0iLCJQcm9taXNlIiwiU3ltYm9sIiwiV3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsImYiLCJnbG9iYWwiLCJpc0NhbGxhYmxlIiwidHJ5VG9TdHJpbmciLCJUeXBlRXJyb3IiLCJhcmd1bWVudCIsImlzQ29uc3RydWN0b3IiLCJTdHJpbmciLCJQcm90b3R5cGUiLCJpc09iamVjdCIsImNhbGwiLCJ0b09iamVjdCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJsZW5ndGhPZkFycmF5TGlrZSIsImNyZWF0ZVByb3BlcnR5IiwiYXJyYXlMaWtlIiwiTyIsIklTX0NPTlNUUlVDVE9SIiwidGhpcyIsImFyZ3VtZW50c0xlbmd0aCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm1hcGZuIiwidW5kZWZpbmVkIiwibWFwcGluZyIsInJlc3VsdCIsInN0ZXAiLCJpdGVyYXRvciIsIm5leHQiLCJ2YWx1ZSIsIml0ZXJhdG9yTWV0aG9kIiwiaW5kZXgiLCJkb25lIiwidG9JbmRleGVkT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJpbmRleE9mIiwidW5jdXJyeVRoaXMiLCJJbmRleGVkT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwicHVzaCIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX1JFSkVDVCIsIk5PX0hPTEVTIiwiY2FsbGJhY2tmbiIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwiY3JlYXRlIiwidGFyZ2V0IiwiZm9yRWFjaCIsIm1hcCIsImZpbHRlciIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaW5kSW5kZXgiLCJmaWx0ZXJSZWplY3QiLCJmYWlscyIsIndlbGxLbm93blN5bWJvbCIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImNvbnN0cnVjdG9yIiwiZm9vIiwiQm9vbGVhbiIsIm1heCIsIk1hdGgiLCJzdGFydCIsImVuZCIsImsiLCJmaW4iLCJuIiwib3JpZ2luYWxBcnJheSIsIkMiLCJhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciIsImFuT2JqZWN0IiwiaXRlcmF0b3JDbG9zZSIsImZuIiwiRU5UUklFUyIsImVycm9yIiwiSVRFUkFUT1IiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJleGVjIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJvYmplY3QiLCJ0b1N0cmluZyIsInN0cmluZ1NsaWNlIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIlRPX1NUUklOR19UQUciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsInJlcGxhY2UiLCJURVNUIiwiRXJyb3IiLCJzdGFjayIsIlY4X09SX0NIQUtSQV9TVEFDS19FTlRSWSIsIklTX1Y4X09SX0NIQUtSQV9TVEFDSyIsInRlc3QiLCJkcm9wRW50cmllcyIsImhhc093biIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsInNvdXJjZSIsImV4Y2VwdGlvbnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJpIiwiRiIsImdldFByb3RvdHlwZU9mIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXRUb1N0cmluZ1RhZyIsIkl0ZXJhdG9ycyIsInJldHVyblRoaXMiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiTkFNRSIsIkVOVU1FUkFCTEVfTkVYVCIsIkRFU0NSSVBUT1JTIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidG9Qcm9wZXJ0eUtleSIsInByb3BlcnR5S2V5IiwiJCIsIklTX1BVUkUiLCJGdW5jdGlvbk5hbWUiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsIkl0ZXJhdG9yc0NvcmUiLCJQUk9QRVJfRlVOQ1RJT05fTkFNRSIsIlBST1BFUiIsIkNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FIiwiQ09ORklHVVJBQkxFIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIktFWVMiLCJWQUxVRVMiLCJJdGVyYWJsZSIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJtZXRob2RzIiwiS0VZIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJuYW1lIiwidmFsdWVzIiwicHJvdG8iLCJmb3JjZWQiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiZ2V0IiwiZG9jdW1lbnQiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJ3aW5kb3ciLCJ1c2VyQWdlbnQiLCJQZWJibGUiLCJjbGFzc29mIiwicHJvY2VzcyIsImdldEJ1aWx0SW4iLCJtYXRjaCIsInZlcnNpb24iLCJEZW5vIiwidmVyc2lvbnMiLCJ2OCIsInNwbGl0IiwiQ09OU1RSVUNUT1IiLCJhcHBseSIsImlzRm9yY2VkIiwid3JhcENvbnN0cnVjdG9yIiwiTmF0aXZlQ29uc3RydWN0b3IiLCJXcmFwcGVyIiwiYSIsImIiLCJjIiwib3B0aW9ucyIsIlVTRV9OQVRJVkUiLCJWSVJUVUFMX1BST1RPVFlQRSIsInNvdXJjZVByb3BlcnR5IiwidGFyZ2V0UHJvcGVydHkiLCJuYXRpdmVQcm9wZXJ0eSIsInJlc3VsdFByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJQUk9UTyIsIm5hdGl2ZVNvdXJjZSIsInRhcmdldFByb3RvdHlwZSIsIm5vVGFyZ2V0R2V0Iiwid3JhcCIsInJlYWwiLCJOQVRJVkVfQklORCIsIlJlZmxlY3QiLCJhQ2FsbGFibGUiLCJoYXNPd25Qcm9wZXJ0eSIsImFycmF5U2xpY2UiLCJqb2luIiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwiYXJnc0xlbmd0aCIsImFyZ3MiLCJsaXN0IiwicGFydEFyZ3MiLCJnZXREZXNjcmlwdG9yIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJnZXRNZXRob2QiLCJ1c2luZ0l0ZXJhdG9yIiwiViIsIlAiLCJmdW5jIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwiZyIsImNvbnNvbGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInN0b3JlIiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCJjYXVzZSIsInNldCIsImhhcyIsIk5BVElWRV9XRUFLX01BUCIsInNoYXJlZCIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIldlYWtNYXAiLCJzdGF0ZSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwidHlwZSIsIm5vb3AiLCJlbXB0eSIsImNvbnN0cnVjdG9yUmVnRXhwIiwiSU5DT1JSRUNUX1RPX1NUUklORyIsImlzQ29uc3RydWN0b3JNb2Rlcm4iLCJpc0NvbnN0cnVjdG9yTGVnYWN5IiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiZGF0YSIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIiRTeW1ib2wiLCJSZXN1bHQiLCJzdG9wcGVkIiwiUmVzdWx0UHJvdG90eXBlIiwiaXRlcmFibGUiLCJ1bmJvdW5kRnVuY3Rpb24iLCJpdGVyRm4iLCJBU19FTlRSSUVTIiwiSVNfSVRFUkFUT1IiLCJJTlRFUlJVUFRFRCIsInN0b3AiLCJjb25kaXRpb24iLCJjYWxsRm4iLCJraW5kIiwiaW5uZXJSZXN1bHQiLCJpbm5lckVycm9yIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsInRvTGVuZ3RoIiwib2JqIiwiZmx1c2giLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsInRvZ2dsZSIsIm5vZGUiLCJwcm9taXNlIiwidGhlbiIsIm1hY3JvdGFzayIsIklTX0lPUyIsIklTX0lPU19QRUJCTEUiLCJJU19XRUJPU19XRUJLSVQiLCJJU19OT0RFIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJxdWV1ZU1pY3JvdGFzayIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsInJlc29sdmUiLCJuZXh0VGljayIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIiRkZWZhdWx0IiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllc01vZHVsZSIsImVudW1CdWdLZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdCIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJQcm9wZXJ0aWVzIiwiVjhfUFJPVE9UWVBFX0RFRklORV9CVUciLCJvYmplY3RLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiSUU4X0RPTV9ERUZJTkUiLCIkZGVmaW5lUHJvcGVydHkiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiQXR0cmlidXRlcyIsImN1cnJlbnQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid2luZG93TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJPYmplY3RQcm90b3R5cGUiLCJuYW1lcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwieCIsInByb21pc2VDYXBhYmlsaXR5IiwiUXVldWUiLCJ0YWlsIiwiYWRkIiwiaXRlbSIsImVudHJ5IiwidW5zYWZlIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkNvbnN0cnVjdG9yIiwiVEFHIiwiU0VUX01FVEhPRCIsInVpZCIsInNldEdsb2JhbCIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJsaWNlbnNlIiwiYUNvbnN0cnVjdG9yIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiUyIsInRvSW50ZWdlck9ySW5maW5pdHkiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiY2hhckF0IiwiY2hhckNvZGVBdCIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwiZmlyc3QiLCJzZWNvbmQiLCJwb3NpdGlvbiIsInNpemUiLCJjb2RlQXQiLCJsb2NhdGlvbiIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJzZXRJbW1lZGlhdGUiLCJjbGVhciIsImNsZWFySW1tZWRpYXRlIiwiRGlzcGF0Y2giLCJNZXNzYWdlQ2hhbm5lbCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsImlkIiwicnVubmVyIiwibGlzdGVuZXIiLCJldmVudCIsInBvc3QiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwiaG9zdCIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIm1pbiIsImludGVnZXIiLCJjZWlsIiwiZmxvb3IiLCJudW1iZXIiLCJpc1N5bWJvbCIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJUT19QUklNSVRJVkUiLCJleG90aWNUb1ByaW0iLCJ0b1ByaW1pdGl2ZSIsInBvc3RmaXgiLCJyYW5kb20iLCJOQVRJVkVfU1lNQk9MIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwic3ltYm9sRm9yIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsImRlc2NyaXB0aW9uIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImNsZWFyRXJyb3JTdGFjayIsImluc3RhbGxFcnJvckNhdXNlIiwiaXRlcmF0ZSIsIm5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50IiwiRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUiLCIkQWdncmVnYXRlRXJyb3IiLCJlcnJvcnMiLCJtZXNzYWdlIiwiaXNJbnN0YW5jZSIsIkFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlIiwiZXJyb3JzQXJyYXkiLCJBZ2dyZWdhdGVFcnJvciIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiU1BFQ0lFU19TVVBQT1JUIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsImFyZyIsImxlbiIsIkUiLCJBIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJkZWZpbmVJdGVyYXRvciIsIkFSUkFZX0lURVJBVE9SIiwic2V0SW50ZXJuYWxTdGF0ZSIsImdldEludGVybmFsU3RhdGUiLCJpdGVyYXRlZCIsIkFyZ3VtZW50cyIsInVuJFNsaWNlIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsIkpTT04iLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJhbGxTZXR0bGVkIiwiY2FwYWJpbGl0eSIsInByb21pc2VSZXNvbHZlIiwicmVtYWluaW5nIiwiYWxyZWFkeUNhbGxlZCIsInN0YXR1cyIsInJlYXNvbiIsIlBST01JU0VfQU5ZX0VSUk9SIiwiYW55IiwiYWxyZWFkeVJlc29sdmVkIiwiYWxyZWFkeVJlamVjdGVkIiwiTmF0aXZlUHJvbWlzZSIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIm9uRmluYWxseSIsImlzRnVuY3Rpb24iLCJlIiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibmF0aXZlVGhlbiIsInJlZGVmaW5lQWxsIiwic2V0U3BlY2llcyIsImFuSW5zdGFuY2UiLCJtaWNyb3Rhc2siLCJob3N0UmVwb3J0RXJyb3JzIiwiSVNfQlJPV1NFUiIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIk5hdGl2ZVByb21pc2VQcm90b3R5cGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCJQcm9taXNlUHJvdG90eXBlIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiRElTUEFUQ0hfRVZFTlQiLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJOQVRJVkVfUkVKRUNUSU9OX0VWRU5UIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiVU5IQU5ETEVEX1JFSkVDVElPTiIsIlNVQkNMQVNTSU5HIiwiUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiYWxsIiwiaXNUaGVuYWJsZSIsImNhbGxSZWFjdGlvbiIsInJlYWN0aW9uIiwiZXhpdGVkIiwib2siLCJoYW5kbGVyIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiaXNSZWplY3QiLCJub3RpZmllZCIsInJlYWN0aW9ucyIsIm9uVW5oYW5kbGVkIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJlbWl0IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJyIiwiJHByb21pc2VSZXNvbHZlIiwicmFjZSIsIlNUUklOR19JVEVSQVRPUiIsInBvaW50IiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiJHRvU3RyaW5nIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiJGZvckVhY2giLCJISURERU4iLCJTWU1CT0wiLCJTeW1ib2xQcm90b3R5cGUiLCJRT2JqZWN0IiwiJHN0cmluZ2lmeSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwia2V5Rm9yIiwic3ltIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJzcGFjZSIsIiRyZXBsYWNlciIsImhpbnQiLCJET01JdGVyYWJsZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIlVOU0NPUEFCTEVTIiwidW5pY29kZSIsIkFycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJidWZmZXIiLCJpc0V4dGVuc2libGUiLCJOQVRJVkVfQVJSQVlfQlVGRkVSIiwiSW50OEFycmF5IiwiSW50OEFycmF5UHJvdG90eXBlIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSIsIlR5cGVkQXJyYXkiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiVFlQRURfQVJSQVlfVEFHIiwiVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IiLCJOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIiwib3BlcmEiLCJUWVBFRF9BUlJBWV9UQUdfUkVRVUlSRUQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIlVpbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QiLCJCaWdJbnQ2NEFycmF5IiwiQmlnVWludDY0QXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJrbGFzcyIsImFUeXBlZEFycmF5IiwiYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsImV4cG9ydFR5cGVkQXJyYXlNZXRob2QiLCJwcm9wZXJ0eSIsIkFSUkFZIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiZXJyb3IyIiwiZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCIsImlzVmlldyIsInRvSW5kZXgiLCJJRUVFNzU0IiwiYXJyYXlGaWxsIiwiQVJSQVlfQlVGRkVSIiwiV1JPTkdfSU5ERVgiLCJOYXRpdmVBcnJheUJ1ZmZlciIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyUHJvdG90eXBlIiwiJERhdGFWaWV3IiwiRGF0YVZpZXdQcm90b3R5cGUiLCJSYW5nZUVycm9yIiwiZmlsbCIsInJldmVyc2UiLCJwYWNrSUVFRTc1NCIsInBhY2siLCJ1bnBhY2tJRUVFNzU0IiwidW5wYWNrIiwicGFja0ludDgiLCJwYWNrSW50MTYiLCJwYWNrSW50MzIiLCJ1bnBhY2tJbnQzMiIsInBhY2tGbG9hdDMyIiwicGFja0Zsb2F0NjQiLCJhZGRHZXR0ZXIiLCJ2aWV3IiwiY291bnQiLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiYnl0ZUxlbmd0aCIsImJ5dGVzIiwiYnl0ZU9mZnNldCIsImNvbnZlcnNpb24iLCJJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUiLCJOYU4iLCJqIiwidGVzdFZpZXciLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJvZmZzZXQiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsImNvcHlXaXRoaW4iLCJ0byIsImluYyIsImVuZFBvcyIsIlNUUklDVF9NRVRIT0QiLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiJGxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwic2VhcmNoRWxlbWVudCIsIklTX1JJR0hUIiwibWVtbyIsImxlZnQiLCJyaWdodCIsIm1lcmdlU29ydCIsImNvbXBhcmVmbiIsIm1pZGRsZSIsImluc2VydGlvblNvcnQiLCJtZXJnZSIsImVsZW1lbnQiLCJsbGVuZ3RoIiwicmxlbmd0aCIsImxpbmRleCIsInJpbmRleCIsImZhc3RLZXkiLCJpbnRlcm5hbFN0YXRlR2V0dGVyRm9yIiwiZ2V0Q29uc3RydWN0b3IiLCJBRERFUiIsImRlZmluZSIsInByZXZpb3VzIiwiZ2V0RW50cnkiLCJyZW1vdmVkIiwicHJldiIsInNldFN0cm9uZyIsIklURVJBVE9SX05BTUUiLCJnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSIsImdldEludGVybmFsSXRlcmF0b3JTdGF0ZSIsIkludGVybmFsTWV0YWRhdGFNb2R1bGUiLCJpbmhlcml0SWZSZXF1aXJlZCIsImNvbW1vbiIsIklTX1dFQUsiLCJOYXRpdmVQcm90b3R5cGUiLCJleHBvcnRlZCIsImZpeE1ldGhvZCIsInVuY3VycmllZE5hdGl2ZU1ldGhvZCIsImVuYWJsZSIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiZHVtbXkiLCJNQVRDSCIsInJlZ2V4cCIsImVycm9yMSIsImNsYXNzTGlzdCIsIkRPTVRva2VuTGlzdFByb3RvdHlwZSIsImZpcmVmb3giLCJVQSIsIndlYmtpdCIsInJlZ2V4cEV4ZWMiLCJSZWdFeHBQcm90b3R5cGUiLCJSZWdFeHAiLCJTSEFNIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsInJlIiwiZmxhZ3MiLCJ1bmN1cnJpZWROYXRpdmVSZWdFeHBNZXRob2QiLCJuYXRpdmVNZXRob2QiLCJzdHIiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCIkZXhlYyIsInByZXZlbnRFeHRlbnNpb25zIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJ0YWlsUG9zIiwibSIsInN5bWJvbHMiLCJjaCIsImNhcHR1cmUiLCJhYnMiLCJwb3ciLCJsb2ciLCJMTjIiLCJtYW50aXNzYUxlbmd0aCIsImV4cG9uZW50IiwibWFudGlzc2EiLCJleHBvbmVudExlbmd0aCIsImVNYXgiLCJlQmlhcyIsInJ0Iiwic2lnbiIsIkluZmluaXR5IiwibkJpdHMiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUiLCJGUkVFWklORyIsIlJFUVVJUkVEIiwiTUVUQURBVEEiLCJzZXRNZXRhZGF0YSIsIm9iamVjdElEIiwid2Vha0RhdGEiLCJtZXRhIiwic3BsaWNlIiwiZ2V0V2Vha0RhdGEiLCJvbkZyZWV6ZSIsIk51bWJlciIsImlzSW50ZWdlciIsImlzRmluaXRlIiwiaXNSZWdFeHAiLCJ1cmwiLCJVUkwiLCJzZWFyY2hQYXJhbXMiLCJwYXRobmFtZSIsInRvSlNPTiIsInNvcnQiLCJocmVmIiwiVVJMU2VhcmNoUGFyYW1zIiwidXNlcm5hbWUiLCJoYXNoIiwiJGFzc2lnbiIsImFzc2lnbiIsIkIiLCJhbHBoYWJldCIsImNociIsIlQiLCJBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUiLCIkaXNFeHRlbnNpYmxlIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsIlRPX0VOVFJJRVMiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwic2ltcGxlIiwiUiIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyIsIlVOU1VQUE9SVEVEX0RPVF9BTEwiLCJVTlNVUFBPUlRFRF9OQ0ciLCJuYXRpdmVSZXBsYWNlIiwibmF0aXZlRXhlYyIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwibGFzdEluZGV4IiwiVU5TVVBQT1JURURfWSIsIkJST0tFTl9DQVJFVCIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJncm91cCIsInJhdyIsImdyb3VwcyIsInN0aWNreSIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwibXVsdGlsaW5lIiwiaWdub3JlQ2FzZSIsImRvdEFsbCIsIiRSZWdFeHAiLCJNSVNTRURfU1RJQ0tZIiwiJHJlcGVhdCIsInJlcGVhdCIsIklTX0VORCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsIm1heEludCIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJPVkVSRkxPV19FUlJPUiIsImZyb21DaGFyQ29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiYWRhcHQiLCJkZWx0YSIsIm51bVBvaW50cyIsImZpcnN0VGltZSIsImJhc2VNaW51c1RNaW4iLCJiYXNlIiwiZW5jb2RlIiwib3V0cHV0IiwiZXh0cmEiLCJ1Y3MyZGVjb2RlIiwiY3VycmVudFZhbHVlIiwiaW5wdXRMZW5ndGgiLCJiaWFzIiwiYmFzaWNMZW5ndGgiLCJoYW5kbGVkQ1BDb3VudCIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsInEiLCJ0IiwicU1pbnVzVCIsImJhc2VNaW51c1QiLCJsYWJlbCIsImVuY29kZWQiLCJsYWJlbHMiLCJ3aGl0ZXNwYWNlcyIsIndoaXRlc3BhY2UiLCJsdHJpbSIsInJ0cmltIiwidHJpbSIsInRvUG9zaXRpdmVJbnRlZ2VyIiwiQllURVMiLCJUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTIiwiQXJyYXlCdWZmZXJWaWV3Q29yZSIsIkFycmF5QnVmZmVyTW9kdWxlIiwiaXNJbnRlZ3JhbE51bWJlciIsInRvT2Zmc2V0IiwidHlwZWRBcnJheUZyb20iLCJyb3VuZCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiV1JPTkdfTEVOR1RIIiwiZnJvbUxpc3QiLCJpc0FycmF5QnVmZmVyIiwiaXNUeXBlZEFycmF5SW5kZXgiLCJ3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlZERlZmluZVByb3BlcnR5IiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIk5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJnZXR0ZXIiLCJ0eXBlZEFycmF5T2Zmc2V0IiwiJGxlbmd0aCIsIiRsZW4iLCJhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QiLCJ0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yIiwidW4kQXJyYXlCdWZmZXJTbGljZSIsInZpZXdTb3VyY2UiLCJ2aWV3VGFyZ2V0IiwiJGZpbHRlciIsIiRmaW5kIiwiRklORCIsIlNLSVBTX0hPTEVTIiwiJGluY2x1ZGVzIiwiJEluZGV4T2YiLCJ1biRJbmRleE9mIiwidW4kSm9pbiIsIkVTM19TVFJJTkdTIiwic2VwYXJhdG9yIiwiJG1hcCIsIiRyZWR1Y2UiLCJDSFJPTUVfVkVSU0lPTiIsInJlZHVjZSIsIiRzb21lIiwiTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCIsImRlbGV0ZUNvdW50IiwiaW5zZXJ0Q291bnQiLCJhY3R1YWxEZWxldGVDb3VudCIsImFjdHVhbFN0YXJ0IiwiRGF0ZVByb3RvdHlwZSIsIkRhdGUiLCJJTlZBTElEX0RBVEUiLCJ1biREYXRlVG9TdHJpbmciLCJnZXRUaW1lIiwiRlVOQ1RJT05fTkFNRV9FWElTVFMiLCJuYW1lUkUiLCJyZWdFeHBFeGVjIiwibnVtYmVyVG9TdHJpbmciLCJ0ZXN0ZXIiLCJsb3ciLCJoaSIsImZpeCIsImwiLCJ0aGlzTnVtYmVyVmFsdWUiLCJOVU1CRVIiLCJOYXRpdmVOdW1iZXIiLCJOdW1iZXJQcm90b3R5cGUiLCJ0b051bWVyaWMiLCJwcmltVmFsdWUiLCJ0b051bWJlciIsInRoaXJkIiwicmFkaXgiLCJtYXhDb2RlIiwiZGlnaXRzIiwiY29kZSIsInBhcnNlSW50IiwiTnVtYmVyV3JhcHBlciIsIiRlbnRyaWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIm5hdGl2ZUdldFByb3RvdHlwZU9mIiwibmF0aXZlS2V5cyIsIm5hdGl2ZUNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsImlzRGF0YURlc2NyaXB0b3IiLCJyZWNlaXZlciIsInJlZ0V4cEZsYWdzIiwiTmF0aXZlUmVnRXhwIiwiU3ludGF4RXJyb3IiLCJnZXRGbGFncyIsInN0cmluZ0luZGV4T2YiLCJJU19OQ0ciLCJDT1JSRUNUX05FVyIsIlJlZ0V4cFdyYXBwZXIiLCJwYXR0ZXJuIiwicmF3RmxhZ3MiLCJoYW5kbGVkIiwidGhpc0lzUmVnRXhwIiwicGF0dGVybklzUmVnRXhwIiwiZmxhZ3NBcmVVbmRlZmluZWQiLCJyYXdQYXR0ZXJuIiwibmFtZWQiLCJicmFja2V0cyIsIm5jZyIsImdyb3VwaWQiLCJncm91cG5hbWUiLCJoYW5kbGVOQ0ciLCJoYW5kbGVEb3RBbGwiLCJwcm94eSIsInVuJFRlc3QiLCJUT19TVFJJTkciLCJuJFRvU3RyaW5nIiwiTk9UX0dFTkVSSUMiLCJJTkNPUlJFQ1RfTkFNRSIsInAiLCJyZiIsImNvbGxlY3Rpb24iLCJpbml0Iiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwic2VhcmNoU3RyaW5nIiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJuYXRpdmVNYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsIm1hdGNoZXIiLCJyeCIsInJlcyIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCIkcGFkU3RhcnQiLCJwYWRTdGFydCIsImdldFN1YnN0aXR1dGlvbiIsIlJFUExBQ0UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VBbGwiLCJyZXBsYWNlVmFsdWUiLCJJU19SRUdfRVhQIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJzZWFyY2hMZW5ndGgiLCJhZHZhbmNlQnkiLCJlbmRPZkxhc3RNYXRjaCIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIl8iLCJVTlNBRkVfU1VCU1RJVFVURSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsInJlcGxhY2VyQXJncyIsImNhbGxSZWdFeHBFeGVjIiwiTUFYX1VJTlQzMiIsIiRwdXNoIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxpbSIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwieiIsIm9yaWdpbmFsRXhlYyIsIiR0cmltIiwiZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCIsIk5hdGl2ZVN5bWJvbCIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJzeW1ib2xUb1N0cmluZyIsInN5bWJvbFZhbHVlT2YiLCJyZWxhdGl2ZUluZGV4IiwidSRBcnJheUNvcHlXaXRoaW4iLCIkZXZlcnkiLCIkZmlsbCIsImZyb21TcGVjaWVzQW5kTGlzdCIsIiRmaW5kSW5kZXgiLCJwcmVkaWNhdGUiLCIkaW5kZXhPZiIsIkFycmF5SXRlcmF0b3JzIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJHRU5FUklDIiwiSVRFUkFUT1JfSVNfVkFMVUVTIiwidHlwZWRBcnJheVZhbHVlcyIsIiRqb2luIiwiJHJlZHVjZVJpZ2h0IiwiJHNldCIsIldPUktTX1dJVEhfT0JKRUNUU19BTkRfR0VFUklDX09OX1RZUEVEX0FSUkFZUyIsIlRPX09CSkVDVF9CVUciLCJpbnRlcm5hbFNvcnQiLCJGRiIsIklFX09SX0VER0UiLCJWOCIsIldFQktJVCIsInVuJFNvcnQiLCJBQ0NFUFRfSU5DT1JSRUNUX0FSR1VNRU5UUyIsIlNUQUJMRV9TT1JUIiwibW9kIiwiZXhwZWN0ZWQiLCJ5IiwiZ2V0U29ydENvbXBhcmUiLCJiZWdpbiIsImJlZ2luSW5kZXgiLCIkdG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRPX0xPQ0FMRV9TVFJJTkdfQlVHIiwiVWludDhBcnJheVByb3RvdHlwZSIsImFycmF5VG9TdHJpbmciLCJJU19OT1RfQVJSQVlfTUVUSE9EIiwiY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiaGFuZGxlUHJvdG90eXBlIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsIlVTRV9OQVRJVkVfVVJMIiwiYXJyYXlTb3J0IiwiVVJMX1NFQVJDSF9QQVJBTVMiLCJVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiIsImdldEludGVybmFsUGFyYW1zU3RhdGUiLCJuJEZldGNoIiwiTiRSZXF1ZXN0IiwiSGVhZGVycyIsIlJlcXVlc3RQcm90b3R5cGUiLCJIZWFkZXJzUHJvdG90eXBlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2hpZnQiLCJwbHVzIiwic2VxdWVuY2VzIiwicGVyY2VudFNlcXVlbmNlIiwicGVyY2VudERlY29kZSIsInNlcXVlbmNlIiwiZGVzZXJpYWxpemUiLCJyZXBsYWNlbWVudHMiLCJzZXJpYWxpemUiLCJ2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCIsInBhc3NlZCIsInJlcXVpcmVkIiwiVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXNTdGF0ZSIsInBhcnNlT2JqZWN0IiwicGFyc2VRdWVyeSIsImJpbmRVUkwiLCJ1cGRhdGUiLCJlbnRyeUl0ZXJhdG9yIiwiZW50cnlOZXh0IiwicXVlcnkiLCJhdHRyaWJ1dGUiLCJhdHRyaWJ1dGVzIiwidXBkYXRlVVJMIiwiVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IiLCJVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUiLCJhcHBlbmQiLCJnZXRBbGwiLCJmb3VuZCIsImNhbGxiYWNrIiwiaGVhZGVyc0hhcyIsImhlYWRlcnNTZXQiLCJ3cmFwUmVxdWVzdE9wdGlvbnMiLCJoZWFkZXJzIiwiYm9keSIsImZldGNoIiwiUmVxdWVzdENvbnN0cnVjdG9yIiwiUmVxdWVzdCIsImdldFN0YXRlIiwiRU9GIiwiYXJyYXlGcm9tIiwidG9BU0NJSSIsIlVSTFNlYXJjaFBhcmFtc01vZHVsZSIsImdldEludGVybmFsVVJMU3RhdGUiLCJnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlIiwiTmF0aXZlVVJMIiwicG9wIiwidW5zaGlmdCIsIklOVkFMSURfU0NIRU1FIiwiSU5WQUxJRF9IT1NUIiwiSU5WQUxJRF9QT1JUIiwiQUxQSEEiLCJBTFBIQU5VTUVSSUMiLCJESUdJVCIsIkhFWF9TVEFSVCIsIk9DVCIsIkRFQyIsIkhFWCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UIiwiTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSIsIlRBQl9BTkRfTkVXX0xJTkUiLCJzZXJpYWxpemVIb3N0IiwiY29tcHJlc3MiLCJpZ25vcmUwIiwiaXB2NiIsIm1heEluZGV4IiwiY3VyclN0YXJ0IiwiY3Vyckxlbmd0aCIsImZpbmRMb25nZXN0WmVyb1NlcXVlbmNlIiwiQzBDb250cm9sUGVyY2VudEVuY29kZVNldCIsImZyYWdtZW50UGVyY2VudEVuY29kZVNldCIsInBhdGhQZXJjZW50RW5jb2RlU2V0IiwidXNlcmluZm9QZXJjZW50RW5jb2RlU2V0IiwicGVyY2VudEVuY29kZSIsInNwZWNpYWxTY2hlbWVzIiwiZnRwIiwiZmlsZSIsImh0dHAiLCJodHRwcyIsIndzIiwid3NzIiwiaXNXaW5kb3dzRHJpdmVMZXR0ZXIiLCJub3JtYWxpemVkIiwic3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciIsImlzU2luZ2xlRG90Iiwic2VnbWVudCIsIlNDSEVNRV9TVEFSVCIsIlNDSEVNRSIsIk5PX1NDSEVNRSIsIlNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZIiwiUEFUSF9PUl9BVVRIT1JJVFkiLCJSRUxBVElWRSIsIlJFTEFUSVZFX1NMQVNIIiwiU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyIsIlNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTIiwiQVVUSE9SSVRZIiwiSE9TVCIsIkhPU1ROQU1FIiwiUE9SVCIsIkZJTEUiLCJGSUxFX1NMQVNIIiwiRklMRV9IT1NUIiwiUEFUSF9TVEFSVCIsIlBBVEgiLCJDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIIiwiUVVFUlkiLCJGUkFHTUVOVCIsIlVSTFN0YXRlIiwiaXNCYXNlIiwiYmFzZVN0YXRlIiwiZmFpbHVyZSIsInVybFN0cmluZyIsInBhcnNlIiwic3RhdGVPdmVycmlkZSIsImNvZGVQb2ludHMiLCJidWZmZXJDb2RlUG9pbnRzIiwicG9pbnRlciIsInNlZW5BdCIsInNlZW5CcmFja2V0Iiwic2VlblBhc3N3b3JkVG9rZW4iLCJzY2hlbWUiLCJwYXNzd29yZCIsImZyYWdtZW50IiwiY2Fubm90QmVBQmFzZVVSTCIsImlzU3BlY2lhbCIsImluY2x1ZGVzQ3JlZGVudGlhbHMiLCJjb2RlUG9pbnQiLCJlbmNvZGVkQ29kZVBvaW50cyIsInBhcnNlSG9zdCIsInNob3J0ZW5QYXRoIiwibnVtYmVyc1NlZW4iLCJpcHY0UGllY2UiLCJzd2FwcyIsInN3YXAiLCJhZGRyZXNzIiwicGllY2VJbmRleCIsInBhcnNlSVB2NiIsInBhcnRzTGVuZ3RoIiwibnVtYmVycyIsInBhcnQiLCJpcHY0IiwicGFydHMiLCJwYXJzZUlQdjQiLCJjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQiLCJwYXRoU2l6ZSIsInNldEhyZWYiLCJnZXRPcmlnaW4iLCJVUkxDb25zdHJ1Y3RvciIsIm9yaWdpbiIsImdldFByb3RvY29sIiwic2V0UHJvdG9jb2wiLCJnZXRVc2VybmFtZSIsInNldFVzZXJuYW1lIiwiZ2V0UGFzc3dvcmQiLCJzZXRQYXNzd29yZCIsImdldEhvc3QiLCJzZXRIb3N0IiwiZ2V0SG9zdG5hbWUiLCJzZXRIb3N0bmFtZSIsImhvc3RuYW1lIiwiZ2V0UG9ydCIsInNldFBvcnQiLCJnZXRQYXRobmFtZSIsInNldFBhdGhuYW1lIiwiZ2V0U2VhcmNoIiwic2V0U2VhcmNoIiwic2VhcmNoIiwiZ2V0U2VhcmNoUGFyYW1zIiwiZ2V0SGFzaCIsInNldEhhc2giLCJVUkxQcm90b3R5cGUiLCJhY2Nlc3NvckRlc2NyaXB0b3IiLCJuYXRpdmVDcmVhdGVPYmplY3RVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJuYXRpdmVSZXZva2VPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJieXRlT3JkZXJNYXJrcyIsInVJbnQ4U3RhcnQiLCJyZWdleCIsImVuY29kaW5nIiwiY291bnRBbGxNYXRjaGVzIiwiY2FsY3VsYXRlQ29uZmlkZW5jZVNjb3JlIiwiZmlsZUluZm8iLCJsYW5ndWFnZUFyciIsImxhbmd1YWdlIiwiYWNjIiwiZWxlbSIsImNhbGN1bGF0aW9ucyIsImNvbmZpZGVuY2UiLCJjaGFyUmVnZXgiLCJ0b3RhbENoYXJhY3RlcnMiLCJsYW5nQXJyIiwic2Vjb25kTGFuZ3VhZ2UiLCJsYW5ndWFnZVJhdGlvIiwiY2hhcmFjdGVyV29yZFJhdGlvIiwiY29uZmlkZW5jZVNjb3JlIiwibG93ZXJMaW1pdCIsInVwcGVyTGltaXQiLCJ1dGZGcmVxdWVuY3kiLCJoaWdoIiwiaXNvRnJlcXVlbmN5IiwidG9GaXhlZCIsIm5ld0xhbmd1YWdlQXJyIiwidXBkYXRlZExhbmdPYmoiLCJsYW5nIiwibWF0Y2hlcyIsImZsYWciLCJzaGFyZWRSZWdleCIsImN6ZWNoIiwiaHVuZ2FyaWFuIiwic2xvdmFrIiwic2xvdmVuaWFuIiwiYWxiYW5pYW4iLCJlbmdsaXNoIiwiZnJlbmNoIiwicG9ydHVndWVzZSIsInNwYW5pc2giLCJnZXJtYW4iLCJpdGFsaWFuIiwiZGFuaXNoIiwibm9yd2VnaWFuIiwic3dlZGlzaCIsImR1dGNoIiwiZmlubmlzaCIsImVzdG9uaWFuIiwiaWNlbGFuZGljIiwidHVya2lzaCIsImxpdGh1YW5pYW4iLCJiZW5nYWxpIiwiaGluZGkiLCJ1cmR1IiwidmlldG5hbWVzZSIsInNoYXJlZEZyZXF1ZW5jeSIsInBvbGlzaCIsInJvbWFuaWFuIiwidWtyYWluaWFuIiwiZ3JlZWsiLCJoZWJyZXciLCJ1dGZSZWdleCIsImlzb1JlZ2V4IiwiY2hlY2tVVEYiLCJwcm9jZXNzQ29udGVudCIsImNoZWNrQnl0ZU9yZGVyTWFyayIsImJ5dGVPcmRlck1hcmtCdWZmZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwidUludDhTdHJpbmciLCJieXRlT3JkZXJNYXJrIiwiYnl0ZU9yZGVyTWFya1JlYWRlciIsIm9uZXJyb3IiLCJlcnIiLCJyZWFkQXNUZXh0IiwidXRmUmVhZGVyIiwidXRmQ29udGVudCIsInV0ZjgiLCJpc29SZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInMiLCJvIiwiaCIsImR5bmFtaWNUeXBpbmciLCJNIiwiZHluYW1pY1R5cGluZ0Z1bmN0aW9uIiwidHJhbnNmb3JtIiwid29ya2VyIiwiV09SS0VSU19TVVBQT1JURUQiLCJ3ZWJraXRVUkwiLCJCTE9CX1VSTCIsIkJsb2IiLCJXb3JrZXIiLCJ1c2VyU3RlcCIsInVzZXJDaHVuayIsImNodW5rIiwidXNlckNvbXBsZXRlIiwiY29tcGxldGUiLCJ1c2VyRXJyb3IiLCJjb25maWciLCJ3b3JrZXJJZCIsIk5PREVfU1RSRUFNX0lOUFVUIiwiZG93bmxvYWQiLCJyZWFkYWJsZSIsInJlYWQiLCJvbiIsIkZpbGUiLCJzdHJlYW0iLCJ1bnBhcnNlIiwiZGVsaW1pdGVyIiwiQkFEX0RFTElNSVRFUlMiLCJxdW90ZXMiLCJza2lwRW1wdHlMaW5lcyIsIm5ld2xpbmUiLCJxdW90ZUNoYXIiLCJoZWFkZXIiLCJjb2x1bW5zIiwiZXNjYXBlQ2hhciIsImVzY2FwZUZvcm11bGFlIiwidSIsImZpZWxkcyIsInYiLCJkIiwiUkVDT1JEX1NFUCIsIlVOSVRfU0VQIiwiQllURV9PUkRFUl9NQVJLIiwiTG9jYWxDaHVua1NpemUiLCJSZW1vdGVDaHVua1NpemUiLCJEZWZhdWx0RGVsaW1pdGVyIiwiUGFyc2VyIiwiUGFyc2VySGFuZGxlIiwiTmV0d29ya1N0cmVhbWVyIiwiRmlsZVN0cmVhbWVyIiwiU3RyaW5nU3RyZWFtZXIiLCJSZWFkYWJsZVN0cmVhbVN0cmVhbWVyIiwialF1ZXJ5IiwiZWFjaCIsInByb3AiLCJ0b1VwcGVyQ2FzZSIsImF0dHIiLCJmaWxlcyIsImlucHV0RWxlbSIsImluc3RhbmNlQ29uZmlnIiwiZXh0ZW5kIiwiYmVmb3JlIiwiYWN0aW9uIiwiX2hhbmRsZSIsIl9maW5pc2hlZCIsIl9jb21wbGV0ZWQiLCJfaGFsdGVkIiwiX2lucHV0IiwiX2Jhc2VJbmRleCIsIl9wYXJ0aWFsTGluZSIsIl9yb3dDb3VudCIsIl9zdGFydCIsIl9uZXh0Q2h1bmsiLCJpc0ZpcnN0Q2h1bmsiLCJfY29tcGxldGVSZXN1bHRzIiwidyIsImNodW5rU2l6ZSIsInN0cmVhbWVyIiwiX2NvbmZpZyIsInBhcnNlQ2h1bmsiLCJiZWZvcmVGaXJzdENodW5rIiwicGF1c2VkIiwiYWJvcnRlZCIsImN1cnNvciIsInN1YnN0cmluZyIsInByZXZpZXciLCJXT1JLRVJfSUQiLCJmaW5pc2hlZCIsIl9zZW5kRXJyb3IiLCJfcmVhZENodW5rIiwiX2NodW5rTG9hZGVkIiwiWE1MSHR0cFJlcXVlc3QiLCJ3aXRoQ3JlZGVudGlhbHMiLCJfY2h1bmtFcnJvciIsImRvd25sb2FkUmVxdWVzdEJvZHkiLCJkb3dubG9hZFJlcXVlc3RIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VUZXh0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJzdGF0dXNUZXh0Iiwid2Via2l0U2xpY2UiLCJtb3pTbGljZSIsIkZpbGVSZWFkZXJTeW5jIiwicGF1c2UiLCJyZXN1bWUiLCJfc3RyZWFtRGF0YSIsIl9zdHJlYW1FbmQiLCJfc3RyZWFtRXJyb3IiLCJfY2hlY2tJc0ZpbmlzaGVkIiwiX3N0cmVhbUNsZWFuVXAiLCJyZW1vdmVMaXN0ZW5lciIsImFib3J0IiwidHJhbnNmb3JtSGVhZGVyIiwicGFyc2VGbG9hdCIsInJvdyIsImNvbW1lbnRzIiwic3VjY2Vzc2Z1bCIsImJlc3REZWxpbWl0ZXIiLCJkZWxpbWl0ZXJzVG9HdWVzcyIsImdldENoYXJJbmRleCIsIkkiLCJEIiwiZmFzdE1vZGUiLCJMIiwibGluZWJyZWFrIiwidHJ1bmNhdGVkIiwidGVybWluYXRlIiwicnVudGltZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJza2lwVGVtcFJlc2V0Iiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJfdHlwZW9mIiwiX3RvRGF0ZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdG9GbG9hdCIsIl90b0ludCIsIl90b0Jvb2xlYW4iLCJfZXF1YWxzIiwiX2NvbnRhaW5zIiwiX21hdGNoZXMiLCJfaXNFbWFpbCIsIl9pc1VSTCIsIl9pc01BQ0FkZHJlc3MiLCJfaXNJUCIsIl9pc0lQUmFuZ2UiLCJfaXNGUUROIiwiX2lzRGF0ZSIsIl9pc0Jvb2xlYW4iLCJfaXNMb2NhbGUiLCJfaXNBbHBoYSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2lzQWxwaGFudW1lcmljIiwiX2lzTnVtZXJpYyIsIl9pc1Bhc3Nwb3J0TnVtYmVyIiwiX2lzUG9ydCIsIl9pc0xvd2VyY2FzZSIsIl9pc1VwcGVyY2FzZSIsIl9pc0lNRUkiLCJfaXNBc2NpaSIsIl9pc0Z1bGxXaWR0aCIsIl9pc0hhbGZXaWR0aCIsIl9pc1ZhcmlhYmxlV2lkdGgiLCJfaXNNdWx0aWJ5dGUiLCJfaXNTZW1WZXIiLCJfaXNTdXJyb2dhdGVQYWlyIiwiX2lzSW50IiwiX2lzRmxvYXQiLCJfaXNEZWNpbWFsIiwiX2lzSGV4YWRlY2ltYWwiLCJfaXNPY3RhbCIsIl9pc0RpdmlzaWJsZUJ5IiwiX2lzSGV4Q29sb3IiLCJfaXNSZ2JDb2xvciIsIl9pc0hTTCIsIl9pc0lTUkMiLCJfaXNJQkFOIiwiX2lzQklDIiwiX2lzTUQiLCJfaXNIYXNoIiwiX2lzSldUIiwiX2lzSlNPTiIsIl9pc0VtcHR5IiwiX2lzTGVuZ3RoIiwiX2lzQnl0ZUxlbmd0aCIsIl9pc1VVSUQiLCJfaXNNb25nb0lkIiwiX2lzQWZ0ZXIiLCJfaXNCZWZvcmUiLCJfaXNJbiIsIl9pc0NyZWRpdENhcmQiLCJfaXNJZGVudGl0eUNhcmQiLCJfaXNFQU4iLCJfaXNJU0lOIiwiX2lzSVNCTiIsIl9pc0lTU04iLCJfaXNUYXhJRCIsIl9pc01vYmlsZVBob25lIiwiX2lzRXRoZXJldW1BZGRyZXNzIiwiX2lzQ3VycmVuY3kiLCJfaXNCdGNBZGRyZXNzIiwiX2lzSVNPIiwiX2lzUkZDIiwiX2lzSVNPMzE2NjFBbHBoYSIsIl9pc0lTTzMxNjYxQWxwaGEyIiwiX2lzSVNPMiIsIl9pc0Jhc2UiLCJfaXNCYXNlMiIsIl9pc0Jhc2UzIiwiX2lzRGF0YVVSSSIsIl9pc01hZ25ldFVSSSIsIl9pc01pbWVUeXBlIiwiX2lzTGF0TG9uZyIsIl9pc1Bvc3RhbENvZGUiLCJfbHRyaW0iLCJfcnRyaW0iLCJfdHJpbSIsIl9lc2NhcGUiLCJfdW5lc2NhcGUiLCJfc3RyaXBMb3ciLCJfd2hpdGVsaXN0IiwiX2JsYWNrbGlzdCIsIl9pc1doaXRlbGlzdGVkIiwiX25vcm1hbGl6ZUVtYWlsIiwiX2lzU2x1ZyIsIl9pc0xpY2Vuc2VQbGF0ZSIsIl9pc1N0cm9uZ1Bhc3N3b3JkIiwiX2lzVkFUIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiY2FjaGUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIl9kZWZhdWx0IiwidG9EYXRlIiwidG9GbG9hdCIsInRvSW50IiwidG9Cb29sZWFuIiwiZXF1YWxzIiwiY29udGFpbnMiLCJpc0VtYWlsIiwiaXNVUkwiLCJpc01BQ0FkZHJlc3MiLCJpc0lQIiwiaXNJUFJhbmdlIiwiaXNGUUROIiwiaXNCb29sZWFuIiwiaXNJQkFOIiwiaXNCSUMiLCJpc0FscGhhIiwiaXNBbHBoYUxvY2FsZXMiLCJsb2NhbGVzIiwiaXNBbHBoYW51bWVyaWMiLCJpc0FscGhhbnVtZXJpY0xvY2FsZXMiLCJpc051bWVyaWMiLCJpc1Bhc3Nwb3J0TnVtYmVyIiwiaXNQb3J0IiwiaXNMb3dlcmNhc2UiLCJpc1VwcGVyY2FzZSIsImlzQXNjaWkiLCJpc0Z1bGxXaWR0aCIsImlzSGFsZldpZHRoIiwiaXNWYXJpYWJsZVdpZHRoIiwiaXNNdWx0aWJ5dGUiLCJpc1NlbVZlciIsImlzU3Vycm9nYXRlUGFpciIsImlzSW50IiwiaXNJTUVJIiwiaXNGbG9hdCIsImlzRmxvYXRMb2NhbGVzIiwiaXNEZWNpbWFsIiwiaXNIZXhhZGVjaW1hbCIsImlzT2N0YWwiLCJpc0RpdmlzaWJsZUJ5IiwiaXNIZXhDb2xvciIsImlzUmdiQ29sb3IiLCJpc0hTTCIsImlzSVNSQyIsImlzTUQ1IiwiaXNIYXNoIiwiaXNKV1QiLCJpc0pTT04iLCJpc0VtcHR5IiwiaXNMZW5ndGgiLCJpc0xvY2FsZSIsImlzQnl0ZUxlbmd0aCIsImlzVVVJRCIsImlzTW9uZ29JZCIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsImlzSW4iLCJpc0NyZWRpdENhcmQiLCJpc0lkZW50aXR5Q2FyZCIsImlzRUFOIiwiaXNJU0lOIiwiaXNJU0JOIiwiaXNJU1NOIiwiaXNNb2JpbGVQaG9uZSIsImlzTW9iaWxlUGhvbmVMb2NhbGVzIiwiaXNQb3N0YWxDb2RlIiwiaXNQb3N0YWxDb2RlTG9jYWxlcyIsImlzRXRoZXJldW1BZGRyZXNzIiwiaXNDdXJyZW5jeSIsImlzQnRjQWRkcmVzcyIsImlzSVNPODYwMSIsImlzUkZDMzMzOSIsImlzSVNPMzE2NjFBbHBoYTIiLCJpc0lTTzMxNjYxQWxwaGEzIiwiaXNJU080MjE3IiwiaXNCYXNlMzIiLCJpc0Jhc2U1OCIsImlzQmFzZTY0IiwiaXNEYXRhVVJJIiwiaXNNYWduZXRVUkkiLCJpc01pbWVUeXBlIiwiaXNMYXRMb25nIiwiZXNjYXBlIiwidW5lc2NhcGUiLCJzdHJpcExvdyIsIndoaXRlbGlzdCIsImJsYWNrbGlzdCIsImlzV2hpdGVsaXN0ZWQiLCJub3JtYWxpemVFbWFpbCIsImlzU2x1ZyIsImlzU3Ryb25nUGFzc3dvcmQiLCJpc1RheElEIiwiaXNEYXRlIiwiaXNMaWNlbnNlUGxhdGUiLCJpc1ZBVCIsImliYW5Mb2NhbGVzIiwiY29tbWFEZWNpbWFsIiwiZG90RGVjaW1hbCIsImZhcnNpTG9jYWxlcyIsImFyYWJpY0xvY2FsZXMiLCJlbmdsaXNoTG9jYWxlcyIsImRlY2ltYWwiLCJhbHBoYW51bWVyaWMiLCJhbHBoYSIsImFyIiwiaGUiLCJmYSIsImxvY2FsZSIsIl9sb2NhbGUiLCJfaSIsIl9sb2NhbGUyIiwiX2kyIiwiX2kzIiwiX2k0IiwiY2hhcnMiLCJfYXNzZXJ0U3RyaW5nIiwiX21lcmdlIiwiZGVmYXVsQ29udGFpbnNPcHRpb25zIiwiX3RvU3RyaW5nIiwibWluT2NjdXJyZW5jZXMiLCJjb21wYXJpc29uIiwiZGF0ZSIsIm9yaWdpbmFsIiwiX3N0ciIsImlnbm9yZSIsIl9hbHBoYSIsImFzY2lpIiwiQ291bnRyeUNvZGVzIiwiaXNCSUNSZWciLCJiYXNlMzIiLCJiYXNlNThSZWciLCJkZWZhdWx0QmFzZTY0T3B0aW9ucyIsInVybFNhZmUiLCJ1cmxTYWZlQmFzZTY0Iiwibm90QmFzZTY0IiwiZmlyc3RQYWRkaW5nQ2hhciIsImRlZmF1bHRPcHRpb25zIiwibG9vc2UiLCJsb29zZUJvb2xlYW5zIiwic3RyaWN0Qm9vbGVhbnMiLCJzdGFydHNXaXRoIiwiYmVjaDMyIiwiYmFzZTU4IiwiZW5jb2RlVVJJIiwic2FuaXRpemVkIiwiY3JlZGl0Q2FyZCIsInRtcE51bSIsInNob3VsZERvdWJsZSIsInN1bSIsImRlY2ltYWxfZGlnaXRzIiwiZGlnaXRzX2FmdGVyX2RlY2ltYWwiLCJyZXF1aXJlX3N5bWJvbCIsIm5lZ2F0aXZlIiwid2hvbGVfZG9sbGFyX2Ftb3VudF93aXRoX3NlcCIsInRob3VzYW5kc19zZXBhcmF0b3IiLCJ3aG9sZV9kb2xsYXJfYW1vdW50IiwiZGVjaW1hbF9hbW91bnQiLCJkZWNpbWFsX3NlcGFyYXRvciIsInJlcXVpcmVfZGVjaW1hbCIsImFsbG93X2RlY2ltYWwiLCJhbGxvd19uZWdhdGl2ZXMiLCJwYXJlbnNfZm9yX25lZ2F0aXZlcyIsIm5lZ2F0aXZlX3NpZ25fYWZ0ZXJfZGlnaXRzIiwibmVnYXRpdmVfc2lnbl9iZWZvcmVfZGlnaXRzIiwiYWxsb3dfbmVnYXRpdmVfc2lnbl9wbGFjZWhvbGRlciIsImFsbG93X3NwYWNlX2FmdGVyX3N5bWJvbCIsImFsbG93X3NwYWNlX2FmdGVyX2RpZ2l0cyIsInN5bWJvbF9hZnRlcl9kaWdpdHMiLCJjdXJyZW5jeVJlZ2V4IiwiZGVmYXVsdF9jdXJyZW5jeV9vcHRpb25zIiwic2NoZW1lQW5kTWVkaWFUeXBlIiwic3Vic3RyIiwibWVkaWFUeXBlIiwidmFsaWRNZWRpYVR5cGUiLCJ2YWxpZEF0dHJpYnV0ZSIsInZhbGlkRGF0YSIsImZvcm1hdCIsImRlZmF1bHRfZGF0ZV9vcHRpb25zIiwiX3N0ZXAiLCJmb3JtYXREZWxpbWl0ZXIiLCJkZWxpbWl0ZXJzIiwiZGF0ZURlbGltaXRlciIsInN0cmljdE1vZGUiLCJkYXRlQW5kRm9ybWF0IiwiemlwcGVkQXJyIiwiemlwIiwiZGF0ZU9iaiIsIl9pdGVyYXRvciIsImFsbG93QXJyYXlMaWtlIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX2UyIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsIl9lMyIsInJldHVybiIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiX3N0ZXAkdmFsdWUiLCJhcnIiLCJfYXJyYXlXaXRoSG9sZXMiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfbm9uSXRlcmFibGVSZXN0IiwiZGF0ZVdvcmQiLCJmb3JtYXRXb3JkIiwiZ2V0RGF0ZSIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyMiIsImRlZmF1bHRfZGVjaW1hbF9vcHRpb25zIiwiX2luY2x1ZGVzIiwiZm9yY2VfZGVjaW1hbCIsImRlY2ltYWxSZWdFeHAiLCJudW0iLCJlYW4iLCJyZW1haW5kZXIiLCJhY3R1YWxDaGVja0RpZ2l0IiwidmFsaWRFYW5SZWdleCIsImNoYXIiLCJnZXRQb3NpdGlvbldlaWdodFRocm91Z2hMZW5ndGhBbmRJbmRleCIsInBhcnRpYWxTdW0iLCJkZWZhdWx0X2VtYWlsX29wdGlvbnMiLCJyZXF1aXJlX2Rpc3BsYXlfbmFtZSIsImFsbG93X2Rpc3BsYXlfbmFtZSIsImRpc3BsYXlfZW1haWwiLCJzcGxpdE5hbWVBZGRyZXNzIiwiZGlzcGxheV9uYW1lIiwiZW5kc1dpdGgiLCJkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMiLCJ2YWxpZGF0ZURpc3BsYXlOYW1lIiwiaWdub3JlX21heF9sZW5ndGgiLCJsb3dlcl9kb21haW4iLCJob3N0X2JsYWNrbGlzdCIsInVzZXIiLCJkb21haW5fc3BlY2lmaWNfdmFsaWRhdGlvbiIsIl91c2VyX3BhcnRzIiwiZ21haWxVc2VyUGFydCIsInJlcXVpcmVfdGxkIiwiYWxsb3dfaXBfZG9tYWluIiwibm9CcmFja2V0ZG9tYWluIiwiYWxsb3dfdXRmOF9sb2NhbF9wYXJ0IiwicXVvdGVkRW1haWxVc2VyVXRmOCIsInF1b3RlZEVtYWlsVXNlciIsImVtYWlsVXNlclV0ZjhQYXJ0IiwiZW1haWxVc2VyUGFydCIsInVzZXJfcGFydHMiLCJibGFja2xpc3RlZF9jaGFycyIsImRlZmF1bHRfaXNfZW1wdHlfb3B0aW9ucyIsImlnbm9yZV93aGl0ZXNwYWNlIiwiZXRoIiwiZGVmYXVsdF9mcWRuX29wdGlvbnMiLCJhbGxvd190cmFpbGluZ19kb3QiLCJhbGxvd193aWxkY2FyZCIsInRsZCIsImFsbG93X251bWVyaWNfdGxkIiwiYWxsb3dfdW5kZXJzY29yZXMiLCJmbG9hdCIsImx0IiwiZ3QiLCJmdWxsV2lkdGgiLCJzdHJpcHBlZFN0ciIsImhzbENvbW1hIiwiaHNsU3BhY2UiLCJoYWxmV2lkdGgiLCJhbGdvcml0aG0iLCJsZW5ndGhzIiwibWQ1IiwibWQ0Iiwic2hhMSIsInNoYTI1NiIsInNoYTM4NCIsInNoYTUxMiIsInJpcGVtZDEyOCIsInJpcGVtZDE2MCIsInRpZ2VyMTI4IiwidGlnZXIxNjAiLCJ0aWdlcjE5MiIsImNyYzMyIiwiY3JjMzJiIiwiaGV4Y29sb3IiLCJoZXhhZGVjaW1hbCIsImlzb0NvdW50cnlDb2RlIiwiaWJhblJlZ2V4VGhyb3VnaENvdW50cnlDb2RlIiwiaGFzVmFsaWRJYmFuRm9ybWF0IiwiaGFzVmFsaWRJYmFuQ2hlY2tzdW0iLCJBRCIsIkFFIiwiQUwiLCJBVCIsIkFaIiwiQkEiLCJCRSIsIkJHIiwiQkgiLCJCUiIsIkJZIiwiQ0giLCJDUiIsIkNZIiwiQ1oiLCJERSIsIkRLIiwiRE8iLCJFRSIsIkVHIiwiRVMiLCJGSSIsIkZPIiwiRlIiLCJHQiIsIkdFIiwiR0kiLCJHTCIsIkdSIiwiR1QiLCJIUiIsIkhVIiwiSUUiLCJJTCIsIklRIiwiSVIiLCJJUyIsIklUIiwiSk8iLCJLVyIsIktaIiwiTEIiLCJMQyIsIkxJIiwiTFUiLCJMViIsIk1DIiwiTUQiLCJNRSIsIk1LIiwiTVIiLCJNVCIsIk1VIiwiTVoiLCJOTCIsIk5PIiwiUEsiLCJQTCIsIlBTIiwiUFQiLCJRQSIsIlJPIiwiUlMiLCJTQSIsIlNDIiwiU0UiLCJTSSIsIlNLIiwiU00iLCJTViIsIlRMIiwiVE4iLCJUUiIsIlZBIiwiVkciLCJYSyIsImltZWlSZWdleCIsImltZWlSZWdleFdpdGhvdXRIeXBlbnMiLCJhbGxvd19oeXBoZW5zIiwiaW1laVJlZ2V4V2l0aEh5cGVucyIsIm11bCIsInRwIiwiSVB2NEFkZHJlc3NSZWdFeHAiLCJJUHY2QWRkcmVzc1JlZ0V4cCIsIklQdjRTZWdtZW50Rm9ybWF0IiwiSVB2NEFkZHJlc3NGb3JtYXQiLCJJUHY2U2VnbWVudEZvcm1hdCIsInN1Ym5ldE1heWJlIiwiaXNWYWxpZElQIiwiZXhwZWN0ZWRTdWJuZXQiLCJ2NlN1Ym5ldCIsImNoZWNrc3VtIiwiaXNibjEwTWF5YmUiLCJpc2JuMTNNYXliZSIsImZhY3RvciIsImlzaW4iLCJkb3VibGUiLCJ0cnVuYyIsIl9kaWdpdCIsInZhbGlkSVNPMzE2NjFBbHBoYTJDb3VudHJpZXNDb2RlcyIsIlNldCIsInZhbGlkSVNPMzE2NjFBbHBoYTNDb3VudHJpZXNDb2RlcyIsInZhbGlkSVNPNDIxN0N1cnJlbmN5Q29kZXMiLCJDdXJyZW5jeUNvZGVzIiwic3RyaWN0U2VwYXJhdG9yIiwiaXNvODYwMVN0cmljdFNlcGFyYXRvciIsImlzbzg2MDEiLCJzdHJpY3QiLCJpc1ZhbGlkRGF0ZSIsIm9yZGluYWxNYXRjaCIsIm9ZZWFyIiwib0RheSIsInllYXIiLCJtb250aCIsImRheSIsIm1vbnRoU3RyaW5nIiwiZGF5U3RyaW5nIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJpc3JjIiwidGVzdElzc24iLCJpc3NuIiwicmVxdWlyZV9oeXBoZW4iLCJjYXNlX3NlbnNpdGl2ZSIsInZhbGlkYXRvcnMiLCJ2YWxpZGF0b3IiLCJ3ZWlnaHRPZkRpZ2l0cyIsImFsbG93X2xlYWRpbmdfemVyb2VzIiwibW9kdWxvIiwibGFzdERpZ2l0IiwiY2hhcnNWYWx1ZSIsIlgiLCJZIiwiWiIsIklOIiwibGFzdE51bWJlciIsImsxIiwiazIiLCJUSCIsIkxLIiwiaW5jTnVtIiwiaWRDYXJkTm8iLCJwcm92aW5jZXNBbmRDaXRpZXMiLCJwb3dlcnMiLCJwYXJpdHlCaXQiLCJjaGVja0FkZHJlc3NDb2RlIiwiYWRkcmVzc0NvZGUiLCJjaGVja0JpcnRoRGF5Q29kZSIsImJpckRheUNvZGUiLCJ5eXl5IiwibW0iLCJkZCIsInhkYXRhIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImNoZWNrMTVJZENhcmRObyIsImlkMTciLCJwb3dlciIsImdldFBhcml0eUJpdCIsImNoZWNrUGFyaXR5Qml0IiwiY2hlY2sxOElkQ2FyZE5vIiwiQUxQSEFCRVRfQ09ERVMiLCJHIiwiSCIsIkoiLCJLIiwiTiIsIlEiLCJVIiwiVyIsImludCIsImludExlYWRpbmdaZXJvZXMiLCJtaW5DaGVja1Bhc3NlZCIsIm1heENoZWNrUGFzc2VkIiwibHRDaGVja1Bhc3NlZCIsImd0Q2hlY2tQYXNzZWQiLCJkZWZhdWx0X2pzb25fb3B0aW9ucyIsInByaW1pdGl2ZXMiLCJhbGxvd19wcmltaXRpdmVzIiwiZG90U3BsaXQiLCJjdXJyRWxlbSIsImRlZmF1bHRMYXRMb25nT3B0aW9ucyIsInBhaXIiLCJjaGVja0RNUyIsImxhdERNUyIsImxvbmdETVMiLCJsYXQiLCJsb25nIiwic3Vycm9nYXRlUGFpcnMiLCJsb2NhbGVSZWciLCJub19jb2xvbnMiLCJub19zZXBhcmF0b3JzIiwibWFjQWRkcmVzc05vU2VwYXJhdG9ycyIsIm1hY0FkZHJlc3MiLCJtYWNBZGRyZXNzV2l0aERvdHMiLCJtYWduZXRVUkkiLCJtaW1lVHlwZVNpbXBsZSIsIm1pbWVUeXBlVGV4dCIsIm1pbWVUeXBlTXVsdGlwYXJ0IiwicGhvbmVzIiwibXVsdGlieXRlIiwibm9fc3ltYm9scyIsIm51bWVyaWNOb1N5bWJvbHMiLCJvY3RhbCIsImNvdW50cnlDb2RlIiwibm9ybWFsaXplZFN0ciIsInBhc3Nwb3J0UmVnZXhCeUNvdW50cnlDb2RlIiwiQU0iLCJBUiIsIkFVIiwiQ0EiLCJDTiIsIkRaIiwiSUQiLCJKUCIsIktSIiwiTFkiLCJNWSIsIlJVIiwiU0wiLCJVUyIsInBhdHRlcm5zIiwiZm91ckRpZ2l0IiwiZml2ZURpZ2l0Iiwic2l4RGlnaXQiLCJIVCIsIktFIiwiTVgiLCJOUCIsIk5aIiwiUFIiLCJTRyIsIlRXIiwiWkEiLCJaTSIsInJmYzMzMzkiLCJ0aW1lSG91ciIsInRpbWVNaW51dGUiLCJ0aW1lTnVtT2Zmc2V0IiwidGltZU9mZnNldCIsInBhcnRpYWxUaW1lIiwiZnVsbERhdGUiLCJmdWxsVGltZSIsImluY2x1ZGVQZXJjZW50VmFsdWVzIiwicmdiQ29sb3IiLCJyZ2JhQ29sb3IiLCJyZ2JDb2xvclBlcmNlbnQiLCJyZ2JhQ29sb3JQZXJjZW50Iiwic2VtYW50aWNWZXJzaW9uaW5nUmVnZXgiLCJjaGFyc2V0UmVnZXgiLCJhbmFseXNpcyIsImFuYWx5emVQYXNzd29yZCIsInJldHVyblNjb3JlIiwic2NvcmVQYXNzd29yZCIsIm1pbkxlbmd0aCIsImxvd2VyY2FzZUNvdW50IiwibWluTG93ZXJjYXNlIiwidXBwZXJjYXNlQ291bnQiLCJtaW5VcHBlcmNhc2UiLCJudW1iZXJDb3VudCIsIm1pbk51bWJlcnMiLCJzeW1ib2xDb3VudCIsIm1pblN5bWJvbHMiLCJ1cHBlckNhc2VSZWdleCIsImxvd2VyQ2FzZVJlZ2V4IiwibnVtYmVyUmVnZXgiLCJzeW1ib2xSZWdleCIsInBvaW50c1BlclVuaXF1ZSIsInBvaW50c1BlclJlcGVhdCIsInBvaW50c0ZvckNvbnRhaW5pbmdMb3dlciIsInBvaW50c0ZvckNvbnRhaW5pbmdVcHBlciIsInBvaW50c0ZvckNvbnRhaW5pbmdOdW1iZXIiLCJwb2ludHNGb3JDb250YWluaW5nU3ltYm9sIiwiY2hhck1hcCIsInVuaXF1ZUNoYXJzIiwic2NvcmluZ09wdGlvbnMiLCJwb2ludHMiLCJzdXJyb2dhdGVQYWlyIiwic3RyY29weSIsInRheElkRm9ybWF0Iiwic2FuaXRpemVSZWdleGVzIiwidGF4SWRDaGVjayIsImFsZ29yaXRobXMiLCJlblVzQ2FtcHVzUHJlZml4IiwiYW5kb3ZlciIsImF0bGFudGEiLCJhdXN0aW4iLCJicm9va2hhdmVuIiwiY2luY2lubmF0aSIsImZyZXNubyIsImludGVybmV0Iiwia2Fuc2FzIiwibWVtcGhpcyIsIm9nZGVuIiwicGhpbGFkZWxwaGlhIiwic2JhIiwiaXRJdE5hbWVDaGVjayIsInZvd2VsZmxhZyIsInhmbGFnIiwidGluIiwiY2VudHVyeV95ZWFyIiwibXVsdGlwX2xvb2t1cCIsImZ1bGxfeWVhciIsImNoZWNrZGlnaXQiLCJsdWhuQ2hlY2siLCJvY2N1cmVuY2VzIiwidHJpcF9sb2NhdGlvbnMiLCJyZWN1cnJlbnQiLCJpc283MDY0Q2hlY2siLCJ3ZWlnaHQiLCJyZXZlcnNlTXVsdGlwbHlBbmRTdW0iLCJwcmVmaXhlcyIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJlblVzR2V0UHJlZml4ZXMiLCJsZWFkX3JlcGxhY2UiLCJjaGVja2RpZ2l0cyIsInZlcmhvZWZmQ2hlY2siLCJudW1iZXJfcmVwbGFjZSIsIl9udW1iZXJfbG9jYXRpb25zIiwiX2k1IiwiY2hhcl90b19pbnQiLCJvZGRfY29udmVydCIsIl9pNiIsIl9jaGFyX3RvX2ludCIsIm11bHRpcGxpZXIiLCJmaXJzdF9wYXJ0IiwibG9va3VwIiwiX2NoZWNrc3VtIiwiX2k3IiwiX3N1bSIsIl9pOCIsImlkZW50aWZpZXJzIiwidmVyaWZpY2F0b3JzIiwiX2k5IiwiX2kxMCIsIm11bHRpcGxpZXJzIiwidGluX2NvcHkiLCJjdXJyZW50X3llYXIiLCJjdXJyZW50X2NlbnR1cnkiLCJhbGxzeW1ib2xzIiwiZGVmYXVsdF91cmxfb3B0aW9ucyIsInZhbGlkYXRlX2xlbmd0aCIsImFsbG93X2ZyYWdtZW50cyIsImFsbG93X3F1ZXJ5X2NvbXBvbmVudHMiLCJhdXRoIiwicG9ydF9zdHIiLCJyZXF1aXJlX3ZhbGlkX3Byb3RvY29sIiwicHJvdG9jb2xzIiwicmVxdWlyZV9wcm90b2NvbCIsImFsbG93X3Byb3RvY29sX3JlbGF0aXZlX3VybHMiLCJyZXF1aXJlX2hvc3QiLCJkaXNhbGxvd19hdXRoIiwiX2F1dGgkc3BsaXQyIiwiaXB2Nl9tYXRjaCIsIndyYXBwZWRfaXB2NiIsInJlcXVpcmVfcG9ydCIsImhvc3Rfd2hpdGVsaXN0IiwiY2hlY2tIb3N0IiwidXVpZCIsInZhdE1hdGNoZXJzIiwibW9kaWZpZXJzIiwiZW1haWwiLCJkZWZhdWx0X25vcm1hbGl6ZV9lbWFpbF9vcHRpb25zIiwicmF3X3BhcnRzIiwiZ21haWxfcmVtb3ZlX3N1YmFkZHJlc3MiLCJnbWFpbF9yZW1vdmVfZG90cyIsImRvdHNSZXBsYWNlciIsImFsbF9sb3dlcmNhc2UiLCJnbWFpbF9sb3dlcmNhc2UiLCJnbWFpbF9jb252ZXJ0X2dvb2dsZW1haWxkb3Rjb20iLCJpY2xvdWRfZG9tYWlucyIsImljbG91ZF9yZW1vdmVfc3ViYWRkcmVzcyIsImljbG91ZF9sb3dlcmNhc2UiLCJvdXRsb29rZG90Y29tX2RvbWFpbnMiLCJvdXRsb29rZG90Y29tX3JlbW92ZV9zdWJhZGRyZXNzIiwib3V0bG9va2RvdGNvbV9sb3dlcmNhc2UiLCJ5YWhvb19kb21haW5zIiwieWFob29fcmVtb3ZlX3N1YmFkZHJlc3MiLCJjb21wb25lbnRzIiwieWFob29fbG93ZXJjYXNlIiwieWFuZGV4X2RvbWFpbnMiLCJ5YW5kZXhfbG93ZXJjYXNlIiwic3RySW5kZXgiLCJrZWVwX25ld19saW5lcyIsImNoZWNrdmFsdWUiLCJwcm9kdWN0IiwidG90YWwiLCJkX3RhYmxlIiwicF90YWJsZSIsInN0cl9jb3B5IiwiaW52YWxpZFR5cGUiLCJhcnJWYWwiLCJkZWZhdWx0cyIsInJlZ2V4cEFzU3RyaW5nTGl0ZXJhbCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwic2NyaXB0VXJsIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIiRjb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwiJGFjdGlvbiIsImFjdGlvbk5hbWUiLCJldmVudE5hbWUiLCIkdGFyZ2V0IiwiSU5JVCIsIkxPQUQiLCJSRUFEWSIsIkRJQUciLCJSRVBBSVIiLCJwcm9ncmVzc0tSIiwibG9hZCIsInJlYWR5IiwiZGlhZyIsInJlcGFpciIsImN1cnJlbnRPYnNlcnZlciIsIkNvbXBvbmVudCIsInNldHVwIiwib2JzZXJ2ZXJNYXAiLCJjdXJyZW50Q2FsbGJhY2siLCJpbml0U3RhdGUiLCJQcm94eSIsInJlbmRlciIsInNldEV2ZW50cyIsIm1vdW50ZWQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRTdGF0ZSIsInRlbXBsYXRlIiwiU2VsZWN0RmlsZSIsInByb2dyZXNzIiwibG9hZENzdkZpbGUiLCJTdGFydFJvdyIsInNldFN0YXJ0Um93IiwiQ29udHJvbEJveCIsImRpYWdub3NpcyIsImRvd25sb2FkQ3N2Iiwic2V0dGluZ01vZGFsIiwic2hvdyIsInJlcGFpckdyaWQiLCJkYXRhVmlldyIsImNzdkRhdGEiLCJnZXRJdGVtcyIsImNzdiIsImNzdlVSTCIsImFuY2hvciIsImNsaWNrIiwiYWN0aXZlIiwiRGF0YUNvdW50IiwiZGF0YUNvdW50IiwiY29sdW1uQ291bnQiLCJlbXB0eUl0ZXIiLCJfY2FsbGVlIiwiX2NvbnRleHQiLCJ0b0l0ZXIiLCJnbzIiLCJjdXJyeSIsIl9sZW4iLCJfa2V5IiwiX2NvbnRleHQyIiwiX2xlbjIiLCJfa2V5MiIsInJlY3VyIiwiY3VyIiwiY2F0Y2giLCJnbzEiLCJ0YWtlIiwiX3JlZiIsImdvIiwiZ28xU3luYyIsIm1hcEwiLCJ0MCIsInRha2VBbGwiLCJmZXRjaFNldHRpbmdzIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkdyaWQiLCJncmlkIiwiZ3JpZElkIiwic2V0Q29sbFdpZHRoIiwiZW5hYmxlQ2VsbE5hdmlnYXRpb24iLCJmb3JjZUZpdENvbHVtbnMiLCJoZWFkZXJSb3dIZWlnaHQiLCJleHBsaWNpdEluaXRpYWxpemF0aW9uIiwib25Sb3dDb3VudENoYW5nZWQiLCJzdWJzY3JpYmUiLCJ1cGRhdGVSb3dDb3VudCIsIm9uUm93c0NoYW5nZWQiLCJyb3dzIiwiaW52YWxpZGF0ZVJvd3MiLCJvcmlnaW5hbERhdGEiLCJzdGFydFJvdyIsInNsaWNlRGF0YUNvbHVtbnMiLCJTbGljayIsIkRhdGEiLCJzZXRHcmlkT3B0aW9ucyIsInNldFN0YXRlIiwic2V0R3JpZEV2ZW50cyIsInNldEl0ZW1zIiwiZmllbGQiLCJ3aWR0aCIsIml0ZW1BcnIiLCJpZHgiLCJuZXdJdGVtIiwicmVzaXphYmxlIiwic2VsZWN0YWJsZSIsImNzc0NsYXNzIiwiYmVoYXZpb3IiLCJjYW5ub3RUcmlnZ2VySW5zZXJ0IiwiY2FsY3VsYXRpb25SdWxlc2V0IiwiY2VsbCIsInRhcmdldHMiLCJvcCIsImNoYXJnZVJ1bGVzZXQiLCJjb25zaXN0ZW5jeVJ1bGVzZXQiLCJudW1DZWxsIiwibnVtUm93IiwiY291bnRSdWxlc2V0IiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0cyIsImZvcm1hdExvbmciLCJmdWxsIiwibWVkaXVtIiwic2hvcnQiLCJ0aW1lIiwiZGF0ZVRpbWUiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsImRpcnR5T3B0aW9ucyIsInZhbHVlc0FycmF5IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hGbiIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsImZvcm1hdERpc3RhbmNlIiwidG9rZW4iLCJ0b2tlblZhbHVlIiwiYWRkU3VmZml4IiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsIl9vcHRpb25zIiwibG9jYWxpemUiLCJvcmRpbmFsTnVtYmVyIiwiZGlydHlOdW1iZXIiLCJyZW0xMDAiLCJlcmEiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyIiwiZGF5UGVyaW9kIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZVJlc3VsdCIsIndlZWtTdGFydHNPbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsInRvSW50ZWdlciIsInJlcXVpcmVkQXJncyIsImFyZ1N0ciIsIndhcm4iLCJhZGRNaWxsaXNlY29uZHMiLCJkaXJ0eURhdGUiLCJkaXJ0eUFtb3VudCIsInRpbWVzdGFtcCIsImFtb3VudCIsInN1Yk1pbGxpc2Vjb25kcyIsImRpcnR5T2JqZWN0IiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsImxvbmdGb3JtYXR0ZXJzIiwiZGF0ZVRpbWVGb3JtYXQiLCJkYXRlUGF0dGVybiIsInRpbWVQYXR0ZXJuIiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsInV0Y0RhdGUiLCJVVEMiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwic2V0VVRDRnVsbFllYXIiLCJwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMiLCJwcm90ZWN0ZWRXZWVrWWVhclRva2VucyIsImlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4iLCJpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4iLCJ0aHJvd1Byb3RlY3RlZEVycm9yIiwic3RhcnRPZlVUQ1dlZWsiLCJsb2NhbGVXZWVrU3RhcnRzT24iLCJkZWZhdWx0V2Vla1N0YXJ0c09uIiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ1dlZWtZZWFyIiwibG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic2V0VVRDRGF5IiwiZGlydHlEYXkiLCJjdXJyZW50RGF5IiwiZGF5SW5kZXgiLCJzdGFydE9mVVRDSVNPV2VlayIsImdldFVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJmb3VydGhPZkphbnVhcnkiLCJNSUxMSVNFQ09ORFNfSU5fV0VFSyIsImdldFVUQ0lTT1dlZWsiLCJzdGFydE9mVVRDV2Vla1llYXIiLCJmaXJzdFdlZWsiLCJnZXRVVENXZWVrIiwibnVtZXJpY1BhdHRlcm5zIiwidGltZXpvbmVQYXR0ZXJucyIsInBhcnNlTnVtZXJpY1BhdHRlcm4iLCJwYXJzZVRpbWV6b25lUGF0dGVybiIsInBhcnNlQW55RGlnaXRzU2lnbmVkIiwicGFyc2VORGlnaXRzIiwicGFyc2VORGlnaXRzU2lnbmVkIiwiZGF5UGVyaW9kRW51bVRvSG91cnMiLCJlbnVtVmFsdWUiLCJub3JtYWxpemVUd29EaWdpdFllYXIiLCJ0d29EaWdpdFllYXIiLCJjdXJyZW50WWVhciIsImlzQ29tbW9uRXJhIiwiYWJzQ3VycmVudFllYXIiLCJyYW5nZUVuZCIsIkRBWVNfSU5fTU9OVEgiLCJEQVlTX0lOX01PTlRIX0xFQVBfWUVBUiIsImlzTGVhcFllYXJJbmRleCIsInByaW9yaXR5IiwiaW5jb21wYXRpYmxlVG9rZW5zIiwiaXNUd29EaWdpdFllYXIiLCJ1bml0IiwidmFsaWRhdGUiLCJub3JtYWxpemVkVHdvRGlnaXRZZWFyIiwiX21hdGNoIiwiX2ZsYWdzIiwiZmlyc3RXZWVrT2ZZZWFyIiwic2V0VVRDTW9udGgiLCJkaXJ0eVdlZWsiLCJ3ZWVrIiwic2V0VVRDV2VlayIsImRpcnR5SVNPV2VlayIsImlzb1dlZWsiLCJzZXRVVENJU09XZWVrIiwic3ViUHJpb3JpdHkiLCJpc0xlYXBZZWFyIiwid2hvbGVXZWVrRGF5cyIsInNldFVUQ0lTT0RheSIsImlzUE0iLCJnZXRVVENIb3VycyIsImhvdXJzIiwic2V0VVRDTWludXRlcyIsInNldFVUQ1NlY29uZHMiLCJzZXRVVENNaWxsaXNlY29uZHMiLCJ0aW1lc3RhbXBJc1NldCIsIl90b2tlbiIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsIm5vdFdoaXRlc3BhY2VSZWdFeHAiLCJ1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCIsImRpcnR5RGF0ZVN0cmluZyIsImRpcnR5Rm9ybWF0U3RyaW5nIiwiZGlydHlSZWZlcmVuY2VEYXRlIiwiZGF0ZVN0cmluZyIsImZvcm1hdFN0cmluZyIsInN1YkZuT3B0aW9ucyIsInNldHRlcnMiLCJkYXRlVG9TeXN0ZW1UaW1lem9uZSIsInRva2VucyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsInVzZWRUb2tlbnMiLCJ1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwicGFyc2VyIiwiaW5jb21wYXRpYmxlVG9rZW4iLCJ1c2VkVG9rZW4iLCJmdWxsVG9rZW4iLCJjbGVhbkVzY2FwZWRTdHJpbmciLCJ1bmlxdWVQcmlvcml0eVNldHRlcnMiLCJzZXR0ZXJBcnJheSIsImNvbnZlcnRlZERhdGUiLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJpc1ZhbGlkIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ25lZFllYXIiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsIm1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsImxpZ2h0Rm9ybWF0dGVycyIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJkYXlPZlllYXIiLCJzdGFydE9mWWVhclRpbWVzdGFtcCIsImRpZmZlcmVuY2UiLCJnZXRVVENEYXlPZlllYXIiLCJkYXlPZldlZWsiLCJsb2NhbERheU9mV2VlayIsImlzb0RheU9mV2VlayIsImRheVBlcmlvZEVudW1WYWx1ZSIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0Iiwib3JpZ2luYWxEYXRlIiwiX21hcmtlZCIsImVudHJpZXNMIiwidDEiLCJydWxlc2V0IiwiZXJyb3JEaXNjcmlwdGlvbiIsImV4YW1wbGUiLCJncm91cGVkUnVsZXNldCIsImdyb3VwQnkiLCJnZXREYXRlUnVsZXNldEZvcm1hdCIsImRpYWdUeXBlSWQiLCJkYXRlUnVsZXNldCIsImlzTWF0Y2giLCJpc0Vzc2VudGlhbCIsIm51bWJlclJ1bGVzZXQiLCJyZWR1Y2VkUGF0dGVybiIsInBlcmNlbnRSdWxlc2V0Iiwid2hldGhlclJ1bGVzZXQiLCJ0cnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwiZXJyb3JGb3JtYXR0ZXIiLCJsaW5lIiwiY29sdW1uRGVmIiwicnRuIiwidGV4dCIsImVzc2VudGlhbCIsImlzRXJyb3IiLCJhZGRDbGFzc2VzIiwiRGlhZ1Jlc3VsdEdyaWQiLCJub0Vycm9yRGF0YSIsImRhdGFHcmlkIiwiZ2V0RGF0YSIsImVycm9ySW5kZXgiLCJpcyIsImZvcm1hdHRlciIsInNldENvbHVtbnMiLCJjb2x1bW4iLCJvcmRlciIsImVycm9yQ291bnQiLCJkYXRhTGVuIiwia2V5TGVuIiwicmVuZGVyR3JpZCIsImFsbFJ1bGVzZXQiLCJjb2x1bW5ObyIsImNvbHVtbk5hbWUiLCJkaWFnUnVsZSIsImRpYWdSZXN1bHQiLCJhbGVydCIsIm1heFdpZHRoIiwicm93SGVpZ2h0IiwiZ2V0Q29sdW1ucyIsImNvbCIsIkRhdGFHcmlkIiwiJHNlbGVjdCIsImNvbHVtbklkIiwicnVsZXNldElkIiwid2hldGhlck1vZGFsIiwiZGF0ZU1vZGFsIiwicGF0dGVybk1vZGFsIiwidGltZU9yZGVyTW9kYWwiLCJsb2dpY1JlbGF0aW9uc2hpcE1vZGFsIiwiZm9ybXVsYU1vZGFsIiwic3VtTW9kYWwiLCJzaG93SGVhZGVyUm93Iiwib25IZWFkZXJSb3dDZWxsUmVuZGVyZWQiLCJzZWxlY3RPcHRpb24iLCJydWxlc2V0U2VsZWN0VGVtcGxhdGUiLCJvbmVHcmlkIiwicnVsZXNldEdyb3VwIiwibXVsdGkiLCJfY29udGV4dDMiLCJtYXBFbnRyaWVzTCIsIl9sb29wIiwiZmlsdGVyTCIsImN1cnJ5MiIsIl9fIiwiX2xlbjMiLCJfa2V5MyIsIl9jb250ZXh0NCIsIl9sZW40IiwiX2tleTQiLCJub3QiLCJjb25kIiwiX2NvbnRleHQ1IiwiX2xlbjUiLCJfa2V5NSIsIl9jb250ZXh0NiIsIl9sZW42IiwiX2tleTYiLCJfY29udGV4dDciLCJfbGVuNyIsIl9rZXk3IiwiX2NvbnRleHQ4IiwiX2xlbjgiLCJfa2V5OCIsImlmRWxzZSIsImlkZW50aXR5IiwiZjEiLCJmMiIsIndoZW4iLCJpc0l0ZXJhYmxlIiwiaXNTdHJpbmciLCJkZWxlZ2F0ZUl0ZXJhYmxlIiwiY2xvbmVJdGVyYWJsZSIsImNsb25lZCIsImNsb25lZEl0ZXJhYmxlU3ltYm9sIiwiZW50cmllc0RlZXBMIiwiZm5zIiwiX3JlZjMiLCJfcmVmNCIsImVpdGhlciIsImlzRW50cmllcyIsIm9iamVjdERlZXAiLCJfcmVmMiIsImNsb25lIiwidmFsdWVzTCIsIlJlcGFpckdyaWQiLCJfY29sdW1ucyIsInNldFJlcGFpckZvcm1hdCIsImRpYWdSZXN1bHRHcmlkIiwic2V0U2VsZWN0aW9uTW9kZWwiLCJDZWxsU2VsZWN0aW9uTW9kZWwiLCJjdXN0b21Ub29sdGlwUGx1Z2luIiwiUGx1Z2lucyIsIkN1c3RvbVRvb2x0aXAiLCJyZWdpc3RlclBsdWdpbiIsImJlZ2luVXBkYXRlIiwic3luY0dyaWRTZWxlY3Rpb24iLCJzZXRGaWx0ZXIiLCJlbmRVcGRhdGUiLCJlZGl0YWJsZSIsImF1dG9FZGl0IiwiYXN5bmNFZGl0b3JMb2FkaW5nIiwiY3VzdG9tVG9vbHRpcCIsImdldEl0ZW1CeUlkIiwiaGVhZGVyRm9ybWF0dGVyIiwiZGF0YUNvbnRleHQiLCJydWxlc2V0TGFiZWwiLCJnZXRSdWxlc2V0TGFiZWwiLCJvblNjcm9sbCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxUbyIsInJlcGFpclN0eWxlQ3NzIiwib2xkQ2VsbCIsIm5ld0NlbGwiLCJtaSIsImRpcnR5Rm9ybWF0U3RyIiwiZm9ybWF0U3RyIiwiZm9ybWF0dGVyT3B0aW9ucyIsInBhdHRlcm5SZWdFeHAxIiwicGF0dGVyblJlZ0V4cDIiLCJlZGl0b3IiLCJFZGl0b3JzIiwiVGV4dCIsIkRpc2NyaXB0aW9uIiwiTW9kYWwiLCJtb2RhbCIsInNldEhlYWRlciIsInNldEJvZHkiLCJzZXRGb290ZXIiLCJmbGF0TCIsImRlcHRoIiwiY29uY3VyQ2hlY2siLCJpdGVyU3RhY2siLCJkYXRlRGlhZ3R5cGVzIiwiZmxhdCIsIkRhdGVNb2RhbCIsIllZWVkiLCJNTSIsIkREIiwiSEgyNCIsIk1JIiwiU1MiLCJjbG9zZU1vZGFsIiwiZGF0ZXR5cGUiLCJkYXRhc2V0IiwiZGF0ZURpYWd0eXBlIiwic2VsZWN0Iiwic2VsZWN0ZWREaWFnUnVsZSIsImNoZWNrYm94IiwiY2hlY2tlZCIsImRpYWd0eXBlSWQiLCJoaWRlIiwiV2hldGhlck1vZGFsIiwidHJ1ZUVsIiwiZmFsc2VFbCIsImlubmVyVGV4dCIsIlBhdHRlcm5Nb2RhbCIsIlRpbWVPcmRlck1vZGFsIiwib3BlcmF0b3JUZXh0IiwiTG9naWNSZWxhdGlvbnNoaXBNb2RhbCIsIkZvcm11bGFNb2RhbCIsInRhcmdldDIiLCJ0YXJnZXQxIiwiU3VtTW9kYWwiLCJTZXR0aW5nTW9kYWwiLCJuZXh0U2V0dGluZ3MiLCJzZXR0aW5ncyIsInNldEl0ZW0iLCJMb2FkaW5nU3Bpbm5lciIsImlzTG9hZGluZyIsIkZJTEVfRU5DT0RJTkdTIiwiTUFYX0ZJTEVfU0laRSIsInBhcnNlQ1NWIiwiY3N2RmlsZSIsImVuY29kaW5nQ2hlY2siLCJpc0VuY29kaW5nVmFsaWQiLCJzaXplQ2hlY2siLCJsYW5ndWFnZUVuY29kaW5nIiwiZW5jIiwiQXBwIiwiZGlhZ0ZpbGUiLCJzZWxlY3RGaWxlIiwiY29udHJvbEJveCIsImRpc2NyaXB0aW9uIiwibG9hZGluZ1NwaW5uZXIiLCJvbkxvYWRpbmciLCJvZmZMb2FkaW5nIiwidG9vbHRpcCJdLCJzb3VyY2VSb290IjoiIn0=